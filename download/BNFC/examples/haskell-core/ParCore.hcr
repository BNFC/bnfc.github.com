%module ParCore
  %data ParCore.HappyAbsSyn t34 t35 t36 t37 t38 =
    {ParCore.ZdwHappyTerminal LexCore.Token;
     ParCore.ZdwHappyErrorToken PrelBase.Int;
     ParCore.ZdwHappyAbsSyn34 t34;
     ParCore.ZdwHappyAbsSyn35 t35;
     ParCore.ZdwHappyAbsSyn36 t36;
     ParCore.ZdwHappyAbsSyn37 t37;
     ParCore.ZdwHappyAbsSyn38 t38;
     ParCore.ZdwHappyAbsSyn39 AbsCore.Module;
     ParCore.ZdwHappyAbsSyn40 (PrelBase.ZMZN AbsCore.Tdef);
     ParCore.ZdwHappyAbsSyn41 AbsCore.Tdef;
     ParCore.ZdwHappyAbsSyn42 AbsCore.MaybeTy;
     ParCore.ZdwHappyAbsSyn43 AbsCore.Cdef;
     ParCore.ZdwHappyAbsSyn44 (PrelBase.ZMZN AbsCore.Cdef);
     ParCore.ZdwHappyAbsSyn45 AbsCore.Vdefg;
     ParCore.ZdwHappyAbsSyn46 (PrelBase.ZMZN AbsCore.Vdefg);
     ParCore.ZdwHappyAbsSyn47 AbsCore.Vdef;
     ParCore.ZdwHappyAbsSyn48 (PrelBase.ZMZN AbsCore.Vdef);
     ParCore.ZdwHappyAbsSyn49 AbsCore.Exp;
     ParCore.ZdwHappyAbsSyn52 AbsCore.Bind;
     ParCore.ZdwHappyAbsSyn53 (PrelBase.ZMZN AbsCore.Bind);
     ParCore.ZdwHappyAbsSyn54 AbsCore.Alt;
     ParCore.ZdwHappyAbsSyn55 (PrelBase.ZMZN AbsCore.Alt);
     ParCore.ZdwHappyAbsSyn56 AbsCore.Vbind;
     ParCore.ZdwHappyAbsSyn57 (PrelBase.ZMZN AbsCore.Vbind);
     ParCore.ZdwHappyAbsSyn58 AbsCore.Tbind;
     ParCore.ZdwHappyAbsSyn59 (PrelBase.ZMZN AbsCore.Tbind);
     ParCore.ZdwHappyAbsSyn60 AbsCore.ATbind;
     ParCore.ZdwHappyAbsSyn61 (PrelBase.ZMZN AbsCore.ATbind);
     ParCore.ZdwHappyAbsSyn62 AbsCore.Ty;
     ParCore.ZdwHappyAbsSyn65 (PrelBase.ZMZN AbsCore.Ty);
     ParCore.ZdwHappyAbsSyn66 AbsCore.Kind;
     ParCore.ZdwHappyAbsSyn68 AbsCore.Lit;
     ParCore.ZdwHappyAbsSyn69 AbsCore.QualIdent};
  %data ParCore.HappyStk a =
    {ParCore.ZdwHappyStk a (ParCore.HappyStk a)};
  %newtype ParCore.HappyState b c;
  ParCore.zdHappyState :: %forall b c . (PrelBase.Int ->
					 PrelBase.Int ->
					 b ->
					 ParCore.HappyState b c ->
					 PrelBase.ZMZN (ParCore.HappyState b c) -> c)
					-> ParCore.HappyState b c =
    %note "InlineMe"
    \ @ b
      @ c
      (tpl::PrelBase.Int ->
	    PrelBase.Int ->
	    b ->
	    ParCore.HappyState b c ->
	    PrelBase.ZMZN (ParCore.HappyState b c) -> c) ->
	%coerce (ParCore.HappyState b c)
	tpl;
  ParCore.zdHappyStk :: %forall a . a ->
				    ParCore.HappyStk a -> ParCore.HappyStk a =
    \ @ a (eta::a) (eta1::ParCore.HappyStk a) ->
	ParCore.ZdwHappyStk @ a eta eta1;
  ParCore.zdHappyTerminal :: %forall t34 t35 t36 t37 t38 . LexCore.Token
							   ->
							   ParCore.HappyAbsSyn t34 t35 t36 t37 t38 =
    \ @ t34 @ t35 @ t36 @ t37 @ t38 (eta::LexCore.Token) ->
	ParCore.ZdwHappyTerminal @ t34 @ t35 @ t36 @ t37 @ t38 eta;
  ParCore.zdHappyErrorToken :: %forall t34 t35 t36 t37 t38 . PrelBase.Int
							     ->
							     ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38 =
    \ @ t34 @ t35 @ t36 @ t37 @ t38 (eta::PrelBase.Int) ->
	ParCore.ZdwHappyErrorToken @ t34 @ t35 @ t36 @ t37 @ t38 eta;
  ParCore.zdHappyAbsSyn34 :: %forall t34 t35 t36 t37 t38 . t34 ->
							   ParCore.HappyAbsSyn t34 t35 t36 t37 t38 =
    \ @ t34 @ t35 @ t36 @ t37 @ t38 (eta::t34) ->
	ParCore.ZdwHappyAbsSyn34 @ t34 @ t35 @ t36 @ t37 @ t38 eta;
  ParCore.zdHappyAbsSyn35 :: %forall t34 t35 t36 t37 t38 . t35 ->
							   ParCore.HappyAbsSyn t34 t35 t36 t37 t38 =
    \ @ t34 @ t35 @ t36 @ t37 @ t38 (eta::t35) ->
	ParCore.ZdwHappyAbsSyn35 @ t34 @ t35 @ t36 @ t37 @ t38 eta;
  ParCore.zdHappyAbsSyn36 :: %forall t34 t35 t36 t37 t38 . t36 ->
							   ParCore.HappyAbsSyn t34 t35 t36 t37 t38 =
    \ @ t34 @ t35 @ t36 @ t37 @ t38 (eta::t36) ->
	ParCore.ZdwHappyAbsSyn36 @ t34 @ t35 @ t36 @ t37 @ t38 eta;
  ParCore.zdHappyAbsSyn37 :: %forall t34 t35 t36 t37 t38 . t37 ->
							   ParCore.HappyAbsSyn t34 t35 t36 t37 t38 =
    \ @ t34 @ t35 @ t36 @ t37 @ t38 (eta::t37) ->
	ParCore.ZdwHappyAbsSyn37 @ t34 @ t35 @ t36 @ t37 @ t38 eta;
  ParCore.zdHappyAbsSyn38 :: %forall t34 t35 t36 t37 t38 . t38 ->
							   ParCore.HappyAbsSyn t34 t35 t36 t37 t38 =
    \ @ t34 @ t35 @ t36 @ t37 @ t38 (eta::t38) ->
	ParCore.ZdwHappyAbsSyn38 @ t34 @ t35 @ t36 @ t37 @ t38 eta;
  ParCore.zdHappyAbsSyn39 :: %forall t34 t35 t36 t37 t38 . AbsCore.Module
							   ->
							   ParCore.HappyAbsSyn t34 t35 t36 t37 t38 =
    \ @ t34 @ t35 @ t36 @ t37 @ t38 (eta::AbsCore.Module) ->
	ParCore.ZdwHappyAbsSyn39 @ t34 @ t35 @ t36 @ t37 @ t38 eta;
  ParCore.zdHappyAbsSyn40 :: %forall t34 t35 t36 t37 t38 . PrelBase.ZMZN
							   AbsCore.Tdef
							   ->
							   ParCore.HappyAbsSyn t34 t35 t36 t37 t38 =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.ZMZN AbsCore.Tdef) ->
	ParCore.ZdwHappyAbsSyn40 @ t34 @ t35 @ t36 @ t37 @ t38 eta;
  ParCore.zdHappyAbsSyn41 :: %forall t34 t35 t36 t37 t38 . AbsCore.Tdef
							   ->
							   ParCore.HappyAbsSyn t34 t35 t36 t37 t38 =
    \ @ t34 @ t35 @ t36 @ t37 @ t38 (eta::AbsCore.Tdef) ->
	ParCore.ZdwHappyAbsSyn41 @ t34 @ t35 @ t36 @ t37 @ t38 eta;
  ParCore.zdHappyAbsSyn42 :: %forall t34 t35 t36 t37 t38 . AbsCore.MaybeTy
							   ->
							   ParCore.HappyAbsSyn t34 t35 t36 t37 t38 =
    \ @ t34 @ t35 @ t36 @ t37 @ t38 (eta::AbsCore.MaybeTy) ->
	ParCore.ZdwHappyAbsSyn42 @ t34 @ t35 @ t36 @ t37 @ t38 eta;
  ParCore.zdHappyAbsSyn43 :: %forall t34 t35 t36 t37 t38 . AbsCore.Cdef
							   ->
							   ParCore.HappyAbsSyn t34 t35 t36 t37 t38 =
    \ @ t34 @ t35 @ t36 @ t37 @ t38 (eta::AbsCore.Cdef) ->
	ParCore.ZdwHappyAbsSyn43 @ t34 @ t35 @ t36 @ t37 @ t38 eta;
  ParCore.zdHappyAbsSyn44 :: %forall t34 t35 t36 t37 t38 . PrelBase.ZMZN
							   AbsCore.Cdef
							   ->
							   ParCore.HappyAbsSyn t34 t35 t36 t37 t38 =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.ZMZN AbsCore.Cdef) ->
	ParCore.ZdwHappyAbsSyn44 @ t34 @ t35 @ t36 @ t37 @ t38 eta;
  ParCore.zdHappyAbsSyn45 :: %forall t34 t35 t36 t37 t38 . AbsCore.Vdefg
							   ->
							   ParCore.HappyAbsSyn t34 t35 t36 t37 t38 =
    \ @ t34 @ t35 @ t36 @ t37 @ t38 (eta::AbsCore.Vdefg) ->
	ParCore.ZdwHappyAbsSyn45 @ t34 @ t35 @ t36 @ t37 @ t38 eta;
  ParCore.zdHappyAbsSyn46 :: %forall t34 t35 t36 t37 t38 . PrelBase.ZMZN
							   AbsCore.Vdefg
							   ->
							   ParCore.HappyAbsSyn t34 t35 t36 t37 t38 =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.ZMZN AbsCore.Vdefg) ->
	ParCore.ZdwHappyAbsSyn46 @ t34 @ t35 @ t36 @ t37 @ t38 eta;
  ParCore.zdHappyAbsSyn47 :: %forall t34 t35 t36 t37 t38 . AbsCore.Vdef
							   ->
							   ParCore.HappyAbsSyn t34 t35 t36 t37 t38 =
    \ @ t34 @ t35 @ t36 @ t37 @ t38 (eta::AbsCore.Vdef) ->
	ParCore.ZdwHappyAbsSyn47 @ t34 @ t35 @ t36 @ t37 @ t38 eta;
  ParCore.zdHappyAbsSyn48 :: %forall t34 t35 t36 t37 t38 . PrelBase.ZMZN
							   AbsCore.Vdef
							   ->
							   ParCore.HappyAbsSyn t34 t35 t36 t37 t38 =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.ZMZN AbsCore.Vdef) ->
	ParCore.ZdwHappyAbsSyn48 @ t34 @ t35 @ t36 @ t37 @ t38 eta;
  ParCore.zdHappyAbsSyn49 :: %forall t34 t35 t36 t37 t38 . AbsCore.Exp
							   ->
							   ParCore.HappyAbsSyn t34 t35 t36 t37 t38 =
    \ @ t34 @ t35 @ t36 @ t37 @ t38 (eta::AbsCore.Exp) ->
	ParCore.ZdwHappyAbsSyn49 @ t34 @ t35 @ t36 @ t37 @ t38 eta;
  ParCore.zdHappyAbsSyn52 :: %forall t34 t35 t36 t37 t38 . AbsCore.Bind
							   ->
							   ParCore.HappyAbsSyn t34 t35 t36 t37 t38 =
    \ @ t34 @ t35 @ t36 @ t37 @ t38 (eta::AbsCore.Bind) ->
	ParCore.ZdwHappyAbsSyn52 @ t34 @ t35 @ t36 @ t37 @ t38 eta;
  ParCore.zdHappyAbsSyn53 :: %forall t34 t35 t36 t37 t38 . PrelBase.ZMZN
							   AbsCore.Bind
							   ->
							   ParCore.HappyAbsSyn t34 t35 t36 t37 t38 =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.ZMZN AbsCore.Bind) ->
	ParCore.ZdwHappyAbsSyn53 @ t34 @ t35 @ t36 @ t37 @ t38 eta;
  ParCore.zdHappyAbsSyn54 :: %forall t34 t35 t36 t37 t38 . AbsCore.Alt
							   ->
							   ParCore.HappyAbsSyn t34 t35 t36 t37 t38 =
    \ @ t34 @ t35 @ t36 @ t37 @ t38 (eta::AbsCore.Alt) ->
	ParCore.ZdwHappyAbsSyn54 @ t34 @ t35 @ t36 @ t37 @ t38 eta;
  ParCore.zdHappyAbsSyn55 :: %forall t34 t35 t36 t37 t38 . PrelBase.ZMZN
							   AbsCore.Alt
							   ->
							   ParCore.HappyAbsSyn t34 t35 t36 t37 t38 =
    \ @ t34 @ t35 @ t36 @ t37 @ t38 (eta::PrelBase.ZMZN AbsCore.Alt) ->
	ParCore.ZdwHappyAbsSyn55 @ t34 @ t35 @ t36 @ t37 @ t38 eta;
  ParCore.zdHappyAbsSyn56 :: %forall t34 t35 t36 t37 t38 . AbsCore.Vbind
							   ->
							   ParCore.HappyAbsSyn t34 t35 t36 t37 t38 =
    \ @ t34 @ t35 @ t36 @ t37 @ t38 (eta::AbsCore.Vbind) ->
	ParCore.ZdwHappyAbsSyn56 @ t34 @ t35 @ t36 @ t37 @ t38 eta;
  ParCore.zdHappyAbsSyn57 :: %forall t34 t35 t36 t37 t38 . PrelBase.ZMZN
							   AbsCore.Vbind
							   ->
							   ParCore.HappyAbsSyn t34 t35 t36 t37 t38 =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.ZMZN AbsCore.Vbind) ->
	ParCore.ZdwHappyAbsSyn57 @ t34 @ t35 @ t36 @ t37 @ t38 eta;
  ParCore.zdHappyAbsSyn58 :: %forall t34 t35 t36 t37 t38 . AbsCore.Tbind
							   ->
							   ParCore.HappyAbsSyn t34 t35 t36 t37 t38 =
    \ @ t34 @ t35 @ t36 @ t37 @ t38 (eta::AbsCore.Tbind) ->
	ParCore.ZdwHappyAbsSyn58 @ t34 @ t35 @ t36 @ t37 @ t38 eta;
  ParCore.zdHappyAbsSyn59 :: %forall t34 t35 t36 t37 t38 . PrelBase.ZMZN
							   AbsCore.Tbind
							   ->
							   ParCore.HappyAbsSyn t34 t35 t36 t37 t38 =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.ZMZN AbsCore.Tbind) ->
	ParCore.ZdwHappyAbsSyn59 @ t34 @ t35 @ t36 @ t37 @ t38 eta;
  ParCore.zdHappyAbsSyn60 :: %forall t34 t35 t36 t37 t38 . AbsCore.ATbind
							   ->
							   ParCore.HappyAbsSyn t34 t35 t36 t37 t38 =
    \ @ t34 @ t35 @ t36 @ t37 @ t38 (eta::AbsCore.ATbind) ->
	ParCore.ZdwHappyAbsSyn60 @ t34 @ t35 @ t36 @ t37 @ t38 eta;
  ParCore.zdHappyAbsSyn61 :: %forall t34 t35 t36 t37 t38 . PrelBase.ZMZN
							   AbsCore.ATbind
							   ->
							   ParCore.HappyAbsSyn t34 t35 t36 t37 t38 =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.ZMZN AbsCore.ATbind) ->
	ParCore.ZdwHappyAbsSyn61 @ t34 @ t35 @ t36 @ t37 @ t38 eta;
  ParCore.zdHappyAbsSyn62 :: %forall t34 t35 t36 t37 t38 . AbsCore.Ty
							   ->
							   ParCore.HappyAbsSyn t34 t35 t36 t37 t38 =
    \ @ t34 @ t35 @ t36 @ t37 @ t38 (eta::AbsCore.Ty) ->
	ParCore.ZdwHappyAbsSyn62 @ t34 @ t35 @ t36 @ t37 @ t38 eta;
  ParCore.zdHappyAbsSyn65 :: %forall t34 t35 t36 t37 t38 . PrelBase.ZMZN
							   AbsCore.Ty
							   ->
							   ParCore.HappyAbsSyn t34 t35 t36 t37 t38 =
    \ @ t34 @ t35 @ t36 @ t37 @ t38 (eta::PrelBase.ZMZN AbsCore.Ty) ->
	ParCore.ZdwHappyAbsSyn65 @ t34 @ t35 @ t36 @ t37 @ t38 eta;
  ParCore.zdHappyAbsSyn66 :: %forall t34 t35 t36 t37 t38 . AbsCore.Kind
							   ->
							   ParCore.HappyAbsSyn t34 t35 t36 t37 t38 =
    \ @ t34 @ t35 @ t36 @ t37 @ t38 (eta::AbsCore.Kind) ->
	ParCore.ZdwHappyAbsSyn66 @ t34 @ t35 @ t36 @ t37 @ t38 eta;
  ParCore.zdHappyAbsSyn68 :: %forall t34 t35 t36 t37 t38 . AbsCore.Lit
							   ->
							   ParCore.HappyAbsSyn t34 t35 t36 t37 t38 =
    \ @ t34 @ t35 @ t36 @ t37 @ t38 (eta::AbsCore.Lit) ->
	ParCore.ZdwHappyAbsSyn68 @ t34 @ t35 @ t36 @ t37 @ t38 eta;
  ParCore.zdHappyAbsSyn69 :: %forall t34 t35 t36 t37 t38 . AbsCore.QualIdent
							   ->
							   ParCore.HappyAbsSyn t34 t35 t36 t37 t38 =
    \ @ t34 @ t35 @ t36 @ t37 @ t38 (eta::AbsCore.QualIdent) ->
	ParCore.ZdwHappyAbsSyn69 @ t34 @ t35 @ t36 @ t37 @ t38 eta;
  ParCore.happyReductionzu36 :: %forall t35 t36 t37 t38 . ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   t38)
							  ->
							  ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   t38) =
    \ @ t35
      @ t36
      @ t37
      @ t38
      (ds::ParCore.HappyStk
	   (ParCore.HappyAbsSyn
	    (PrelBase.ZMZN PrelBase.Char)
	    t35
	    t36
	    t37
	    t38)) ->
	%let fail :: ParCore.HappyStk
		     (ParCore.HappyAbsSyn
		      (PrelBase.ZMZN PrelBase.Char)
		      t35
		      t36
		      t37
		      t38) =
	       PrelErr.patError
	       @ (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   t35
		   t36
		   t37
		   t38))
	       (PrelBase.unpackCStringzh
		("ParCore.hs:1187|function happyReduction_36"::PrelGHC.Addrzh))
	%in %case ds
	    %of (wild::ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			t35
			t36
			t37
			t38))
	      {ParCore.ZdwHappyStk
	       (ds1::ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     t35
		     t36
		     t37
		     t38)
	       (ds2::ParCore.HappyStk
		     (ParCore.HappyAbsSyn
		      (PrelBase.ZMZN PrelBase.Char)
		      t35
		      t36
		      t37
		      t38)) ->
		 %case ds1
		 %of (wild1::ParCore.HappyAbsSyn
			     (PrelBase.ZMZN PrelBase.Char)
			     t35
			     t36
			     t37
			     t38)
		   {%_ ->
		      fail;
		    ParCore.ZdwHappyAbsSyn46
		    (happyzuvarzu4::PrelBase.ZMZN AbsCore.Vdefg) ->
		      %case ds2
		      %of (wild2::ParCore.HappyStk
				  (ParCore.HappyAbsSyn
				   (PrelBase.ZMZN PrelBase.Char)
				   t35
				   t36
				   t37
				   t38))
			{ParCore.ZdwHappyStk
			 (ds3::ParCore.HappyAbsSyn
			       (PrelBase.ZMZN PrelBase.Char)
			       t35
			       t36
			       t37
			       t38)
			 (ds4::ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				t35
				t36
				t37
				t38)) ->
			   %case ds3
			   %of (wild3::ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       t35
				       t36
				       t37
				       t38)
			     {%_ ->
				fail;
			      ParCore.ZdwHappyAbsSyn40
			      (happyzuvarzu3::PrelBase.ZMZN AbsCore.Tdef) ->
				%case ds4
				%of (wild4::ParCore.HappyStk
					    (ParCore.HappyAbsSyn
					     (PrelBase.ZMZN PrelBase.Char)
					     t35
					     t36
					     t37
					     t38))
				  {ParCore.ZdwHappyStk
				   (ds5::ParCore.HappyAbsSyn
					 (PrelBase.ZMZN PrelBase.Char)
					 t35
					 t36
					 t37
					 t38)
				   (ds6::ParCore.HappyStk
					 (ParCore.HappyAbsSyn
					  (PrelBase.ZMZN PrelBase.Char)
					  t35
					  t36
					  t37
					  t38)) ->
				     %case ds5
				     %of (wild5::ParCore.HappyAbsSyn
						 (PrelBase.ZMZN PrelBase.Char)
						 t35
						 t36
						 t37
						 t38)
				       {%_ ->
					  fail;
					ParCore.ZdwHappyAbsSyn34
					(happyzuvarzu2::PrelBase.ZMZN PrelBase.Char) ->
					  %case ds6
					  %of (wild6::ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38))
					    {ParCore.ZdwHappyStk
					     (ds7::ParCore.HappyAbsSyn
						   (PrelBase.ZMZN PrelBase.Char)
						   t35
						   t36
						   t37
						   t38)
					     (happyRest::ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)) ->
					       %let a :: PrelBase.ZMZN AbsCore.Tdef =
						      PrelList.reverse @ AbsCore.Tdef happyzuvarzu3
					       %in %let a1 :: PrelBase.ZMZN AbsCore.Vdefg =
							  PrelList.reverse @ AbsCore.Vdefg
							  happyzuvarzu4
						   %in %let eta :: AbsCore.Module =
							      AbsCore.ZdwModule happyzuvarzu2 a a1
						       %in %let eta1 :: ParCore.HappyAbsSyn
									(PrelBase.ZMZN
									 PrelBase.Char)
									t35
									t36
									t37
									t38 =
								  ParCore.ZdwHappyAbsSyn39
								  @ (PrelBase.ZMZN PrelBase.Char)
								  @ t35 @ t36 @ t37 @ t38 eta
							   %in ParCore.ZdwHappyStk
							       @ (ParCore.HappyAbsSyn
								  (PrelBase.ZMZN PrelBase.Char)
								  t35
								  t36
								  t37
								  t38)
							       eta1 happyRest}}}}}}};
  ParCore.happyReductionzu37 :: %forall t34 t35 t36 t37 t38 . ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38 =
    \ @ t34 @ t35 @ t36 @ t37 @ t38 ->
	ParCore.ZdwHappyAbsSyn40 @ t34 @ t35 @ t36 @ t37 @ t38
	(PrelBase.ZdwZMZN @ AbsCore.Tdef);
  ParCore.happyReductionzu39 :: %forall t34 t35 t36 t37 t38 . ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38) =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (ds::ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	%let fail :: ParCore.HappyStk
		     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) =
	       PrelErr.patError
	       @ (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
	       (PrelBase.unpackCStringzh
		("ParCore.hs:1214|function happyReduction_39"::PrelGHC.Addrzh))
	%in %case ds
	    %of (wild::ParCore.HappyStk
		       (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
	      {ParCore.ZdwHappyStk
	       (ds1::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	       (ds2::ParCore.HappyStk
		     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
		 %case ds2
		 %of (wild1::ParCore.HappyStk
			     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
		   {ParCore.ZdwHappyStk
		    (ds3::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
		    (ds4::ParCore.HappyStk
			  (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
		      %case ds3 %of (wild2::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
			{%_ ->
			   fail;
			 ParCore.ZdwHappyAbsSyn44
			 (happyzuvarzu6::PrelBase.ZMZN AbsCore.Cdef) ->
			   %case ds4
			   %of (wild3::ParCore.HappyStk
				       (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
			     {ParCore.ZdwHappyStk
			      (ds5::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
			      (ds6::ParCore.HappyStk
				    (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
				%case ds6
				%of (wild4::ParCore.HappyStk
					    (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
				  {ParCore.ZdwHappyStk
				   (ds7::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
				   (ds8::ParCore.HappyStk
					 (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
				     %case ds8
				     %of (wild5::ParCore.HappyStk
						 (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
				       {ParCore.ZdwHappyStk
					(ds9::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
					(ds10::ParCore.HappyStk
					       (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
					  %case ds9
					  %of (wild6::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
					    {%_ ->
					       fail;
					     ParCore.ZdwHappyAbsSyn59
					     (happyzuvarzu3::PrelBase.ZMZN AbsCore.Tbind) ->
					       %case ds10
					       %of (wild7::ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    t34
							    t35
							    t36
							    t37
							    t38))
						 {ParCore.ZdwHappyStk
						  (ds11::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
						  (ds12::ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  t34
							  t35
							  t36
							  t37
							  t38)) ->
						    %case ds11
						    %of (wild8::ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
						      {%_ ->
							 fail;
						       ParCore.ZdwHappyAbsSyn69
						       (happyzuvarzu2::AbsCore.QualIdent) ->
							 %case ds12
							 %of (wild9::ParCore.HappyStk
								     (ParCore.HappyAbsSyn
								      t34
								      t35
								      t36
								      t37
								      t38))
							   {ParCore.ZdwHappyStk
							    (ds13::ParCore.HappyAbsSyn
								   t34
								   t35
								   t36
								   t37
								   t38)
							    (happyRest::ParCore.HappyStk
									(ParCore.HappyAbsSyn
									 t34
									 t35
									 t36
									 t37
									 t38)) ->
							      %let a :: PrelBase.ZMZN
									AbsCore.Tbind =
								     PrelList.reverse
								     @ AbsCore.Tbind happyzuvarzu3
							      %in %let eta :: AbsCore.Tdef =
									 AbsCore.ZdwData
									 happyzuvarzu2 a
									 happyzuvarzu6
								  %in %let eta1 :: ParCore.HappyAbsSyn
										   t34
										   t35
										   t36
										   t37
										   t38 =
									     ParCore.ZdwHappyAbsSyn41
									     @ t34 @ t35 @ t36 @ t37
									     @ t38 eta
								      %in ParCore.ZdwHappyStk
									  @ (ParCore.HappyAbsSyn
									     t34
									     t35
									     t36
									     t37
									     t38)
									  eta1 happyRest}}}}}}}}}};
  ParCore.happyReductionzu40 :: %forall t34 t35 t36 t37 t38 . ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38) =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (ds::ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	%let fail :: ParCore.HappyStk
		     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) =
	       PrelErr.patError
	       @ (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
	       (PrelBase.unpackCStringzh
		("ParCore.hs:1224|function happyReduction_40"::PrelGHC.Addrzh))
	%in %case ds
	    %of (wild::ParCore.HappyStk
		       (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
	      {ParCore.ZdwHappyStk
	       (ds1::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	       (ds2::ParCore.HappyStk
		     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
		 %case ds1 %of (wild1::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
		   {%_ ->
		      fail;
		    ParCore.ZdwHappyAbsSyn42 (happyzuvarzu4::AbsCore.MaybeTy) ->
		      %case ds2
		      %of (wild2::ParCore.HappyStk
				  (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
			{ParCore.ZdwHappyStk
			 (ds3::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
			 (ds4::ParCore.HappyStk
			       (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
			   %case ds3 %of (wild3::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
			     {%_ ->
				fail;
			      ParCore.ZdwHappyAbsSyn59
			      (happyzuvarzu3::PrelBase.ZMZN AbsCore.Tbind) ->
				%case ds4
				%of (wild4::ParCore.HappyStk
					    (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
				  {ParCore.ZdwHappyStk
				   (ds5::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
				   (ds6::ParCore.HappyStk
					 (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
				     %case ds5 %of (wild5::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
				       {%_ ->
					  fail;
					ParCore.ZdwHappyAbsSyn69
					(happyzuvarzu2::AbsCore.QualIdent) ->
					  %case ds6
					  %of (wild6::ParCore.HappyStk
						      (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
					    {ParCore.ZdwHappyStk
					     (ds7::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
					     (happyRest::ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  t34
							  t35
							  t36
							  t37
							  t38)) ->
					       %let a :: PrelBase.ZMZN AbsCore.Tbind =
						      PrelList.reverse @ AbsCore.Tbind happyzuvarzu3
					       %in %let eta :: AbsCore.Tdef =
							  AbsCore.ZdwNewtype happyzuvarzu2 a
							  happyzuvarzu4
						   %in %let eta1 :: ParCore.HappyAbsSyn
								    t34
								    t35
								    t36
								    t37
								    t38 =
							      ParCore.ZdwHappyAbsSyn41 @ t34 @ t35
							      @ t36 @ t37 @ t38 eta
						       %in ParCore.ZdwHappyStk
							   @ (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							   eta1 happyRest}}}}}}};
  ParCore.happyReductionzu42 :: %forall t34 t35 t36 t37 t38 . ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38 =
    \ @ t34 @ t35 @ t36 @ t37 @ t38 ->
	ParCore.ZdwHappyAbsSyn42 @ t34 @ t35 @ t36 @ t37 @ t38
	AbsCore.ZdwNoTy;
  ParCore.happyReductionzu46 :: %forall t34 t35 t36 t37 t38 . ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38) =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (ds::ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	%case ds
	%of (wild::ParCore.HappyStk
		   (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
	  {ParCore.ZdwHappyStk
	   (ds1::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	   (ds2::ParCore.HappyStk
		 (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	     %case ds2
	     %of (wild1::ParCore.HappyStk
			 (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
	       {ParCore.ZdwHappyStk
		(ds3::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
		(ds4::ParCore.HappyStk
		      (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
		  %case ds3 %of (wild2::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
		    {%_ ->
		       PrelErr.patError
		       @ (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
		       (PrelBase.unpackCStringzh
			("ParCore.hs:1272|function happyReduction_46"::PrelGHC.Addrzh));
		     ParCore.ZdwHappyAbsSyn48
		     (happyzuvarzu3::PrelBase.ZMZN AbsCore.Vdef) ->
		       %case ds4
		       %of (wild3::ParCore.HappyStk
				   (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
			 {ParCore.ZdwHappyStk
			  (ds5::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
			  (ds6::ParCore.HappyStk
				(ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
			    %case ds6
			    %of (wild4::ParCore.HappyStk
					(ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
			      {ParCore.ZdwHappyStk
			       (ds7::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
			       (happyRest::ParCore.HappyStk
					   (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
				 %let eta :: AbsCore.Vdefg = AbsCore.ZdwRec happyzuvarzu3
				 %in %let eta1 :: ParCore.HappyAbsSyn t34 t35 t36 t37 t38 =
					    ParCore.ZdwHappyAbsSyn45 @ t34 @ t35 @ t36 @ t37 @ t38
					    eta
				     %in ParCore.ZdwHappyStk
					 @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) eta1
					 happyRest}}}}};
  ParCore.happyReductionzu48 :: %forall t34 t35 t36 t37 t38 . ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38 =
    \ @ t34 @ t35 @ t36 @ t37 @ t38 ->
	ParCore.ZdwHappyAbsSyn46 @ t34 @ t35 @ t36 @ t37 @ t38
	(PrelBase.ZdwZMZN @ AbsCore.Vdefg);
  ParCore.happyReductionzu50 :: %forall t34 t35 t36 t37 t38 . ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38) =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (ds::ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	%let fail :: ParCore.HappyStk
		     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) =
	       PrelErr.patError
	       @ (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
	       (PrelBase.unpackCStringzh
		("ParCore.hs:1304|function happyReduction_50"::PrelGHC.Addrzh))
	%in %case ds
	    %of (wild::ParCore.HappyStk
		       (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
	      {ParCore.ZdwHappyStk
	       (ds1::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	       (ds2::ParCore.HappyStk
		     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
		 %case ds1 %of (wild1::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
		   {%_ ->
		      fail;
		    ParCore.ZdwHappyAbsSyn49 (happyzuvarzu5::AbsCore.Exp) ->
		      %case ds2
		      %of (wild2::ParCore.HappyStk
				  (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
			{ParCore.ZdwHappyStk
			 (ds3::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
			 (ds4::ParCore.HappyStk
			       (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
			   %case ds4
			   %of (wild3::ParCore.HappyStk
				       (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
			     {ParCore.ZdwHappyStk
			      (ds5::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
			      (ds6::ParCore.HappyStk
				    (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
				%case ds5 %of (wild4::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
				  {%_ ->
				     fail;
				   ParCore.ZdwHappyAbsSyn62 (happyzuvarzu3::AbsCore.Ty) ->
				     %case ds6
				     %of (wild5::ParCore.HappyStk
						 (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
				       {ParCore.ZdwHappyStk
					(ds7::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
					(ds8::ParCore.HappyStk
					      (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
					  %case ds8
					  %of (wild6::ParCore.HappyStk
						      (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
					    {ParCore.ZdwHappyStk
					     (ds9::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
					     (happyRest::ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  t34
							  t35
							  t36
							  t37
							  t38)) ->
					       %case ds9
					       %of (wild7::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
						 {%_ ->
						    fail;
						  ParCore.ZdwHappyAbsSyn69
						  (happyzuvarzu1::AbsCore.QualIdent) ->
						    %let eta :: AbsCore.Vdef =
							   AbsCore.ZdwVdefQ happyzuvarzu1
							   happyzuvarzu3 happyzuvarzu5
						    %in %let eta1 :: ParCore.HappyAbsSyn
								     t34
								     t35
								     t36
								     t37
								     t38 =
							       ParCore.ZdwHappyAbsSyn47 @ t34 @ t35
							       @ t36 @ t37 @ t38 eta
							%in ParCore.ZdwHappyStk
							    @ (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							    eta1 happyRest}}}}}}}};
  ParCore.happyReductionzu51 :: %forall t35 t36 t37 t38 . ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   t38)
							  ->
							  ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   t38) =
    \ @ t35
      @ t36
      @ t37
      @ t38
      (ds::ParCore.HappyStk
	   (ParCore.HappyAbsSyn
	    (PrelBase.ZMZN PrelBase.Char)
	    t35
	    t36
	    t37
	    t38)) ->
	%let fail :: ParCore.HappyStk
		     (ParCore.HappyAbsSyn
		      (PrelBase.ZMZN PrelBase.Char)
		      t35
		      t36
		      t37
		      t38) =
	       PrelErr.patError
	       @ (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   t35
		   t36
		   t37
		   t38))
	       (PrelBase.unpackCStringzh
		("ParCore.hs:1315|function happyReduction_51"::PrelGHC.Addrzh))
	%in %case ds
	    %of (wild::ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			t35
			t36
			t37
			t38))
	      {ParCore.ZdwHappyStk
	       (ds1::ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     t35
		     t36
		     t37
		     t38)
	       (ds2::ParCore.HappyStk
		     (ParCore.HappyAbsSyn
		      (PrelBase.ZMZN PrelBase.Char)
		      t35
		      t36
		      t37
		      t38)) ->
		 %case ds1
		 %of (wild1::ParCore.HappyAbsSyn
			     (PrelBase.ZMZN PrelBase.Char)
			     t35
			     t36
			     t37
			     t38)
		   {%_ ->
		      fail;
		    ParCore.ZdwHappyAbsSyn49 (happyzuvarzu5::AbsCore.Exp) ->
		      %case ds2
		      %of (wild2::ParCore.HappyStk
				  (ParCore.HappyAbsSyn
				   (PrelBase.ZMZN PrelBase.Char)
				   t35
				   t36
				   t37
				   t38))
			{ParCore.ZdwHappyStk
			 (ds3::ParCore.HappyAbsSyn
			       (PrelBase.ZMZN PrelBase.Char)
			       t35
			       t36
			       t37
			       t38)
			 (ds4::ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				t35
				t36
				t37
				t38)) ->
			   %case ds4
			   %of (wild3::ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					t35
					t36
					t37
					t38))
			     {ParCore.ZdwHappyStk
			      (ds5::ParCore.HappyAbsSyn
				    (PrelBase.ZMZN PrelBase.Char)
				    t35
				    t36
				    t37
				    t38)
			      (ds6::ParCore.HappyStk
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     t35
				     t36
				     t37
				     t38)) ->
				%case ds5
				%of (wild4::ParCore.HappyAbsSyn
					    (PrelBase.ZMZN PrelBase.Char)
					    t35
					    t36
					    t37
					    t38)
				  {%_ ->
				     fail;
				   ParCore.ZdwHappyAbsSyn62 (happyzuvarzu3::AbsCore.Ty) ->
				     %case ds6
				     %of (wild5::ParCore.HappyStk
						 (ParCore.HappyAbsSyn
						  (PrelBase.ZMZN PrelBase.Char)
						  t35
						  t36
						  t37
						  t38))
				       {ParCore.ZdwHappyStk
					(ds7::ParCore.HappyAbsSyn
					      (PrelBase.ZMZN PrelBase.Char)
					      t35
					      t36
					      t37
					      t38)
					(ds8::ParCore.HappyStk
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38)) ->
					  %case ds8
					  %of (wild6::ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38))
					    {ParCore.ZdwHappyStk
					     (ds9::ParCore.HappyAbsSyn
						   (PrelBase.ZMZN PrelBase.Char)
						   t35
						   t36
						   t37
						   t38)
					     (happyRest::ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)) ->
					       %case ds9
					       %of (wild7::ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   t38)
						 {%_ ->
						    fail;
						  ParCore.ZdwHappyAbsSyn34
						  (happyzuvarzu1::PrelBase.ZMZN PrelBase.Char) ->
						    %let eta :: AbsCore.Vdef =
							   AbsCore.ZdwVdefU happyzuvarzu1
							   happyzuvarzu3 happyzuvarzu5
						    %in %let eta1 :: ParCore.HappyAbsSyn
								     (PrelBase.ZMZN PrelBase.Char)
								     t35
								     t36
								     t37
								     t38 =
							       ParCore.ZdwHappyAbsSyn47
							       @ (PrelBase.ZMZN PrelBase.Char) @ t35
							       @ t36 @ t37 @ t38 eta
							%in ParCore.ZdwHappyStk
							    @ (ParCore.HappyAbsSyn
							       (PrelBase.ZMZN PrelBase.Char)
							       t35
							       t36
							       t37
							       t38)
							    eta1 happyRest}}}}}}}};
  ParCore.happyReductionzu61 :: %forall t34 t35 t36 t37 t38 . ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38) =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (ds::ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	%let fail :: ParCore.HappyStk
		     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) =
	       PrelErr.patError
	       @ (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
	       (PrelBase.unpackCStringzh
		("ParCore.hs:1395|function happyReduction_61"::PrelGHC.Addrzh))
	%in %case ds
	    %of (wild::ParCore.HappyStk
		       (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
	      {ParCore.ZdwHappyStk
	       (ds1::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	       (ds2::ParCore.HappyStk
		     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
		 %case ds1 %of (wild1::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
		   {%_ ->
		      fail;
		    ParCore.ZdwHappyAbsSyn49 (happyzuvarzu4::AbsCore.Exp) ->
		      %case ds2
		      %of (wild2::ParCore.HappyStk
				  (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
			{ParCore.ZdwHappyStk
			 (ds3::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
			 (ds4::ParCore.HappyStk
			       (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
			   %case ds4
			   %of (wild3::ParCore.HappyStk
				       (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
			     {ParCore.ZdwHappyStk
			      (ds5::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
			      (ds6::ParCore.HappyStk
				    (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
				%case ds5 %of (wild4::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
				  {%_ ->
				     fail;
				   ParCore.ZdwHappyAbsSyn53
				   (happyzuvarzu2::PrelBase.ZMZN AbsCore.Bind) ->
				     %case ds6
				     %of (wild5::ParCore.HappyStk
						 (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
				       {ParCore.ZdwHappyStk
					(ds7::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
					(happyRest::ParCore.HappyStk
						    (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
					  %let eta :: AbsCore.Exp =
						 AbsCore.ZdwLams happyzuvarzu2 happyzuvarzu4
					  %in %let eta1 :: ParCore.HappyAbsSyn t34 t35 t36 t37 t38 =
						     ParCore.ZdwHappyAbsSyn49 @ t34 @ t35 @ t36
						     @ t37 @ t38 eta
					      %in ParCore.ZdwHappyStk
						  @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) eta1
						  happyRest}}}}}};
  ParCore.happyReductionzu62 :: %forall t34 t35 t36 t37 t38 . ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38) =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (ds::ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	%let fail :: ParCore.HappyStk
		     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) =
	       PrelErr.patError
	       @ (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
	       (PrelBase.unpackCStringzh
		("ParCore.hs:1405|function happyReduction_62"::PrelGHC.Addrzh))
	%in %case ds
	    %of (wild::ParCore.HappyStk
		       (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
	      {ParCore.ZdwHappyStk
	       (ds1::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	       (ds2::ParCore.HappyStk
		     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
		 %case ds1 %of (wild1::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
		   {%_ ->
		      fail;
		    ParCore.ZdwHappyAbsSyn49 (happyzuvarzu4::AbsCore.Exp) ->
		      %case ds2
		      %of (wild2::ParCore.HappyStk
				  (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
			{ParCore.ZdwHappyStk
			 (ds3::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
			 (ds4::ParCore.HappyStk
			       (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
			   %case ds4
			   %of (wild3::ParCore.HappyStk
				       (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
			     {ParCore.ZdwHappyStk
			      (ds5::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
			      (ds6::ParCore.HappyStk
				    (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
				%case ds5 %of (wild4::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
				  {%_ ->
				     fail;
				   ParCore.ZdwHappyAbsSyn45 (happyzuvarzu2::AbsCore.Vdefg) ->
				     %case ds6
				     %of (wild5::ParCore.HappyStk
						 (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
				       {ParCore.ZdwHappyStk
					(ds7::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
					(happyRest::ParCore.HappyStk
						    (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
					  %let eta :: AbsCore.Exp =
						 AbsCore.ZdwLet happyzuvarzu2 happyzuvarzu4
					  %in %let eta1 :: ParCore.HappyAbsSyn t34 t35 t36 t37 t38 =
						     ParCore.ZdwHappyAbsSyn49 @ t34 @ t35 @ t36
						     @ t37 @ t38 eta
					      %in ParCore.ZdwHappyStk
						  @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) eta1
						  happyRest}}}}}};
  ParCore.happyReductionzu63 :: %forall t34 t35 t36 t37 t38 . ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38) =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (ds::ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	%let fail :: ParCore.HappyStk
		     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) =
	       PrelErr.patError
	       @ (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
	       (PrelBase.unpackCStringzh
		("ParCore.hs:1418|function happyReduction_63"::PrelGHC.Addrzh))
	%in %case ds
	    %of (wild::ParCore.HappyStk
		       (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
	      {ParCore.ZdwHappyStk
	       (ds1::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	       (ds2::ParCore.HappyStk
		     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
		 %case ds2
		 %of (wild1::ParCore.HappyStk
			     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
		   {ParCore.ZdwHappyStk
		    (ds3::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
		    (ds4::ParCore.HappyStk
			  (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
		      %case ds3 %of (wild2::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
			{%_ ->
			   fail;
			 ParCore.ZdwHappyAbsSyn55
			 (happyzuvarzu6::PrelBase.ZMZN AbsCore.Alt) ->
			   %case ds4
			   %of (wild3::ParCore.HappyStk
				       (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
			     {ParCore.ZdwHappyStk
			      (ds5::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
			      (ds6::ParCore.HappyStk
				    (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
				%case ds6
				%of (wild4::ParCore.HappyStk
					    (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
				  {ParCore.ZdwHappyStk
				   (ds7::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
				   (ds8::ParCore.HappyStk
					 (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
				     %case ds7 %of (wild5::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
				       {%_ ->
					  fail;
					ParCore.ZdwHappyAbsSyn56 (happyzuvarzu4::AbsCore.Vbind) ->
					  %case ds8
					  %of (wild6::ParCore.HappyStk
						      (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
					    {ParCore.ZdwHappyStk
					     (ds9::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
					     (ds10::ParCore.HappyStk
						    (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
					       %case ds10
					       %of (wild7::ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    t34
							    t35
							    t36
							    t37
							    t38))
						 {ParCore.ZdwHappyStk
						  (ds11::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
						  (ds12::ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  t34
							  t35
							  t36
							  t37
							  t38)) ->
						    %case ds11
						    %of (wild8::ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
						      {%_ ->
							 fail;
						       ParCore.ZdwHappyAbsSyn49
						       (happyzuvarzu2::AbsCore.Exp) ->
							 %case ds12
							 %of (wild9::ParCore.HappyStk
								     (ParCore.HappyAbsSyn
								      t34
								      t35
								      t36
								      t37
								      t38))
							   {ParCore.ZdwHappyStk
							    (ds13::ParCore.HappyAbsSyn
								   t34
								   t35
								   t36
								   t37
								   t38)
							    (happyRest::ParCore.HappyStk
									(ParCore.HappyAbsSyn
									 t34
									 t35
									 t36
									 t37
									 t38)) ->
							      %let eta :: AbsCore.Exp =
								     AbsCore.ZdwCase happyzuvarzu2
								     happyzuvarzu4 happyzuvarzu6
							      %in %let eta1 :: ParCore.HappyAbsSyn
									       t34
									       t35
									       t36
									       t37
									       t38 =
									 ParCore.ZdwHappyAbsSyn49
									 @ t34 @ t35 @ t36 @ t37
									 @ t38 eta
								  %in ParCore.ZdwHappyStk
								      @ (ParCore.HappyAbsSyn
									 t34
									 t35
									 t36
									 t37
									 t38)
								      eta1 happyRest}}}}}}}}}};
  ParCore.happyReductionzu72 :: %forall t34 t35 t36 t37 t38 . ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38) =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (ds::ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	%let fail :: ParCore.HappyStk
		     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) =
	       PrelErr.patError
	       @ (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
	       (PrelBase.unpackCStringzh
		("ParCore.hs:1493|function happyReduction_72"::PrelGHC.Addrzh))
	%in %case ds
	    %of (wild::ParCore.HappyStk
		       (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
	      {ParCore.ZdwHappyStk
	       (ds1::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	       (ds2::ParCore.HappyStk
		     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
		 %case ds1 %of (wild1::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
		   {%_ ->
		      fail;
		    ParCore.ZdwHappyAbsSyn49 (happyzuvarzu5::AbsCore.Exp) ->
		      %case ds2
		      %of (wild2::ParCore.HappyStk
				  (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
			{ParCore.ZdwHappyStk
			 (ds3::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
			 (ds4::ParCore.HappyStk
			       (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
			   %case ds4
			   %of (wild3::ParCore.HappyStk
				       (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
			     {ParCore.ZdwHappyStk
			      (ds5::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
			      (ds6::ParCore.HappyStk
				    (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
				%case ds5 %of (wild4::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
				  {%_ ->
				     fail;
				   ParCore.ZdwHappyAbsSyn57
				   (happyzuvarzu3::PrelBase.ZMZN AbsCore.Vbind) ->
				     %case ds6
				     %of (wild5::ParCore.HappyStk
						 (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
				       {ParCore.ZdwHappyStk
					(ds7::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
					(ds8::ParCore.HappyStk
					      (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
					  %case ds7
					  %of (wild6::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
					    {%_ ->
					       fail;
					     ParCore.ZdwHappyAbsSyn61
					     (happyzuvarzu2::PrelBase.ZMZN AbsCore.ATbind) ->
					       %case ds8
					       %of (wild7::ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    t34
							    t35
							    t36
							    t37
							    t38))
						 {ParCore.ZdwHappyStk
						  (ds9::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
						  (happyRest::ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)) ->
						    %case ds9
						    %of (wild8::ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
						      {%_ ->
							 fail;
						       ParCore.ZdwHappyAbsSyn69
						       (happyzuvarzu1::AbsCore.QualIdent) ->
							 %let a :: PrelBase.ZMZN AbsCore.ATbind =
								PrelList.reverse @ AbsCore.ATbind
								happyzuvarzu2
							 %in %let a1 :: PrelBase.ZMZN
									AbsCore.Vbind =
								    PrelList.reverse @ AbsCore.Vbind
								    happyzuvarzu3
							     %in %let eta :: AbsCore.Alt =
									AbsCore.ZdwAcon
									happyzuvarzu1 a a1
									happyzuvarzu5
								 %in %let eta1 :: ParCore.HappyAbsSyn
										  t34
										  t35
										  t36
										  t37
										  t38 =
									    ParCore.ZdwHappyAbsSyn54
									    @ t34 @ t35 @ t36 @ t37
									    @ t38 eta
								     %in ParCore.ZdwHappyStk
									 @ (ParCore.HappyAbsSyn
									    t34
									    t35
									    t36
									    t37
									    t38)
									 eta1 happyRest}}}}}}}}};
  ParCore.happyReductionzu77 :: %forall t35 t36 t37 t38 . ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   t38)
							  ->
							  ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   t38) =
    \ @ t35
      @ t36
      @ t37
      @ t38
      (ds::ParCore.HappyStk
	   (ParCore.HappyAbsSyn
	    (PrelBase.ZMZN PrelBase.Char)
	    t35
	    t36
	    t37
	    t38)) ->
	%let fail :: ParCore.HappyStk
		     (ParCore.HappyAbsSyn
		      (PrelBase.ZMZN PrelBase.Char)
		      t35
		      t36
		      t37
		      t38) =
	       PrelErr.patError
	       @ (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   t35
		   t36
		   t37
		   t38))
	       (PrelBase.unpackCStringzh
		("ParCore.hs:1538|function happyReduction_77"::PrelGHC.Addrzh))
	%in %case ds
	    %of (wild::ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			t35
			t36
			t37
			t38))
	      {ParCore.ZdwHappyStk
	       (ds1::ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     t35
		     t36
		     t37
		     t38)
	       (ds2::ParCore.HappyStk
		     (ParCore.HappyAbsSyn
		      (PrelBase.ZMZN PrelBase.Char)
		      t35
		      t36
		      t37
		      t38)) ->
		 %case ds2
		 %of (wild1::ParCore.HappyStk
			     (ParCore.HappyAbsSyn
			      (PrelBase.ZMZN PrelBase.Char)
			      t35
			      t36
			      t37
			      t38))
		   {ParCore.ZdwHappyStk
		    (ds3::ParCore.HappyAbsSyn
			  (PrelBase.ZMZN PrelBase.Char)
			  t35
			  t36
			  t37
			  t38)
		    (ds4::ParCore.HappyStk
			  (ParCore.HappyAbsSyn
			   (PrelBase.ZMZN PrelBase.Char)
			   t35
			   t36
			   t37
			   t38)) ->
		      %case ds3
		      %of (wild2::ParCore.HappyAbsSyn
				  (PrelBase.ZMZN PrelBase.Char)
				  t35
				  t36
				  t37
				  t38)
			{%_ ->
			   fail;
			 ParCore.ZdwHappyAbsSyn62 (happyzuvarzu4::AbsCore.Ty) ->
			   %case ds4
			   %of (wild3::ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					t35
					t36
					t37
					t38))
			     {ParCore.ZdwHappyStk
			      (ds5::ParCore.HappyAbsSyn
				    (PrelBase.ZMZN PrelBase.Char)
				    t35
				    t36
				    t37
				    t38)
			      (ds6::ParCore.HappyStk
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     t35
				     t36
				     t37
				     t38)) ->
				%case ds6
				%of (wild4::ParCore.HappyStk
					    (ParCore.HappyAbsSyn
					     (PrelBase.ZMZN PrelBase.Char)
					     t35
					     t36
					     t37
					     t38))
				  {ParCore.ZdwHappyStk
				   (ds7::ParCore.HappyAbsSyn
					 (PrelBase.ZMZN PrelBase.Char)
					 t35
					 t36
					 t37
					 t38)
				   (ds8::ParCore.HappyStk
					 (ParCore.HappyAbsSyn
					  (PrelBase.ZMZN PrelBase.Char)
					  t35
					  t36
					  t37
					  t38)) ->
				     %case ds7
				     %of (wild5::ParCore.HappyAbsSyn
						 (PrelBase.ZMZN PrelBase.Char)
						 t35
						 t36
						 t37
						 t38)
				       {%_ ->
					  fail;
					ParCore.ZdwHappyAbsSyn34
					(happyzuvarzu2::PrelBase.ZMZN PrelBase.Char) ->
					  %case ds8
					  %of (wild6::ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38))
					    {ParCore.ZdwHappyStk
					     (ds9::ParCore.HappyAbsSyn
						   (PrelBase.ZMZN PrelBase.Char)
						   t35
						   t36
						   t37
						   t38)
					     (happyRest::ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)) ->
					       %let eta :: AbsCore.Vbind =
						      AbsCore.ZdwVbind happyzuvarzu2 happyzuvarzu4
					       %in %let eta1 :: ParCore.HappyAbsSyn
								(PrelBase.ZMZN PrelBase.Char)
								t35
								t36
								t37
								t38 =
							  ParCore.ZdwHappyAbsSyn56
							  @ (PrelBase.ZMZN PrelBase.Char) @ t35
							  @ t36 @ t37 @ t38 eta
						   %in ParCore.ZdwHappyStk
						       @ (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)
						       eta1 happyRest}}}}}}};
  ParCore.happyReductionzu78 :: %forall t34 t35 t36 t37 t38 . ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38 =
    \ @ t34 @ t35 @ t36 @ t37 @ t38 ->
	ParCore.ZdwHappyAbsSyn57 @ t34 @ t35 @ t36 @ t37 @ t38
	(PrelBase.ZdwZMZN @ AbsCore.Vbind);
  ParCore.happyReductionzu80 :: %forall t35 t36 t37 t38 . ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   t38)
							  ->
							  ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   t38) =
    \ @ t35
      @ t36
      @ t37
      @ t38
      (ds::ParCore.HappyStk
	   (ParCore.HappyAbsSyn
	    (PrelBase.ZMZN PrelBase.Char)
	    t35
	    t36
	    t37
	    t38)) ->
	%let fail :: ParCore.HappyStk
		     (ParCore.HappyAbsSyn
		      (PrelBase.ZMZN PrelBase.Char)
		      t35
		      t36
		      t37
		      t38) =
	       PrelErr.patError
	       @ (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   t35
		   t36
		   t37
		   t38))
	       (PrelBase.unpackCStringzh
		("ParCore.hs:1562|function happyReduction_80"::PrelGHC.Addrzh))
	%in %case ds
	    %of (wild::ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			t35
			t36
			t37
			t38))
	      {ParCore.ZdwHappyStk
	       (ds1::ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     t35
		     t36
		     t37
		     t38)
	       (ds2::ParCore.HappyStk
		     (ParCore.HappyAbsSyn
		      (PrelBase.ZMZN PrelBase.Char)
		      t35
		      t36
		      t37
		      t38)) ->
		 %case ds2
		 %of (wild1::ParCore.HappyStk
			     (ParCore.HappyAbsSyn
			      (PrelBase.ZMZN PrelBase.Char)
			      t35
			      t36
			      t37
			      t38))
		   {ParCore.ZdwHappyStk
		    (ds3::ParCore.HappyAbsSyn
			  (PrelBase.ZMZN PrelBase.Char)
			  t35
			  t36
			  t37
			  t38)
		    (ds4::ParCore.HappyStk
			  (ParCore.HappyAbsSyn
			   (PrelBase.ZMZN PrelBase.Char)
			   t35
			   t36
			   t37
			   t38)) ->
		      %case ds3
		      %of (wild2::ParCore.HappyAbsSyn
				  (PrelBase.ZMZN PrelBase.Char)
				  t35
				  t36
				  t37
				  t38)
			{%_ ->
			   fail;
			 ParCore.ZdwHappyAbsSyn66 (happyzuvarzu4::AbsCore.Kind) ->
			   %case ds4
			   %of (wild3::ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					t35
					t36
					t37
					t38))
			     {ParCore.ZdwHappyStk
			      (ds5::ParCore.HappyAbsSyn
				    (PrelBase.ZMZN PrelBase.Char)
				    t35
				    t36
				    t37
				    t38)
			      (ds6::ParCore.HappyStk
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     t35
				     t36
				     t37
				     t38)) ->
				%case ds6
				%of (wild4::ParCore.HappyStk
					    (ParCore.HappyAbsSyn
					     (PrelBase.ZMZN PrelBase.Char)
					     t35
					     t36
					     t37
					     t38))
				  {ParCore.ZdwHappyStk
				   (ds7::ParCore.HappyAbsSyn
					 (PrelBase.ZMZN PrelBase.Char)
					 t35
					 t36
					 t37
					 t38)
				   (ds8::ParCore.HappyStk
					 (ParCore.HappyAbsSyn
					  (PrelBase.ZMZN PrelBase.Char)
					  t35
					  t36
					  t37
					  t38)) ->
				     %case ds7
				     %of (wild5::ParCore.HappyAbsSyn
						 (PrelBase.ZMZN PrelBase.Char)
						 t35
						 t36
						 t37
						 t38)
				       {%_ ->
					  fail;
					ParCore.ZdwHappyAbsSyn34
					(happyzuvarzu2::PrelBase.ZMZN PrelBase.Char) ->
					  %case ds8
					  %of (wild6::ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38))
					    {ParCore.ZdwHappyStk
					     (ds9::ParCore.HappyAbsSyn
						   (PrelBase.ZMZN PrelBase.Char)
						   t35
						   t36
						   t37
						   t38)
					     (happyRest::ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)) ->
					       %let eta :: AbsCore.Tbind =
						      AbsCore.ZdwTbindPair happyzuvarzu2
						      happyzuvarzu4
					       %in %let eta1 :: ParCore.HappyAbsSyn
								(PrelBase.ZMZN PrelBase.Char)
								t35
								t36
								t37
								t38 =
							  ParCore.ZdwHappyAbsSyn58
							  @ (PrelBase.ZMZN PrelBase.Char) @ t35
							  @ t36 @ t37 @ t38 eta
						   %in ParCore.ZdwHappyStk
						       @ (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)
						       eta1 happyRest}}}}}}};
  ParCore.happyReductionzu82 :: %forall t34 t35 t36 t37 t38 . ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38 =
    \ @ t34 @ t35 @ t36 @ t37 @ t38 ->
	ParCore.ZdwHappyAbsSyn59 @ t34 @ t35 @ t36 @ t37 @ t38
	(PrelBase.ZdwZMZN @ AbsCore.Tbind);
  ParCore.happyReductionzu85 :: %forall t34 t35 t36 t37 t38 . ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38 =
    \ @ t34 @ t35 @ t36 @ t37 @ t38 ->
	ParCore.ZdwHappyAbsSyn61 @ t34 @ t35 @ t36 @ t37 @ t38
	(PrelBase.ZdwZMZN @ AbsCore.ATbind);
  ParCore.happyReductionzu93 :: %forall t34 t35 t36 t37 t38 . ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38) =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (ds::ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	%let fail :: ParCore.HappyStk
		     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) =
	       PrelErr.patError
	       @ (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
	       (PrelBase.unpackCStringzh
		("ParCore.hs:1660|function happyReduction_93"::PrelGHC.Addrzh))
	%in %case ds
	    %of (wild::ParCore.HappyStk
		       (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
	      {ParCore.ZdwHappyStk
	       (ds1::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	       (ds2::ParCore.HappyStk
		     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
		 %case ds1 %of (wild1::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
		   {%_ ->
		      fail;
		    ParCore.ZdwHappyAbsSyn62 (happyzuvarzu4::AbsCore.Ty) ->
		      %case ds2
		      %of (wild2::ParCore.HappyStk
				  (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
			{ParCore.ZdwHappyStk
			 (ds3::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
			 (ds4::ParCore.HappyStk
			       (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
			   %case ds4
			   %of (wild3::ParCore.HappyStk
				       (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
			     {ParCore.ZdwHappyStk
			      (ds5::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
			      (ds6::ParCore.HappyStk
				    (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
				%case ds5 %of (wild4::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
				  {%_ ->
				     fail;
				   ParCore.ZdwHappyAbsSyn59
				   (happyzuvarzu2::PrelBase.ZMZN AbsCore.Tbind) ->
				     %case ds6
				     %of (wild5::ParCore.HappyStk
						 (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
				       {ParCore.ZdwHappyStk
					(ds7::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
					(happyRest::ParCore.HappyStk
						    (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
					  %let a :: PrelBase.ZMZN AbsCore.Tbind =
						 PrelList.reverse @ AbsCore.Tbind happyzuvarzu2
					  %in %let eta :: AbsCore.Ty =
						     AbsCore.ZdwTforalls a happyzuvarzu4
					      %in %let eta1 :: ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38 =
							 ParCore.ZdwHappyAbsSyn62 @ t34 @ t35 @ t36
							 @ t37 @ t38 eta
						  %in ParCore.ZdwHappyStk
						      @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
						      eta1 happyRest}}}}}};
  ParCore.happyReductionzu95 :: %forall t34 t35 t36 t37 t38 . ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38 =
    \ @ t34 @ t35 @ t36 @ t37 @ t38 ->
	ParCore.ZdwHappyAbsSyn65 @ t34 @ t35 @ t36 @ t37 @ t38
	(PrelBase.ZdwZMZN @ AbsCore.Ty);
  ParCore.happyReductionzu97 :: %forall t t34 t35 t36 t37 t38 . t ->
								ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38 =
    \ @ t @ t34 @ t35 @ t36 @ t37 @ t38 (ds::t) ->
	ParCore.ZdwHappyAbsSyn66 @ t34 @ t35 @ t36 @ t37 @ t38
	AbsCore.ZdwKlifted;
  ParCore.happyReductionzu98 :: %forall t t34 t35 t36 t37 t38 . t ->
								ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38 =
    \ @ t @ t34 @ t35 @ t36 @ t37 @ t38 (ds::t) ->
	ParCore.ZdwHappyAbsSyn66 @ t34 @ t35 @ t36 @ t37 @ t38
	AbsCore.ZdwKunlifted;
  ParCore.happyReductionzu99 :: %forall t t34 t35 t36 t37 t38 . t ->
								ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38 =
    \ @ t @ t34 @ t35 @ t36 @ t37 @ t38 (ds::t) ->
	ParCore.ZdwHappyAbsSyn66 @ t34 @ t35 @ t36 @ t37 @ t38
	AbsCore.ZdwKopen;
  ParCore.happyReductionzu103 :: %forall t34 t35 t37 t38 . ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    t34
							    t35
							    PrelNum.Integer
							    t37
							    t38)
							   ->
							   ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    t34
							    t35
							    PrelNum.Integer
							    t37
							    t38) =
    \ @ t34
      @ t35
      @ t37
      @ t38
      (ds::ParCore.HappyStk
	   (ParCore.HappyAbsSyn t34 t35 PrelNum.Integer t37 t38)) ->
	%let fail :: ParCore.HappyStk
		     (ParCore.HappyAbsSyn t34 t35 PrelNum.Integer t37 t38) =
	       PrelErr.patError
	       @ (ParCore.HappyStk
		  (ParCore.HappyAbsSyn t34 t35 PrelNum.Integer t37 t38))
	       (PrelBase.unpackCStringzh
		("ParCore.hs:1734|function happyReduction_103"::PrelGHC.Addrzh))
	%in %case ds
	    %of (wild::ParCore.HappyStk
		       (ParCore.HappyAbsSyn t34 t35 PrelNum.Integer t37 t38))
	      {ParCore.ZdwHappyStk
	       (ds1::ParCore.HappyAbsSyn t34 t35 PrelNum.Integer t37 t38)
	       (ds2::ParCore.HappyStk
		     (ParCore.HappyAbsSyn t34 t35 PrelNum.Integer t37 t38)) ->
		 %case ds2
		 %of (wild1::ParCore.HappyStk
			     (ParCore.HappyAbsSyn t34 t35 PrelNum.Integer t37 t38))
		   {ParCore.ZdwHappyStk
		    (ds3::ParCore.HappyAbsSyn t34 t35 PrelNum.Integer t37 t38)
		    (ds4::ParCore.HappyStk
			  (ParCore.HappyAbsSyn t34 t35 PrelNum.Integer t37 t38)) ->
		      %case ds3
		      %of (wild2::ParCore.HappyAbsSyn t34 t35 PrelNum.Integer t37 t38)
			{%_ ->
			   fail;
			 ParCore.ZdwHappyAbsSyn62 (happyzuvarzu4::AbsCore.Ty) ->
			   %case ds4
			   %of (wild3::ParCore.HappyStk
				       (ParCore.HappyAbsSyn t34 t35 PrelNum.Integer t37 t38))
			     {ParCore.ZdwHappyStk
			      (ds5::ParCore.HappyAbsSyn t34 t35 PrelNum.Integer t37 t38)
			      (ds6::ParCore.HappyStk
				    (ParCore.HappyAbsSyn t34 t35 PrelNum.Integer t37 t38)) ->
				%case ds6
				%of (wild4::ParCore.HappyStk
					    (ParCore.HappyAbsSyn t34 t35 PrelNum.Integer t37 t38))
				  {ParCore.ZdwHappyStk
				   (ds7::ParCore.HappyAbsSyn t34 t35 PrelNum.Integer t37 t38)
				   (ds8::ParCore.HappyStk
					 (ParCore.HappyAbsSyn t34 t35 PrelNum.Integer t37 t38)) ->
				     %case ds7
				     %of (wild5::ParCore.HappyAbsSyn
						 t34
						 t35
						 PrelNum.Integer
						 t37
						 t38)
				       {%_ ->
					  fail;
					ParCore.ZdwHappyAbsSyn36 (happyzuvarzu2::PrelNum.Integer) ->
					  %case ds8
					  %of (wild6::ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       t34
						       t35
						       PrelNum.Integer
						       t37
						       t38))
					    {ParCore.ZdwHappyStk
					     (ds9::ParCore.HappyAbsSyn
						   t34
						   t35
						   PrelNum.Integer
						   t37
						   t38)
					     (happyRest::ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  t34
							  t35
							  PrelNum.Integer
							  t37
							  t38)) ->
					       %let eta :: AbsCore.Lit =
						      AbsCore.ZdwLint happyzuvarzu2 happyzuvarzu4
					       %in %let eta1 :: ParCore.HappyAbsSyn
								t34
								t35
								PrelNum.Integer
								t37
								t38 =
							  ParCore.ZdwHappyAbsSyn68 @ t34 @ t35
							  @ PrelNum.Integer @ t37 @ t38 eta
						   %in ParCore.ZdwHappyStk
						       @ (ParCore.HappyAbsSyn
							  t34
							  t35
							  PrelNum.Integer
							  t37
							  t38)
						       eta1 happyRest}}}}}}};
  ParCore.happyReductionzu104 :: %forall t34 t35 t36 t38 . ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    t34
							    t35
							    t36
							    PrelFloat.Double
							    t38)
							   ->
							   ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    t34
							    t35
							    t36
							    PrelFloat.Double
							    t38) =
    \ @ t34
      @ t35
      @ t36
      @ t38
      (ds::ParCore.HappyStk
	   (ParCore.HappyAbsSyn t34 t35 t36 PrelFloat.Double t38)) ->
	%let fail :: ParCore.HappyStk
		     (ParCore.HappyAbsSyn t34 t35 t36 PrelFloat.Double t38) =
	       PrelErr.patError
	       @ (ParCore.HappyStk
		  (ParCore.HappyAbsSyn t34 t35 t36 PrelFloat.Double t38))
	       (PrelBase.unpackCStringzh
		("ParCore.hs:1745|function happyReduction_104"::PrelGHC.Addrzh))
	%in %case ds
	    %of (wild::ParCore.HappyStk
		       (ParCore.HappyAbsSyn t34 t35 t36 PrelFloat.Double t38))
	      {ParCore.ZdwHappyStk
	       (ds1::ParCore.HappyAbsSyn t34 t35 t36 PrelFloat.Double t38)
	       (ds2::ParCore.HappyStk
		     (ParCore.HappyAbsSyn t34 t35 t36 PrelFloat.Double t38)) ->
		 %case ds2
		 %of (wild1::ParCore.HappyStk
			     (ParCore.HappyAbsSyn t34 t35 t36 PrelFloat.Double t38))
		   {ParCore.ZdwHappyStk
		    (ds3::ParCore.HappyAbsSyn t34 t35 t36 PrelFloat.Double t38)
		    (ds4::ParCore.HappyStk
			  (ParCore.HappyAbsSyn t34 t35 t36 PrelFloat.Double t38)) ->
		      %case ds3
		      %of (wild2::ParCore.HappyAbsSyn t34 t35 t36 PrelFloat.Double t38)
			{%_ ->
			   fail;
			 ParCore.ZdwHappyAbsSyn62 (happyzuvarzu4::AbsCore.Ty) ->
			   %case ds4
			   %of (wild3::ParCore.HappyStk
				       (ParCore.HappyAbsSyn t34 t35 t36 PrelFloat.Double t38))
			     {ParCore.ZdwHappyStk
			      (ds5::ParCore.HappyAbsSyn t34 t35 t36 PrelFloat.Double t38)
			      (ds6::ParCore.HappyStk
				    (ParCore.HappyAbsSyn t34 t35 t36 PrelFloat.Double t38)) ->
				%case ds6
				%of (wild4::ParCore.HappyStk
					    (ParCore.HappyAbsSyn t34 t35 t36 PrelFloat.Double t38))
				  {ParCore.ZdwHappyStk
				   (ds7::ParCore.HappyAbsSyn t34 t35 t36 PrelFloat.Double t38)
				   (ds8::ParCore.HappyStk
					 (ParCore.HappyAbsSyn t34 t35 t36 PrelFloat.Double t38)) ->
				     %case ds7
				     %of (wild5::ParCore.HappyAbsSyn
						 t34
						 t35
						 t36
						 PrelFloat.Double
						 t38)
				       {%_ ->
					  fail;
					ParCore.ZdwHappyAbsSyn37
					(happyzuvarzu2::PrelFloat.Double) ->
					  %case ds8
					  %of (wild6::ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       t34
						       t35
						       t36
						       PrelFloat.Double
						       t38))
					    {ParCore.ZdwHappyStk
					     (ds9::ParCore.HappyAbsSyn
						   t34
						   t35
						   t36
						   PrelFloat.Double
						   t38)
					     (happyRest::ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  t34
							  t35
							  t36
							  PrelFloat.Double
							  t38)) ->
					       %let eta :: AbsCore.Lit =
						      AbsCore.ZdwLrational happyzuvarzu2
						      happyzuvarzu4
					       %in %let eta1 :: ParCore.HappyAbsSyn
								t34
								t35
								t36
								PrelFloat.Double
								t38 =
							  ParCore.ZdwHappyAbsSyn68 @ t34 @ t35 @ t36
							  @ PrelFloat.Double @ t38 eta
						   %in ParCore.ZdwHappyStk
						       @ (ParCore.HappyAbsSyn
							  t34
							  t35
							  t36
							  PrelFloat.Double
							  t38)
						       eta1 happyRest}}}}}}};
  ParCore.happyReductionzu105 :: %forall t34 t35 t36 t37 . ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    t34
							    t35
							    t36
							    t37
							    PrelBase.Char)
							   ->
							   ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    t34
							    t35
							    t36
							    t37
							    PrelBase.Char) =
    \ @ t34
      @ t35
      @ t36
      @ t37
      (ds::ParCore.HappyStk
	   (ParCore.HappyAbsSyn t34 t35 t36 t37 PrelBase.Char)) ->
	%let fail :: ParCore.HappyStk
		     (ParCore.HappyAbsSyn t34 t35 t36 t37 PrelBase.Char) =
	       PrelErr.patError
	       @ (ParCore.HappyStk
		  (ParCore.HappyAbsSyn t34 t35 t36 t37 PrelBase.Char))
	       (PrelBase.unpackCStringzh
		("ParCore.hs:1756|function happyReduction_105"::PrelGHC.Addrzh))
	%in %case ds
	    %of (wild::ParCore.HappyStk
		       (ParCore.HappyAbsSyn t34 t35 t36 t37 PrelBase.Char))
	      {ParCore.ZdwHappyStk
	       (ds1::ParCore.HappyAbsSyn t34 t35 t36 t37 PrelBase.Char)
	       (ds2::ParCore.HappyStk
		     (ParCore.HappyAbsSyn t34 t35 t36 t37 PrelBase.Char)) ->
		 %case ds2
		 %of (wild1::ParCore.HappyStk
			     (ParCore.HappyAbsSyn t34 t35 t36 t37 PrelBase.Char))
		   {ParCore.ZdwHappyStk
		    (ds3::ParCore.HappyAbsSyn t34 t35 t36 t37 PrelBase.Char)
		    (ds4::ParCore.HappyStk
			  (ParCore.HappyAbsSyn t34 t35 t36 t37 PrelBase.Char)) ->
		      %case ds3
		      %of (wild2::ParCore.HappyAbsSyn t34 t35 t36 t37 PrelBase.Char)
			{%_ ->
			   fail;
			 ParCore.ZdwHappyAbsSyn62 (happyzuvarzu4::AbsCore.Ty) ->
			   %case ds4
			   %of (wild3::ParCore.HappyStk
				       (ParCore.HappyAbsSyn t34 t35 t36 t37 PrelBase.Char))
			     {ParCore.ZdwHappyStk
			      (ds5::ParCore.HappyAbsSyn t34 t35 t36 t37 PrelBase.Char)
			      (ds6::ParCore.HappyStk
				    (ParCore.HappyAbsSyn t34 t35 t36 t37 PrelBase.Char)) ->
				%case ds6
				%of (wild4::ParCore.HappyStk
					    (ParCore.HappyAbsSyn t34 t35 t36 t37 PrelBase.Char))
				  {ParCore.ZdwHappyStk
				   (ds7::ParCore.HappyAbsSyn t34 t35 t36 t37 PrelBase.Char)
				   (ds8::ParCore.HappyStk
					 (ParCore.HappyAbsSyn t34 t35 t36 t37 PrelBase.Char)) ->
				     %case ds7
				     %of (wild5::ParCore.HappyAbsSyn t34 t35 t36 t37 PrelBase.Char)
				       {%_ ->
					  fail;
					ParCore.ZdwHappyAbsSyn38 (happyzuvarzu2::PrelBase.Char) ->
					  %case ds8
					  %of (wild6::ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       t34
						       t35
						       t36
						       t37
						       PrelBase.Char))
					    {ParCore.ZdwHappyStk
					     (ds9::ParCore.HappyAbsSyn
						   t34
						   t35
						   t36
						   t37
						   PrelBase.Char)
					     (happyRest::ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  t34
							  t35
							  t36
							  t37
							  PrelBase.Char)) ->
					       %let eta :: AbsCore.Lit =
						      AbsCore.ZdwLchar happyzuvarzu2 happyzuvarzu4
					       %in %let eta1 :: ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								PrelBase.Char =
							  ParCore.ZdwHappyAbsSyn68 @ t34 @ t35 @ t36
							  @ t37 @ PrelBase.Char eta
						   %in ParCore.ZdwHappyStk
						       @ (ParCore.HappyAbsSyn
							  t34
							  t35
							  t36
							  t37
							  PrelBase.Char)
						       eta1 happyRest}}}}}}};
  ParCore.happyReductionzu106 :: %forall t34 t36 t37 t38 . ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    t34
							    (PrelBase.ZMZN PrelBase.Char)
							    t36
							    t37
							    t38)
							   ->
							   ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    t34
							    (PrelBase.ZMZN PrelBase.Char)
							    t36
							    t37
							    t38) =
    \ @ t34
      @ t36
      @ t37
      @ t38
      (ds::ParCore.HappyStk
	   (ParCore.HappyAbsSyn
	    t34
	    (PrelBase.ZMZN PrelBase.Char)
	    t36
	    t37
	    t38)) ->
	%let fail :: ParCore.HappyStk
		     (ParCore.HappyAbsSyn
		      t34
		      (PrelBase.ZMZN PrelBase.Char)
		      t36
		      t37
		      t38) =
	       PrelErr.patError
	       @ (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   t34
		   (PrelBase.ZMZN PrelBase.Char)
		   t36
		   t37
		   t38))
	       (PrelBase.unpackCStringzh
		("ParCore.hs:1767|function happyReduction_106"::PrelGHC.Addrzh))
	%in %case ds
	    %of (wild::ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			t34
			(PrelBase.ZMZN PrelBase.Char)
			t36
			t37
			t38))
	      {ParCore.ZdwHappyStk
	       (ds1::ParCore.HappyAbsSyn
		     t34
		     (PrelBase.ZMZN PrelBase.Char)
		     t36
		     t37
		     t38)
	       (ds2::ParCore.HappyStk
		     (ParCore.HappyAbsSyn
		      t34
		      (PrelBase.ZMZN PrelBase.Char)
		      t36
		      t37
		      t38)) ->
		 %case ds2
		 %of (wild1::ParCore.HappyStk
			     (ParCore.HappyAbsSyn
			      t34
			      (PrelBase.ZMZN PrelBase.Char)
			      t36
			      t37
			      t38))
		   {ParCore.ZdwHappyStk
		    (ds3::ParCore.HappyAbsSyn
			  t34
			  (PrelBase.ZMZN PrelBase.Char)
			  t36
			  t37
			  t38)
		    (ds4::ParCore.HappyStk
			  (ParCore.HappyAbsSyn
			   t34
			   (PrelBase.ZMZN PrelBase.Char)
			   t36
			   t37
			   t38)) ->
		      %case ds3
		      %of (wild2::ParCore.HappyAbsSyn
				  t34
				  (PrelBase.ZMZN PrelBase.Char)
				  t36
				  t37
				  t38)
			{%_ ->
			   fail;
			 ParCore.ZdwHappyAbsSyn62 (happyzuvarzu4::AbsCore.Ty) ->
			   %case ds4
			   %of (wild3::ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					t34
					(PrelBase.ZMZN PrelBase.Char)
					t36
					t37
					t38))
			     {ParCore.ZdwHappyStk
			      (ds5::ParCore.HappyAbsSyn
				    t34
				    (PrelBase.ZMZN PrelBase.Char)
				    t36
				    t37
				    t38)
			      (ds6::ParCore.HappyStk
				    (ParCore.HappyAbsSyn
				     t34
				     (PrelBase.ZMZN PrelBase.Char)
				     t36
				     t37
				     t38)) ->
				%case ds6
				%of (wild4::ParCore.HappyStk
					    (ParCore.HappyAbsSyn
					     t34
					     (PrelBase.ZMZN PrelBase.Char)
					     t36
					     t37
					     t38))
				  {ParCore.ZdwHappyStk
				   (ds7::ParCore.HappyAbsSyn
					 t34
					 (PrelBase.ZMZN PrelBase.Char)
					 t36
					 t37
					 t38)
				   (ds8::ParCore.HappyStk
					 (ParCore.HappyAbsSyn
					  t34
					  (PrelBase.ZMZN PrelBase.Char)
					  t36
					  t37
					  t38)) ->
				     %case ds7
				     %of (wild5::ParCore.HappyAbsSyn
						 t34
						 (PrelBase.ZMZN PrelBase.Char)
						 t36
						 t37
						 t38)
				       {%_ ->
					  fail;
					ParCore.ZdwHappyAbsSyn35
					(happyzuvarzu2::PrelBase.ZMZN PrelBase.Char) ->
					  %case ds8
					  %of (wild6::ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       t34
						       (PrelBase.ZMZN PrelBase.Char)
						       t36
						       t37
						       t38))
					    {ParCore.ZdwHappyStk
					     (ds9::ParCore.HappyAbsSyn
						   t34
						   (PrelBase.ZMZN PrelBase.Char)
						   t36
						   t37
						   t38)
					     (happyRest::ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  t34
							  (PrelBase.ZMZN PrelBase.Char)
							  t36
							  t37
							  t38)) ->
					       %let eta :: AbsCore.Lit =
						      AbsCore.ZdwLstring happyzuvarzu2 happyzuvarzu4
					       %in %let eta1 :: ParCore.HappyAbsSyn
								t34
								(PrelBase.ZMZN PrelBase.Char)
								t36
								t37
								t38 =
							  ParCore.ZdwHappyAbsSyn68 @ t34
							  @ (PrelBase.ZMZN PrelBase.Char) @ t36
							  @ t37 @ t38 eta
						   %in ParCore.ZdwHappyStk
						       @ (ParCore.HappyAbsSyn
							  t34
							  (PrelBase.ZMZN PrelBase.Char)
							  t36
							  t37
							  t38)
						       eta1 happyRest}}}}}}};
  ParCore.happyError :: %forall a . PrelBase.ZMZN LexCore.Token ->
				    ErrM.Err a =
    \ @ a (ts::PrelBase.ZMZN LexCore.Token) ->
	PrelBase.zd @ (PrelBase.ZMZN PrelBase.Char) @ (ErrM.Err a)
	(\ (eta::PrelBase.ZMZN PrelBase.Char) -> ErrM.ZdwBad @ a eta)
	(PrelBase.zpzp @ PrelBase.Char
	 (PrelBase.unpackCStringzh ("syntax error at "::PrelGHC.Addrzh))
	 (PrelBase.zpzp @ PrelBase.Char (LexCore.tokenPos ts)
	  (%case (PrelList.null @ LexCore.Token ts) %of (wild::PrelBase.Bool)
	     {PrelBase.ZdwTrue ->
		PrelBase.ZdwZMZN @ PrelBase.Char;
	      PrelBase.ZdwFalse ->
		PrelBase.zpzp @ PrelBase.Char
		(PrelBase.unpackCStringzh (" before "::PrelGHC.Addrzh))
		(PrelShow.unwords
		 (PrelBase.map @ LexCore.Token @ (PrelBase.ZMZN PrelBase.Char)
		  LexCore.prToken
		  (PrelList.take @ LexCore.Token (PrelBase.ZdwIzh (4::PrelGHC.Intzh))
		   ts)))})));
  ParCore.happyGoto :: %forall t b c . (PrelBase.Int ->
					PrelBase.Int ->
					b ->
					ParCore.HappyState b c ->
					PrelBase.ZMZN (ParCore.HappyState b c) -> c)
				       ->
				       PrelBase.Int ->
				       b -> t -> PrelBase.ZMZN (ParCore.HappyState b c) -> c =
    \ @ t
      @ b
      @ c
      (action::PrelBase.Int ->
	       PrelBase.Int ->
	       b ->
	       ParCore.HappyState b c ->
	       PrelBase.ZMZN (ParCore.HappyState b c) -> c)
      (j::PrelBase.Int)
      (tk::b)
      (st::t) ->
	action j j tk
	(%coerce (ParCore.HappyState b c)
	 action);
  ParCore.notHappyAtAll :: %forall t . t =
    \ @ t ->
	PrelErr.error @ t
	(PrelBase.unpackCStringzh
	 ("Internal Happy error\x0a"::PrelGHC.Addrzh));
  ParCore.happyReductionzu107 :: %forall t35 t36 t37 t38 t t351 t361 t371 t381 t34 t352 t362 t372 t382 . ParCore.HappyAbsSyn
													 (PrelBase.ZMZN
													  PrelBase.Char)
													 t35
													 t36
													 t37
													 t38
													 ->
													 t
													 ->
													 ParCore.HappyAbsSyn
													 (PrelBase.ZMZN
													  PrelBase.Char)
													 t351
													 t361
													 t371
													 t381
													 ->
													 ParCore.HappyAbsSyn
													 t34
													 t352
													 t362
													 t372
													 t382 =
    \ @ t35
      @ t36
      @ t37
      @ t38
      @ t
      @ t351
      @ t361
      @ t371
      @ t381
      @ t34
      @ t352
      @ t362
      @ t372
      @ t382
      (ds::ParCore.HappyAbsSyn
	   (PrelBase.ZMZN PrelBase.Char)
	   t35
	   t36
	   t37
	   t38)
      (ds1::t)
      (ds2::ParCore.HappyAbsSyn
	    (PrelBase.ZMZN PrelBase.Char)
	    t351
	    t361
	    t371
	    t381) ->
	%case ds
	%of (wild::ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   t35
		   t36
		   t37
		   t38)
	  {%_ ->
	     ParCore.notHappyAtAll
	     @ (ParCore.HappyAbsSyn t34 t352 t362 t372 t382);
	   ParCore.ZdwHappyAbsSyn34
	   (happyzuvarzu3::PrelBase.ZMZN PrelBase.Char) ->
	     %case ds2
	     %of (wild1::ParCore.HappyAbsSyn
			 (PrelBase.ZMZN PrelBase.Char)
			 t351
			 t361
			 t371
			 t381)
	       {%_ ->
		  ParCore.notHappyAtAll
		  @ (ParCore.HappyAbsSyn t34 t352 t362 t372 t382);
		ParCore.ZdwHappyAbsSyn34
		(happyzuvarzu1::PrelBase.ZMZN PrelBase.Char) ->
		  %let eta :: AbsCore.QualIdent =
			 AbsCore.ZdwQual happyzuvarzu1 happyzuvarzu3
		  %in ParCore.ZdwHappyAbsSyn69 @ t34 @ t352 @ t362 @ t372 @ t382
		      eta}};
  ParCore.happyReductionzu102 :: %forall t34 t35 t36 t37 t38 t341 t351 t361 t371 t381 . ParCore.HappyAbsSyn
											t34
											t35
											t36
											t37
											t38
											->
											ParCore.HappyAbsSyn
											t341
											t351
											t361
											t371
											t381 =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ t341
      @ t351
      @ t361
      @ t371
      @ t381
      (ds::ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	%case ds %of (wild::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	  {%_ ->
	     ParCore.notHappyAtAll
	     @ (ParCore.HappyAbsSyn t341 t351 t361 t371 t381);
	   ParCore.ZdwHappyAbsSyn66 (happyzuvarzu1::AbsCore.Kind) ->
	     ParCore.ZdwHappyAbsSyn66 @ t341 @ t351 @ t361 @ t371 @ t381
	     happyzuvarzu1};
  ParCore.happyReductionzu101 :: %forall t34 t35 t36 t37 t38 t t341 t351 t361 t371 t381 t342 t352 t362 t372 t382 . ParCore.HappyAbsSyn
														   t34
														   t35
														   t36
														   t37
														   t38
														   ->
														   t
														   ->
														   ParCore.HappyAbsSyn
														   t341
														   t351
														   t361
														   t371
														   t381
														   ->
														   ParCore.HappyAbsSyn
														   t342
														   t352
														   t362
														   t372
														   t382 =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ t
      @ t341
      @ t351
      @ t361
      @ t371
      @ t381
      @ t342
      @ t352
      @ t362
      @ t372
      @ t382
      (ds::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
      (ds1::t)
      (ds2::ParCore.HappyAbsSyn t341 t351 t361 t371 t381) ->
	%case ds %of (wild::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	  {%_ ->
	     ParCore.notHappyAtAll
	     @ (ParCore.HappyAbsSyn t342 t352 t362 t372 t382);
	   ParCore.ZdwHappyAbsSyn66 (happyzuvarzu3::AbsCore.Kind) ->
	     %case ds2 %of (wild1::ParCore.HappyAbsSyn t341 t351 t361 t371 t381)
	       {%_ ->
		  ParCore.notHappyAtAll
		  @ (ParCore.HappyAbsSyn t342 t352 t362 t372 t382);
		ParCore.ZdwHappyAbsSyn66 (happyzuvarzu1::AbsCore.Kind) ->
		  %let eta :: AbsCore.Kind =
			 AbsCore.ZdwKarrow happyzuvarzu1 happyzuvarzu3
		  %in ParCore.ZdwHappyAbsSyn66 @ t342 @ t352 @ t362 @ t372 @ t382
		      eta}};
  ParCore.happyReductionzu100 :: %forall t t34 t35 t36 t37 t38 t1 t341 t351 t361 t371 t381 . t
											     ->
											     ParCore.HappyAbsSyn
											     t34
											     t35
											     t36
											     t37
											     t38
											     ->
											     t1 ->
											     ParCore.HappyAbsSyn
											     t341
											     t351
											     t361
											     t371
											     t381 =
    \ @ t
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ t1
      @ t341
      @ t351
      @ t361
      @ t371
      @ t381
      (ds::t)
      (ds1::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
      (ds2::t1) ->
	%case ds1 %of (wild::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	  {%_ ->
	     ParCore.notHappyAtAll
	     @ (ParCore.HappyAbsSyn t341 t351 t361 t371 t381);
	   ParCore.ZdwHappyAbsSyn66 (happyzuvarzu2::AbsCore.Kind) ->
	     ParCore.ZdwHappyAbsSyn66 @ t341 @ t351 @ t361 @ t371 @ t381
	     happyzuvarzu2};
  ParCore.happyReductionzu96 :: %forall t34 t35 t36 t37 t38 t341 t351 t361 t371 t381 t342 t352 t362 t372 t382 . ParCore.HappyAbsSyn
														t34
														t35
														t36
														t37
														t38
														->
														ParCore.HappyAbsSyn
														t341
														t351
														t361
														t371
														t381
														->
														ParCore.HappyAbsSyn
														t342
														t352
														t362
														t372
														t382 =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ t341
      @ t351
      @ t361
      @ t371
      @ t381
      @ t342
      @ t352
      @ t362
      @ t372
      @ t382
      (ds::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
      (ds1::ParCore.HappyAbsSyn t341 t351 t361 t371 t381) ->
	%case ds %of (wild::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	  {%_ ->
	     ParCore.notHappyAtAll
	     @ (ParCore.HappyAbsSyn t342 t352 t362 t372 t382);
	   ParCore.ZdwHappyAbsSyn62 (happyzuvarzu2::AbsCore.Ty) ->
	     %case ds1 %of (wild1::ParCore.HappyAbsSyn t341 t351 t361 t371 t381)
	       {%_ ->
		  ParCore.notHappyAtAll
		  @ (ParCore.HappyAbsSyn t342 t352 t362 t372 t382);
		ParCore.ZdwHappyAbsSyn65
		(happyzuvarzu1::PrelBase.ZMZN AbsCore.Ty) ->
		  %let eta :: PrelBase.ZMZN AbsCore.Ty =
			 PrelBase.flip @ AbsCore.Ty @ (PrelBase.ZMZN AbsCore.Ty)
			 @ (PrelBase.ZMZN AbsCore.Ty)
			 (\ (eta1::AbsCore.Ty) (eta2::PrelBase.ZMZN AbsCore.Ty) ->
			      PrelBase.ZdwZC @ AbsCore.Ty eta1 eta2)
			 happyzuvarzu1 happyzuvarzu2
		  %in ParCore.ZdwHappyAbsSyn65 @ t342 @ t352 @ t362 @ t372 @ t382
		      eta}};
  ParCore.happyReductionzu94 :: %forall t34 t35 t36 t37 t38 t341 t351 t361 t371 t381 . ParCore.HappyAbsSyn
										       t34
										       t35
										       t36
										       t37
										       t38
										       ->
										       ParCore.HappyAbsSyn
										       t341
										       t351
										       t361
										       t371
										       t381 =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ t341
      @ t351
      @ t361
      @ t371
      @ t381
      (ds::ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	%case ds %of (wild::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	  {%_ ->
	     ParCore.notHappyAtAll
	     @ (ParCore.HappyAbsSyn t341 t351 t361 t371 t381);
	   ParCore.ZdwHappyAbsSyn62 (happyzuvarzu1::AbsCore.Ty) ->
	     ParCore.ZdwHappyAbsSyn62 @ t341 @ t351 @ t361 @ t371 @ t381
	     happyzuvarzu1};
  ParCore.happyReductionzu92 :: %forall t34 t35 t36 t37 t38 t t341 t351 t361 t371 t381 t342 t352 t362 t372 t382 . ParCore.HappyAbsSyn
														  t34
														  t35
														  t36
														  t37
														  t38
														  ->
														  t
														  ->
														  ParCore.HappyAbsSyn
														  t341
														  t351
														  t361
														  t371
														  t381
														  ->
														  ParCore.HappyAbsSyn
														  t342
														  t352
														  t362
														  t372
														  t382 =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ t
      @ t341
      @ t351
      @ t361
      @ t371
      @ t381
      @ t342
      @ t352
      @ t362
      @ t372
      @ t382
      (ds::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
      (ds1::t)
      (ds2::ParCore.HappyAbsSyn t341 t351 t361 t371 t381) ->
	%case ds %of (wild::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	  {%_ ->
	     ParCore.notHappyAtAll
	     @ (ParCore.HappyAbsSyn t342 t352 t362 t372 t382);
	   ParCore.ZdwHappyAbsSyn62 (happyzuvarzu3::AbsCore.Ty) ->
	     %case ds2 %of (wild1::ParCore.HappyAbsSyn t341 t351 t361 t371 t381)
	       {%_ ->
		  ParCore.notHappyAtAll
		  @ (ParCore.HappyAbsSyn t342 t352 t362 t372 t382);
		ParCore.ZdwHappyAbsSyn62 (happyzuvarzu1::AbsCore.Ty) ->
		  %let eta :: AbsCore.Ty =
			 AbsCore.ZdwTArrow happyzuvarzu1 happyzuvarzu3
		  %in ParCore.ZdwHappyAbsSyn62 @ t342 @ t352 @ t362 @ t372 @ t382
		      eta}};
  ParCore.happyReductionzu91 :: %forall t34 t35 t36 t37 t38 t341 t351 t361 t371 t381 . ParCore.HappyAbsSyn
										       t34
										       t35
										       t36
										       t37
										       t38
										       ->
										       ParCore.HappyAbsSyn
										       t341
										       t351
										       t361
										       t371
										       t381 =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ t341
      @ t351
      @ t361
      @ t371
      @ t381
      (ds::ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	%case ds %of (wild::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	  {%_ ->
	     ParCore.notHappyAtAll
	     @ (ParCore.HappyAbsSyn t341 t351 t361 t371 t381);
	   ParCore.ZdwHappyAbsSyn62 (happyzuvarzu1::AbsCore.Ty) ->
	     ParCore.ZdwHappyAbsSyn62 @ t341 @ t351 @ t361 @ t371 @ t381
	     happyzuvarzu1};
  ParCore.happyReductionzu90 :: %forall t34 t35 t36 t37 t38 t341 t351 t361 t371 t381 t342 t352 t362 t372 t382 . ParCore.HappyAbsSyn
														t34
														t35
														t36
														t37
														t38
														->
														ParCore.HappyAbsSyn
														t341
														t351
														t361
														t371
														t381
														->
														ParCore.HappyAbsSyn
														t342
														t352
														t362
														t372
														t382 =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ t341
      @ t351
      @ t361
      @ t371
      @ t381
      @ t342
      @ t352
      @ t362
      @ t372
      @ t382
      (ds::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
      (ds1::ParCore.HappyAbsSyn t341 t351 t361 t371 t381) ->
	%case ds %of (wild::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	  {%_ ->
	     ParCore.notHappyAtAll
	     @ (ParCore.HappyAbsSyn t342 t352 t362 t372 t382);
	   ParCore.ZdwHappyAbsSyn62 (happyzuvarzu2::AbsCore.Ty) ->
	     %case ds1 %of (wild1::ParCore.HappyAbsSyn t341 t351 t361 t371 t381)
	       {%_ ->
		  ParCore.notHappyAtAll
		  @ (ParCore.HappyAbsSyn t342 t352 t362 t372 t382);
		ParCore.ZdwHappyAbsSyn62 (happyzuvarzu1::AbsCore.Ty) ->
		  %let eta :: AbsCore.Ty =
			 AbsCore.ZdwTapp happyzuvarzu1 happyzuvarzu2
		  %in ParCore.ZdwHappyAbsSyn62 @ t342 @ t352 @ t362 @ t372 @ t382
		      eta}};
  ParCore.happyReductionzu89 :: %forall t t34 t35 t36 t37 t38 t1 t341 t351 t361 t371 t381 . t
											    ->
											    ParCore.HappyAbsSyn
											    t34
											    t35
											    t36
											    t37
											    t38
											    ->
											    t1 ->
											    ParCore.HappyAbsSyn
											    t341
											    t351
											    t361
											    t371
											    t381 =
    \ @ t
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ t1
      @ t341
      @ t351
      @ t361
      @ t371
      @ t381
      (ds::t)
      (ds1::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
      (ds2::t1) ->
	%case ds1 %of (wild::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	  {%_ ->
	     ParCore.notHappyAtAll
	     @ (ParCore.HappyAbsSyn t341 t351 t361 t371 t381);
	   ParCore.ZdwHappyAbsSyn62 (happyzuvarzu2::AbsCore.Ty) ->
	     ParCore.ZdwHappyAbsSyn62 @ t341 @ t351 @ t361 @ t371 @ t381
	     happyzuvarzu2};
  ParCore.happyReductionzu88 :: %forall t34 t35 t36 t37 t38 t341 t351 t361 t371 t381 . ParCore.HappyAbsSyn
										       t34
										       t35
										       t36
										       t37
										       t38
										       ->
										       ParCore.HappyAbsSyn
										       t341
										       t351
										       t361
										       t371
										       t381 =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ t341
      @ t351
      @ t361
      @ t371
      @ t381
      (ds::ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	%case ds %of (wild::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	  {%_ ->
	     ParCore.notHappyAtAll
	     @ (ParCore.HappyAbsSyn t341 t351 t361 t371 t381);
	   ParCore.ZdwHappyAbsSyn69 (happyzuvarzu1::AbsCore.QualIdent) ->
	     %let eta :: AbsCore.Ty = AbsCore.ZdwTcon happyzuvarzu1
	     %in ParCore.ZdwHappyAbsSyn62 @ t341 @ t351 @ t361 @ t371 @ t381
		 eta};
  ParCore.happyReductionzu87 :: %forall t35 t36 t37 t38 t34 t351 t361 t371 t381 . ParCore.HappyAbsSyn
										  (PrelBase.ZMZN
										   PrelBase.Char)
										  t35
										  t36
										  t37
										  t38
										  ->
										  ParCore.HappyAbsSyn
										  t34
										  t351
										  t361
										  t371
										  t381 =
    \ @ t35
      @ t36
      @ t37
      @ t38
      @ t34
      @ t351
      @ t361
      @ t371
      @ t381
      (ds::ParCore.HappyAbsSyn
	   (PrelBase.ZMZN PrelBase.Char)
	   t35
	   t36
	   t37
	   t38) ->
	%case ds
	%of (wild::ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   t35
		   t36
		   t37
		   t38)
	  {%_ ->
	     ParCore.notHappyAtAll
	     @ (ParCore.HappyAbsSyn t34 t351 t361 t371 t381);
	   ParCore.ZdwHappyAbsSyn34
	   (happyzuvarzu1::PrelBase.ZMZN PrelBase.Char) ->
	     %let eta :: AbsCore.Ty = AbsCore.ZdwTvar happyzuvarzu1
	     %in ParCore.ZdwHappyAbsSyn62 @ t34 @ t351 @ t361 @ t371 @ t381
		 eta};
  ParCore.happyReductionzu86 :: %forall t34 t35 t36 t37 t38 t341 t351 t361 t371 t381 t342 t352 t362 t372 t382 . ParCore.HappyAbsSyn
														t34
														t35
														t36
														t37
														t38
														->
														ParCore.HappyAbsSyn
														t341
														t351
														t361
														t371
														t381
														->
														ParCore.HappyAbsSyn
														t342
														t352
														t362
														t372
														t382 =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ t341
      @ t351
      @ t361
      @ t371
      @ t381
      @ t342
      @ t352
      @ t362
      @ t372
      @ t382
      (ds::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
      (ds1::ParCore.HappyAbsSyn t341 t351 t361 t371 t381) ->
	%case ds %of (wild::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	  {%_ ->
	     ParCore.notHappyAtAll
	     @ (ParCore.HappyAbsSyn t342 t352 t362 t372 t382);
	   ParCore.ZdwHappyAbsSyn60 (happyzuvarzu2::AbsCore.ATbind) ->
	     %case ds1 %of (wild1::ParCore.HappyAbsSyn t341 t351 t361 t371 t381)
	       {%_ ->
		  ParCore.notHappyAtAll
		  @ (ParCore.HappyAbsSyn t342 t352 t362 t372 t382);
		ParCore.ZdwHappyAbsSyn61
		(happyzuvarzu1::PrelBase.ZMZN AbsCore.ATbind) ->
		  %let eta :: PrelBase.ZMZN AbsCore.ATbind =
			 PrelBase.flip @ AbsCore.ATbind @ (PrelBase.ZMZN AbsCore.ATbind)
			 @ (PrelBase.ZMZN AbsCore.ATbind)
			 (\ (eta1::AbsCore.ATbind) (eta2::PrelBase.ZMZN AbsCore.ATbind) ->
			      PrelBase.ZdwZC @ AbsCore.ATbind eta1 eta2)
			 happyzuvarzu1 happyzuvarzu2
		  %in ParCore.ZdwHappyAbsSyn61 @ t342 @ t352 @ t362 @ t372 @ t382
		      eta}};
  ParCore.happyReductionzu84 :: %forall t34 t35 t36 t37 t38 t t341 t351 t361 t371 t381 . ParCore.HappyAbsSyn
											 t34
											 t35
											 t36
											 t37
											 t38
											 ->
											 t ->
											 ParCore.HappyAbsSyn
											 t341
											 t351
											 t361
											 t371
											 t381 =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ t
      @ t341
      @ t351
      @ t361
      @ t371
      @ t381
      (ds::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
      (ds1::t) ->
	%case ds %of (wild::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	  {%_ ->
	     ParCore.notHappyAtAll
	     @ (ParCore.HappyAbsSyn t341 t351 t361 t371 t381);
	   ParCore.ZdwHappyAbsSyn58 (happyzuvarzu2::AbsCore.Tbind) ->
	     %let eta :: AbsCore.ATbind = AbsCore.ZdwATbind happyzuvarzu2
	     %in ParCore.ZdwHappyAbsSyn60 @ t341 @ t351 @ t361 @ t371 @ t381
		 eta};
  ParCore.happyReductionzu83 :: %forall t34 t35 t36 t37 t38 t341 t351 t361 t371 t381 t342 t352 t362 t372 t382 . ParCore.HappyAbsSyn
														t34
														t35
														t36
														t37
														t38
														->
														ParCore.HappyAbsSyn
														t341
														t351
														t361
														t371
														t381
														->
														ParCore.HappyAbsSyn
														t342
														t352
														t362
														t372
														t382 =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ t341
      @ t351
      @ t361
      @ t371
      @ t381
      @ t342
      @ t352
      @ t362
      @ t372
      @ t382
      (ds::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
      (ds1::ParCore.HappyAbsSyn t341 t351 t361 t371 t381) ->
	%case ds %of (wild::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	  {%_ ->
	     ParCore.notHappyAtAll
	     @ (ParCore.HappyAbsSyn t342 t352 t362 t372 t382);
	   ParCore.ZdwHappyAbsSyn58 (happyzuvarzu2::AbsCore.Tbind) ->
	     %case ds1 %of (wild1::ParCore.HappyAbsSyn t341 t351 t361 t371 t381)
	       {%_ ->
		  ParCore.notHappyAtAll
		  @ (ParCore.HappyAbsSyn t342 t352 t362 t372 t382);
		ParCore.ZdwHappyAbsSyn59
		(happyzuvarzu1::PrelBase.ZMZN AbsCore.Tbind) ->
		  %let eta :: PrelBase.ZMZN AbsCore.Tbind =
			 PrelBase.flip @ AbsCore.Tbind @ (PrelBase.ZMZN AbsCore.Tbind)
			 @ (PrelBase.ZMZN AbsCore.Tbind)
			 (\ (eta1::AbsCore.Tbind) (eta2::PrelBase.ZMZN AbsCore.Tbind) ->
			      PrelBase.ZdwZC @ AbsCore.Tbind eta1 eta2)
			 happyzuvarzu1 happyzuvarzu2
		  %in ParCore.ZdwHappyAbsSyn59 @ t342 @ t352 @ t362 @ t372 @ t382
		      eta}};
  ParCore.happyReductionzu81 :: %forall t35 t36 t37 t38 t34 t351 t361 t371 t381 . ParCore.HappyAbsSyn
										  (PrelBase.ZMZN
										   PrelBase.Char)
										  t35
										  t36
										  t37
										  t38
										  ->
										  ParCore.HappyAbsSyn
										  t34
										  t351
										  t361
										  t371
										  t381 =
    \ @ t35
      @ t36
      @ t37
      @ t38
      @ t34
      @ t351
      @ t361
      @ t371
      @ t381
      (ds::ParCore.HappyAbsSyn
	   (PrelBase.ZMZN PrelBase.Char)
	   t35
	   t36
	   t37
	   t38) ->
	%case ds
	%of (wild::ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   t35
		   t36
		   t37
		   t38)
	  {%_ ->
	     ParCore.notHappyAtAll
	     @ (ParCore.HappyAbsSyn t34 t351 t361 t371 t381);
	   ParCore.ZdwHappyAbsSyn34
	   (happyzuvarzu1::PrelBase.ZMZN PrelBase.Char) ->
	     %let eta :: AbsCore.Tbind = AbsCore.ZdwTbindLift happyzuvarzu1
	     %in ParCore.ZdwHappyAbsSyn58 @ t34 @ t351 @ t361 @ t371 @ t381
		 eta};
  ParCore.happyReductionzu79 :: %forall t34 t35 t36 t37 t38 t341 t351 t361 t371 t381 t342 t352 t362 t372 t382 . ParCore.HappyAbsSyn
														t34
														t35
														t36
														t37
														t38
														->
														ParCore.HappyAbsSyn
														t341
														t351
														t361
														t371
														t381
														->
														ParCore.HappyAbsSyn
														t342
														t352
														t362
														t372
														t382 =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ t341
      @ t351
      @ t361
      @ t371
      @ t381
      @ t342
      @ t352
      @ t362
      @ t372
      @ t382
      (ds::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
      (ds1::ParCore.HappyAbsSyn t341 t351 t361 t371 t381) ->
	%case ds %of (wild::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	  {%_ ->
	     ParCore.notHappyAtAll
	     @ (ParCore.HappyAbsSyn t342 t352 t362 t372 t382);
	   ParCore.ZdwHappyAbsSyn56 (happyzuvarzu2::AbsCore.Vbind) ->
	     %case ds1 %of (wild1::ParCore.HappyAbsSyn t341 t351 t361 t371 t381)
	       {%_ ->
		  ParCore.notHappyAtAll
		  @ (ParCore.HappyAbsSyn t342 t352 t362 t372 t382);
		ParCore.ZdwHappyAbsSyn57
		(happyzuvarzu1::PrelBase.ZMZN AbsCore.Vbind) ->
		  %let eta :: PrelBase.ZMZN AbsCore.Vbind =
			 PrelBase.flip @ AbsCore.Vbind @ (PrelBase.ZMZN AbsCore.Vbind)
			 @ (PrelBase.ZMZN AbsCore.Vbind)
			 (\ (eta1::AbsCore.Vbind) (eta2::PrelBase.ZMZN AbsCore.Vbind) ->
			      PrelBase.ZdwZC @ AbsCore.Vbind eta1 eta2)
			 happyzuvarzu1 happyzuvarzu2
		  %in ParCore.ZdwHappyAbsSyn57 @ t342 @ t352 @ t362 @ t372 @ t382
		      eta}};
  ParCore.happyReductionzu76 :: %forall t34 t35 t36 t37 t38 t t341 t351 t361 t371 t381 t342 t352 t362 t372 t382 . ParCore.HappyAbsSyn
														  t34
														  t35
														  t36
														  t37
														  t38
														  ->
														  t
														  ->
														  ParCore.HappyAbsSyn
														  t341
														  t351
														  t361
														  t371
														  t381
														  ->
														  ParCore.HappyAbsSyn
														  t342
														  t352
														  t362
														  t372
														  t382 =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ t
      @ t341
      @ t351
      @ t361
      @ t371
      @ t381
      @ t342
      @ t352
      @ t362
      @ t372
      @ t382
      (ds::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
      (ds1::t)
      (ds2::ParCore.HappyAbsSyn t341 t351 t361 t371 t381) ->
	%case ds %of (wild::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	  {%_ ->
	     ParCore.notHappyAtAll
	     @ (ParCore.HappyAbsSyn t342 t352 t362 t372 t382);
	   ParCore.ZdwHappyAbsSyn55
	   (happyzuvarzu3::PrelBase.ZMZN AbsCore.Alt) ->
	     %case ds2 %of (wild1::ParCore.HappyAbsSyn t341 t351 t361 t371 t381)
	       {%_ ->
		  ParCore.notHappyAtAll
		  @ (ParCore.HappyAbsSyn t342 t352 t362 t372 t382);
		ParCore.ZdwHappyAbsSyn54 (happyzuvarzu1::AbsCore.Alt) ->
		  %let eta :: PrelBase.ZMZN AbsCore.Alt =
			 PrelBase.ZdwZC @ AbsCore.Alt happyzuvarzu1 happyzuvarzu3
		  %in ParCore.ZdwHappyAbsSyn55 @ t342 @ t352 @ t362 @ t372 @ t382
		      eta}};
  ParCore.happyReductionzu75 :: %forall t34 t35 t36 t37 t38 t341 t351 t361 t371 t381 . ParCore.HappyAbsSyn
										       t34
										       t35
										       t36
										       t37
										       t38
										       ->
										       ParCore.HappyAbsSyn
										       t341
										       t351
										       t361
										       t371
										       t381 =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ t341
      @ t351
      @ t361
      @ t371
      @ t381
      (ds::ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	%case ds %of (wild::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	  {%_ ->
	     ParCore.notHappyAtAll
	     @ (ParCore.HappyAbsSyn t341 t351 t361 t371 t381);
	   ParCore.ZdwHappyAbsSyn54 (happyzuvarzu1::AbsCore.Alt) ->
	     %let eta :: PrelBase.ZMZN AbsCore.Alt =
		    PrelBase.ZdwZC @ AbsCore.Alt happyzuvarzu1
		    (PrelBase.ZdwZMZN @ AbsCore.Alt)
	     %in ParCore.ZdwHappyAbsSyn55 @ t341 @ t351 @ t361 @ t371 @ t381
		 eta};
  ParCore.happyReductionzu74 :: %forall t34 t35 t36 t37 t38 t t1 t341 t351 t361 t371 t381 . ParCore.HappyAbsSyn
											    t34
											    t35
											    t36
											    t37
											    t38
											    ->
											    t ->
											    t1 ->
											    ParCore.HappyAbsSyn
											    t341
											    t351
											    t361
											    t371
											    t381 =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ t
      @ t1
      @ t341
      @ t351
      @ t361
      @ t371
      @ t381
      (ds::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
      (ds1::t)
      (ds2::t1) ->
	%case ds %of (wild::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	  {%_ ->
	     ParCore.notHappyAtAll
	     @ (ParCore.HappyAbsSyn t341 t351 t361 t371 t381);
	   ParCore.ZdwHappyAbsSyn49 (happyzuvarzu3::AbsCore.Exp) ->
	     %let eta :: AbsCore.Alt = AbsCore.ZdwAdefault happyzuvarzu3
	     %in ParCore.ZdwHappyAbsSyn54 @ t341 @ t351 @ t361 @ t371 @ t381
		 eta};
  ParCore.happyReductionzu73 :: %forall t34 t35 t36 t37 t38 t t341 t351 t361 t371 t381 t342 t352 t362 t372 t382 . ParCore.HappyAbsSyn
														  t34
														  t35
														  t36
														  t37
														  t38
														  ->
														  t
														  ->
														  ParCore.HappyAbsSyn
														  t341
														  t351
														  t361
														  t371
														  t381
														  ->
														  ParCore.HappyAbsSyn
														  t342
														  t352
														  t362
														  t372
														  t382 =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ t
      @ t341
      @ t351
      @ t361
      @ t371
      @ t381
      @ t342
      @ t352
      @ t362
      @ t372
      @ t382
      (ds::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
      (ds1::t)
      (ds2::ParCore.HappyAbsSyn t341 t351 t361 t371 t381) ->
	%case ds %of (wild::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	  {%_ ->
	     ParCore.notHappyAtAll
	     @ (ParCore.HappyAbsSyn t342 t352 t362 t372 t382);
	   ParCore.ZdwHappyAbsSyn49 (happyzuvarzu3::AbsCore.Exp) ->
	     %case ds2 %of (wild1::ParCore.HappyAbsSyn t341 t351 t361 t371 t381)
	       {%_ ->
		  ParCore.notHappyAtAll
		  @ (ParCore.HappyAbsSyn t342 t352 t362 t372 t382);
		ParCore.ZdwHappyAbsSyn68 (happyzuvarzu1::AbsCore.Lit) ->
		  %let eta :: AbsCore.Alt =
			 AbsCore.ZdwAlit happyzuvarzu1 happyzuvarzu3
		  %in ParCore.ZdwHappyAbsSyn54 @ t342 @ t352 @ t362 @ t372 @ t382
		      eta}};
  ParCore.happyReductionzu71 :: %forall t34 t35 t36 t37 t38 t341 t351 t361 t371 t381 t342 t352 t362 t372 t382 . ParCore.HappyAbsSyn
														t34
														t35
														t36
														t37
														t38
														->
														ParCore.HappyAbsSyn
														t341
														t351
														t361
														t371
														t381
														->
														ParCore.HappyAbsSyn
														t342
														t352
														t362
														t372
														t382 =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ t341
      @ t351
      @ t361
      @ t371
      @ t381
      @ t342
      @ t352
      @ t362
      @ t372
      @ t382
      (ds::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
      (ds1::ParCore.HappyAbsSyn t341 t351 t361 t371 t381) ->
	%case ds %of (wild::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	  {%_ ->
	     ParCore.notHappyAtAll
	     @ (ParCore.HappyAbsSyn t342 t352 t362 t372 t382);
	   ParCore.ZdwHappyAbsSyn53
	   (happyzuvarzu2::PrelBase.ZMZN AbsCore.Bind) ->
	     %case ds1 %of (wild1::ParCore.HappyAbsSyn t341 t351 t361 t371 t381)
	       {%_ ->
		  ParCore.notHappyAtAll
		  @ (ParCore.HappyAbsSyn t342 t352 t362 t372 t382);
		ParCore.ZdwHappyAbsSyn52 (happyzuvarzu1::AbsCore.Bind) ->
		  %let eta :: PrelBase.ZMZN AbsCore.Bind =
			 PrelBase.ZdwZC @ AbsCore.Bind happyzuvarzu1 happyzuvarzu2
		  %in ParCore.ZdwHappyAbsSyn53 @ t342 @ t352 @ t362 @ t372 @ t382
		      eta}};
  ParCore.happyReductionzu70 :: %forall t34 t35 t36 t37 t38 t341 t351 t361 t371 t381 . ParCore.HappyAbsSyn
										       t34
										       t35
										       t36
										       t37
										       t38
										       ->
										       ParCore.HappyAbsSyn
										       t341
										       t351
										       t361
										       t371
										       t381 =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ t341
      @ t351
      @ t361
      @ t371
      @ t381
      (ds::ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	%case ds %of (wild::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	  {%_ ->
	     ParCore.notHappyAtAll
	     @ (ParCore.HappyAbsSyn t341 t351 t361 t371 t381);
	   ParCore.ZdwHappyAbsSyn52 (happyzuvarzu1::AbsCore.Bind) ->
	     %let eta :: PrelBase.ZMZN AbsCore.Bind =
		    PrelBase.ZdwZC @ AbsCore.Bind happyzuvarzu1
		    (PrelBase.ZdwZMZN @ AbsCore.Bind)
	     %in ParCore.ZdwHappyAbsSyn53 @ t341 @ t351 @ t361 @ t371 @ t381
		 eta};
  ParCore.happyReductionzu69 :: %forall t34 t35 t36 t37 t38 t t341 t351 t361 t371 t381 . ParCore.HappyAbsSyn
											 t34
											 t35
											 t36
											 t37
											 t38
											 ->
											 t ->
											 ParCore.HappyAbsSyn
											 t341
											 t351
											 t361
											 t371
											 t381 =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ t
      @ t341
      @ t351
      @ t361
      @ t371
      @ t381
      (ds::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
      (ds1::t) ->
	%case ds %of (wild::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	  {%_ ->
	     ParCore.notHappyAtAll
	     @ (ParCore.HappyAbsSyn t341 t351 t361 t371 t381);
	   ParCore.ZdwHappyAbsSyn58 (happyzuvarzu2::AbsCore.Tbind) ->
	     %let eta :: AbsCore.Bind = AbsCore.ZdwTb happyzuvarzu2
	     %in ParCore.ZdwHappyAbsSyn52 @ t341 @ t351 @ t361 @ t371 @ t381
		 eta};
  ParCore.happyReductionzu68 :: %forall t34 t35 t36 t37 t38 t341 t351 t361 t371 t381 . ParCore.HappyAbsSyn
										       t34
										       t35
										       t36
										       t37
										       t38
										       ->
										       ParCore.HappyAbsSyn
										       t341
										       t351
										       t361
										       t371
										       t381 =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ t341
      @ t351
      @ t361
      @ t371
      @ t381
      (ds::ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	%case ds %of (wild::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	  {%_ ->
	     ParCore.notHappyAtAll
	     @ (ParCore.HappyAbsSyn t341 t351 t361 t371 t381);
	   ParCore.ZdwHappyAbsSyn56 (happyzuvarzu1::AbsCore.Vbind) ->
	     %let eta :: AbsCore.Bind = AbsCore.ZdwVb happyzuvarzu1
	     %in ParCore.ZdwHappyAbsSyn52 @ t341 @ t351 @ t361 @ t371 @ t381
		 eta};
  ParCore.happyReductionzu67 :: %forall t34 t35 t36 t37 t38 t341 t351 t361 t371 t381 . ParCore.HappyAbsSyn
										       t34
										       t35
										       t36
										       t37
										       t38
										       ->
										       ParCore.HappyAbsSyn
										       t341
										       t351
										       t361
										       t371
										       t381 =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ t341
      @ t351
      @ t361
      @ t371
      @ t381
      (ds::ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	%case ds %of (wild::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	  {%_ ->
	     ParCore.notHappyAtAll
	     @ (ParCore.HappyAbsSyn t341 t351 t361 t371 t381);
	   ParCore.ZdwHappyAbsSyn49 (happyzuvarzu1::AbsCore.Exp) ->
	     ParCore.ZdwHappyAbsSyn49 @ t341 @ t351 @ t361 @ t371 @ t381
	     happyzuvarzu1};
  ParCore.happyReductionzu66 :: %forall t34 t35 t36 t37 t38 t341 t361 t371 t381 t t342 t351 t362 t372 t382 . ParCore.HappyAbsSyn
													     t34
													     t35
													     t36
													     t37
													     t38
													     ->
													     ParCore.HappyAbsSyn
													     t341
													     (PrelBase.ZMZN
													      PrelBase.Char)
													     t361
													     t371
													     t381
													     ->
													     t
													     ->
													     ParCore.HappyAbsSyn
													     t342
													     t351
													     t362
													     t372
													     t382 =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ t341
      @ t361
      @ t371
      @ t381
      @ t
      @ t342
      @ t351
      @ t362
      @ t372
      @ t382
      (ds::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
      (ds1::ParCore.HappyAbsSyn
	    t341
	    (PrelBase.ZMZN PrelBase.Char)
	    t361
	    t371
	    t381)
      (ds2::t) ->
	%case ds %of (wild::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	  {%_ ->
	     ParCore.notHappyAtAll
	     @ (ParCore.HappyAbsSyn t342 t351 t362 t372 t382);
	   ParCore.ZdwHappyAbsSyn62 (happyzuvarzu3::AbsCore.Ty) ->
	     %case ds1
	     %of (wild1::ParCore.HappyAbsSyn
			 t341
			 (PrelBase.ZMZN PrelBase.Char)
			 t361
			 t371
			 t381)
	       {%_ ->
		  ParCore.notHappyAtAll
		  @ (ParCore.HappyAbsSyn t342 t351 t362 t372 t382);
		ParCore.ZdwHappyAbsSyn35
		(happyzuvarzu2::PrelBase.ZMZN PrelBase.Char) ->
		  %let eta :: AbsCore.Exp =
			 AbsCore.ZdwExternal happyzuvarzu2 happyzuvarzu3
		  %in ParCore.ZdwHappyAbsSyn49 @ t342 @ t351 @ t362 @ t372 @ t382
		      eta}};
  ParCore.happyReductionzu65 :: %forall t34 t35 t36 t37 t38 t341 t361 t371 t381 t t342 t351 t362 t372 t382 . ParCore.HappyAbsSyn
													     t34
													     t35
													     t36
													     t37
													     t38
													     ->
													     ParCore.HappyAbsSyn
													     t341
													     (PrelBase.ZMZN
													      PrelBase.Char)
													     t361
													     t371
													     t381
													     ->
													     t
													     ->
													     ParCore.HappyAbsSyn
													     t342
													     t351
													     t362
													     t372
													     t382 =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ t341
      @ t361
      @ t371
      @ t381
      @ t
      @ t342
      @ t351
      @ t362
      @ t372
      @ t382
      (ds::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
      (ds1::ParCore.HappyAbsSyn
	    t341
	    (PrelBase.ZMZN PrelBase.Char)
	    t361
	    t371
	    t381)
      (ds2::t) ->
	%case ds %of (wild::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	  {%_ ->
	     ParCore.notHappyAtAll
	     @ (ParCore.HappyAbsSyn t342 t351 t362 t372 t382);
	   ParCore.ZdwHappyAbsSyn49 (happyzuvarzu3::AbsCore.Exp) ->
	     %case ds1
	     %of (wild1::ParCore.HappyAbsSyn
			 t341
			 (PrelBase.ZMZN PrelBase.Char)
			 t361
			 t371
			 t381)
	       {%_ ->
		  ParCore.notHappyAtAll
		  @ (ParCore.HappyAbsSyn t342 t351 t362 t372 t382);
		ParCore.ZdwHappyAbsSyn35
		(happyzuvarzu2::PrelBase.ZMZN PrelBase.Char) ->
		  %let eta :: AbsCore.Exp =
			 AbsCore.ZdwNote happyzuvarzu2 happyzuvarzu3
		  %in ParCore.ZdwHappyAbsSyn49 @ t342 @ t351 @ t362 @ t372 @ t382
		      eta}};
  ParCore.happyReductionzu64 :: %forall t34 t35 t36 t37 t38 t341 t351 t361 t371 t381 t t342 t352 t362 t372 t382 . ParCore.HappyAbsSyn
														  t34
														  t35
														  t36
														  t37
														  t38
														  ->
														  ParCore.HappyAbsSyn
														  t341
														  t351
														  t361
														  t371
														  t381
														  ->
														  t
														  ->
														  ParCore.HappyAbsSyn
														  t342
														  t352
														  t362
														  t372
														  t382 =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ t341
      @ t351
      @ t361
      @ t371
      @ t381
      @ t
      @ t342
      @ t352
      @ t362
      @ t372
      @ t382
      (ds::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
      (ds1::ParCore.HappyAbsSyn t341 t351 t361 t371 t381)
      (ds2::t) ->
	%case ds %of (wild::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	  {%_ ->
	     ParCore.notHappyAtAll
	     @ (ParCore.HappyAbsSyn t342 t352 t362 t372 t382);
	   ParCore.ZdwHappyAbsSyn49 (happyzuvarzu3::AbsCore.Exp) ->
	     %case ds1 %of (wild1::ParCore.HappyAbsSyn t341 t351 t361 t371 t381)
	       {%_ ->
		  ParCore.notHappyAtAll
		  @ (ParCore.HappyAbsSyn t342 t352 t362 t372 t382);
		ParCore.ZdwHappyAbsSyn62 (happyzuvarzu2::AbsCore.Ty) ->
		  %let eta :: AbsCore.Exp =
			 AbsCore.ZdwCoerce happyzuvarzu2 happyzuvarzu3
		  %in ParCore.ZdwHappyAbsSyn49 @ t342 @ t352 @ t362 @ t372 @ t382
		      eta}};
  ParCore.happyReductionzu60 :: %forall t34 t35 t36 t37 t38 t341 t351 t361 t371 t381 . ParCore.HappyAbsSyn
										       t34
										       t35
										       t36
										       t37
										       t38
										       ->
										       ParCore.HappyAbsSyn
										       t341
										       t351
										       t361
										       t371
										       t381 =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ t341
      @ t351
      @ t361
      @ t371
      @ t381
      (ds::ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	%case ds %of (wild::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	  {%_ ->
	     ParCore.notHappyAtAll
	     @ (ParCore.HappyAbsSyn t341 t351 t361 t371 t381);
	   ParCore.ZdwHappyAbsSyn49 (happyzuvarzu1::AbsCore.Exp) ->
	     ParCore.ZdwHappyAbsSyn49 @ t341 @ t351 @ t361 @ t371 @ t381
	     happyzuvarzu1};
  ParCore.happyReductionzu59 :: %forall t34 t35 t36 t37 t38 t t341 t351 t361 t371 t381 t342 t352 t362 t372 t382 . ParCore.HappyAbsSyn
														  t34
														  t35
														  t36
														  t37
														  t38
														  ->
														  t
														  ->
														  ParCore.HappyAbsSyn
														  t341
														  t351
														  t361
														  t371
														  t381
														  ->
														  ParCore.HappyAbsSyn
														  t342
														  t352
														  t362
														  t372
														  t382 =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ t
      @ t341
      @ t351
      @ t361
      @ t371
      @ t381
      @ t342
      @ t352
      @ t362
      @ t372
      @ t382
      (ds::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
      (ds1::t)
      (ds2::ParCore.HappyAbsSyn t341 t351 t361 t371 t381) ->
	%case ds %of (wild::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	  {%_ ->
	     ParCore.notHappyAtAll
	     @ (ParCore.HappyAbsSyn t342 t352 t362 t372 t382);
	   ParCore.ZdwHappyAbsSyn62 (happyzuvarzu3::AbsCore.Ty) ->
	     %case ds2 %of (wild1::ParCore.HappyAbsSyn t341 t351 t361 t371 t381)
	       {%_ ->
		  ParCore.notHappyAtAll
		  @ (ParCore.HappyAbsSyn t342 t352 t362 t372 t382);
		ParCore.ZdwHappyAbsSyn49 (happyzuvarzu1::AbsCore.Exp) ->
		  %let eta :: AbsCore.Exp =
			 AbsCore.ZdwAppt happyzuvarzu1 happyzuvarzu3
		  %in ParCore.ZdwHappyAbsSyn49 @ t342 @ t352 @ t362 @ t372 @ t382
		      eta}};
  ParCore.happyReductionzu58 :: %forall t34 t35 t36 t37 t38 t341 t351 t361 t371 t381 t342 t352 t362 t372 t382 . ParCore.HappyAbsSyn
														t34
														t35
														t36
														t37
														t38
														->
														ParCore.HappyAbsSyn
														t341
														t351
														t361
														t371
														t381
														->
														ParCore.HappyAbsSyn
														t342
														t352
														t362
														t372
														t382 =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ t341
      @ t351
      @ t361
      @ t371
      @ t381
      @ t342
      @ t352
      @ t362
      @ t372
      @ t382
      (ds::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
      (ds1::ParCore.HappyAbsSyn t341 t351 t361 t371 t381) ->
	%case ds %of (wild::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	  {%_ ->
	     ParCore.notHappyAtAll
	     @ (ParCore.HappyAbsSyn t342 t352 t362 t372 t382);
	   ParCore.ZdwHappyAbsSyn49 (happyzuvarzu2::AbsCore.Exp) ->
	     %case ds1 %of (wild1::ParCore.HappyAbsSyn t341 t351 t361 t371 t381)
	       {%_ ->
		  ParCore.notHappyAtAll
		  @ (ParCore.HappyAbsSyn t342 t352 t362 t372 t382);
		ParCore.ZdwHappyAbsSyn49 (happyzuvarzu1::AbsCore.Exp) ->
		  %let eta :: AbsCore.Exp =
			 AbsCore.ZdwApp happyzuvarzu1 happyzuvarzu2
		  %in ParCore.ZdwHappyAbsSyn49 @ t342 @ t352 @ t362 @ t372 @ t382
		      eta}};
  ParCore.happyReductionzu57 :: %forall t t34 t35 t36 t37 t38 t1 t341 t351 t361 t371 t381 . t
											    ->
											    ParCore.HappyAbsSyn
											    t34
											    t35
											    t36
											    t37
											    t38
											    ->
											    t1 ->
											    ParCore.HappyAbsSyn
											    t341
											    t351
											    t361
											    t371
											    t381 =
    \ @ t
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ t1
      @ t341
      @ t351
      @ t361
      @ t371
      @ t381
      (ds::t)
      (ds1::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
      (ds2::t1) ->
	%case ds1 %of (wild::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	  {%_ ->
	     ParCore.notHappyAtAll
	     @ (ParCore.HappyAbsSyn t341 t351 t361 t371 t381);
	   ParCore.ZdwHappyAbsSyn49 (happyzuvarzu2::AbsCore.Exp) ->
	     ParCore.ZdwHappyAbsSyn49 @ t341 @ t351 @ t361 @ t371 @ t381
	     happyzuvarzu2};
  ParCore.happyReductionzu56 :: %forall t34 t35 t36 t37 t38 t341 t351 t361 t371 t381 . ParCore.HappyAbsSyn
										       t34
										       t35
										       t36
										       t37
										       t38
										       ->
										       ParCore.HappyAbsSyn
										       t341
										       t351
										       t361
										       t371
										       t381 =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ t341
      @ t351
      @ t361
      @ t371
      @ t381
      (ds::ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	%case ds %of (wild::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	  {%_ ->
	     ParCore.notHappyAtAll
	     @ (ParCore.HappyAbsSyn t341 t351 t361 t371 t381);
	   ParCore.ZdwHappyAbsSyn68 (happyzuvarzu1::AbsCore.Lit) ->
	     %let eta :: AbsCore.Exp = AbsCore.ZdwLit happyzuvarzu1
	     %in ParCore.ZdwHappyAbsSyn49 @ t341 @ t351 @ t361 @ t371 @ t381
		 eta};
  ParCore.happyReductionzu55 :: %forall t34 t35 t36 t37 t38 t341 t351 t361 t371 t381 . ParCore.HappyAbsSyn
										       t34
										       t35
										       t36
										       t37
										       t38
										       ->
										       ParCore.HappyAbsSyn
										       t341
										       t351
										       t361
										       t371
										       t381 =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ t341
      @ t351
      @ t361
      @ t371
      @ t381
      (ds::ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	%case ds %of (wild::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	  {%_ ->
	     ParCore.notHappyAtAll
	     @ (ParCore.HappyAbsSyn t341 t351 t361 t371 t381);
	   ParCore.ZdwHappyAbsSyn69 (happyzuvarzu1::AbsCore.QualIdent) ->
	     %let eta :: AbsCore.Exp = AbsCore.ZdwDcon happyzuvarzu1
	     %in ParCore.ZdwHappyAbsSyn49 @ t341 @ t351 @ t361 @ t371 @ t381
		 eta};
  ParCore.happyReductionzu54 :: %forall t35 t36 t37 t38 t34 t351 t361 t371 t381 . ParCore.HappyAbsSyn
										  (PrelBase.ZMZN
										   PrelBase.Char)
										  t35
										  t36
										  t37
										  t38
										  ->
										  ParCore.HappyAbsSyn
										  t34
										  t351
										  t361
										  t371
										  t381 =
    \ @ t35
      @ t36
      @ t37
      @ t38
      @ t34
      @ t351
      @ t361
      @ t371
      @ t381
      (ds::ParCore.HappyAbsSyn
	   (PrelBase.ZMZN PrelBase.Char)
	   t35
	   t36
	   t37
	   t38) ->
	%case ds
	%of (wild::ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   t35
		   t36
		   t37
		   t38)
	  {%_ ->
	     ParCore.notHappyAtAll
	     @ (ParCore.HappyAbsSyn t34 t351 t361 t371 t381);
	   ParCore.ZdwHappyAbsSyn34
	   (happyzuvarzu1::PrelBase.ZMZN PrelBase.Char) ->
	     %let eta :: AbsCore.Exp = AbsCore.ZdwVar happyzuvarzu1
	     %in ParCore.ZdwHappyAbsSyn49 @ t34 @ t351 @ t361 @ t371 @ t381
		 eta};
  ParCore.happyReductionzu53 :: %forall t34 t35 t36 t37 t38 t t341 t351 t361 t371 t381 t342 t352 t362 t372 t382 . ParCore.HappyAbsSyn
														  t34
														  t35
														  t36
														  t37
														  t38
														  ->
														  t
														  ->
														  ParCore.HappyAbsSyn
														  t341
														  t351
														  t361
														  t371
														  t381
														  ->
														  ParCore.HappyAbsSyn
														  t342
														  t352
														  t362
														  t372
														  t382 =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ t
      @ t341
      @ t351
      @ t361
      @ t371
      @ t381
      @ t342
      @ t352
      @ t362
      @ t372
      @ t382
      (ds::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
      (ds1::t)
      (ds2::ParCore.HappyAbsSyn t341 t351 t361 t371 t381) ->
	%case ds %of (wild::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	  {%_ ->
	     ParCore.notHappyAtAll
	     @ (ParCore.HappyAbsSyn t342 t352 t362 t372 t382);
	   ParCore.ZdwHappyAbsSyn48
	   (happyzuvarzu3::PrelBase.ZMZN AbsCore.Vdef) ->
	     %case ds2 %of (wild1::ParCore.HappyAbsSyn t341 t351 t361 t371 t381)
	       {%_ ->
		  ParCore.notHappyAtAll
		  @ (ParCore.HappyAbsSyn t342 t352 t362 t372 t382);
		ParCore.ZdwHappyAbsSyn47 (happyzuvarzu1::AbsCore.Vdef) ->
		  %let eta :: PrelBase.ZMZN AbsCore.Vdef =
			 PrelBase.ZdwZC @ AbsCore.Vdef happyzuvarzu1 happyzuvarzu3
		  %in ParCore.ZdwHappyAbsSyn48 @ t342 @ t352 @ t362 @ t372 @ t382
		      eta}};
  ParCore.happyReductionzu52 :: %forall t34 t35 t36 t37 t38 t341 t351 t361 t371 t381 . ParCore.HappyAbsSyn
										       t34
										       t35
										       t36
										       t37
										       t38
										       ->
										       ParCore.HappyAbsSyn
										       t341
										       t351
										       t361
										       t371
										       t381 =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ t341
      @ t351
      @ t361
      @ t371
      @ t381
      (ds::ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	%case ds %of (wild::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	  {%_ ->
	     ParCore.notHappyAtAll
	     @ (ParCore.HappyAbsSyn t341 t351 t361 t371 t381);
	   ParCore.ZdwHappyAbsSyn47 (happyzuvarzu1::AbsCore.Vdef) ->
	     %let eta :: PrelBase.ZMZN AbsCore.Vdef =
		    PrelBase.ZdwZC @ AbsCore.Vdef happyzuvarzu1
		    (PrelBase.ZdwZMZN @ AbsCore.Vdef)
	     %in ParCore.ZdwHappyAbsSyn48 @ t341 @ t351 @ t361 @ t371 @ t381
		 eta};
  ParCore.happyReductionzu49 :: %forall t t34 t35 t36 t37 t38 t341 t351 t361 t371 t381 t342 t352 t362 t372 t382 . t
														  ->
														  ParCore.HappyAbsSyn
														  t34
														  t35
														  t36
														  t37
														  t38
														  ->
														  ParCore.HappyAbsSyn
														  t341
														  t351
														  t361
														  t371
														  t381
														  ->
														  ParCore.HappyAbsSyn
														  t342
														  t352
														  t362
														  t372
														  t382 =
    \ @ t
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ t341
      @ t351
      @ t361
      @ t371
      @ t381
      @ t342
      @ t352
      @ t362
      @ t372
      @ t382
      (ds::t)
      (ds1::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
      (ds2::ParCore.HappyAbsSyn t341 t351 t361 t371 t381) ->
	%case ds1 %of (wild::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	  {%_ ->
	     ParCore.notHappyAtAll
	     @ (ParCore.HappyAbsSyn t342 t352 t362 t372 t382);
	   ParCore.ZdwHappyAbsSyn45 (happyzuvarzu2::AbsCore.Vdefg) ->
	     %case ds2 %of (wild1::ParCore.HappyAbsSyn t341 t351 t361 t371 t381)
	       {%_ ->
		  ParCore.notHappyAtAll
		  @ (ParCore.HappyAbsSyn t342 t352 t362 t372 t382);
		ParCore.ZdwHappyAbsSyn46
		(happyzuvarzu1::PrelBase.ZMZN AbsCore.Vdefg) ->
		  %let eta :: PrelBase.ZMZN AbsCore.Vdefg =
			 PrelBase.flip @ AbsCore.Vdefg @ (PrelBase.ZMZN AbsCore.Vdefg)
			 @ (PrelBase.ZMZN AbsCore.Vdefg)
			 (\ (eta1::AbsCore.Vdefg) (eta2::PrelBase.ZMZN AbsCore.Vdefg) ->
			      PrelBase.ZdwZC @ AbsCore.Vdefg eta1 eta2)
			 happyzuvarzu1 happyzuvarzu2
		  %in ParCore.ZdwHappyAbsSyn46 @ t342 @ t352 @ t362 @ t372 @ t382
		      eta}};
  ParCore.happyReductionzu47 :: %forall t34 t35 t36 t37 t38 t341 t351 t361 t371 t381 . ParCore.HappyAbsSyn
										       t34
										       t35
										       t36
										       t37
										       t38
										       ->
										       ParCore.HappyAbsSyn
										       t341
										       t351
										       t361
										       t371
										       t381 =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ t341
      @ t351
      @ t361
      @ t371
      @ t381
      (ds::ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	%case ds %of (wild::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	  {%_ ->
	     ParCore.notHappyAtAll
	     @ (ParCore.HappyAbsSyn t341 t351 t361 t371 t381);
	   ParCore.ZdwHappyAbsSyn47 (happyzuvarzu1::AbsCore.Vdef) ->
	     %let eta :: AbsCore.Vdefg = AbsCore.ZdwNonrec happyzuvarzu1
	     %in ParCore.ZdwHappyAbsSyn45 @ t341 @ t351 @ t361 @ t371 @ t381
		 eta};
  ParCore.happyReductionzu45 :: %forall t34 t35 t36 t37 t38 t t341 t351 t361 t371 t381 t342 t352 t362 t372 t382 . ParCore.HappyAbsSyn
														  t34
														  t35
														  t36
														  t37
														  t38
														  ->
														  t
														  ->
														  ParCore.HappyAbsSyn
														  t341
														  t351
														  t361
														  t371
														  t381
														  ->
														  ParCore.HappyAbsSyn
														  t342
														  t352
														  t362
														  t372
														  t382 =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ t
      @ t341
      @ t351
      @ t361
      @ t371
      @ t381
      @ t342
      @ t352
      @ t362
      @ t372
      @ t382
      (ds::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
      (ds1::t)
      (ds2::ParCore.HappyAbsSyn t341 t351 t361 t371 t381) ->
	%case ds %of (wild::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	  {%_ ->
	     ParCore.notHappyAtAll
	     @ (ParCore.HappyAbsSyn t342 t352 t362 t372 t382);
	   ParCore.ZdwHappyAbsSyn44
	   (happyzuvarzu3::PrelBase.ZMZN AbsCore.Cdef) ->
	     %case ds2 %of (wild1::ParCore.HappyAbsSyn t341 t351 t361 t371 t381)
	       {%_ ->
		  ParCore.notHappyAtAll
		  @ (ParCore.HappyAbsSyn t342 t352 t362 t372 t382);
		ParCore.ZdwHappyAbsSyn43 (happyzuvarzu1::AbsCore.Cdef) ->
		  %let eta :: PrelBase.ZMZN AbsCore.Cdef =
			 PrelBase.ZdwZC @ AbsCore.Cdef happyzuvarzu1 happyzuvarzu3
		  %in ParCore.ZdwHappyAbsSyn44 @ t342 @ t352 @ t362 @ t372 @ t382
		      eta}};
  ParCore.happyReductionzu44 :: %forall t34 t35 t36 t37 t38 t341 t351 t361 t371 t381 . ParCore.HappyAbsSyn
										       t34
										       t35
										       t36
										       t37
										       t38
										       ->
										       ParCore.HappyAbsSyn
										       t341
										       t351
										       t361
										       t371
										       t381 =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ t341
      @ t351
      @ t361
      @ t371
      @ t381
      (ds::ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	%case ds %of (wild::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	  {%_ ->
	     ParCore.notHappyAtAll
	     @ (ParCore.HappyAbsSyn t341 t351 t361 t371 t381);
	   ParCore.ZdwHappyAbsSyn43 (happyzuvarzu1::AbsCore.Cdef) ->
	     %let eta :: PrelBase.ZMZN AbsCore.Cdef =
		    PrelBase.ZdwZC @ AbsCore.Cdef happyzuvarzu1
		    (PrelBase.ZdwZMZN @ AbsCore.Cdef)
	     %in ParCore.ZdwHappyAbsSyn44 @ t341 @ t351 @ t361 @ t371 @ t381
		 eta};
  ParCore.happyReductionzu43 :: %forall t34 t35 t36 t37 t38 t341 t351 t361 t371 t381 t342 t352 t362 t372 t382 t343 t353 t363 t373 t383 . ParCore.HappyAbsSyn
																	 t34
																	 t35
																	 t36
																	 t37
																	 t38
																	 ->
																	 ParCore.HappyAbsSyn
																	 t341
																	 t351
																	 t361
																	 t371
																	 t381
																	 ->
																	 ParCore.HappyAbsSyn
																	 t342
																	 t352
																	 t362
																	 t372
																	 t382
																	 ->
																	 ParCore.HappyAbsSyn
																	 t343
																	 t353
																	 t363
																	 t373
																	 t383 =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ t341
      @ t351
      @ t361
      @ t371
      @ t381
      @ t342
      @ t352
      @ t362
      @ t372
      @ t382
      @ t343
      @ t353
      @ t363
      @ t373
      @ t383
      (ds::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
      (ds1::ParCore.HappyAbsSyn t341 t351 t361 t371 t381)
      (ds2::ParCore.HappyAbsSyn t342 t352 t362 t372 t382) ->
	%case ds %of (wild::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	  {%_ ->
	     ParCore.notHappyAtAll
	     @ (ParCore.HappyAbsSyn t343 t353 t363 t373 t383);
	   ParCore.ZdwHappyAbsSyn65
	   (happyzuvarzu3::PrelBase.ZMZN AbsCore.Ty) ->
	     %case ds1 %of (wild1::ParCore.HappyAbsSyn t341 t351 t361 t371 t381)
	       {%_ ->
		  ParCore.notHappyAtAll
		  @ (ParCore.HappyAbsSyn t343 t353 t363 t373 t383);
		ParCore.ZdwHappyAbsSyn61
		(happyzuvarzu2::PrelBase.ZMZN AbsCore.ATbind) ->
		  %case ds2 %of (wild2::ParCore.HappyAbsSyn t342 t352 t362 t372 t382)
		    {%_ ->
		       ParCore.notHappyAtAll
		       @ (ParCore.HappyAbsSyn t343 t353 t363 t373 t383);
		     ParCore.ZdwHappyAbsSyn69 (happyzuvarzu1::AbsCore.QualIdent) ->
		       %let a :: PrelBase.ZMZN AbsCore.ATbind =
			      PrelList.reverse @ AbsCore.ATbind happyzuvarzu2
		       %in %let a1 :: PrelBase.ZMZN AbsCore.Ty =
				  PrelList.reverse @ AbsCore.Ty happyzuvarzu3
			   %in %let eta :: AbsCore.Cdef = AbsCore.ZdwConstr happyzuvarzu1 a a1
			       %in ParCore.ZdwHappyAbsSyn43 @ t343 @ t353 @ t363 @ t373 @ t383
				   eta}}};
  ParCore.happyReductionzu41 :: %forall t34 t35 t36 t37 t38 t t341 t351 t361 t371 t381 . ParCore.HappyAbsSyn
											 t34
											 t35
											 t36
											 t37
											 t38
											 ->
											 t ->
											 ParCore.HappyAbsSyn
											 t341
											 t351
											 t361
											 t371
											 t381 =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ t
      @ t341
      @ t351
      @ t361
      @ t371
      @ t381
      (ds::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
      (ds1::t) ->
	%case ds %of (wild::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	  {%_ ->
	     ParCore.notHappyAtAll
	     @ (ParCore.HappyAbsSyn t341 t351 t361 t371 t381);
	   ParCore.ZdwHappyAbsSyn62 (happyzuvarzu2::AbsCore.Ty) ->
	     %let eta :: AbsCore.MaybeTy = AbsCore.ZdwJustTy happyzuvarzu2
	     %in ParCore.ZdwHappyAbsSyn42 @ t341 @ t351 @ t361 @ t371 @ t381
		 eta};
  ParCore.happyReductionzu38 :: %forall t t34 t35 t36 t37 t38 t341 t351 t361 t371 t381 t342 t352 t362 t372 t382 . t
														  ->
														  ParCore.HappyAbsSyn
														  t34
														  t35
														  t36
														  t37
														  t38
														  ->
														  ParCore.HappyAbsSyn
														  t341
														  t351
														  t361
														  t371
														  t381
														  ->
														  ParCore.HappyAbsSyn
														  t342
														  t352
														  t362
														  t372
														  t382 =
    \ @ t
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ t341
      @ t351
      @ t361
      @ t371
      @ t381
      @ t342
      @ t352
      @ t362
      @ t372
      @ t382
      (ds::t)
      (ds1::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
      (ds2::ParCore.HappyAbsSyn t341 t351 t361 t371 t381) ->
	%case ds1 %of (wild::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	  {%_ ->
	     ParCore.notHappyAtAll
	     @ (ParCore.HappyAbsSyn t342 t352 t362 t372 t382);
	   ParCore.ZdwHappyAbsSyn41 (happyzuvarzu2::AbsCore.Tdef) ->
	     %case ds2 %of (wild1::ParCore.HappyAbsSyn t341 t351 t361 t371 t381)
	       {%_ ->
		  ParCore.notHappyAtAll
		  @ (ParCore.HappyAbsSyn t342 t352 t362 t372 t382);
		ParCore.ZdwHappyAbsSyn40
		(happyzuvarzu1::PrelBase.ZMZN AbsCore.Tdef) ->
		  %let eta :: PrelBase.ZMZN AbsCore.Tdef =
			 PrelBase.flip @ AbsCore.Tdef @ (PrelBase.ZMZN AbsCore.Tdef)
			 @ (PrelBase.ZMZN AbsCore.Tdef)
			 (\ (eta1::AbsCore.Tdef) (eta2::PrelBase.ZMZN AbsCore.Tdef) ->
			      PrelBase.ZdwZC @ AbsCore.Tdef eta1 eta2)
			 happyzuvarzu1 happyzuvarzu2
		  %in ParCore.ZdwHappyAbsSyn40 @ t342 @ t352 @ t362 @ t372 @ t382
		      eta}};
  ParCore.happyReductionzu32 :: %forall t34 t35 t36 t37 t38 t341 t361 t371 t381 . ParCore.HappyAbsSyn
										  t34
										  t35
										  t36
										  t37
										  t38
										  ->
										  ParCore.HappyAbsSyn
										  t341
										  (PrelBase.ZMZN
										   PrelBase.Char)
										  t361
										  t371
										  t381 =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ t341
      @ t361
      @ t371
      @ t381
      (ds::ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	%case ds %of (wild::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	  {%_ ->
	     ParCore.notHappyAtAll
	     @ (ParCore.HappyAbsSyn
		t341
		(PrelBase.ZMZN PrelBase.Char)
		t361
		t371
		t381);
	   ParCore.ZdwHappyTerminal (ds1::LexCore.Token) ->
	     %case ds1 %of (wild1::LexCore.Token)
	       {LexCore.ZdwErr (a::Alex.Posn) ->
		  ParCore.notHappyAtAll
		  @ (ParCore.HappyAbsSyn
		     t341
		     (PrelBase.ZMZN PrelBase.Char)
		     t361
		     t371
		     t381);
		LexCore.ZdwPT (ds2::Alex.Posn) (ds3::LexCore.Tok) ->
		  %case ds3 %of (wild2::LexCore.Tok)
		    {%_ ->
		       ParCore.notHappyAtAll
		       @ (ParCore.HappyAbsSyn
			  t341
			  (PrelBase.ZMZN PrelBase.Char)
			  t361
			  t371
			  t381);
		     LexCore.ZdwTL (happyzuvarzu1::PrelBase.ZMZN PrelBase.Char) ->
		       ParCore.ZdwHappyAbsSyn35 @ t341 @ (PrelBase.ZMZN PrelBase.Char)
		       @ t361 @ t371 @ t381 happyzuvarzu1}}};
  ParCore.happyReductionzu31 :: %forall t34 t35 t36 t37 t38 t351 t361 t371 t381 . ParCore.HappyAbsSyn
										  t34
										  t35
										  t36
										  t37
										  t38
										  ->
										  ParCore.HappyAbsSyn
										  (PrelBase.ZMZN
										   PrelBase.Char)
										  t351
										  t361
										  t371
										  t381 =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ t351
      @ t361
      @ t371
      @ t381
      (ds::ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	%case ds %of (wild::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	  {%_ ->
	     ParCore.notHappyAtAll
	     @ (ParCore.HappyAbsSyn
		(PrelBase.ZMZN PrelBase.Char)
		t351
		t361
		t371
		t381);
	   ParCore.ZdwHappyTerminal (ds1::LexCore.Token) ->
	     %case ds1 %of (wild1::LexCore.Token)
	       {LexCore.ZdwErr (a::Alex.Posn) ->
		  ParCore.notHappyAtAll
		  @ (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     t351
		     t361
		     t371
		     t381);
		LexCore.ZdwPT (ds2::Alex.Posn) (ds3::LexCore.Tok) ->
		  %case ds3 %of (wild2::LexCore.Tok)
		    {%_ ->
		       ParCore.notHappyAtAll
		       @ (ParCore.HappyAbsSyn
			  (PrelBase.ZMZN PrelBase.Char)
			  t351
			  t361
			  t371
			  t381);
		     LexCore.ZdwTV (happyzuvarzu1::PrelBase.ZMZN PrelBase.Char) ->
		       ParCore.ZdwHappyAbsSyn34 @ (PrelBase.ZMZN PrelBase.Char) @ t351
		       @ t361 @ t371 @ t381 happyzuvarzu1}}};
  ParCore.happyFail :: %forall a b t34 t35 t36 t37 t38 . PrelBase.Int
							 ->
							 b ->
							 ParCore.HappyState
							 b
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							  ->
							  PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
							 ->
							 PrelBase.ZMZN
							 (ParCore.HappyState
							  b
							  (ParCore.HappyStk
							   (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err a))
							 ->
							 ParCore.HappyStk
							 (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (ds::PrelBase.Int)
      (tk::b)
      (oldzust::ParCore.HappyState
		b
		(ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
		 PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (ds1::PrelBase.ZMZN
	    (ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (stk::ParCore.HappyStk
	    (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	%case ds %of (wild::PrelBase.Int)
	  {PrelBase.ZdwIzh (ds2::PrelGHC.Intzh) ->
	     %case ds2 %of (ds3::PrelGHC.Intzh)
	       {%_ ->
		  (%coerce (PrelBase.Int ->
			    PrelBase.Int ->
			    b ->
			    ParCore.HappyState
			    b
			    (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
			     PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			    ->
			    PrelBase.ZMZN
			    (ParCore.HappyState
			     b
			     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
			      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			    ->
			    ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
			    PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   oldzust)
		  (PrelBase.ZdwIzh (1::PrelGHC.Intzh))
		  (PrelBase.ZdwIzh (1::PrelGHC.Intzh)) tk oldzust ds1
		  (%let eta :: ParCore.HappyAbsSyn t34 t35 t36 t37 t38 =
			  ParCore.ZdwHappyErrorToken @ t34 @ t35 @ t36 @ t37 @ t38 wild
		   %in ParCore.ZdwHappyStk @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
		       eta stk);
		(1::PrelGHC.Intzh) ->
		  ParCore.happyError @ a}};
  ParCore.happySpecReducezu3 :: %forall a t34 t35 t36 t37 t38 b . PrelBase.Int
								  ->
								  (ParCore.HappyAbsSyn
								   t34
								   t35
								   t36
								   t37
								   t38
								   ->
								   ParCore.HappyAbsSyn
								   t34
								   t35
								   t36
								   t37
								   t38
								   ->
								   ParCore.HappyAbsSyn
								   t34
								   t35
								   t36
								   t37
								   t38
								   ->
								   ParCore.HappyAbsSyn
								   t34
								   t35
								   t36
								   t37
								   t38)
								  ->
								  PrelBase.Int ->
								  b ->
								  ParCore.HappyState
								  b
								  (ParCore.HappyStk
								   (ParCore.HappyAbsSyn
								    t34
								    t35
								    t36
								    t37
								    t38)
								   ->
								   PrelBase.ZMZN LexCore.Token ->
								   ErrM.Err a)
								  ->
								  PrelBase.ZMZN
								  (ParCore.HappyState
								   b
								   (ParCore.HappyStk
								    (ParCore.HappyAbsSyn
								     t34
								     t35
								     t36
								     t37
								     t38)
								    ->
								    PrelBase.ZMZN LexCore.Token ->
								    ErrM.Err a))
								  ->
								  ParCore.HappyStk
								  (ParCore.HappyAbsSyn
								   t34
								   t35
								   t36
								   t37
								   t38)
								  ->
								  PrelBase.ZMZN LexCore.Token ->
								  ErrM.Err a =
    \ @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ b
      (i::PrelBase.Int)
      (fn::ParCore.HappyAbsSyn t34 t35 t36 t37 t38 ->
	   ParCore.HappyAbsSyn t34 t35 t36 t37 t38 ->
	   ParCore.HappyAbsSyn t34 t35 t36 t37 t38 ->
	   ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
      (ds::PrelBase.Int)
      (tk::b)
      (st::ParCore.HappyState
	   b
	   (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	    PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (sts::PrelBase.ZMZN
	    (ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (stk::ParCore.HappyStk
	    (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	%let fail :: PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
	       PrelErr.patError @ (PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
	       (PrelBase.unpackCStringzh
		("GenericTemplate.hs:184|function happySpecReduce_3"::PrelGHC.Addrzh))
	%in %case ds %of (wild::PrelBase.Int)
	      {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
		 %case ds1 %of (ds2::PrelGHC.Intzh)
		   {%_ ->
		      %case sts
		      %of (wild1::PrelBase.ZMZN
				  (ParCore.HappyState
				   b
				   (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				    PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
			{PrelBase.ZdwZMZN ->
			   fail;
			 PrelBase.ZdwZC
			 (ds3::ParCore.HappyState
			       b
			       (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			 (ds4::PrelBase.ZMZN
			       (ParCore.HappyState
				b
				(ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				 PrelBase.ZMZN LexCore.Token -> ErrM.Err a))) ->
			   %case ds4
			   %of (wild2::PrelBase.ZMZN
				       (ParCore.HappyState
					b
					(ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
					 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
			     {PrelBase.ZdwZMZN ->
				fail;
			      PrelBase.ZdwZC
			      (ds5::ParCore.HappyState
				    b
				    (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				     PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			      (sts1::PrelBase.ZMZN
				     (ParCore.HappyState
				      b
				      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				       PrelBase.ZMZN LexCore.Token -> ErrM.Err a))) ->
				%case sts1
				%of (wild3::PrelBase.ZMZN
					    (ParCore.HappyState
					     b
					     (ParCore.HappyStk
					      (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
					      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
				  {PrelBase.ZdwZMZN ->
				     fail;
				   PrelBase.ZdwZC
				   (st1::ParCore.HappyState
					 b
					 (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
					  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				   (ds6::PrelBase.ZMZN
					 (ParCore.HappyState
					  b
					  (ParCore.HappyStk
					   (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
					   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))) ->
				     %case stk
				     %of (wild4::ParCore.HappyStk
						 (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
				       {ParCore.ZdwHappyStk
					(v1::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
					(ds7::ParCore.HappyStk
					      (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
					  %case ds7
					  %of (wild5::ParCore.HappyStk
						      (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
					    {ParCore.ZdwHappyStk
					     (v2::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
					     (ds8::ParCore.HappyStk
						   (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
					       %case ds8
					       %of (wild6::ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    t34
							    t35
							    t36
							    t37
							    t38))
						 {ParCore.ZdwHappyStk
						  (v3::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
						  (stkzq::ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   t34
							   t35
							   t36
							   t37
							   t38)) ->
						    (%coerce (PrelBase.Int ->
							      PrelBase.Int ->
							      b ->
							      ParCore.HappyState
							      b
							      (ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a)
							      ->
							      PrelBase.ZMZN
							      (ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a))
							      ->
							      ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a)
						     st1)
						    i wild tk st1 wild3
						    (%let eta :: ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38 =
							    fn v1 v2 v3
						     %in ParCore.ZdwHappyStk
							 @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							 eta stkzq)}}}}}};
		    (1::PrelGHC.Intzh) ->
		      ParCore.happyFail @ a @ b @ t34 @ t35 @ t36 @ t37 @ t38
		      (PrelBase.ZdwIzh (1::PrelGHC.Intzh)) tk st sts stk}};
  ParCore.happyReducezu107 :: %forall b a t35 t36 t37 t38 . PrelBase.Int
							    ->
							    b ->
							    ParCore.HappyState
							    b
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      (PrelBase.ZMZN PrelBase.Char)
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a)
							    ->
							    PrelBase.ZMZN
							    (ParCore.HappyState
							     b
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       (PrelBase.ZMZN PrelBase.Char)
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a))
							    ->
							    ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     (PrelBase.ZMZN PrelBase.Char)
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err a =
    \ @ b
      @ a
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk
	      (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
	      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk
	       (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
	       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn
	      (PrelBase.ZMZN PrelBase.Char)
	      t35
	      t36
	      t37
	      t38)) ->
	ParCore.happySpecReducezu3 @ a @ (PrelBase.ZMZN PrelBase.Char)
	@ t35 @ t36 @ t37 @ t38 @ b (PrelBase.ZdwIzh (69::PrelGHC.Intzh))
	(ParCore.happyReductionzu107 @ t35 @ t36 @ t37 @ t38
	 @ (ParCore.HappyAbsSyn
	    (PrelBase.ZMZN PrelBase.Char)
	    t35
	    t36
	    t37
	    t38)
	 @ t35 @ t36 @ t37 @ t38 @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36
	 @ t37 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.actionzu183 :: %forall t b t35 t36 t37 t38 a . t ->
							 PrelBase.Int ->
							 b ->
							 ParCore.HappyState
							 b
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   t38)
							  ->
							  PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
							 ->
							 PrelBase.ZMZN
							 (ParCore.HappyState
							  b
							  (ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    (PrelBase.ZMZN PrelBase.Char)
							    t35
							    t36
							    t37
							    t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err a))
							 ->
							 ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t
      @ b
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk
	      (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
	      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk
	       (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
	       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn
	      (PrelBase.ZMZN PrelBase.Char)
	      t35
	      t36
	      t37
	      t38)) ->
	ParCore.happyReducezu107 @ b @ a @ t35 @ t36 @ t37 @ t38 eta1 eta2
	eta3 eta4 eta5;
  ParCore.happyReducezu101 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
								->
								b ->
								ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a)
								->
								PrelBase.ZMZN
								(ParCore.HappyState
								 b
								 (ParCore.HappyStk
								  (ParCore.HappyAbsSyn
								   t34
								   t35
								   t36
								   t37
								   t38)
								  ->
								  PrelBase.ZMZN LexCore.Token ->
								  ErrM.Err a))
								->
								ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happySpecReducezu3 @ a @ t34 @ t35 @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (67::PrelGHC.Intzh))
	(ParCore.happyReductionzu101 @ t34 @ t35 @ t36 @ t37 @ t38
	 @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) @ t34 @ t35 @ t36 @ t37
	 @ t38 @ t34 @ t35 @ t36 @ t37 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.actionzu160 :: %forall t b t34 t35 t36 t37 t38 a . t ->
							     PrelBase.Int ->
							     b ->
							     ParCore.HappyState
							     b
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a)
							     ->
							     PrelBase.ZMZN
							     (ParCore.HappyState
							      b
							      (ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a))
							     ->
							     ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReducezu101 @ b @ a @ t34 @ t35 @ t36 @ t37 @ t38 eta1
	eta2 eta3 eta4 eta5;
  ParCore.happyReducezu100 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
								->
								b ->
								ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a)
								->
								PrelBase.ZMZN
								(ParCore.HappyState
								 b
								 (ParCore.HappyStk
								  (ParCore.HappyAbsSyn
								   t34
								   t35
								   t36
								   t37
								   t38)
								  ->
								  PrelBase.ZMZN LexCore.Token ->
								  ErrM.Err a))
								->
								ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happySpecReducezu3 @ a @ t34 @ t35 @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (66::PrelGHC.Intzh))
	(ParCore.happyReductionzu100
	 @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) @ t34 @ t35 @ t36 @ t37
	 @ t38 @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) @ t34 @ t35 @ t36
	 @ t37 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.actionzu161 :: %forall t b t34 t35 t36 t37 t38 a . t ->
							     PrelBase.Int ->
							     b ->
							     ParCore.HappyState
							     b
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a)
							     ->
							     PrelBase.ZMZN
							     (ParCore.HappyState
							      b
							      (ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a))
							     ->
							     ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReducezu100 @ b @ a @ t34 @ t35 @ t36 @ t37 @ t38 eta1
	eta2 eta3 eta4 eta5;
  ParCore.happyReducezu92 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happySpecReducezu3 @ a @ t34 @ t35 @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (64::PrelGHC.Intzh))
	(ParCore.happyReductionzu92 @ t34 @ t35 @ t36 @ t37 @ t38
	 @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) @ t34 @ t35 @ t36 @ t37
	 @ t38 @ t34 @ t35 @ t36 @ t37 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.actionzu162 :: %forall t b t34 t35 t36 t37 t38 a . t ->
							     PrelBase.Int ->
							     b ->
							     ParCore.HappyState
							     b
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a)
							     ->
							     PrelBase.ZMZN
							     (ParCore.HappyState
							      b
							      (ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a))
							     ->
							     ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReducezu92 @ b @ a @ t34 @ t35 @ t36 @ t37 @ t38 eta1
	eta2 eta3 eta4 eta5;
  ParCore.happyReducezu89 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happySpecReducezu3 @ a @ t34 @ t35 @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (62::PrelGHC.Intzh))
	(ParCore.happyReductionzu89
	 @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) @ t34 @ t35 @ t36 @ t37
	 @ t38 @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) @ t34 @ t35 @ t36
	 @ t37 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.actionzu163 :: %forall t b t34 t35 t36 t37 t38 a . t ->
							     PrelBase.Int ->
							     b ->
							     ParCore.HappyState
							     b
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a)
							     ->
							     PrelBase.ZMZN
							     (ParCore.HappyState
							      b
							      (ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a))
							     ->
							     ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReducezu89 @ b @ a @ t34 @ t35 @ t36 @ t37 @ t38 eta1
	eta2 eta3 eta4 eta5;
  ParCore.happyReducezu76 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happySpecReducezu3 @ a @ t34 @ t35 @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (55::PrelGHC.Intzh))
	(ParCore.happyReductionzu76 @ t34 @ t35 @ t36 @ t37 @ t38
	 @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) @ t34 @ t35 @ t36 @ t37
	 @ t38 @ t34 @ t35 @ t36 @ t37 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.actionzu167 :: %forall t b t34 t35 t36 t37 t38 a . t ->
							     PrelBase.Int ->
							     b ->
							     ParCore.HappyState
							     b
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a)
							     ->
							     PrelBase.ZMZN
							     (ParCore.HappyState
							      b
							      (ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a))
							     ->
							     ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReducezu76 @ b @ a @ t34 @ t35 @ t36 @ t37 @ t38 eta1
	eta2 eta3 eta4 eta5;
  ParCore.happyReducezu74 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happySpecReducezu3 @ a @ t34 @ t35 @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (54::PrelGHC.Intzh))
	(ParCore.happyReductionzu74 @ t34 @ t35 @ t36 @ t37 @ t38
	 @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	 @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) @ t34 @ t35 @ t36 @ t37
	 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.actionzu170 :: %forall t b t34 t35 t36 t37 t38 a . t ->
							     PrelBase.Int ->
							     b ->
							     ParCore.HappyState
							     b
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a)
							     ->
							     PrelBase.ZMZN
							     (ParCore.HappyState
							      b
							      (ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a))
							     ->
							     ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReducezu74 @ b @ a @ t34 @ t35 @ t36 @ t37 @ t38 eta1
	eta2 eta3 eta4 eta5;
  ParCore.happyReducezu73 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happySpecReducezu3 @ a @ t34 @ t35 @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (54::PrelGHC.Intzh))
	(ParCore.happyReductionzu73 @ t34 @ t35 @ t36 @ t37 @ t38
	 @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) @ t34 @ t35 @ t36 @ t37
	 @ t38 @ t34 @ t35 @ t36 @ t37 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.actionzu168 :: %forall t b t34 t35 t36 t37 t38 a . t ->
							     PrelBase.Int ->
							     b ->
							     ParCore.HappyState
							     b
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a)
							     ->
							     PrelBase.ZMZN
							     (ParCore.HappyState
							      b
							      (ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a))
							     ->
							     ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReducezu73 @ b @ a @ t34 @ t35 @ t36 @ t37 @ t38 eta1
	eta2 eta3 eta4 eta5;
  ParCore.happyReducezu66 :: %forall b a t34 t36 t37 t38 . PrelBase.Int
							   ->
							   b ->
							   ParCore.HappyState
							   b
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     (PrelBase.ZMZN PrelBase.Char)
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err a)
							   ->
							   PrelBase.ZMZN
							   (ParCore.HappyState
							    b
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      (PrelBase.ZMZN PrelBase.Char)
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a))
							   ->
							   ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    t34
							    (PrelBase.ZMZN PrelBase.Char)
							    t36
							    t37
							    t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk
	      (ParCore.HappyAbsSyn t34 (PrelBase.ZMZN PrelBase.Char) t36 t37 t38)
	      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk
	       (ParCore.HappyAbsSyn t34 (PrelBase.ZMZN PrelBase.Char) t36 t37 t38)
	       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn
	      t34
	      (PrelBase.ZMZN PrelBase.Char)
	      t36
	      t37
	      t38)) ->
	ParCore.happySpecReducezu3 @ a @ t34
	@ (PrelBase.ZMZN PrelBase.Char) @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (51::PrelGHC.Intzh))
	(ParCore.happyReductionzu66 @ t34 @ (PrelBase.ZMZN PrelBase.Char)
	 @ t36 @ t37 @ t38 @ t34 @ t36 @ t37 @ t38
	 @ (ParCore.HappyAbsSyn
	    t34
	    (PrelBase.ZMZN PrelBase.Char)
	    t36
	    t37
	    t38)
	 @ t34 @ (PrelBase.ZMZN PrelBase.Char) @ t36 @ t37 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.actionzu176 :: %forall t b t34 t36 t37 t38 a . t ->
							 PrelBase.Int ->
							 b ->
							 ParCore.HappyState
							 b
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   t34
							   (PrelBase.ZMZN PrelBase.Char)
							   t36
							   t37
							   t38)
							  ->
							  PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
							 ->
							 PrelBase.ZMZN
							 (ParCore.HappyState
							  b
							  (ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    t34
							    (PrelBase.ZMZN PrelBase.Char)
							    t36
							    t37
							    t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err a))
							 ->
							 ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  t34
							  (PrelBase.ZMZN PrelBase.Char)
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk
	      (ParCore.HappyAbsSyn t34 (PrelBase.ZMZN PrelBase.Char) t36 t37 t38)
	      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk
	       (ParCore.HappyAbsSyn t34 (PrelBase.ZMZN PrelBase.Char) t36 t37 t38)
	       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn
	      t34
	      (PrelBase.ZMZN PrelBase.Char)
	      t36
	      t37
	      t38)) ->
	ParCore.happyReducezu66 @ b @ a @ t34 @ t36 @ t37 @ t38 eta1 eta2
	eta3 eta4 eta5;
  ParCore.happyReducezu65 :: %forall b a t34 t36 t37 t38 . PrelBase.Int
							   ->
							   b ->
							   ParCore.HappyState
							   b
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     (PrelBase.ZMZN PrelBase.Char)
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err a)
							   ->
							   PrelBase.ZMZN
							   (ParCore.HappyState
							    b
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      (PrelBase.ZMZN PrelBase.Char)
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a))
							   ->
							   ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    t34
							    (PrelBase.ZMZN PrelBase.Char)
							    t36
							    t37
							    t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk
	      (ParCore.HappyAbsSyn t34 (PrelBase.ZMZN PrelBase.Char) t36 t37 t38)
	      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk
	       (ParCore.HappyAbsSyn t34 (PrelBase.ZMZN PrelBase.Char) t36 t37 t38)
	       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn
	      t34
	      (PrelBase.ZMZN PrelBase.Char)
	      t36
	      t37
	      t38)) ->
	ParCore.happySpecReducezu3 @ a @ t34
	@ (PrelBase.ZMZN PrelBase.Char) @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (51::PrelGHC.Intzh))
	(ParCore.happyReductionzu65 @ t34 @ (PrelBase.ZMZN PrelBase.Char)
	 @ t36 @ t37 @ t38 @ t34 @ t36 @ t37 @ t38
	 @ (ParCore.HappyAbsSyn
	    t34
	    (PrelBase.ZMZN PrelBase.Char)
	    t36
	    t37
	    t38)
	 @ t34 @ (PrelBase.ZMZN PrelBase.Char) @ t36 @ t37 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.actionzu175 :: %forall t b t34 t36 t37 t38 a . t ->
							 PrelBase.Int ->
							 b ->
							 ParCore.HappyState
							 b
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   t34
							   (PrelBase.ZMZN PrelBase.Char)
							   t36
							   t37
							   t38)
							  ->
							  PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
							 ->
							 PrelBase.ZMZN
							 (ParCore.HappyState
							  b
							  (ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    t34
							    (PrelBase.ZMZN PrelBase.Char)
							    t36
							    t37
							    t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err a))
							 ->
							 ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  t34
							  (PrelBase.ZMZN PrelBase.Char)
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk
	      (ParCore.HappyAbsSyn t34 (PrelBase.ZMZN PrelBase.Char) t36 t37 t38)
	      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk
	       (ParCore.HappyAbsSyn t34 (PrelBase.ZMZN PrelBase.Char) t36 t37 t38)
	       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn
	      t34
	      (PrelBase.ZMZN PrelBase.Char)
	      t36
	      t37
	      t38)) ->
	ParCore.happyReducezu65 @ b @ a @ t34 @ t36 @ t37 @ t38 eta1 eta2
	eta3 eta4 eta5;
  ParCore.happyReducezu64 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happySpecReducezu3 @ a @ t34 @ t35 @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (51::PrelGHC.Intzh))
	(ParCore.happyReductionzu64 @ t34 @ t35 @ t36 @ t37 @ t38 @ t34
	 @ t35 @ t36 @ t37 @ t38 @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	 @ t34 @ t35 @ t36 @ t37 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.actionzu174 :: %forall t b t34 t35 t36 t37 t38 a . t ->
							     PrelBase.Int ->
							     b ->
							     ParCore.HappyState
							     b
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a)
							     ->
							     PrelBase.ZMZN
							     (ParCore.HappyState
							      b
							      (ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a))
							     ->
							     ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReducezu64 @ b @ a @ t34 @ t35 @ t36 @ t37 @ t38 eta1
	eta2 eta3 eta4 eta5;
  ParCore.happyReducezu59 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happySpecReducezu3 @ a @ t34 @ t35 @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (50::PrelGHC.Intzh))
	(ParCore.happyReductionzu59 @ t34 @ t35 @ t36 @ t37 @ t38
	 @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) @ t34 @ t35 @ t36 @ t37
	 @ t38 @ t34 @ t35 @ t36 @ t37 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.actionzu182 :: %forall t b t34 t35 t36 t37 t38 a . t ->
							     PrelBase.Int ->
							     b ->
							     ParCore.HappyState
							     b
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a)
							     ->
							     PrelBase.ZMZN
							     (ParCore.HappyState
							      b
							      (ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a))
							     ->
							     ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReducezu59 @ b @ a @ t34 @ t35 @ t36 @ t37 @ t38 eta1
	eta2 eta3 eta4 eta5;
  ParCore.happyReducezu57 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happySpecReducezu3 @ a @ t34 @ t35 @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (49::PrelGHC.Intzh))
	(ParCore.happyReductionzu57
	 @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) @ t34 @ t35 @ t36 @ t37
	 @ t38 @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) @ t34 @ t35 @ t36
	 @ t37 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.actionzu177 :: %forall t b t34 t35 t36 t37 t38 a . t ->
							     PrelBase.Int ->
							     b ->
							     ParCore.HappyState
							     b
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a)
							     ->
							     PrelBase.ZMZN
							     (ParCore.HappyState
							      b
							      (ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a))
							     ->
							     ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReducezu57 @ b @ a @ t34 @ t35 @ t36 @ t37 @ t38 eta1
	eta2 eta3 eta4 eta5;
  ParCore.happyReducezu53 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happySpecReducezu3 @ a @ t34 @ t35 @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (48::PrelGHC.Intzh))
	(ParCore.happyReductionzu53 @ t34 @ t35 @ t36 @ t37 @ t38
	 @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) @ t34 @ t35 @ t36 @ t37
	 @ t38 @ t34 @ t35 @ t36 @ t37 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.actionzu185 :: %forall t b t34 t35 t36 t37 t38 a . t ->
							     PrelBase.Int ->
							     b ->
							     ParCore.HappyState
							     b
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a)
							     ->
							     PrelBase.ZMZN
							     (ParCore.HappyState
							      b
							      (ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a))
							     ->
							     ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReducezu53 @ b @ a @ t34 @ t35 @ t36 @ t37 @ t38 eta1
	eta2 eta3 eta4 eta5;
  ParCore.happyReducezu49 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happySpecReducezu3 @ a @ t34 @ t35 @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (46::PrelGHC.Intzh))
	(ParCore.happyReductionzu49
	 @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) @ t34 @ t35 @ t36 @ t37
	 @ t38 @ t34 @ t35 @ t36 @ t37 @ t38 @ t34 @ t35 @ t36 @ t37 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.actionzu187 :: %forall t b t34 t35 t36 t37 t38 a . t ->
							     PrelBase.Int ->
							     b ->
							     ParCore.HappyState
							     b
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a)
							     ->
							     PrelBase.ZMZN
							     (ParCore.HappyState
							      b
							      (ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a))
							     ->
							     ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReducezu49 @ b @ a @ t34 @ t35 @ t36 @ t37 @ t38 eta1
	eta2 eta3 eta4 eta5;
  ParCore.happyReducezu45 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happySpecReducezu3 @ a @ t34 @ t35 @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (44::PrelGHC.Intzh))
	(ParCore.happyReductionzu45 @ t34 @ t35 @ t36 @ t37 @ t38
	 @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) @ t34 @ t35 @ t36 @ t37
	 @ t38 @ t34 @ t35 @ t36 @ t37 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.actionzu189 :: %forall t b t34 t35 t36 t37 t38 a . t ->
							     PrelBase.Int ->
							     b ->
							     ParCore.HappyState
							     b
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a)
							     ->
							     PrelBase.ZMZN
							     (ParCore.HappyState
							      b
							      (ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a))
							     ->
							     ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReducezu45 @ b @ a @ t34 @ t35 @ t36 @ t37 @ t38 eta1
	eta2 eta3 eta4 eta5;
  ParCore.happyReducezu43 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happySpecReducezu3 @ a @ t34 @ t35 @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (43::PrelGHC.Intzh))
	(ParCore.happyReductionzu43 @ t34 @ t35 @ t36 @ t37 @ t38 @ t34
	 @ t35 @ t36 @ t37 @ t38 @ t34 @ t35 @ t36 @ t37 @ t38 @ t34 @ t35
	 @ t36 @ t37 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.happyReducezu38 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happySpecReducezu3 @ a @ t34 @ t35 @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (40::PrelGHC.Intzh))
	(ParCore.happyReductionzu38
	 @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) @ t34 @ t35 @ t36 @ t37
	 @ t38 @ t34 @ t35 @ t36 @ t37 @ t38 @ t34 @ t35 @ t36 @ t37 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.actionzu193 :: %forall t b t34 t35 t36 t37 t38 a . t ->
							     PrelBase.Int ->
							     b ->
							     ParCore.HappyState
							     b
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a)
							     ->
							     PrelBase.ZMZN
							     (ParCore.HappyState
							      b
							      (ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a))
							     ->
							     ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReducezu38 @ b @ a @ t34 @ t35 @ t36 @ t37 @ t38 eta1
	eta2 eta3 eta4 eta5;
  ParCore.happySpecReducezu2 :: %forall a t34 t35 t36 t37 t38 b . PrelBase.Int
								  ->
								  (ParCore.HappyAbsSyn
								   t34
								   t35
								   t36
								   t37
								   t38
								   ->
								   ParCore.HappyAbsSyn
								   t34
								   t35
								   t36
								   t37
								   t38
								   ->
								   ParCore.HappyAbsSyn
								   t34
								   t35
								   t36
								   t37
								   t38)
								  ->
								  PrelBase.Int ->
								  b ->
								  ParCore.HappyState
								  b
								  (ParCore.HappyStk
								   (ParCore.HappyAbsSyn
								    t34
								    t35
								    t36
								    t37
								    t38)
								   ->
								   PrelBase.ZMZN LexCore.Token ->
								   ErrM.Err a)
								  ->
								  PrelBase.ZMZN
								  (ParCore.HappyState
								   b
								   (ParCore.HappyStk
								    (ParCore.HappyAbsSyn
								     t34
								     t35
								     t36
								     t37
								     t38)
								    ->
								    PrelBase.ZMZN LexCore.Token ->
								    ErrM.Err a))
								  ->
								  ParCore.HappyStk
								  (ParCore.HappyAbsSyn
								   t34
								   t35
								   t36
								   t37
								   t38)
								  ->
								  PrelBase.ZMZN LexCore.Token ->
								  ErrM.Err a =
    \ @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ b
      (i::PrelBase.Int)
      (fn::ParCore.HappyAbsSyn t34 t35 t36 t37 t38 ->
	   ParCore.HappyAbsSyn t34 t35 t36 t37 t38 ->
	   ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
      (ds::PrelBase.Int)
      (tk::b)
      (st::ParCore.HappyState
	   b
	   (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	    PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (sts::PrelBase.ZMZN
	    (ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (stk::ParCore.HappyStk
	    (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	%let fail :: PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
	       PrelErr.patError @ (PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
	       (PrelBase.unpackCStringzh
		("GenericTemplate.hs:179|function happySpecReduce_2"::PrelGHC.Addrzh))
	%in %case ds %of (wild::PrelBase.Int)
	      {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
		 %case ds1 %of (ds2::PrelGHC.Intzh)
		   {%_ ->
		      %case sts
		      %of (wild1::PrelBase.ZMZN
				  (ParCore.HappyState
				   b
				   (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				    PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
			{PrelBase.ZdwZMZN ->
			   fail;
			 PrelBase.ZdwZC
			 (ds3::ParCore.HappyState
			       b
			       (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			 (sts1::PrelBase.ZMZN
				(ParCore.HappyState
				 b
				 (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				  PrelBase.ZMZN LexCore.Token -> ErrM.Err a))) ->
			   %case sts1
			   %of (wild2::PrelBase.ZMZN
				       (ParCore.HappyState
					b
					(ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
					 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
			     {PrelBase.ZdwZMZN ->
				fail;
			      PrelBase.ZdwZC
			      (st1::ParCore.HappyState
				    b
				    (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				     PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			      (ds4::PrelBase.ZMZN
				    (ParCore.HappyState
				     b
				     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))) ->
				%case stk
				%of (wild3::ParCore.HappyStk
					    (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
				  {ParCore.ZdwHappyStk
				   (v1::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
				   (ds5::ParCore.HappyStk
					 (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
				     %case ds5
				     %of (wild4::ParCore.HappyStk
						 (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
				       {ParCore.ZdwHappyStk
					(v2::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
					(stkzq::ParCore.HappyStk
						(ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
					  (%coerce (PrelBase.Int ->
						    PrelBase.Int ->
						    b ->
						    ParCore.HappyState
						    b
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
						     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						    ->
						    PrelBase.ZMZN
						    (ParCore.HappyState
						     b
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
						      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						    ->
						    ParCore.HappyStk
						    (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
						    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
					   st1)
					  i wild tk st1 wild2
					  (%let eta :: ParCore.HappyAbsSyn t34 t35 t36 t37 t38 =
						  fn v1 v2
					   %in ParCore.ZdwHappyStk
					       @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) eta
					       stkzq)}}}};
		    (1::PrelGHC.Intzh) ->
		      ParCore.happyFail @ a @ b @ t34 @ t35 @ t36 @ t37 @ t38
		      (PrelBase.ZdwIzh (1::PrelGHC.Intzh)) tk st sts stk}};
  ParCore.happyReducezu96 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happySpecReducezu2 @ a @ t34 @ t35 @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (65::PrelGHC.Intzh))
	(ParCore.happyReductionzu96 @ t34 @ t35 @ t36 @ t37 @ t38 @ t34
	 @ t35 @ t36 @ t37 @ t38 @ t34 @ t35 @ t36 @ t37 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.actionzu157 :: %forall t b t34 t35 t36 t37 t38 a . t ->
							     PrelBase.Int ->
							     b ->
							     ParCore.HappyState
							     b
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a)
							     ->
							     PrelBase.ZMZN
							     (ParCore.HappyState
							      b
							      (ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a))
							     ->
							     ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReducezu96 @ b @ a @ t34 @ t35 @ t36 @ t37 @ t38 eta1
	eta2 eta3 eta4 eta5;
  ParCore.happyReducezu90 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happySpecReducezu2 @ a @ t34 @ t35 @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (63::PrelGHC.Intzh))
	(ParCore.happyReductionzu90 @ t34 @ t35 @ t36 @ t37 @ t38 @ t34
	 @ t35 @ t36 @ t37 @ t38 @ t34 @ t35 @ t36 @ t37 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.actionzu153 :: %forall t b t34 t35 t36 t37 t38 a . t ->
							     PrelBase.Int ->
							     b ->
							     ParCore.HappyState
							     b
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a)
							     ->
							     PrelBase.ZMZN
							     (ParCore.HappyState
							      b
							      (ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a))
							     ->
							     ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReducezu90 @ b @ a @ t34 @ t35 @ t36 @ t37 @ t38 eta1
	eta2 eta3 eta4 eta5;
  ParCore.happyReducezu86 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happySpecReducezu2 @ a @ t34 @ t35 @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (61::PrelGHC.Intzh))
	(ParCore.happyReductionzu86 @ t34 @ t35 @ t36 @ t37 @ t38 @ t34
	 @ t35 @ t36 @ t37 @ t38 @ t34 @ t35 @ t36 @ t37 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.actionzu152 :: %forall t b t34 t35 t36 t37 t38 a . t ->
							     PrelBase.Int ->
							     b ->
							     ParCore.HappyState
							     b
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a)
							     ->
							     PrelBase.ZMZN
							     (ParCore.HappyState
							      b
							      (ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a))
							     ->
							     ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReducezu86 @ b @ a @ t34 @ t35 @ t36 @ t37 @ t38 eta1
	eta2 eta3 eta4 eta5;
  ParCore.happyReducezu84 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happySpecReducezu2 @ a @ t34 @ t35 @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (60::PrelGHC.Intzh))
	(ParCore.happyReductionzu84 @ t34 @ t35 @ t36 @ t37 @ t38
	 @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) @ t34 @ t35 @ t36 @ t37
	 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.actionzu151 :: %forall t b t34 t35 t36 t37 t38 a . t ->
							     PrelBase.Int ->
							     b ->
							     ParCore.HappyState
							     b
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a)
							     ->
							     PrelBase.ZMZN
							     (ParCore.HappyState
							      b
							      (ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a))
							     ->
							     ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReducezu84 @ b @ a @ t34 @ t35 @ t36 @ t37 @ t38 eta1
	eta2 eta3 eta4 eta5;
  ParCore.happyReducezu83 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happySpecReducezu2 @ a @ t34 @ t35 @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (59::PrelGHC.Intzh))
	(ParCore.happyReductionzu83 @ t34 @ t35 @ t36 @ t37 @ t38 @ t34
	 @ t35 @ t36 @ t37 @ t38 @ t34 @ t35 @ t36 @ t37 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.actionzu150 :: %forall t b t34 t35 t36 t37 t38 a . t ->
							     PrelBase.Int ->
							     b ->
							     ParCore.HappyState
							     b
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a)
							     ->
							     PrelBase.ZMZN
							     (ParCore.HappyState
							      b
							      (ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a))
							     ->
							     ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReducezu83 @ b @ a @ t34 @ t35 @ t36 @ t37 @ t38 eta1
	eta2 eta3 eta4 eta5;
  ParCore.happyReducezu79 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happySpecReducezu2 @ a @ t34 @ t35 @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (57::PrelGHC.Intzh))
	(ParCore.happyReductionzu79 @ t34 @ t35 @ t36 @ t37 @ t38 @ t34
	 @ t35 @ t36 @ t37 @ t38 @ t34 @ t35 @ t36 @ t37 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.actionzu148 :: %forall t b t34 t35 t36 t37 t38 a . t ->
							     PrelBase.Int ->
							     b ->
							     ParCore.HappyState
							     b
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a)
							     ->
							     PrelBase.ZMZN
							     (ParCore.HappyState
							      b
							      (ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a))
							     ->
							     ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReducezu79 @ b @ a @ t34 @ t35 @ t36 @ t37 @ t38 eta1
	eta2 eta3 eta4 eta5;
  ParCore.happyReducezu71 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happySpecReducezu2 @ a @ t34 @ t35 @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (53::PrelGHC.Intzh))
	(ParCore.happyReductionzu71 @ t34 @ t35 @ t36 @ t37 @ t38 @ t34
	 @ t35 @ t36 @ t37 @ t38 @ t34 @ t35 @ t36 @ t37 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.actionzu142 :: %forall t b t34 t35 t36 t37 t38 a . t ->
							     PrelBase.Int ->
							     b ->
							     ParCore.HappyState
							     b
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a)
							     ->
							     PrelBase.ZMZN
							     (ParCore.HappyState
							      b
							      (ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a))
							     ->
							     ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReducezu71 @ b @ a @ t34 @ t35 @ t36 @ t37 @ t38 eta1
	eta2 eta3 eta4 eta5;
  ParCore.happyReducezu69 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happySpecReducezu2 @ a @ t34 @ t35 @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (52::PrelGHC.Intzh))
	(ParCore.happyReductionzu69 @ t34 @ t35 @ t36 @ t37 @ t38
	 @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) @ t34 @ t35 @ t36 @ t37
	 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.actionzu141 :: %forall t b t34 t35 t36 t37 t38 a . t ->
							     PrelBase.Int ->
							     b ->
							     ParCore.HappyState
							     b
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a)
							     ->
							     PrelBase.ZMZN
							     (ParCore.HappyState
							      b
							      (ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a))
							     ->
							     ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReducezu69 @ b @ a @ t34 @ t35 @ t36 @ t37 @ t38 eta1
	eta2 eta3 eta4 eta5;
  ParCore.happyReducezu58 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happySpecReducezu2 @ a @ t34 @ t35 @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (50::PrelGHC.Intzh))
	(ParCore.happyReductionzu58 @ t34 @ t35 @ t36 @ t37 @ t38 @ t34
	 @ t35 @ t36 @ t37 @ t38 @ t34 @ t35 @ t36 @ t37 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.actionzu124 :: %forall t b t34 t35 t36 t37 t38 a . t ->
							     PrelBase.Int ->
							     b ->
							     ParCore.HappyState
							     b
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a)
							     ->
							     PrelBase.ZMZN
							     (ParCore.HappyState
							      b
							      (ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a))
							     ->
							     ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReducezu58 @ b @ a @ t34 @ t35 @ t36 @ t37 @ t38 eta1
	eta2 eta3 eta4 eta5;
  ParCore.happyReducezu41 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happySpecReducezu2 @ a @ t34 @ t35 @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (42::PrelGHC.Intzh))
	(ParCore.happyReductionzu41 @ t34 @ t35 @ t36 @ t37 @ t38
	 @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) @ t34 @ t35 @ t36 @ t37
	 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.actionzu115 :: %forall t b t34 t35 t36 t37 t38 a . t ->
							     PrelBase.Int ->
							     b ->
							     ParCore.HappyState
							     b
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a)
							     ->
							     PrelBase.ZMZN
							     (ParCore.HappyState
							      b
							      (ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a))
							     ->
							     ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReducezu41 @ b @ a @ t34 @ t35 @ t36 @ t37 @ t38 eta1
	eta2 eta3 eta4 eta5;
  ParCore.happySpecReducezu1 :: %forall a t34 t35 t36 t37 t38 b . PrelBase.Int
								  ->
								  (ParCore.HappyAbsSyn
								   t34
								   t35
								   t36
								   t37
								   t38
								   ->
								   ParCore.HappyAbsSyn
								   t34
								   t35
								   t36
								   t37
								   t38)
								  ->
								  PrelBase.Int ->
								  b ->
								  ParCore.HappyState
								  b
								  (ParCore.HappyStk
								   (ParCore.HappyAbsSyn
								    t34
								    t35
								    t36
								    t37
								    t38)
								   ->
								   PrelBase.ZMZN LexCore.Token ->
								   ErrM.Err a)
								  ->
								  PrelBase.ZMZN
								  (ParCore.HappyState
								   b
								   (ParCore.HappyStk
								    (ParCore.HappyAbsSyn
								     t34
								     t35
								     t36
								     t37
								     t38)
								    ->
								    PrelBase.ZMZN LexCore.Token ->
								    ErrM.Err a))
								  ->
								  ParCore.HappyStk
								  (ParCore.HappyAbsSyn
								   t34
								   t35
								   t36
								   t37
								   t38)
								  ->
								  PrelBase.ZMZN LexCore.Token ->
								  ErrM.Err a =
    \ @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ b
      (i::PrelBase.Int)
      (fn::ParCore.HappyAbsSyn t34 t35 t36 t37 t38 ->
	   ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
      (ds::PrelBase.Int)
      (tk::b)
      (st::ParCore.HappyState
	   b
	   (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	    PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (sts::PrelBase.ZMZN
	    (ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (stk::ParCore.HappyStk
	    (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	%case ds %of (wild::PrelBase.Int)
	  {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	     %case ds1 %of (ds2::PrelGHC.Intzh)
	       {%_ ->
		  %case sts
		  %of (wild1::PrelBase.ZMZN
			      (ParCore.HappyState
			       b
			       (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
		    {PrelBase.ZdwZMZN ->
		       PrelErr.patError @ (PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		       (PrelBase.unpackCStringzh
			("GenericTemplate.hs:174|function happySpecReduce_1"::PrelGHC.Addrzh));
		     PrelBase.ZdwZC
		     (st1::ParCore.HappyState
			   b
			   (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
			    PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		     (ds3::PrelBase.ZMZN
			   (ParCore.HappyState
			    b
			    (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
			     PrelBase.ZMZN LexCore.Token -> ErrM.Err a))) ->
		       %case stk
		       %of (wild2::ParCore.HappyStk
				   (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
			 {ParCore.ZdwHappyStk
			  (v1::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
			  (stkzq::ParCore.HappyStk
				  (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
			    (%coerce (PrelBase.Int ->
				      PrelBase.Int ->
				      b ->
				      ParCore.HappyState
				      b
				      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				      ->
				      PrelBase.ZMZN
				      (ParCore.HappyState
				       b
				       (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
					-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				      ->
				      ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				      PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			     st1)
			    i wild tk st1 wild1
			    (%let eta :: ParCore.HappyAbsSyn t34 t35 t36 t37 t38 = fn v1
			     %in ParCore.ZdwHappyStk @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
				 eta stkzq)}};
		(1::PrelGHC.Intzh) ->
		  ParCore.happyFail @ a @ b @ t34 @ t35 @ t36 @ t37 @ t38
		  (PrelBase.ZdwIzh (1::PrelGHC.Intzh)) tk st sts stk}};
  ParCore.happyReducezu102 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
								->
								b ->
								ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a)
								->
								PrelBase.ZMZN
								(ParCore.HappyState
								 b
								 (ParCore.HappyStk
								  (ParCore.HappyAbsSyn
								   t34
								   t35
								   t36
								   t37
								   t38)
								  ->
								  PrelBase.ZMZN LexCore.Token ->
								  ErrM.Err a))
								->
								ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happySpecReducezu1 @ a @ t34 @ t35 @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (67::PrelGHC.Intzh))
	(ParCore.happyReductionzu102 @ t34 @ t35 @ t36 @ t37 @ t38 @ t34
	 @ t35 @ t36 @ t37 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.happyReducezu99 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happySpecReducezu1 @ a @ t34 @ t35 @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (66::PrelGHC.Intzh))
	(ParCore.happyReductionzu99
	 @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) @ t34 @ t35 @ t36 @ t37
	 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.actionzu42 :: %forall t b t34 t35 t36 t37 t38 a . t ->
							    PrelBase.Int ->
							    b ->
							    ParCore.HappyState
							    b
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a)
							    ->
							    PrelBase.ZMZN
							    (ParCore.HappyState
							     b
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a))
							    ->
							    ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReducezu99 @ b @ a @ t34 @ t35 @ t36 @ t37 @ t38 eta1
	eta2 eta3 eta4 eta5;
  ParCore.happyReducezu98 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happySpecReducezu1 @ a @ t34 @ t35 @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (66::PrelGHC.Intzh))
	(ParCore.happyReductionzu98
	 @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) @ t34 @ t35 @ t36 @ t37
	 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.actionzu41 :: %forall t b t34 t35 t36 t37 t38 a . t ->
							    PrelBase.Int ->
							    b ->
							    ParCore.HappyState
							    b
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a)
							    ->
							    PrelBase.ZMZN
							    (ParCore.HappyState
							     b
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a))
							    ->
							    ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReducezu98 @ b @ a @ t34 @ t35 @ t36 @ t37 @ t38 eta1
	eta2 eta3 eta4 eta5;
  ParCore.happyReducezu97 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happySpecReducezu1 @ a @ t34 @ t35 @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (66::PrelGHC.Intzh))
	(ParCore.happyReductionzu97
	 @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) @ t34 @ t35 @ t36 @ t37
	 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.actionzu40 :: %forall t b t34 t35 t36 t37 t38 a . t ->
							    PrelBase.Int ->
							    b ->
							    ParCore.HappyState
							    b
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a)
							    ->
							    PrelBase.ZMZN
							    (ParCore.HappyState
							     b
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a))
							    ->
							    ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReducezu97 @ b @ a @ t34 @ t35 @ t36 @ t37 @ t38 eta1
	eta2 eta3 eta4 eta5;
  ParCore.happyReducezu94 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happySpecReducezu1 @ a @ t34 @ t35 @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (64::PrelGHC.Intzh))
	(ParCore.happyReductionzu94 @ t34 @ t35 @ t36 @ t37 @ t38 @ t34
	 @ t35 @ t36 @ t37 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.happyReducezu91 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happySpecReducezu1 @ a @ t34 @ t35 @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (63::PrelGHC.Intzh))
	(ParCore.happyReductionzu91 @ t34 @ t35 @ t36 @ t37 @ t38 @ t34
	 @ t35 @ t36 @ t37 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.actionzu46 :: %forall t b t34 t35 t36 t37 t38 a . t ->
							    PrelBase.Int ->
							    b ->
							    ParCore.HappyState
							    b
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a)
							    ->
							    PrelBase.ZMZN
							    (ParCore.HappyState
							     b
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a))
							    ->
							    ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReducezu91 @ b @ a @ t34 @ t35 @ t36 @ t37 @ t38 eta1
	eta2 eta3 eta4 eta5;
  ParCore.happyReducezu88 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happySpecReducezu1 @ a @ t34 @ t35 @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (62::PrelGHC.Intzh))
	(ParCore.happyReductionzu88 @ t34 @ t35 @ t36 @ t37 @ t38 @ t34
	 @ t35 @ t36 @ t37 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.actionzu49 :: %forall t b t34 t35 t36 t37 t38 a . t ->
							    PrelBase.Int ->
							    b ->
							    ParCore.HappyState
							    b
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a)
							    ->
							    PrelBase.ZMZN
							    (ParCore.HappyState
							     b
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a))
							    ->
							    ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReducezu88 @ b @ a @ t34 @ t35 @ t36 @ t37 @ t38 eta1
	eta2 eta3 eta4 eta5;
  ParCore.happyReducezu87 :: %forall b a t35 t36 t37 t38 . PrelBase.Int
							   ->
							   b ->
							   ParCore.HappyState
							   b
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     (PrelBase.ZMZN PrelBase.Char)
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err a)
							   ->
							   PrelBase.ZMZN
							   (ParCore.HappyState
							    b
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      (PrelBase.ZMZN PrelBase.Char)
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a))
							   ->
							   ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    (PrelBase.ZMZN PrelBase.Char)
							    t35
							    t36
							    t37
							    t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err a =
    \ @ b
      @ a
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk
	      (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
	      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk
	       (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
	       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn
	      (PrelBase.ZMZN PrelBase.Char)
	      t35
	      t36
	      t37
	      t38)) ->
	ParCore.happySpecReducezu1 @ a @ (PrelBase.ZMZN PrelBase.Char)
	@ t35 @ t36 @ t37 @ t38 @ b (PrelBase.ZdwIzh (62::PrelGHC.Intzh))
	(ParCore.happyReductionzu87 @ t35 @ t36 @ t37 @ t38
	 @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.happyReducezu81 :: %forall b a t35 t36 t37 t38 . PrelBase.Int
							   ->
							   b ->
							   ParCore.HappyState
							   b
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     (PrelBase.ZMZN PrelBase.Char)
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err a)
							   ->
							   PrelBase.ZMZN
							   (ParCore.HappyState
							    b
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      (PrelBase.ZMZN PrelBase.Char)
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a))
							   ->
							   ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    (PrelBase.ZMZN PrelBase.Char)
							    t35
							    t36
							    t37
							    t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err a =
    \ @ b
      @ a
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk
	      (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
	      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk
	       (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
	       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn
	      (PrelBase.ZMZN PrelBase.Char)
	      t35
	      t36
	      t37
	      t38)) ->
	ParCore.happySpecReducezu1 @ a @ (PrelBase.ZMZN PrelBase.Char)
	@ t35 @ t36 @ t37 @ t38 @ b (PrelBase.ZdwIzh (58::PrelGHC.Intzh))
	(ParCore.happyReductionzu81 @ t35 @ t36 @ t37 @ t38
	 @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.actionzu58 :: %forall t b t35 t36 t37 t38 a . t ->
							PrelBase.Int ->
							b ->
							ParCore.HappyState
							b
							(ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
							->
							PrelBase.ZMZN
							(ParCore.HappyState
							 b
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   t38)
							  ->
							  PrelBase.ZMZN LexCore.Token ->
							  ErrM.Err a))
							->
							ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38)
							->
							PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t
      @ b
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk
	      (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
	      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk
	       (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
	       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn
	      (PrelBase.ZMZN PrelBase.Char)
	      t35
	      t36
	      t37
	      t38)) ->
	ParCore.happyReducezu81 @ b @ a @ t35 @ t36 @ t37 @ t38 eta1 eta2
	eta3 eta4 eta5;
  ParCore.happyReducezu75 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happySpecReducezu1 @ a @ t34 @ t35 @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (55::PrelGHC.Intzh))
	(ParCore.happyReductionzu75 @ t34 @ t35 @ t36 @ t37 @ t38 @ t34
	 @ t35 @ t36 @ t37 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.happyReducezu70 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happySpecReducezu1 @ a @ t34 @ t35 @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (53::PrelGHC.Intzh))
	(ParCore.happyReductionzu70 @ t34 @ t35 @ t36 @ t37 @ t38 @ t34
	 @ t35 @ t36 @ t37 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.happyReducezu68 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happySpecReducezu1 @ a @ t34 @ t35 @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (52::PrelGHC.Intzh))
	(ParCore.happyReductionzu68 @ t34 @ t35 @ t36 @ t37 @ t38 @ t34
	 @ t35 @ t36 @ t37 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.actionzu72 :: %forall t b t34 t35 t36 t37 t38 a . t ->
							    PrelBase.Int ->
							    b ->
							    ParCore.HappyState
							    b
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a)
							    ->
							    PrelBase.ZMZN
							    (ParCore.HappyState
							     b
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a))
							    ->
							    ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReducezu68 @ b @ a @ t34 @ t35 @ t36 @ t37 @ t38 eta1
	eta2 eta3 eta4 eta5;
  ParCore.happyReducezu67 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happySpecReducezu1 @ a @ t34 @ t35 @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (51::PrelGHC.Intzh))
	(ParCore.happyReductionzu67 @ t34 @ t35 @ t36 @ t37 @ t38 @ t34
	 @ t35 @ t36 @ t37 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.happyReducezu60 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happySpecReducezu1 @ a @ t34 @ t35 @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (50::PrelGHC.Intzh))
	(ParCore.happyReductionzu60 @ t34 @ t35 @ t36 @ t37 @ t38 @ t34
	 @ t35 @ t36 @ t37 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.actionzu76 :: %forall t b t34 t35 t36 t37 t38 a . t ->
							    PrelBase.Int ->
							    b ->
							    ParCore.HappyState
							    b
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a)
							    ->
							    PrelBase.ZMZN
							    (ParCore.HappyState
							     b
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a))
							    ->
							    ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReducezu60 @ b @ a @ t34 @ t35 @ t36 @ t37 @ t38 eta1
	eta2 eta3 eta4 eta5;
  ParCore.happyReducezu56 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happySpecReducezu1 @ a @ t34 @ t35 @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (49::PrelGHC.Intzh))
	(ParCore.happyReductionzu56 @ t34 @ t35 @ t36 @ t37 @ t38 @ t34
	 @ t35 @ t36 @ t37 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.actionzu79 :: %forall t b t34 t35 t36 t37 t38 a . t ->
							    PrelBase.Int ->
							    b ->
							    ParCore.HappyState
							    b
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a)
							    ->
							    PrelBase.ZMZN
							    (ParCore.HappyState
							     b
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a))
							    ->
							    ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReducezu56 @ b @ a @ t34 @ t35 @ t36 @ t37 @ t38 eta1
	eta2 eta3 eta4 eta5;
  ParCore.happyReducezu55 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happySpecReducezu1 @ a @ t34 @ t35 @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (49::PrelGHC.Intzh))
	(ParCore.happyReductionzu55 @ t34 @ t35 @ t36 @ t37 @ t38 @ t34
	 @ t35 @ t36 @ t37 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.actionzu80 :: %forall t b t34 t35 t36 t37 t38 a . t ->
							    PrelBase.Int ->
							    b ->
							    ParCore.HappyState
							    b
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a)
							    ->
							    PrelBase.ZMZN
							    (ParCore.HappyState
							     b
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a))
							    ->
							    ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReducezu55 @ b @ a @ t34 @ t35 @ t36 @ t37 @ t38 eta1
	eta2 eta3 eta4 eta5;
  ParCore.happyReducezu54 :: %forall b a t35 t36 t37 t38 . PrelBase.Int
							   ->
							   b ->
							   ParCore.HappyState
							   b
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     (PrelBase.ZMZN PrelBase.Char)
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err a)
							   ->
							   PrelBase.ZMZN
							   (ParCore.HappyState
							    b
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      (PrelBase.ZMZN PrelBase.Char)
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a))
							   ->
							   ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    (PrelBase.ZMZN PrelBase.Char)
							    t35
							    t36
							    t37
							    t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err a =
    \ @ b
      @ a
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk
	      (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
	      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk
	       (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
	       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn
	      (PrelBase.ZMZN PrelBase.Char)
	      t35
	      t36
	      t37
	      t38)) ->
	ParCore.happySpecReducezu1 @ a @ (PrelBase.ZMZN PrelBase.Char)
	@ t35 @ t36 @ t37 @ t38 @ b (PrelBase.ZdwIzh (49::PrelGHC.Intzh))
	(ParCore.happyReductionzu54 @ t35 @ t36 @ t37 @ t38
	 @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.happyReducezu52 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happySpecReducezu1 @ a @ t34 @ t35 @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (48::PrelGHC.Intzh))
	(ParCore.happyReductionzu52 @ t34 @ t35 @ t36 @ t37 @ t38 @ t34
	 @ t35 @ t36 @ t37 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.happyReducezu47 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happySpecReducezu1 @ a @ t34 @ t35 @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (45::PrelGHC.Intzh))
	(ParCore.happyReductionzu47 @ t34 @ t35 @ t36 @ t37 @ t38 @ t34
	 @ t35 @ t36 @ t37 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.actionzu97 :: %forall t b t34 t35 t36 t37 t38 a . t ->
							    PrelBase.Int ->
							    b ->
							    ParCore.HappyState
							    b
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a)
							    ->
							    PrelBase.ZMZN
							    (ParCore.HappyState
							     b
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a))
							    ->
							    ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReducezu47 @ b @ a @ t34 @ t35 @ t36 @ t37 @ t38 eta1
	eta2 eta3 eta4 eta5;
  ParCore.happyReducezu44 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happySpecReducezu1 @ a @ t34 @ t35 @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (44::PrelGHC.Intzh))
	(ParCore.happyReductionzu44 @ t34 @ t35 @ t36 @ t37 @ t38 @ t34
	 @ t35 @ t36 @ t37 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.happyReducezu32 :: %forall b a t34 t36 t37 t38 . PrelBase.Int
							   ->
							   b ->
							   ParCore.HappyState
							   b
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     (PrelBase.ZMZN PrelBase.Char)
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err a)
							   ->
							   PrelBase.ZMZN
							   (ParCore.HappyState
							    b
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      (PrelBase.ZMZN PrelBase.Char)
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a))
							   ->
							   ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    t34
							    (PrelBase.ZMZN PrelBase.Char)
							    t36
							    t37
							    t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk
	      (ParCore.HappyAbsSyn t34 (PrelBase.ZMZN PrelBase.Char) t36 t37 t38)
	      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk
	       (ParCore.HappyAbsSyn t34 (PrelBase.ZMZN PrelBase.Char) t36 t37 t38)
	       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn
	      t34
	      (PrelBase.ZMZN PrelBase.Char)
	      t36
	      t37
	      t38)) ->
	ParCore.happySpecReducezu1 @ a @ t34
	@ (PrelBase.ZMZN PrelBase.Char) @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (35::PrelGHC.Intzh))
	(ParCore.happyReductionzu32 @ t34 @ (PrelBase.ZMZN PrelBase.Char)
	 @ t36 @ t37 @ t38 @ t34 @ t36 @ t37 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.actionzu131 :: %forall t b t34 t36 t37 t38 a . t ->
							 PrelBase.Int ->
							 b ->
							 ParCore.HappyState
							 b
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   t34
							   (PrelBase.ZMZN PrelBase.Char)
							   t36
							   t37
							   t38)
							  ->
							  PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
							 ->
							 PrelBase.ZMZN
							 (ParCore.HappyState
							  b
							  (ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    t34
							    (PrelBase.ZMZN PrelBase.Char)
							    t36
							    t37
							    t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err a))
							 ->
							 ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  t34
							  (PrelBase.ZMZN PrelBase.Char)
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk
	      (ParCore.HappyAbsSyn t34 (PrelBase.ZMZN PrelBase.Char) t36 t37 t38)
	      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk
	       (ParCore.HappyAbsSyn t34 (PrelBase.ZMZN PrelBase.Char) t36 t37 t38)
	       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn
	      t34
	      (PrelBase.ZMZN PrelBase.Char)
	      t36
	      t37
	      t38)) ->
	ParCore.happyReducezu32 @ b @ a @ t34 @ t36 @ t37 @ t38 eta1 eta2
	eta3 eta4 eta5;
  ParCore.happyReducezu31 :: %forall b a t35 t36 t37 t38 . PrelBase.Int
							   ->
							   b ->
							   ParCore.HappyState
							   b
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     (PrelBase.ZMZN PrelBase.Char)
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err a)
							   ->
							   PrelBase.ZMZN
							   (ParCore.HappyState
							    b
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      (PrelBase.ZMZN PrelBase.Char)
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a))
							   ->
							   ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    (PrelBase.ZMZN PrelBase.Char)
							    t35
							    t36
							    t37
							    t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err a =
    \ @ b
      @ a
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk
	      (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
	      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk
	       (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
	       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn
	      (PrelBase.ZMZN PrelBase.Char)
	      t35
	      t36
	      t37
	      t38)) ->
	ParCore.happySpecReducezu1 @ a @ (PrelBase.ZMZN PrelBase.Char)
	@ t35 @ t36 @ t37 @ t38 @ b (PrelBase.ZdwIzh (34::PrelGHC.Intzh))
	(ParCore.happyReductionzu31 @ (PrelBase.ZMZN PrelBase.Char) @ t35
	 @ t36 @ t37 @ t38 @ t35 @ t36 @ t37 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.actionzu32 :: %forall t b t35 t36 t37 t38 a . t ->
							PrelBase.Int ->
							b ->
							ParCore.HappyState
							b
							(ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
							->
							PrelBase.ZMZN
							(ParCore.HappyState
							 b
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   t38)
							  ->
							  PrelBase.ZMZN LexCore.Token ->
							  ErrM.Err a))
							->
							ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38)
							->
							PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t
      @ b
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk
	      (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
	      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk
	       (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
	       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn
	      (PrelBase.ZMZN PrelBase.Char)
	      t35
	      t36
	      t37
	      t38)) ->
	ParCore.happyReducezu31 @ b @ a @ t35 @ t36 @ t37 @ t38 eta1 eta2
	eta3 eta4 eta5;
  ParCore.happySpecReducezu0 :: %forall a t34 t35 t36 t37 t38 b . PrelBase.Int
								  ->
								  ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38
								  ->
								  PrelBase.Int ->
								  b ->
								  ParCore.HappyState
								  b
								  (ParCore.HappyStk
								   (ParCore.HappyAbsSyn
								    t34
								    t35
								    t36
								    t37
								    t38)
								   ->
								   PrelBase.ZMZN LexCore.Token ->
								   ErrM.Err a)
								  ->
								  PrelBase.ZMZN
								  (ParCore.HappyState
								   b
								   (ParCore.HappyStk
								    (ParCore.HappyAbsSyn
								     t34
								     t35
								     t36
								     t37
								     t38)
								    ->
								    PrelBase.ZMZN LexCore.Token ->
								    ErrM.Err a))
								  ->
								  ParCore.HappyStk
								  (ParCore.HappyAbsSyn
								   t34
								   t35
								   t36
								   t37
								   t38)
								  ->
								  PrelBase.ZMZN LexCore.Token ->
								  ErrM.Err a =
    \ @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ b
      (i::PrelBase.Int)
      (fn::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
      (ds::PrelBase.Int)
      (tk::b)
      (st::ParCore.HappyState
	   b
	   (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	    PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (sts::PrelBase.ZMZN
	    (ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (stk::ParCore.HappyStk
	    (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	%case ds %of (wild::PrelBase.Int)
	  {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	     %case ds1 %of (ds2::PrelGHC.Intzh)
	       {%_ ->
		  (%coerce (PrelBase.Int ->
			    PrelBase.Int ->
			    b ->
			    ParCore.HappyState
			    b
			    (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
			     PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			    ->
			    PrelBase.ZMZN
			    (ParCore.HappyState
			     b
			     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
			      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			    ->
			    ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
			    PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   st)
		  i wild tk st
		  (PrelBase.ZdwZC
		   @ (ParCore.HappyState
		      b
		      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
		       PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   st sts)
		  (ParCore.ZdwHappyStk @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) fn
		   stk);
		(1::PrelGHC.Intzh) ->
		  ParCore.happyFail @ a @ b @ t34 @ t35 @ t36 @ t37 @ t38
		  (PrelBase.ZdwIzh (1::PrelGHC.Intzh)) tk st sts stk}};
  ParCore.happyReducezu95 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happySpecReducezu0 @ a @ t34 @ t35 @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (65::PrelGHC.Intzh))
	(ParCore.happyReductionzu95 @ t34 @ t35 @ t36 @ t37 @ t38) eta eta1
	eta2 eta3 eta4;
  ParCore.happyReducezu85 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happySpecReducezu0 @ a @ t34 @ t35 @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (61::PrelGHC.Intzh))
	(ParCore.happyReductionzu85 @ t34 @ t35 @ t36 @ t37 @ t38) eta eta1
	eta2 eta3 eta4;
  ParCore.happyReducezu82 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happySpecReducezu0 @ a @ t34 @ t35 @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (59::PrelGHC.Intzh))
	(ParCore.happyReductionzu82 @ t34 @ t35 @ t36 @ t37 @ t38) eta eta1
	eta2 eta3 eta4;
  ParCore.happyReducezu78 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happySpecReducezu0 @ a @ t34 @ t35 @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (57::PrelGHC.Intzh))
	(ParCore.happyReductionzu78 @ t34 @ t35 @ t36 @ t37 @ t38) eta eta1
	eta2 eta3 eta4;
  ParCore.happyReducezu48 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happySpecReducezu0 @ a @ t34 @ t35 @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (46::PrelGHC.Intzh))
	(ParCore.happyReductionzu48 @ t34 @ t35 @ t36 @ t37 @ t38) eta eta1
	eta2 eta3 eta4;
  ParCore.happyReducezu42 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happySpecReducezu0 @ a @ t34 @ t35 @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (42::PrelGHC.Intzh))
	(ParCore.happyReductionzu42 @ t34 @ t35 @ t36 @ t37 @ t38) eta eta1
	eta2 eta3 eta4;
  ParCore.happyReducezu37 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happySpecReducezu0 @ a @ t34 @ t35 @ t36 @ t37 @ t38 @ b
	(PrelBase.ZdwIzh (40::PrelGHC.Intzh))
	(ParCore.happyReductionzu37 @ t34 @ t35 @ t36 @ t37 @ t38) eta eta1
	eta2 eta3 eta4;
  lit :: PrelBase.Int = PrelBase.ZdwIzh (103::PrelGHC.Intzh);
  ParCore.happyNewToken :: %forall t t1 . (PrelBase.Int ->
					   PrelBase.Int ->
					   LexCore.Token ->
					   ParCore.HappyState
					   LexCore.Token
					   (t -> PrelBase.ZMZN LexCore.Token -> t1)
					   ->
					   PrelBase.ZMZN
					   (ParCore.HappyState
					    LexCore.Token
					    (t -> PrelBase.ZMZN LexCore.Token -> t1))
					   -> t -> PrelBase.ZMZN LexCore.Token -> t1)
					  ->
					  PrelBase.ZMZN
					  (ParCore.HappyState
					   LexCore.Token
					   (t -> PrelBase.ZMZN LexCore.Token -> t1))
					  -> t -> PrelBase.ZMZN LexCore.Token -> t1 =
    \ @ t
      @ t1
      (action::PrelBase.Int ->
	       PrelBase.Int ->
	       LexCore.Token ->
	       ParCore.HappyState
	       LexCore.Token
	       (t -> PrelBase.ZMZN LexCore.Token -> t1)
	       ->
	       PrelBase.ZMZN
	       (ParCore.HappyState
		LexCore.Token
		(t -> PrelBase.ZMZN LexCore.Token -> t1))
	       -> t -> PrelBase.ZMZN LexCore.Token -> t1)
      (sts::PrelBase.ZMZN
	    (ParCore.HappyState
	     LexCore.Token
	     (t -> PrelBase.ZMZN LexCore.Token -> t1)))
      (stk::t)
      (ds::PrelBase.ZMZN LexCore.Token) ->
	%case ds %of (wild::PrelBase.ZMZN LexCore.Token)
	  {PrelBase.ZdwZC
	   (tk::LexCore.Token) (tks::PrelBase.ZMZN LexCore.Token) ->
	     %let fail :: t1 =
		    %let i :: PrelBase.Int = PrelBase.ZdwIzh (102::PrelGHC.Intzh)
		    %in action i i tk
			(%coerce (ParCore.HappyState
				  LexCore.Token
				  (t -> PrelBase.ZMZN LexCore.Token -> t1))
			 action)
			sts stk tks
	     %in %case tk %of (wild1::LexCore.Token)
		   {LexCore.ZdwErr (a::Alex.Posn) ->
		      fail;
		    LexCore.ZdwPT (ds1::Alex.Posn) (ds2::LexCore.Tok) ->
		      %case ds2 %of (wild2::LexCore.Tok)
			{LexCore.ZdwTV
			 (happyzudollarzudollar::PrelBase.ZMZN PrelBase.Char) ->
			   %let i :: PrelBase.Int = PrelBase.ZdwIzh (97::PrelGHC.Intzh)
			   %in action i i wild1
			       (%coerce (ParCore.HappyState
					 LexCore.Token
					 (t -> PrelBase.ZMZN LexCore.Token -> t1))
				action)
			       sts stk tks;
			 LexCore.ZdwTL
			 (happyzudollarzudollar::PrelBase.ZMZN PrelBase.Char) ->
			   %let i :: PrelBase.Int = PrelBase.ZdwIzh (98::PrelGHC.Intzh)
			   %in action i i wild1
			       (%coerce (ParCore.HappyState
					 LexCore.Token
					 (t -> PrelBase.ZMZN LexCore.Token -> t1))
				action)
			       sts stk tks;
			 LexCore.ZdwTI
			 (happyzudollarzudollar::PrelBase.ZMZN PrelBase.Char) ->
			   %let i :: PrelBase.Int = PrelBase.ZdwIzh (99::PrelGHC.Intzh)
			   %in action i i wild1
			       (%coerce (ParCore.HappyState
					 LexCore.Token
					 (t -> PrelBase.ZMZN LexCore.Token -> t1))
				action)
			       sts stk tks;
			 LexCore.ZdwTD
			 (happyzudollarzudollar::PrelBase.ZMZN PrelBase.Char) ->
			   %let i :: PrelBase.Int = PrelBase.ZdwIzh (100::PrelGHC.Intzh)
			   %in action i i wild1
			       (%coerce (ParCore.HappyState
					 LexCore.Token
					 (t -> PrelBase.ZMZN LexCore.Token -> t1))
				action)
			       sts stk tks;
			 LexCore.ZdwTC
			 (happyzudollarzudollar::PrelBase.ZMZN PrelBase.Char) ->
			   %let i :: PrelBase.Int = PrelBase.ZdwIzh (101::PrelGHC.Intzh)
			   %in action i i wild1
			       (%coerce (ParCore.HappyState
					 LexCore.Token
					 (t -> PrelBase.ZMZN LexCore.Token -> t1))
				action)
			       sts stk tks;
			 LexCore.ZdwTS (ds3::PrelBase.ZMZN PrelBase.Char) ->
			   %case (PrelBase.eqString
				  (PrelBase.unpackCStringzh ("%module"::PrelGHC.Addrzh)) ds3)
			   %of (wild3::PrelBase.Bool)
			     {PrelBase.ZdwTrue ->
				%let i :: PrelBase.Int = PrelBase.ZdwIzh (70::PrelGHC.Intzh)
				%in action i i wild1
				    (%coerce (ParCore.HappyState
					      LexCore.Token
					      (t -> PrelBase.ZMZN LexCore.Token -> t1))
				     action)
				    sts stk tks;
			      PrelBase.ZdwFalse ->
				%let fail1 :: t1 =
				       %case (PrelBase.eqString
					      (PrelBase.unpackCStringzh ("%data"::PrelGHC.Addrzh))
					      ds3)
				       %of (wild4::PrelBase.Bool)
					 {PrelBase.ZdwTrue ->
					    %let i :: PrelBase.Int =
						   PrelBase.ZdwIzh (72::PrelGHC.Intzh)
					    %in action i i wild1
						(%coerce (ParCore.HappyState
							  LexCore.Token
							  (t -> PrelBase.ZMZN LexCore.Token -> t1))
						 action)
						sts stk tks;
					  PrelBase.ZdwFalse ->
					    %let fail2 :: t1 =
						   %case (PrelBase.eqString
							  (PrelBase.unpackCStringzh
							   ("%newtype"::PrelGHC.Addrzh))
							  ds3)
						   %of (wild5::PrelBase.Bool)
						     {PrelBase.ZdwTrue ->
							%let i :: PrelBase.Int =
							       PrelBase.ZdwIzh (76::PrelGHC.Intzh)
							%in action i i wild1
							    (%coerce (ParCore.HappyState
								      LexCore.Token
								      (t ->
								       PrelBase.ZMZN LexCore.Token
								       -> t1))
							     action)
							    sts stk tks;
						      PrelBase.ZdwFalse ->
							%case (PrelBase.eqString
							       (PrelBase.unpackCStringzh
								("%rec"::PrelGHC.Addrzh))
							       ds3)
							%of (wild6::PrelBase.Bool)
							  {PrelBase.ZdwTrue ->
							     %let i :: PrelBase.Int =
								    PrelBase.ZdwIzh
								    (77::PrelGHC.Intzh)
							     %in action i i wild1
								 (%coerce (ParCore.HappyState
									   LexCore.Token
									   (t ->
									    PrelBase.ZMZN
									    LexCore.Token
									    -> t1))
								  action)
								 sts stk tks;
							   PrelBase.ZdwFalse ->
							     %case (PrelBase.eqString
								    (PrelBase.unpackCStringzh
								     ("::"::PrelGHC.Addrzh))
								    ds3)
							     %of (wild7::PrelBase.Bool)
							       {PrelBase.ZdwTrue ->
								  %let i :: PrelBase.Int =
									 PrelBase.ZdwIzh
									 (78::PrelGHC.Intzh)
								  %in action i i wild1
								      (%coerce (ParCore.HappyState
										LexCore.Token
										(t ->
										 PrelBase.ZMZN
										 LexCore.Token
										 -> t1))
								       action)
								      sts stk tks;
								PrelBase.ZdwFalse ->
								  %let fail3 :: t1 =
									 %case (PrelBase.eqString
										(PrelBase.unpackCStringzh
										 ("->"::PrelGHC.Addrzh))
										ds3)
									 %of (wild8::PrelBase.Bool)
									   {PrelBase.ZdwTrue ->
									      %let i :: PrelBase.Int =
										     PrelBase.ZdwIzh
										     (81::PrelGHC.Intzh)
									      %in action i i wild1
										  (%coerce (ParCore.HappyState
											    LexCore.Token
											    (t ->
											     PrelBase.ZMZN
											     LexCore.Token
											     -> t1))
										   action)
										  sts stk tks;
									    PrelBase.ZdwFalse ->
									      %case (PrelBase.eqString
										     (PrelBase.unpackCStringzh
										      ("%let"::PrelGHC.Addrzh))
										     ds3)
									      %of (wild9::PrelBase.Bool)
										{PrelBase.ZdwTrue ->
										   %let i :: PrelBase.Int =
											  PrelBase.ZdwIzh
											  (82::PrelGHC.Intzh)
										   %in action i i
										       wild1
										       (%coerce (ParCore.HappyState
												 LexCore.Token
												 (t
												  ->
												  PrelBase.ZMZN
												  LexCore.Token
												  ->
												  t1))
											action)
										       sts stk tks;
										 PrelBase.ZdwFalse
										 ->
										   %case (PrelBase.eqString
											  (PrelBase.unpackCStringzh
											   ("%in"::PrelGHC.Addrzh))
											  ds3)
										   %of (wild10::PrelBase.Bool)
										     {PrelBase.ZdwTrue
										      ->
											%let i :: PrelBase.Int =
											       PrelBase.ZdwIzh
											       (83::PrelGHC.Intzh)
											%in action i
											    i wild1
											    (%coerce (ParCore.HappyState
												      LexCore.Token
												      (t
												       ->
												       PrelBase.ZMZN
												       LexCore.Token
												       ->
												       t1))
											     action)
											    sts stk
											    tks;
										      PrelBase.ZdwFalse
										      ->
											%case (PrelBase.eqString
											       (PrelBase.unpackCStringzh
												("%case"::PrelGHC.Addrzh))
											       ds3)
											%of (wild11::PrelBase.Bool)
											  {PrelBase.ZdwTrue
											   ->
											     %let i :: PrelBase.Int =
												    PrelBase.ZdwIzh
												    (84::PrelGHC.Intzh)
											     %in action
												 i i
												 wild1
												 (%coerce (ParCore.HappyState
													   LexCore.Token
													   (t
													    ->
													    PrelBase.ZMZN
													    LexCore.Token
													    ->
													    t1))
												  action)
												 sts
												 stk
												 tks;
											   PrelBase.ZdwFalse
											   ->
											     %case (PrelBase.eqString
												    (PrelBase.unpackCStringzh
												     ("%of"::PrelGHC.Addrzh))
												    ds3)
											     %of (wild12::PrelBase.Bool)
											       {PrelBase.ZdwTrue
												->
												  %let i :: PrelBase.Int =
													 PrelBase.ZdwIzh
													 (85::PrelGHC.Intzh)
												  %in action
												      i
												      i
												      wild1
												      (%coerce (ParCore.HappyState
														LexCore.Token
														(t
														 ->
														 PrelBase.ZMZN
														 LexCore.Token
														 ->
														 t1))
												       action)
												      sts
												      stk
												      tks;
												PrelBase.ZdwFalse
												->
												  %case (PrelBase.eqString
													 (PrelBase.unpackCStringzh
													  ("%coerce"::PrelGHC.Addrzh))
													 ds3)
												  %of (wild13::PrelBase.Bool)
												    {PrelBase.ZdwTrue
												     ->
												       %let i :: PrelBase.Int =
													      PrelBase.ZdwIzh
													      (86::PrelGHC.Intzh)
												       %in action
													   i
													   i
													   wild1
													   (%coerce (ParCore.HappyState
														     LexCore.Token
														     (t
														      ->
														      PrelBase.ZMZN
														      LexCore.Token
														      ->
														      t1))
													    action)
													   sts
													   stk
													   tks;
												     PrelBase.ZdwFalse
												     ->
												       %case (PrelBase.eqString
													      (PrelBase.unpackCStringzh
													       ("%note"::PrelGHC.Addrzh))
													      ds3)
												       %of (wild14::PrelBase.Bool)
													 {PrelBase.ZdwTrue
													  ->
													    %let i :: PrelBase.Int =
														   PrelBase.ZdwIzh
														   (87::PrelGHC.Intzh)
													    %in action
														i
														i
														wild1
														(%coerce (ParCore.HappyState
															  LexCore.Token
															  (t
															   ->
															   PrelBase.ZMZN
															   LexCore.Token
															   ->
															   t1))
														 action)
														sts
														stk
														tks;
													  PrelBase.ZdwFalse
													  ->
													    %case (PrelBase.eqString
														   (PrelBase.unpackCStringzh
														    ("%external"::PrelGHC.Addrzh))
														   ds3)
													    %of (wild15::PrelBase.Bool)
													      {PrelBase.ZdwTrue
													       ->
														 %let i :: PrelBase.Int =
															PrelBase.ZdwIzh
															(88::PrelGHC.Intzh)
														 %in action
														     i
														     i
														     wild1
														     (%coerce (ParCore.HappyState
															       LexCore.Token
															       (t
																->
																PrelBase.ZMZN
																LexCore.Token
																->
																t1))
														      action)
														     sts
														     stk
														     tks;
													       PrelBase.ZdwFalse
													       ->
														 %let fail4 :: t1 =
															%case (PrelBase.eqString
															       (PrelBase.unpackCStringzh
																("%_"::PrelGHC.Addrzh))
															       ds3)
															%of (wild16::PrelBase.Bool)
															  {PrelBase.ZdwTrue
															   ->
															     %let i :: PrelBase.Int =
																    PrelBase.ZdwIzh
																    (91::PrelGHC.Intzh)
															     %in action
																 i
																 i
																 wild1
																 (%coerce (ParCore.HappyState
																	   LexCore.Token
																	   (t
																	    ->
																	    PrelBase.ZMZN
																	    LexCore.Token
																	    ->
																	    t1))
																  action)
																 sts
																 stk
																 tks;
															   PrelBase.ZdwFalse
															   ->
															     %case (PrelBase.eqString
																    (PrelBase.unpackCStringzh
																     ("%forall"::PrelGHC.Addrzh))
																    ds3)
															     %of (wild17::PrelBase.Bool)
															       {PrelBase.ZdwTrue
																->
																  %let i :: PrelBase.Int =
																	 PrelBase.ZdwIzh
																	 (92::PrelGHC.Intzh)
																  %in action
																      i
																      i
																      wild1
																      (%coerce (ParCore.HappyState
																		LexCore.Token
																		(t
																		 ->
																		 PrelBase.ZMZN
																		 LexCore.Token
																		 ->
																		 t1))
																       action)
																      sts
																      stk
																      tks;
																PrelBase.ZdwFalse
																->
																  %case ds3
																  %of (wild18::PrelBase.ZMZN
																	       PrelBase.Char)
																    {PrelBase.ZdwZMZN
																     ->
																       fail;
																     PrelBase.ZdwZC
																     (ds4::PrelBase.Char)
																     (ds5::PrelBase.ZMZN
																	   PrelBase.Char) ->
																       %case ds4
																       %of (wild19::PrelBase.Char)
																	 {PrelBase.ZdwCzh
																	  (ds6::PrelGHC.Charzh) ->
																	    %case ds6
																	    %of (ds7::PrelGHC.Charzh)
																	      {%_ ->
																		 fail;
																	       ('.'::PrelGHC.Charzh) ->
																		 %case ds5
																		 %of (wild20::PrelBase.ZMZN
																			      PrelBase.Char)
																		   {PrelBase.ZdwZC
																		    (a::PrelBase.Char)
																		    (a1::PrelBase.ZMZN
																			 PrelBase.Char) ->
																		      fail;
																		    PrelBase.ZdwZMZN
																		    ->
																		      %let i :: PrelBase.Int =
																			     PrelBase.ZdwIzh
																			     (93::PrelGHC.Intzh)
																		      %in action
																			  i
																			  i
																			  wild1
																			  (%coerce (ParCore.HappyState
																				    LexCore.Token
																				    (t
																				     ->
																				     PrelBase.ZMZN
																				     LexCore.Token
																				     ->
																				     t1))
																			   action)
																			  sts
																			  stk
																			  tks};
																	       ('*'::PrelGHC.Charzh) ->
																		 %case ds5
																		 %of (wild20::PrelBase.ZMZN
																			      PrelBase.Char)
																		   {PrelBase.ZdwZC
																		    (a::PrelBase.Char)
																		    (a1::PrelBase.ZMZN
																			 PrelBase.Char) ->
																		      fail;
																		    PrelBase.ZdwZMZN
																		    ->
																		      %let i :: PrelBase.Int =
																			     PrelBase.ZdwIzh
																			     (94::PrelGHC.Intzh)
																		      %in action
																			  i
																			  i
																			  wild1
																			  (%coerce (ParCore.HappyState
																				    LexCore.Token
																				    (t
																				     ->
																				     PrelBase.ZMZN
																				     LexCore.Token
																				     ->
																				     t1))
																			   action)
																			  sts
																			  stk
																			  tks};
																	       ('#'::PrelGHC.Charzh) ->
																		 %case ds5
																		 %of (wild20::PrelBase.ZMZN
																			      PrelBase.Char)
																		   {PrelBase.ZdwZC
																		    (a::PrelBase.Char)
																		    (a1::PrelBase.ZMZN
																			 PrelBase.Char) ->
																		      fail;
																		    PrelBase.ZdwZMZN
																		    ->
																		      %let i :: PrelBase.Int =
																			     PrelBase.ZdwIzh
																			     (95::PrelGHC.Intzh)
																		      %in action
																			  i
																			  i
																			  wild1
																			  (%coerce (ParCore.HappyState
																				    LexCore.Token
																				    (t
																				     ->
																				     PrelBase.ZMZN
																				     LexCore.Token
																				     ->
																				     t1))
																			   action)
																			  sts
																			  stk
																			  tks};
																	       ('?'::PrelGHC.Charzh) ->
																		 %case ds5
																		 %of (wild20::PrelBase.ZMZN
																			      PrelBase.Char)
																		   {PrelBase.ZdwZC
																		    (a::PrelBase.Char)
																		    (a1::PrelBase.ZMZN
																			 PrelBase.Char) ->
																		      fail;
																		    PrelBase.ZdwZMZN
																		    ->
																		      %let i :: PrelBase.Int =
																			     PrelBase.ZdwIzh
																			     (96::PrelGHC.Intzh)
																		      %in action
																			  i
																			  i
																			  wild1
																			  (%coerce (ParCore.HappyState
																				    LexCore.Token
																				    (t
																				     ->
																				     PrelBase.ZMZN
																				     LexCore.Token
																				     ->
																				     t1))
																			   action)
																			  sts
																			  stk
																			  tks}}}}}}
														 %in %case ds3
														     %of (wild16::PrelBase.ZMZN
																  PrelBase.Char)
														       {PrelBase.ZdwZMZN
															->
															  fail4;
															PrelBase.ZdwZC
															(ds4::PrelBase.Char)
															(ds5::PrelBase.ZMZN
															      PrelBase.Char) ->
															  %case ds4
															  %of (wild17::PrelBase.Char)
															    {PrelBase.ZdwCzh
															     (ds6::PrelGHC.Charzh) ->
															       %case ds6
															       %of (ds7::PrelGHC.Charzh)
																 {%_ ->
																    fail4;
																  ('('::PrelGHC.Charzh) ->
																    %case ds5
																    %of (wild18::PrelBase.ZMZN
																		 PrelBase.Char)
																      {PrelBase.ZdwZC
																       (a::PrelBase.Char)
																       (a1::PrelBase.ZMZN
																	    PrelBase.Char) ->
																	 fail4;
																       PrelBase.ZdwZMZN
																       ->
																	 %let i :: PrelBase.Int =
																		PrelBase.ZdwIzh
																		(89::PrelGHC.Intzh)
																	 %in action
																	     i
																	     i
																	     wild1
																	     (%coerce (ParCore.HappyState
																		       LexCore.Token
																		       (t
																			->
																			PrelBase.ZMZN
																			LexCore.Token
																			->
																			t1))
																	      action)
																	     sts
																	     stk
																	     tks};
																  (')'::PrelGHC.Charzh) ->
																    %case ds5
																    %of (wild18::PrelBase.ZMZN
																		 PrelBase.Char)
																      {PrelBase.ZdwZC
																       (a::PrelBase.Char)
																       (a1::PrelBase.ZMZN
																	    PrelBase.Char) ->
																	 fail4;
																       PrelBase.ZdwZMZN
																       ->
																	 %let i :: PrelBase.Int =
																		PrelBase.ZdwIzh
																		(90::PrelGHC.Intzh)
																	 %in action
																	     i
																	     i
																	     wild1
																	     (%coerce (ParCore.HappyState
																		       LexCore.Token
																		       (t
																			->
																			PrelBase.ZMZN
																			LexCore.Token
																			->
																			t1))
																	      action)
																	     sts
																	     stk
																	     tks}}}}}}}}}}}}
								  %in %case ds3
								      %of (wild8::PrelBase.ZMZN
										  PrelBase.Char)
									{PrelBase.ZdwZMZN ->
									   fail3;
									 PrelBase.ZdwZC
									 (ds4::PrelBase.Char)
									 (ds5::PrelBase.ZMZN
									       PrelBase.Char) ->
									   %case ds4
									   %of (wild9::PrelBase.Char)
									     {PrelBase.ZdwCzh
									      (ds6::PrelGHC.Charzh) ->
										%case ds6
										%of (ds7::PrelGHC.Charzh)
										  {%_ ->
										     fail3;
										   ('@'::PrelGHC.Charzh) ->
										     %case ds5
										     %of (wild10::PrelBase.ZMZN
												  PrelBase.Char)
										       {PrelBase.ZdwZC
											(a::PrelBase.Char)
											(a1::PrelBase.ZMZN
											     PrelBase.Char) ->
											  fail3;
											PrelBase.ZdwZMZN
											->
											  %let i :: PrelBase.Int =
												 PrelBase.ZdwIzh
												 (79::PrelGHC.Intzh)
											  %in action
											      i i
											      wild1
											      (%coerce (ParCore.HappyState
													LexCore.Token
													(t
													 ->
													 PrelBase.ZMZN
													 LexCore.Token
													 ->
													 t1))
											       action)
											      sts
											      stk
											      tks};
										   ('\x5c'::PrelGHC.Charzh) ->
										     %case ds5
										     %of (wild10::PrelBase.ZMZN
												  PrelBase.Char)
										       {PrelBase.ZdwZC
											(a::PrelBase.Char)
											(a1::PrelBase.ZMZN
											     PrelBase.Char) ->
											  fail3;
											PrelBase.ZdwZMZN
											->
											  %let i :: PrelBase.Int =
												 PrelBase.ZdwIzh
												 (80::PrelGHC.Intzh)
											  %in action
											      i i
											      wild1
											      (%coerce (ParCore.HappyState
													LexCore.Token
													(t
													 ->
													 PrelBase.ZMZN
													 LexCore.Token
													 ->
													 t1))
											       action)
											      sts
											      stk
											      tks}}}}}}}
					    %in %case ds3 %of (wild5::PrelBase.ZMZN PrelBase.Char)
						  {PrelBase.ZdwZMZN ->
						     fail2;
						   PrelBase.ZdwZC
						   (ds4::PrelBase.Char)
						   (ds5::PrelBase.ZMZN PrelBase.Char) ->
						     %case ds4 %of (wild6::PrelBase.Char)
						       {PrelBase.ZdwCzh (ds6::PrelGHC.Charzh) ->
							  %case ds6 %of (ds7::PrelGHC.Charzh)
							    {%_ ->
							       fail2;
							     ('='::PrelGHC.Charzh) ->
							       %case ds5
							       %of (wild7::PrelBase.ZMZN
									   PrelBase.Char)
								 {PrelBase.ZdwZC
								  (a::PrelBase.Char)
								  (a1::PrelBase.ZMZN
								       PrelBase.Char) ->
								    fail2;
								  PrelBase.ZdwZMZN ->
								    %let i :: PrelBase.Int =
									   PrelBase.ZdwIzh
									   (73::PrelGHC.Intzh)
								    %in action i i wild1
									(%coerce (ParCore.HappyState
										  LexCore.Token
										  (t ->
										   PrelBase.ZMZN
										   LexCore.Token
										   -> t1))
									 action)
									sts stk tks};
							     ('{'::PrelGHC.Charzh) ->
							       %case ds5
							       %of (wild7::PrelBase.ZMZN
									   PrelBase.Char)
								 {PrelBase.ZdwZC
								  (a::PrelBase.Char)
								  (a1::PrelBase.ZMZN
								       PrelBase.Char) ->
								    fail2;
								  PrelBase.ZdwZMZN ->
								    %let i :: PrelBase.Int =
									   PrelBase.ZdwIzh
									   (74::PrelGHC.Intzh)
								    %in action i i wild1
									(%coerce (ParCore.HappyState
										  LexCore.Token
										  (t ->
										   PrelBase.ZMZN
										   LexCore.Token
										   -> t1))
									 action)
									sts stk tks};
							     ('}'::PrelGHC.Charzh) ->
							       %case ds5
							       %of (wild7::PrelBase.ZMZN
									   PrelBase.Char)
								 {PrelBase.ZdwZC
								  (a::PrelBase.Char)
								  (a1::PrelBase.ZMZN
								       PrelBase.Char) ->
								    fail2;
								  PrelBase.ZdwZMZN ->
								    %let i :: PrelBase.Int =
									   PrelBase.ZdwIzh
									   (75::PrelGHC.Intzh)
								    %in action i i wild1
									(%coerce (ParCore.HappyState
										  LexCore.Token
										  (t ->
										   PrelBase.ZMZN
										   LexCore.Token
										   -> t1))
									 action)
									sts stk tks}}}}}
				%in %case ds3 %of (wild4::PrelBase.ZMZN PrelBase.Char)
				      {PrelBase.ZdwZMZN ->
					 fail1;
				       PrelBase.ZdwZC
				       (ds4::PrelBase.Char) (ds5::PrelBase.ZMZN PrelBase.Char) ->
					 %case ds4 %of (wild5::PrelBase.Char)
					   {PrelBase.ZdwCzh (ds6::PrelGHC.Charzh) ->
					      %case ds6 %of (ds7::PrelGHC.Charzh)
						{%_ ->
						   fail1;
						 (';'::PrelGHC.Charzh) ->
						   %case ds5
						   %of (wild6::PrelBase.ZMZN PrelBase.Char)
						     {PrelBase.ZdwZC
						      (a::PrelBase.Char)
						      (a1::PrelBase.ZMZN PrelBase.Char) ->
							fail1;
						      PrelBase.ZdwZMZN ->
							%let i :: PrelBase.Int =
							       PrelBase.ZdwIzh (71::PrelGHC.Intzh)
							%in action i i wild1
							    (%coerce (ParCore.HappyState
								      LexCore.Token
								      (t ->
								       PrelBase.ZMZN LexCore.Token
								       -> t1))
							     action)
							    sts stk tks}}}}}}};
	   PrelBase.ZdwZMZN ->
	     action lit lit
	     (PrelErr.error @ LexCore.Token
	      (PrelBase.unpackCStringzh ("reading EOF!"::PrelGHC.Addrzh)))
	     (%coerce (ParCore.HappyState
		       LexCore.Token
		       (t -> PrelBase.ZMZN LexCore.Token -> t1))
	      action)
	     sts stk (PrelBase.ZdwZMZN @ LexCore.Token)};
  ParCore.happyShift :: %forall t t1 t34 t35 t36 t37 t38 . PrelNum.ZCTNum
							   t
							   ->
							   (PrelBase.Int ->
							    PrelBase.Int ->
							    LexCore.Token ->
							    ParCore.HappyState
							    LexCore.Token
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     -> PrelBase.ZMZN LexCore.Token -> t1)
							    ->
							    PrelBase.ZMZN
							    (ParCore.HappyState
							     LexCore.Token
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      -> PrelBase.ZMZN LexCore.Token -> t1))
							    ->
							    ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)
							    -> PrelBase.ZMZN LexCore.Token -> t1)
							   ->
							   t ->
							   LexCore.Token ->
							   ParCore.HappyState
							   LexCore.Token
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)
							    -> PrelBase.ZMZN LexCore.Token -> t1)
							   ->
							   PrelBase.ZMZN
							   (ParCore.HappyState
							    LexCore.Token
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     -> PrelBase.ZMZN LexCore.Token -> t1))
							   ->
							   ParCore.HappyStk
							   (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							   -> PrelBase.ZMZN LexCore.Token -> t1 =
    \ @ t
      @ t1
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (1::PrelGHC.Intzh))}
	%in \ (newzustate::PrelBase.Int ->
			   PrelBase.Int ->
			   LexCore.Token ->
			   ParCore.HappyState
			   LexCore.Token
			   (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
			    PrelBase.ZMZN LexCore.Token -> t1)
			   ->
			   PrelBase.ZMZN
			   (ParCore.HappyState
			    LexCore.Token
			    (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
			     PrelBase.ZMZN LexCore.Token -> t1))
			   ->
			   ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
			   PrelBase.ZMZN LexCore.Token -> t1)
	      (ds::t)
	      (tk::LexCore.Token)
	      (st::ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
		    PrelBase.ZMZN LexCore.Token -> t1))
	      (sts::PrelBase.ZMZN
		    (ParCore.HappyState
		     LexCore.Token
		     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
		      PrelBase.ZMZN LexCore.Token -> t1)))
	      (stk::ParCore.HappyStk
		    (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
		%case zddNum %of (tpl::PrelNum.ZCTNum t)
		  {PrelNum.ZdwZCDNum
		   (tpl1::PrelBase.ZCTEq t)
		   (tpl2::PrelShow.ZCTShow t)
		   (tpl3::t -> t -> t)
		   (tpl4::t -> t -> t)
		   (tpl5::t -> t -> t)
		   (tpl6::t -> t)
		   (tpl7::t -> t)
		   (tpl8::t -> t)
		   (tpl9::PrelNum.Integer -> t) ->
		     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
		       {PrelBase.ZdwZCDEq
			(tpl11::t -> t -> PrelBase.Bool)
			(tpl12::t -> t -> PrelBase.Bool) ->
			  %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
			    {PrelBase.ZdwTrue ->
			       %case stk
			       %of (wild1::ParCore.HappyStk
					   (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
				 {ParCore.ZdwHappyStk
				  (x::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
				  (ds1::ParCore.HappyStk
					(ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
				    %let i :: PrelBase.Int =
					   %case x
					   %of (wild2::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
					     {%_ ->
						PrelErr.patError @ PrelBase.Int
						(PrelBase.unpackCStringzh
						 ("GenericTemplate.hs:159|case"::PrelGHC.Addrzh));
					      ParCore.ZdwHappyErrorToken (i1::PrelBase.Int) ->
						i1}
				    %in newzustate i i tk
					(%coerce (ParCore.HappyState
						  LexCore.Token
						  (ParCore.HappyStk
						   (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
						   -> PrelBase.ZMZN LexCore.Token -> t1))
					 newzustate)
					(PrelBase.ZdwZC
					 @ (ParCore.HappyState
					    LexCore.Token
					    (ParCore.HappyStk
					     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
					     -> PrelBase.ZMZN LexCore.Token -> t1))
					 st sts)
					wild1};
			     PrelBase.ZdwFalse ->
			       %let eta :: ParCore.HappyAbsSyn t34 t35 t36 t37 t38 =
				      ParCore.ZdwHappyTerminal @ t34 @ t35 @ t36 @ t37 @ t38 tk
			       %in ParCore.happyNewToken
				   @ (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
				   @ t1 newzustate
				   (PrelBase.ZdwZC
				    @ (ParCore.HappyState
				       LexCore.Token
				       (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
					-> PrelBase.ZMZN LexCore.Token -> t1))
				    st sts)
				   (ParCore.ZdwHappyStk @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
				    eta stk)}}};
  ParCore.actionzu158 :: %forall t t34 t35 t36 t37 t38 a . PrelNum.ZCTNum
							   t
							   ->
							   t ->
							   PrelBase.Int ->
							   LexCore.Token ->
							   ParCore.HappyState
							   LexCore.Token
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err a)
							   ->
							   PrelBase.ZMZN
							   (ParCore.HappyState
							    LexCore.Token
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a))
							   ->
							   ParCore.HappyStk
							   (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err a =
    \ @ t
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (90::PrelGHC.Intzh))}
	%in %let happyShift1 :: (PrelBase.Int ->
				 PrelBase.Int ->
				 LexCore.Token ->
				 ParCore.HappyState
				 LexCore.Token
				 (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				  PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				 ->
				 PrelBase.ZMZN
				 (ParCore.HappyState
				  LexCore.Token
				  (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				   PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				 ->
				 ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				 PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				->
				PrelBase.Int ->
				LexCore.Token ->
				ParCore.HappyState
				LexCore.Token
				(ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				 PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				->
				PrelBase.ZMZN
				(ParCore.HappyState
				 LexCore.Token
				 (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				  PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				->
				ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
		   ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a) @ t34 @ t35 @ t36
		   @ t37 @ t38 PrelNum.zdfNumInt
	    %in \ (ds::t) ->
		    %case zddNum %of (tpl::PrelNum.ZCTNum t)
		      {PrelNum.ZdwZCDNum
		       (tpl1::PrelBase.ZCTEq t)
		       (tpl2::PrelShow.ZCTShow t)
		       (tpl3::t -> t -> t)
		       (tpl4::t -> t -> t)
		       (tpl5::t -> t -> t)
		       (tpl6::t -> t)
		       (tpl7::t -> t)
		       (tpl8::t -> t)
		       (tpl9::PrelNum.Integer -> t) ->
			 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
			   {PrelBase.ZdwZCDEq
			    (tpl11::t -> t -> PrelBase.Bool)
			    (tpl12::t -> t -> PrelBase.Bool) ->
			      %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
				{PrelBase.ZdwTrue ->
				   happyShift1
				   (ParCore.actionzu161 @ PrelBase.Int @ LexCore.Token @ t34 @ t35
				    @ t36 @ t37 @ t38 @ a);
				 PrelBase.ZdwFalse ->
				   ParCore.happyFail @ a @ LexCore.Token @ t34 @ t35 @ t36 @ t37
				   @ t38}}};
  actionzu1581 :: %forall t34 t35 t36 t37 t38 a . PrelBase.Int ->
						  PrelBase.Int ->
						  LexCore.Token ->
						  ParCore.HappyState
						  LexCore.Token
						  (ParCore.HappyStk
						   (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
						   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						  ->
						  PrelBase.ZMZN
						  (ParCore.HappyState
						   LexCore.Token
						   (ParCore.HappyStk
						    (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
						    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						  ->
						  ParCore.HappyStk
						  (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
						  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t34 @ t35 @ t36 @ t37 @ t38 @ a ->
	ParCore.actionzu158 @ PrelBase.Int @ t34 @ t35 @ t36 @ t37 @ t38
	@ a PrelNum.zdfNumInt;
  happyShift1 :: %forall t34 t35 t36 t37 t38 a . (PrelBase.Int ->
						  PrelBase.Int ->
						  LexCore.Token ->
						  ParCore.HappyState
						  LexCore.Token
						  (ParCore.HappyStk
						   (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
						   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						  ->
						  PrelBase.ZMZN
						  (ParCore.HappyState
						   LexCore.Token
						   (ParCore.HappyStk
						    (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
						    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						  ->
						  ParCore.HappyStk
						  (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
						  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						 ->
						 PrelBase.Int ->
						 LexCore.Token ->
						 ParCore.HappyState
						 LexCore.Token
						 (ParCore.HappyStk
						  (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
						  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						 ->
						 PrelBase.ZMZN
						 (ParCore.HappyState
						  LexCore.Token
						  (ParCore.HappyStk
						   (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
						   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						 ->
						 ParCore.HappyStk
						 (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
						 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t34 @ t35 @ t36 @ t37 @ t38 @ a ->
	ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a) @ t34 @ t35 @ t36
	@ t37 @ t38 PrelNum.zdfNumInt;
  %rec
  {actionzu391 :: %forall t34 t35 t36 t37 t38 a . PrelBase.Int ->
						  PrelBase.Int ->
						  LexCore.Token ->
						  ParCore.HappyState
						  LexCore.Token
						  (ParCore.HappyStk
						   (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
						   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						  ->
						  PrelBase.ZMZN
						  (ParCore.HappyState
						   LexCore.Token
						   (ParCore.HappyStk
						    (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
						    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						  ->
						  ParCore.HappyStk
						  (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
						  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
     \ @ t34 @ t35 @ t36 @ t37 @ t38 @ a (ds::PrelBase.Int) ->
	 %case ds %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	      %case ds1 %of (ds2::PrelGHC.Intzh)
		{%_ ->
		   ParCore.happyFail @ a @ LexCore.Token @ t34 @ t35 @ t36 @ t37
		   @ t38;
		 (89::PrelGHC.Intzh) ->
		   happyShift1 @ t34 @ t35 @ t36 @ t37 @ t38 @ a
		   (%note "InlineMe"
		    actionzu391 @ t34 @ t35 @ t36 @ t37 @ t38 @ a);
		 (94::PrelGHC.Intzh) ->
		   happyShift1 @ t34 @ t35 @ t36 @ t37 @ t38 @ a
		   (ParCore.actionzu40 @ PrelBase.Int @ LexCore.Token @ t34 @ t35
		    @ t36 @ t37 @ t38 @ a);
		 (95::PrelGHC.Intzh) ->
		   happyShift1 @ t34 @ t35 @ t36 @ t37 @ t38 @ a
		   (ParCore.actionzu41 @ PrelBase.Int @ LexCore.Token @ t34 @ t35
		    @ t36 @ t37 @ t38 @ a);
		 (96::PrelGHC.Intzh) ->
		   happyShift1 @ t34 @ t35 @ t36 @ t37 @ t38 @ a
		   (ParCore.actionzu42 @ PrelBase.Int @ LexCore.Token @ t34 @ t35
		    @ t36 @ t37 @ t38 @ a);
		 (66::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
		       PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
		      PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu371 @ t34 @ t35 @ t36 @ t37 @ t38 @ a);
		 (67::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
		       PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
		      PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu1581 @ t34 @ t35 @ t36 @ t37 @ t38 @ a)}};
   actionzu1591 :: %forall t34 t35 t36 t37 t38 a . PrelBase.Int ->
						   PrelBase.Int ->
						   LexCore.Token ->
						   ParCore.HappyState
						   LexCore.Token
						   (ParCore.HappyStk
						    (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
						    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						   ->
						   PrelBase.ZMZN
						   (ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
						     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						   ->
						   ParCore.HappyStk
						   (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
						   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
     \ @ t34 @ t35 @ t36 @ t37 @ t38 @ a (ds::PrelBase.Int) ->
	 %case ds %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	      %case ds1 %of (ds2::PrelGHC.Intzh)
		{%_ ->
		   ParCore.happyFail @ a @ LexCore.Token @ t34 @ t35 @ t36 @ t37
		   @ t38;
		 (89::PrelGHC.Intzh) ->
		   happyShift1 @ t34 @ t35 @ t36 @ t37 @ t38 @ a
		   (%note "InlineMe"
		    actionzu391 @ t34 @ t35 @ t36 @ t37 @ t38 @ a);
		 (94::PrelGHC.Intzh) ->
		   happyShift1 @ t34 @ t35 @ t36 @ t37 @ t38 @ a
		   (ParCore.actionzu40 @ PrelBase.Int @ LexCore.Token @ t34 @ t35
		    @ t36 @ t37 @ t38 @ a);
		 (95::PrelGHC.Intzh) ->
		   happyShift1 @ t34 @ t35 @ t36 @ t37 @ t38 @ a
		   (ParCore.actionzu41 @ PrelBase.Int @ LexCore.Token @ t34 @ t35
		    @ t36 @ t37 @ t38 @ a);
		 (96::PrelGHC.Intzh) ->
		   happyShift1 @ t34 @ t35 @ t36 @ t37 @ t38 @ a
		   (ParCore.actionzu42 @ PrelBase.Int @ LexCore.Token @ t34 @ t35
		    @ t36 @ t37 @ t38 @ a);
		 (66::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
		       PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
		      PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu371 @ t34 @ t35 @ t36 @ t37 @ t38 @ a);
		 (67::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
		       PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
		      PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu160 @ PrelBase.Int @ LexCore.Token @ t34 @ t35
		    @ t36 @ t37 @ t38 @ a)}};
   actionzu371 :: %forall t34 t35 t36 t37 t38 a . PrelBase.Int ->
						  PrelBase.Int ->
						  LexCore.Token ->
						  ParCore.HappyState
						  LexCore.Token
						  (ParCore.HappyStk
						   (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
						   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						  ->
						  PrelBase.ZMZN
						  (ParCore.HappyState
						   LexCore.Token
						   (ParCore.HappyStk
						    (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
						    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						  ->
						  ParCore.HappyStk
						  (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
						  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
     \ @ t34 @ t35 @ t36 @ t37 @ t38 @ a (ds::PrelBase.Int) ->
	 %case ds %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	      %case ds1 %of (ds2::PrelGHC.Intzh)
		{%_ ->
		   ParCore.happyReducezu102 @ LexCore.Token @ a @ t34 @ t35 @ t36
		   @ t37 @ t38;
		 (81::PrelGHC.Intzh) ->
		   happyShift1 @ t34 @ t35 @ t36 @ t37 @ t38 @ a
		   (%note "InlineMe"
		    actionzu1591 @ t34 @ t35 @ t36 @ t37 @ t38 @ a)}}};
  ParCore.actionzu159 :: %forall t34 t35 t36 t37 t38 a . PrelBase.Int
							 ->
							 PrelBase.Int ->
							 LexCore.Token ->
							 ParCore.HappyState
							 LexCore.Token
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							  ->
							  PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
							 ->
							 PrelBase.ZMZN
							 (ParCore.HappyState
							  LexCore.Token
							  (ParCore.HappyStk
							   (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err a))
							 ->
							 ParCore.HappyStk
							 (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t34 @ t35 @ t36 @ t37 @ t38 @ a ->
	%note "InlineMe"
	actionzu1591 @ t34 @ t35 @ t36 @ t37 @ t38 @ a;
  ParCore.actionzu39 :: %forall t34 t35 t36 t37 t38 a . PrelBase.Int
							->
							PrelBase.Int ->
							LexCore.Token ->
							ParCore.HappyState
							LexCore.Token
							(ParCore.HappyStk
							 (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
							->
							PrelBase.ZMZN
							(ParCore.HappyState
							 LexCore.Token
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							  ->
							  PrelBase.ZMZN LexCore.Token ->
							  ErrM.Err a))
							->
							ParCore.HappyStk
							(ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							->
							PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t34 @ t35 @ t36 @ t37 @ t38 @ a ->
	%note "InlineMe"
	actionzu391 @ t34 @ t35 @ t36 @ t37 @ t38 @ a;
  ParCore.actionzu37 :: %forall t34 t35 t36 t37 t38 a . PrelBase.Int
							->
							PrelBase.Int ->
							LexCore.Token ->
							ParCore.HappyState
							LexCore.Token
							(ParCore.HappyStk
							 (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
							->
							PrelBase.ZMZN
							(ParCore.HappyState
							 LexCore.Token
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							  ->
							  PrelBase.ZMZN LexCore.Token ->
							  ErrM.Err a))
							->
							ParCore.HappyStk
							(ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							->
							PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t34 @ t35 @ t36 @ t37 @ t38 @ a ->
	%note "InlineMe"
	actionzu371 @ t34 @ t35 @ t36 @ t37 @ t38 @ a;
  ParCore.actionzu155 :: %forall t t34 t35 t36 t37 t38 a . PrelNum.ZCTNum
							   t
							   ->
							   t ->
							   PrelBase.Int ->
							   LexCore.Token ->
							   ParCore.HappyState
							   LexCore.Token
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err a)
							   ->
							   PrelBase.ZMZN
							   (ParCore.HappyState
							    LexCore.Token
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a))
							   ->
							   ParCore.HappyStk
							   (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err a =
    \ @ t
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (90::PrelGHC.Intzh))}
	%in %let happyShift2 :: (PrelBase.Int ->
				 PrelBase.Int ->
				 LexCore.Token ->
				 ParCore.HappyState
				 LexCore.Token
				 (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				  PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				 ->
				 PrelBase.ZMZN
				 (ParCore.HappyState
				  LexCore.Token
				  (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				   PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				 ->
				 ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				 PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				->
				PrelBase.Int ->
				LexCore.Token ->
				ParCore.HappyState
				LexCore.Token
				(ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				 PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				->
				PrelBase.ZMZN
				(ParCore.HappyState
				 LexCore.Token
				 (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				  PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				->
				ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
		   ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a) @ t34 @ t35 @ t36
		   @ t37 @ t38 PrelNum.zdfNumInt
	    %in \ (ds::t) ->
		    %case zddNum %of (tpl::PrelNum.ZCTNum t)
		      {PrelNum.ZdwZCDNum
		       (tpl1::PrelBase.ZCTEq t)
		       (tpl2::PrelShow.ZCTShow t)
		       (tpl3::t -> t -> t)
		       (tpl4::t -> t -> t)
		       (tpl5::t -> t -> t)
		       (tpl6::t -> t)
		       (tpl7::t -> t)
		       (tpl8::t -> t)
		       (tpl9::PrelNum.Integer -> t) ->
			 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
			   {PrelBase.ZdwZCDEq
			    (tpl11::t -> t -> PrelBase.Bool)
			    (tpl12::t -> t -> PrelBase.Bool) ->
			      %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
				{PrelBase.ZdwTrue ->
				   happyShift2
				   (ParCore.actionzu163 @ PrelBase.Int @ LexCore.Token @ t34 @ t35
				    @ t36 @ t37 @ t38 @ a);
				 PrelBase.ZdwFalse ->
				   ParCore.happyFail @ a @ LexCore.Token @ t34 @ t35 @ t36 @ t37
				   @ t38}}};
  ParCore.actionzu130 :: %forall t t34 t35 t36 t37 t38 a . PrelNum.ZCTNum
							   t
							   ->
							   t ->
							   PrelBase.Int ->
							   LexCore.Token ->
							   ParCore.HappyState
							   LexCore.Token
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err a)
							   ->
							   PrelBase.ZMZN
							   (ParCore.HappyState
							    LexCore.Token
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a))
							   ->
							   ParCore.HappyStk
							   (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err a =
    \ @ t
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (90::PrelGHC.Intzh))}
	%in %let happyShift2 :: (PrelBase.Int ->
				 PrelBase.Int ->
				 LexCore.Token ->
				 ParCore.HappyState
				 LexCore.Token
				 (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				  PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				 ->
				 PrelBase.ZMZN
				 (ParCore.HappyState
				  LexCore.Token
				  (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				   PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				 ->
				 ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				 PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				->
				PrelBase.Int ->
				LexCore.Token ->
				ParCore.HappyState
				LexCore.Token
				(ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				 PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				->
				PrelBase.ZMZN
				(ParCore.HappyState
				 LexCore.Token
				 (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				  PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				->
				ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
		   ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a) @ t34 @ t35 @ t36
		   @ t37 @ t38 PrelNum.zdfNumInt
	    %in \ (ds::t) ->
		    %case zddNum %of (tpl::PrelNum.ZCTNum t)
		      {PrelNum.ZdwZCDNum
		       (tpl1::PrelBase.ZCTEq t)
		       (tpl2::PrelShow.ZCTShow t)
		       (tpl3::t -> t -> t)
		       (tpl4::t -> t -> t)
		       (tpl5::t -> t -> t)
		       (tpl6::t -> t)
		       (tpl7::t -> t)
		       (tpl8::t -> t)
		       (tpl9::PrelNum.Integer -> t) ->
			 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
			   {PrelBase.ZdwZCDEq
			    (tpl11::t -> t -> PrelBase.Bool)
			    (tpl12::t -> t -> PrelBase.Bool) ->
			      %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
				{PrelBase.ZdwTrue ->
				   happyShift2
				   (ParCore.actionzu177 @ PrelBase.Int @ LexCore.Token @ t34 @ t35
				    @ t36 @ t37 @ t38 @ a);
				 PrelBase.ZdwFalse ->
				   ParCore.happyFail @ a @ LexCore.Token @ t34 @ t35 @ t36 @ t37
				   @ t38}}};
  ParCore.actionzu123 :: %forall t t35 t36 t37 t38 a . PrelNum.ZCTNum
						       t
						       ->
						       t ->
						       PrelBase.Int ->
						       LexCore.Token ->
						       ParCore.HappyState
						       LexCore.Token
						       (ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38)
							->
							PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						       ->
						       PrelBase.ZMZN
						       (ParCore.HappyState
							LexCore.Token
							(ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						       ->
						       ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)
						       ->
						       PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t @ t35 @ t36 @ t37 @ t38 @ a (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (97::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (34::PrelGHC.Intzh))}
	    %in %let happyShift2 :: (PrelBase.Int ->
				     PrelBase.Int ->
				     LexCore.Token ->
				     ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       t35
				       t36
				       t37
				       t38)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				     ->
				     PrelBase.ZMZN
				     (ParCore.HappyState
				      LexCore.Token
				      (ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					t35
					t36
					t37
					t38)
				       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				     ->
				     ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      t35
				      t36
				      t37
				      t38)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				    ->
				    PrelBase.Int ->
				    LexCore.Token ->
				    ParCore.HappyState
				    LexCore.Token
				    (ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      t35
				      t36
				      t37
				      t38)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				    ->
				    PrelBase.ZMZN
				    (ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       t35
				       t36
				       t37
				       t38)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				    ->
				    ParCore.HappyStk
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     t35
				     t36
				     t37
				     t38)
				    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
		       ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a)
		       @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38
		       PrelNum.zdfNumInt
		%in \ (ds::t) ->
			%case zddNum %of (tpl::PrelNum.ZCTNum t)
			  {PrelNum.ZdwZCDNum
			   (tpl1::PrelBase.ZCTEq t)
			   (tpl2::PrelShow.ZCTShow t)
			   (tpl3::t -> t -> t)
			   (tpl4::t -> t -> t)
			   (tpl5::t -> t -> t)
			   (tpl6::t -> t)
			   (tpl7::t -> t)
			   (tpl8::t -> t)
			   (tpl9::PrelNum.Integer -> t) ->
			     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
			       {PrelBase.ZdwZCDEq
				(tpl11::t -> t -> PrelBase.Bool)
				(tpl12::t -> t -> PrelBase.Bool) ->
				  %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
				    {PrelBase.ZdwTrue ->
				       happyShift2
				       (ParCore.actionzu32 @ PrelBase.Int @ LexCore.Token @ t35
					@ t36 @ t37 @ t38 @ a);
				     PrelBase.ZdwFalse ->
				       %case (tpl12 lit2 ds) %of (wild1::PrelBase.Bool)
					 {PrelBase.ZdwTrue ->
					    ParCore.happyGoto
					    @ (ParCore.HappyState
					       LexCore.Token
					       (ParCore.HappyStk
						(ParCore.HappyAbsSyn
						 (PrelBase.ZMZN PrelBase.Char)
						 t35
						 t36
						 t37
						 t38)
						-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
					    @ LexCore.Token
					    @ (ParCore.HappyStk
					       (ParCore.HappyAbsSyn
						(PrelBase.ZMZN PrelBase.Char)
						t35
						t36
						t37
						t38)
					       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
					    (ParCore.actionzu183 @ PrelBase.Int @ LexCore.Token
					     @ t35 @ t36 @ t37 @ t38 @ a);
					  PrelBase.ZdwFalse ->
					    ParCore.happyFail @ a @ LexCore.Token
					    @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37
					    @ t38}}}};
  ParCore.actionzu119 :: %forall t t34 t35 t36 t37 t38 a . PrelNum.ZCTNum
							   t
							   ->
							   t ->
							   PrelBase.Int ->
							   LexCore.Token ->
							   ParCore.HappyState
							   LexCore.Token
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err a)
							   ->
							   PrelBase.ZMZN
							   (ParCore.HappyState
							    LexCore.Token
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a))
							   ->
							   ParCore.HappyStk
							   (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err a =
    \ @ t
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (71::PrelGHC.Intzh))}
	%in %let happyShift2 :: (PrelBase.Int ->
				 PrelBase.Int ->
				 LexCore.Token ->
				 ParCore.HappyState
				 LexCore.Token
				 (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				  PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				 ->
				 PrelBase.ZMZN
				 (ParCore.HappyState
				  LexCore.Token
				  (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				   PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				 ->
				 ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				 PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				->
				PrelBase.Int ->
				LexCore.Token ->
				ParCore.HappyState
				LexCore.Token
				(ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				 PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				->
				PrelBase.ZMZN
				(ParCore.HappyState
				 LexCore.Token
				 (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				  PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				->
				ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
		   ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a) @ t34 @ t35 @ t36
		   @ t37 @ t38 PrelNum.zdfNumInt
	    %in \ (ds::t) ->
		    %case zddNum %of (tpl::PrelNum.ZCTNum t)
		      {PrelNum.ZdwZCDNum
		       (tpl1::PrelBase.ZCTEq t)
		       (tpl2::PrelShow.ZCTShow t)
		       (tpl3::t -> t -> t)
		       (tpl4::t -> t -> t)
		       (tpl5::t -> t -> t)
		       (tpl6::t -> t)
		       (tpl7::t -> t)
		       (tpl8::t -> t)
		       (tpl9::PrelNum.Integer -> t) ->
			 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
			   {PrelBase.ZdwZCDEq
			    (tpl11::t -> t -> PrelBase.Bool)
			    (tpl12::t -> t -> PrelBase.Bool) ->
			      %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
				{PrelBase.ZdwTrue ->
				   happyShift2
				   (ParCore.actionzu187 @ PrelBase.Int @ LexCore.Token @ t34 @ t35
				    @ t36 @ t37 @ t38 @ a);
				 PrelBase.ZdwFalse ->
				   ParCore.happyFail @ a @ LexCore.Token @ t34 @ t35 @ t36 @ t37
				   @ t38}}};
  ParCore.actionzu112 :: %forall t t34 t35 t36 t37 t38 a . PrelNum.ZCTNum
							   t
							   ->
							   t ->
							   PrelBase.Int ->
							   LexCore.Token ->
							   ParCore.HappyState
							   LexCore.Token
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err a)
							   ->
							   PrelBase.ZMZN
							   (ParCore.HappyState
							    LexCore.Token
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a))
							   ->
							   ParCore.HappyStk
							   (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err a =
    \ @ t
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (71::PrelGHC.Intzh))}
	%in %let happyShift2 :: (PrelBase.Int ->
				 PrelBase.Int ->
				 LexCore.Token ->
				 ParCore.HappyState
				 LexCore.Token
				 (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				  PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				 ->
				 PrelBase.ZMZN
				 (ParCore.HappyState
				  LexCore.Token
				  (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				   PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				 ->
				 ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				 PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				->
				PrelBase.Int ->
				LexCore.Token ->
				ParCore.HappyState
				LexCore.Token
				(ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				 PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				->
				PrelBase.ZMZN
				(ParCore.HappyState
				 LexCore.Token
				 (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				  PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				->
				ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
		   ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a) @ t34 @ t35 @ t36
		   @ t37 @ t38 PrelNum.zdfNumInt
	    %in \ (ds::t) ->
		    %case zddNum %of (tpl::PrelNum.ZCTNum t)
		      {PrelNum.ZdwZCDNum
		       (tpl1::PrelBase.ZCTEq t)
		       (tpl2::PrelShow.ZCTShow t)
		       (tpl3::t -> t -> t)
		       (tpl4::t -> t -> t)
		       (tpl5::t -> t -> t)
		       (tpl6::t -> t)
		       (tpl7::t -> t)
		       (tpl8::t -> t)
		       (tpl9::PrelNum.Integer -> t) ->
			 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
			   {PrelBase.ZdwZCDEq
			    (tpl11::t -> t -> PrelBase.Bool)
			    (tpl12::t -> t -> PrelBase.Bool) ->
			      %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
				{PrelBase.ZdwTrue ->
				   happyShift2
				   (ParCore.actionzu193 @ PrelBase.Int @ LexCore.Token @ t34 @ t35
				    @ t36 @ t37 @ t38 @ a);
				 PrelBase.ZdwFalse ->
				   ParCore.happyFail @ a @ LexCore.Token @ t34 @ t35 @ t36 @ t37
				   @ t38}}};
  ParCore.actionzu75 :: %forall t t35 t36 t37 t38 a . PrelNum.ZCTNum
						      t
						      ->
						      t ->
						      PrelBase.Int ->
						      LexCore.Token ->
						      ParCore.HappyState
						      LexCore.Token
						      (ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)
						       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						      ->
						      PrelBase.ZMZN
						      (ParCore.HappyState
						       LexCore.Token
						       (ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38)
							->
							PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						      ->
						      ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t @ t35 @ t36 @ t37 @ t38 @ a (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (93::PrelGHC.Intzh))}
	%in %let actionzu1231 :: PrelBase.Int ->
				 PrelBase.Int ->
				 LexCore.Token ->
				 ParCore.HappyState
				 LexCore.Token
				 (ParCore.HappyStk
				  (ParCore.HappyAbsSyn
				   (PrelBase.ZMZN PrelBase.Char)
				   t35
				   t36
				   t37
				   t38)
				  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				 ->
				 PrelBase.ZMZN
				 (ParCore.HappyState
				  LexCore.Token
				  (ParCore.HappyStk
				   (ParCore.HappyAbsSyn
				    (PrelBase.ZMZN PrelBase.Char)
				    t35
				    t36
				    t37
				    t38)
				   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				 ->
				 ParCore.HappyStk
				 (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
		   ParCore.actionzu123 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38 @ a
		   PrelNum.zdfNumInt
	    %in %let happyShift2 :: (PrelBase.Int ->
				     PrelBase.Int ->
				     LexCore.Token ->
				     ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       t35
				       t36
				       t37
				       t38)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				     ->
				     PrelBase.ZMZN
				     (ParCore.HappyState
				      LexCore.Token
				      (ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					t35
					t36
					t37
					t38)
				       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				     ->
				     ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      t35
				      t36
				      t37
				      t38)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				    ->
				    PrelBase.Int ->
				    LexCore.Token ->
				    ParCore.HappyState
				    LexCore.Token
				    (ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      t35
				      t36
				      t37
				      t38)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				    ->
				    PrelBase.ZMZN
				    (ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       t35
				       t36
				       t37
				       t38)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				    ->
				    ParCore.HappyStk
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     t35
				     t36
				     t37
				     t38)
				    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
		       ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a)
		       @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38
		       PrelNum.zdfNumInt
		%in \ (ds::t) ->
			%case zddNum %of (tpl::PrelNum.ZCTNum t)
			  {PrelNum.ZdwZCDNum
			   (tpl1::PrelBase.ZCTEq t)
			   (tpl2::PrelShow.ZCTShow t)
			   (tpl3::t -> t -> t)
			   (tpl4::t -> t -> t)
			   (tpl5::t -> t -> t)
			   (tpl6::t -> t)
			   (tpl7::t -> t)
			   (tpl8::t -> t)
			   (tpl9::PrelNum.Integer -> t) ->
			     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
			       {PrelBase.ZdwZCDEq
				(tpl11::t -> t -> PrelBase.Bool)
				(tpl12::t -> t -> PrelBase.Bool) ->
				  %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
				    {PrelBase.ZdwTrue ->
				       happyShift2 actionzu1231;
				     PrelBase.ZdwFalse ->
				       ParCore.happyReducezu54 @ LexCore.Token @ a @ t35 @ t36 @ t37
				       @ t38}}};
  ParCore.actionzu45 :: %forall t t35 t36 t37 t38 a . PrelNum.ZCTNum
						      t
						      ->
						      t ->
						      PrelBase.Int ->
						      LexCore.Token ->
						      ParCore.HappyState
						      LexCore.Token
						      (ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)
						       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						      ->
						      PrelBase.ZMZN
						      (ParCore.HappyState
						       LexCore.Token
						       (ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38)
							->
							PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						      ->
						      ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t @ t35 @ t36 @ t37 @ t38 @ a (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (93::PrelGHC.Intzh))}
	%in %let actionzu1231 :: PrelBase.Int ->
				 PrelBase.Int ->
				 LexCore.Token ->
				 ParCore.HappyState
				 LexCore.Token
				 (ParCore.HappyStk
				  (ParCore.HappyAbsSyn
				   (PrelBase.ZMZN PrelBase.Char)
				   t35
				   t36
				   t37
				   t38)
				  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				 ->
				 PrelBase.ZMZN
				 (ParCore.HappyState
				  LexCore.Token
				  (ParCore.HappyStk
				   (ParCore.HappyAbsSyn
				    (PrelBase.ZMZN PrelBase.Char)
				    t35
				    t36
				    t37
				    t38)
				   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				 ->
				 ParCore.HappyStk
				 (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
		   ParCore.actionzu123 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38 @ a
		   PrelNum.zdfNumInt
	    %in %let happyShift2 :: (PrelBase.Int ->
				     PrelBase.Int ->
				     LexCore.Token ->
				     ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       t35
				       t36
				       t37
				       t38)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				     ->
				     PrelBase.ZMZN
				     (ParCore.HappyState
				      LexCore.Token
				      (ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					t35
					t36
					t37
					t38)
				       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				     ->
				     ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      t35
				      t36
				      t37
				      t38)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				    ->
				    PrelBase.Int ->
				    LexCore.Token ->
				    ParCore.HappyState
				    LexCore.Token
				    (ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      t35
				      t36
				      t37
				      t38)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				    ->
				    PrelBase.ZMZN
				    (ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       t35
				       t36
				       t37
				       t38)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				    ->
				    ParCore.HappyStk
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     t35
				     t36
				     t37
				     t38)
				    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
		       ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a)
		       @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38
		       PrelNum.zdfNumInt
		%in \ (ds::t) ->
			%case zddNum %of (tpl::PrelNum.ZCTNum t)
			  {PrelNum.ZdwZCDNum
			   (tpl1::PrelBase.ZCTEq t)
			   (tpl2::PrelShow.ZCTShow t)
			   (tpl3::t -> t -> t)
			   (tpl4::t -> t -> t)
			   (tpl5::t -> t -> t)
			   (tpl6::t -> t)
			   (tpl7::t -> t)
			   (tpl8::t -> t)
			   (tpl9::PrelNum.Integer -> t) ->
			     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
			       {PrelBase.ZdwZCDEq
				(tpl11::t -> t -> PrelBase.Bool)
				(tpl12::t -> t -> PrelBase.Bool) ->
				  %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
				    {PrelBase.ZdwTrue ->
				       happyShift2 actionzu1231;
				     PrelBase.ZdwFalse ->
				       ParCore.happyReducezu87 @ LexCore.Token @ a @ t35 @ t36 @ t37
				       @ t38}}};
  ParCore.actionzu33 :: %forall t t35 t36 t37 t38 a . PrelNum.ZCTNum
						      t
						      ->
						      t ->
						      PrelBase.Int ->
						      LexCore.Token ->
						      ParCore.HappyState
						      LexCore.Token
						      (ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)
						       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						      ->
						      PrelBase.ZMZN
						      (ParCore.HappyState
						       LexCore.Token
						       (ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38)
							->
							PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						      ->
						      ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t @ t35 @ t36 @ t37 @ t38 @ a (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (93::PrelGHC.Intzh))}
	%in %let actionzu1231 :: PrelBase.Int ->
				 PrelBase.Int ->
				 LexCore.Token ->
				 ParCore.HappyState
				 LexCore.Token
				 (ParCore.HappyStk
				  (ParCore.HappyAbsSyn
				   (PrelBase.ZMZN PrelBase.Char)
				   t35
				   t36
				   t37
				   t38)
				  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				 ->
				 PrelBase.ZMZN
				 (ParCore.HappyState
				  LexCore.Token
				  (ParCore.HappyStk
				   (ParCore.HappyAbsSyn
				    (PrelBase.ZMZN PrelBase.Char)
				    t35
				    t36
				    t37
				    t38)
				   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				 ->
				 ParCore.HappyStk
				 (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
		   ParCore.actionzu123 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38 @ a
		   PrelNum.zdfNumInt
	    %in %let happyShift2 :: (PrelBase.Int ->
				     PrelBase.Int ->
				     LexCore.Token ->
				     ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       t35
				       t36
				       t37
				       t38)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				     ->
				     PrelBase.ZMZN
				     (ParCore.HappyState
				      LexCore.Token
				      (ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					t35
					t36
					t37
					t38)
				       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				     ->
				     ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      t35
				      t36
				      t37
				      t38)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				    ->
				    PrelBase.Int ->
				    LexCore.Token ->
				    ParCore.HappyState
				    LexCore.Token
				    (ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      t35
				      t36
				      t37
				      t38)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				    ->
				    PrelBase.ZMZN
				    (ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       t35
				       t36
				       t37
				       t38)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				    ->
				    ParCore.HappyStk
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     t35
				     t36
				     t37
				     t38)
				    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
		       ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a)
		       @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38
		       PrelNum.zdfNumInt
		%in \ (ds::t) ->
			%case zddNum %of (tpl::PrelNum.ZCTNum t)
			  {PrelNum.ZdwZCDNum
			   (tpl1::PrelBase.ZCTEq t)
			   (tpl2::PrelShow.ZCTShow t)
			   (tpl3::t -> t -> t)
			   (tpl4::t -> t -> t)
			   (tpl5::t -> t -> t)
			   (tpl6::t -> t)
			   (tpl7::t -> t)
			   (tpl8::t -> t)
			   (tpl9::PrelNum.Integer -> t) ->
			     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
			       {PrelBase.ZdwZCDEq
				(tpl11::t -> t -> PrelBase.Bool)
				(tpl12::t -> t -> PrelBase.Bool) ->
				  %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
				    {PrelBase.ZdwTrue ->
				       happyShift2 actionzu1231;
				     PrelBase.ZdwFalse ->
				       ParCore.happyFail @ a @ LexCore.Token
				       @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38}}};
  ParCore.actionzu31 :: %forall t t35 t36 t37 t38 a . PrelNum.ZCTNum
						      t
						      ->
						      t ->
						      PrelBase.Int ->
						      LexCore.Token ->
						      ParCore.HappyState
						      LexCore.Token
						      (ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)
						       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						      ->
						      PrelBase.ZMZN
						      (ParCore.HappyState
						       LexCore.Token
						       (ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38)
							->
							PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						      ->
						      ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t @ t35 @ t36 @ t37 @ t38 @ a (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (97::PrelGHC.Intzh))}
	%in %let happyShift2 :: (PrelBase.Int ->
				 PrelBase.Int ->
				 LexCore.Token ->
				 ParCore.HappyState
				 LexCore.Token
				 (ParCore.HappyStk
				  (ParCore.HappyAbsSyn
				   (PrelBase.ZMZN PrelBase.Char)
				   t35
				   t36
				   t37
				   t38)
				  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				 ->
				 PrelBase.ZMZN
				 (ParCore.HappyState
				  LexCore.Token
				  (ParCore.HappyStk
				   (ParCore.HappyAbsSyn
				    (PrelBase.ZMZN PrelBase.Char)
				    t35
				    t36
				    t37
				    t38)
				   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				 ->
				 ParCore.HappyStk
				 (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				->
				PrelBase.Int ->
				LexCore.Token ->
				ParCore.HappyState
				LexCore.Token
				(ParCore.HappyStk
				 (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				->
				PrelBase.ZMZN
				(ParCore.HappyState
				 LexCore.Token
				 (ParCore.HappyStk
				  (ParCore.HappyAbsSyn
				   (PrelBase.ZMZN PrelBase.Char)
				   t35
				   t36
				   t37
				   t38)
				  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				->
				ParCore.HappyStk
				(ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
		   ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a)
		   @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38
		   PrelNum.zdfNumInt
	    %in \ (ds::t) ->
		    %case zddNum %of (tpl::PrelNum.ZCTNum t)
		      {PrelNum.ZdwZCDNum
		       (tpl1::PrelBase.ZCTEq t)
		       (tpl2::PrelShow.ZCTShow t)
		       (tpl3::t -> t -> t)
		       (tpl4::t -> t -> t)
		       (tpl5::t -> t -> t)
		       (tpl6::t -> t)
		       (tpl7::t -> t)
		       (tpl8::t -> t)
		       (tpl9::PrelNum.Integer -> t) ->
			 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
			   {PrelBase.ZdwZCDEq
			    (tpl11::t -> t -> PrelBase.Bool)
			    (tpl12::t -> t -> PrelBase.Bool) ->
			      %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
				{PrelBase.ZdwTrue ->
				   happyShift2
				   (ParCore.actionzu32 @ PrelBase.Int @ LexCore.Token @ t35 @ t36
				    @ t37 @ t38 @ a);
				 PrelBase.ZdwFalse ->
				   ParCore.happyFail @ a @ LexCore.Token
				   @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38}}};
  ParCore.happyParse :: %forall t t1 . (PrelBase.Int ->
					PrelBase.Int ->
					LexCore.Token ->
					ParCore.HappyState
					LexCore.Token
					(t1 -> PrelBase.ZMZN LexCore.Token -> t)
					->
					PrelBase.ZMZN
					(ParCore.HappyState
					 LexCore.Token
					 (t1 -> PrelBase.ZMZN LexCore.Token -> t))
					-> t1 -> PrelBase.ZMZN LexCore.Token -> t)
				       -> PrelBase.ZMZN LexCore.Token -> t =
    \ @ t
      @ t1
      (eta::PrelBase.Int ->
	    PrelBase.Int ->
	    LexCore.Token ->
	    ParCore.HappyState
	    LexCore.Token
	    (t1 -> PrelBase.ZMZN LexCore.Token -> t)
	    ->
	    PrelBase.ZMZN
	    (ParCore.HappyState
	     LexCore.Token
	     (t1 -> PrelBase.ZMZN LexCore.Token -> t))
	    -> t1 -> PrelBase.ZMZN LexCore.Token -> t)
      (eta1::PrelBase.ZMZN LexCore.Token) ->
	ParCore.happyNewToken @ t1 @ t eta
	(ParCore.notHappyAtAll
	 @ (PrelBase.ZMZN
	    (ParCore.HappyState
	     LexCore.Token
	     (t1 -> PrelBase.ZMZN LexCore.Token -> t))))
	(ParCore.notHappyAtAll @ t1) eta1;
  happyShift2 :: (PrelBase.Int ->
		  PrelBase.Int ->
		  LexCore.Token ->
		  ParCore.HappyState
		  LexCore.Token
		  (ParCore.HappyStk
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char)
		   ->
		   PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char))
		  ->
		  PrelBase.ZMZN
		  (ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelNum.Integer
		     PrelFloat.Double
		     PrelBase.Char)
		    ->
		    PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelNum.Integer
		     PrelFloat.Double
		     PrelBase.Char)))
		  ->
		  ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char)
		  ->
		  PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char))
		 ->
		 PrelBase.Int ->
		 LexCore.Token ->
		 ParCore.HappyState
		 LexCore.Token
		 (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char)
		  ->
		  PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char))
		 ->
		 PrelBase.ZMZN
		 (ParCore.HappyState
		  LexCore.Token
		  (ParCore.HappyStk
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char)
		   ->
		   PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char)))
		 ->
		 ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char)
		 ->
		 PrelBase.ZMZN LexCore.Token ->
		 ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char) =
    ParCore.happyShift @ PrelBase.Int
    @ (ErrM.Err
       (ParCore.HappyAbsSyn
	(PrelBase.ZMZN PrelBase.Char)
	(PrelBase.ZMZN PrelBase.Char)
	PrelNum.Integer
	PrelFloat.Double
	PrelBase.Char))
    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char
    PrelNum.zdfNumInt;
  actionzu751 :: PrelBase.Int ->
		 PrelBase.Int ->
		 LexCore.Token ->
		 ParCore.HappyState
		 LexCore.Token
		 (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char)
		  ->
		  PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char))
		 ->
		 PrelBase.ZMZN
		 (ParCore.HappyState
		  LexCore.Token
		  (ParCore.HappyStk
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char)
		   ->
		   PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char)))
		 ->
		 ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char)
		 ->
		 PrelBase.ZMZN LexCore.Token ->
		 ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char) =
    ParCore.actionzu75 @ PrelBase.Int @ (PrelBase.ZMZN PrelBase.Char)
    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char
    @ (ParCore.HappyAbsSyn
       (PrelBase.ZMZN PrelBase.Char)
       (PrelBase.ZMZN PrelBase.Char)
       PrelNum.Integer
       PrelFloat.Double
       PrelBase.Char)
    PrelNum.zdfNumInt;
  actionzu331 :: PrelBase.Int ->
		 PrelBase.Int ->
		 LexCore.Token ->
		 ParCore.HappyState
		 LexCore.Token
		 (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char)
		  ->
		  PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char))
		 ->
		 PrelBase.ZMZN
		 (ParCore.HappyState
		  LexCore.Token
		  (ParCore.HappyStk
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char)
		   ->
		   PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char)))
		 ->
		 ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char)
		 ->
		 PrelBase.ZMZN LexCore.Token ->
		 ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char) =
    ParCore.actionzu33 @ PrelBase.Int @ (PrelBase.ZMZN PrelBase.Char)
    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char
    @ (ParCore.HappyAbsSyn
       (PrelBase.ZMZN PrelBase.Char)
       (PrelBase.ZMZN PrelBase.Char)
       PrelNum.Integer
       PrelFloat.Double
       PrelBase.Char)
    PrelNum.zdfNumInt;
  actionzu1191 :: PrelBase.Int ->
		  PrelBase.Int ->
		  LexCore.Token ->
		  ParCore.HappyState
		  LexCore.Token
		  (ParCore.HappyStk
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char)
		   ->
		   PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char))
		  ->
		  PrelBase.ZMZN
		  (ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelNum.Integer
		     PrelFloat.Double
		     PrelBase.Char)
		    ->
		    PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelNum.Integer
		     PrelFloat.Double
		     PrelBase.Char)))
		  ->
		  ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char)
		  ->
		  PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char) =
    ParCore.actionzu119 @ PrelBase.Int @ (PrelBase.ZMZN PrelBase.Char)
    @ (PrelBase.ZMZN PrelBase.Char) @ PrelNum.Integer
    @ PrelFloat.Double @ PrelBase.Char
    @ (ParCore.HappyAbsSyn
       (PrelBase.ZMZN PrelBase.Char)
       (PrelBase.ZMZN PrelBase.Char)
       PrelNum.Integer
       PrelFloat.Double
       PrelBase.Char)
    PrelNum.zdfNumInt;
  read :: PrelBase.ZMZN PrelBase.Char -> PrelNum.Integer =
    PrelRead.read @ PrelNum.Integer PrelRead.zdfReadInteger;
  ParCore.happyReductionzu33 :: %forall t34 t35 t36 t37 t38 t341 t351 t371 t381 . ParCore.HappyAbsSyn
										  t34
										  t35
										  t36
										  t37
										  t38
										  ->
										  ParCore.HappyAbsSyn
										  t341
										  t351
										  PrelNum.Integer
										  t371
										  t381 =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ t341
      @ t351
      @ t371
      @ t381
      (ds::ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	%case ds %of (wild::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	  {%_ ->
	     ParCore.notHappyAtAll
	     @ (ParCore.HappyAbsSyn t341 t351 PrelNum.Integer t371 t381);
	   ParCore.ZdwHappyTerminal (ds1::LexCore.Token) ->
	     %case ds1 %of (wild1::LexCore.Token)
	       {LexCore.ZdwErr (a::Alex.Posn) ->
		  ParCore.notHappyAtAll
		  @ (ParCore.HappyAbsSyn t341 t351 PrelNum.Integer t371 t381);
		LexCore.ZdwPT (ds2::Alex.Posn) (ds3::LexCore.Tok) ->
		  %case ds3 %of (wild2::LexCore.Tok)
		    {%_ ->
		       ParCore.notHappyAtAll
		       @ (ParCore.HappyAbsSyn t341 t351 PrelNum.Integer t371 t381);
		     LexCore.ZdwTI (happyzuvarzu1::PrelBase.ZMZN PrelBase.Char) ->
		       %let eta :: PrelNum.Integer = read happyzuvarzu1
		       %in ParCore.ZdwHappyAbsSyn36 @ t341 @ t351 @ PrelNum.Integer @ t371
			   @ t381 eta}}};
  ParCore.happyReducezu33 :: %forall b a t34 t35 t37 t38 . PrelBase.Int
							   ->
							   b ->
							   ParCore.HappyState
							   b
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     PrelNum.Integer
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err a)
							   ->
							   PrelBase.ZMZN
							   (ParCore.HappyState
							    b
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      PrelNum.Integer
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a))
							   ->
							   ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    t34
							    t35
							    PrelNum.Integer
							    t37
							    t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk
	      (ParCore.HappyAbsSyn t34 t35 PrelNum.Integer t37 t38)
	      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk
	       (ParCore.HappyAbsSyn t34 t35 PrelNum.Integer t37 t38)
	       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 PrelNum.Integer t37 t38)) ->
	ParCore.happySpecReducezu1 @ a @ t34 @ t35 @ PrelNum.Integer @ t37
	@ t38 @ b (PrelBase.ZdwIzh (36::PrelGHC.Intzh))
	(ParCore.happyReductionzu33 @ t34 @ t35 @ PrelNum.Integer @ t37
	 @ t38 @ t34 @ t35 @ t37 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.actionzu132 :: %forall t b t34 t35 t37 t38 a . t ->
							 PrelBase.Int ->
							 b ->
							 ParCore.HappyState
							 b
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   t34
							   t35
							   PrelNum.Integer
							   t37
							   t38)
							  ->
							  PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
							 ->
							 PrelBase.ZMZN
							 (ParCore.HappyState
							  b
							  (ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    t34
							    t35
							    PrelNum.Integer
							    t37
							    t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err a))
							 ->
							 ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  t34
							  t35
							  PrelNum.Integer
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk
	      (ParCore.HappyAbsSyn t34 t35 PrelNum.Integer t37 t38)
	      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk
	       (ParCore.HappyAbsSyn t34 t35 PrelNum.Integer t37 t38)
	       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 PrelNum.Integer t37 t38)) ->
	ParCore.happyReducezu33 @ b @ a @ t34 @ t35 @ t37 @ t38 eta1 eta2
	eta3 eta4 eta5;
  read1 :: PrelBase.ZMZN PrelBase.Char -> PrelFloat.Double =
    PrelRead.read @ PrelFloat.Double PrelRead.zdfReadDouble;
  ParCore.happyReductionzu34 :: %forall t34 t35 t36 t37 t38 t341 t351 t361 t381 . ParCore.HappyAbsSyn
										  t34
										  t35
										  t36
										  t37
										  t38
										  ->
										  ParCore.HappyAbsSyn
										  t341
										  t351
										  t361
										  PrelFloat.Double
										  t381 =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ t341
      @ t351
      @ t361
      @ t381
      (ds::ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	%case ds %of (wild::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	  {%_ ->
	     ParCore.notHappyAtAll
	     @ (ParCore.HappyAbsSyn t341 t351 t361 PrelFloat.Double t381);
	   ParCore.ZdwHappyTerminal (ds1::LexCore.Token) ->
	     %case ds1 %of (wild1::LexCore.Token)
	       {LexCore.ZdwErr (a::Alex.Posn) ->
		  ParCore.notHappyAtAll
		  @ (ParCore.HappyAbsSyn t341 t351 t361 PrelFloat.Double t381);
		LexCore.ZdwPT (ds2::Alex.Posn) (ds3::LexCore.Tok) ->
		  %case ds3 %of (wild2::LexCore.Tok)
		    {%_ ->
		       ParCore.notHappyAtAll
		       @ (ParCore.HappyAbsSyn t341 t351 t361 PrelFloat.Double t381);
		     LexCore.ZdwTD (happyzuvarzu1::PrelBase.ZMZN PrelBase.Char) ->
		       %let eta :: PrelFloat.Double = read1 happyzuvarzu1
		       %in ParCore.ZdwHappyAbsSyn37 @ t341 @ t351 @ t361
			   @ PrelFloat.Double @ t381 eta}}};
  ParCore.happyReducezu34 :: %forall b a t34 t35 t36 t38 . PrelBase.Int
							   ->
							   b ->
							   ParCore.HappyState
							   b
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     PrelFloat.Double
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err a)
							   ->
							   PrelBase.ZMZN
							   (ParCore.HappyState
							    b
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      PrelFloat.Double
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a))
							   ->
							   ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    t34
							    t35
							    t36
							    PrelFloat.Double
							    t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk
	      (ParCore.HappyAbsSyn t34 t35 t36 PrelFloat.Double t38)
	      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk
	       (ParCore.HappyAbsSyn t34 t35 t36 PrelFloat.Double t38)
	       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 PrelFloat.Double t38)) ->
	ParCore.happySpecReducezu1 @ a @ t34 @ t35 @ t36 @ PrelFloat.Double
	@ t38 @ b (PrelBase.ZdwIzh (37::PrelGHC.Intzh))
	(ParCore.happyReductionzu34 @ t34 @ t35 @ t36 @ PrelFloat.Double
	 @ t38 @ t34 @ t35 @ t36 @ t38)
	eta eta1 eta2 eta3 eta4;
  ParCore.actionzu133 :: %forall t b t34 t35 t36 t38 a . t ->
							 PrelBase.Int ->
							 b ->
							 ParCore.HappyState
							 b
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   t34
							   t35
							   t36
							   PrelFloat.Double
							   t38)
							  ->
							  PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
							 ->
							 PrelBase.ZMZN
							 (ParCore.HappyState
							  b
							  (ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    t34
							    t35
							    t36
							    PrelFloat.Double
							    t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err a))
							 ->
							 ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  t34
							  t35
							  t36
							  PrelFloat.Double
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk
	      (ParCore.HappyAbsSyn t34 t35 t36 PrelFloat.Double t38)
	      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk
	       (ParCore.HappyAbsSyn t34 t35 t36 PrelFloat.Double t38)
	       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 PrelFloat.Double t38)) ->
	ParCore.happyReducezu34 @ b @ a @ t34 @ t35 @ t36 @ t38 eta1 eta2
	eta3 eta4 eta5;
  read2 :: PrelBase.ZMZN PrelBase.Char -> PrelBase.Char =
    PrelRead.read @ PrelBase.Char PrelRead.zdfReadChar;
  ParCore.happyReductionzu35 :: %forall t34 t35 t36 t37 t38 t341 t351 t361 t371 . ParCore.HappyAbsSyn
										  t34
										  t35
										  t36
										  t37
										  t38
										  ->
										  ParCore.HappyAbsSyn
										  t341
										  t351
										  t361
										  t371
										  PrelBase.Char =
    \ @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ t341
      @ t351
      @ t361
      @ t371
      (ds::ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	%case ds %of (wild::ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
	  {%_ ->
	     ParCore.notHappyAtAll
	     @ (ParCore.HappyAbsSyn t341 t351 t361 t371 PrelBase.Char);
	   ParCore.ZdwHappyTerminal (ds1::LexCore.Token) ->
	     %case ds1 %of (wild1::LexCore.Token)
	       {LexCore.ZdwErr (a::Alex.Posn) ->
		  ParCore.notHappyAtAll
		  @ (ParCore.HappyAbsSyn t341 t351 t361 t371 PrelBase.Char);
		LexCore.ZdwPT (ds2::Alex.Posn) (ds3::LexCore.Tok) ->
		  %case ds3 %of (wild2::LexCore.Tok)
		    {%_ ->
		       ParCore.notHappyAtAll
		       @ (ParCore.HappyAbsSyn t341 t351 t361 t371 PrelBase.Char);
		     LexCore.ZdwTC (happyzuvarzu1::PrelBase.ZMZN PrelBase.Char) ->
		       %let eta :: PrelBase.Char = read2 happyzuvarzu1
		       %in ParCore.ZdwHappyAbsSyn38 @ t341 @ t351 @ t361 @ t371
			   @ PrelBase.Char eta}}};
  ParCore.happyReducezu35 :: %forall b a t34 t35 t36 t37 . PrelBase.Int
							   ->
							   b ->
							   ParCore.HappyState
							   b
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     PrelBase.Char)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err a)
							   ->
							   PrelBase.ZMZN
							   (ParCore.HappyState
							    b
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      PrelBase.Char)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a))
							   ->
							   ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    t34
							    t35
							    t36
							    t37
							    PrelBase.Char)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk
	      (ParCore.HappyAbsSyn t34 t35 t36 t37 PrelBase.Char)
	      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk
	       (ParCore.HappyAbsSyn t34 t35 t36 t37 PrelBase.Char)
	       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 PrelBase.Char)) ->
	ParCore.happySpecReducezu1 @ a @ t34 @ t35 @ t36 @ t37
	@ PrelBase.Char @ b (PrelBase.ZdwIzh (38::PrelGHC.Intzh))
	(ParCore.happyReductionzu35 @ t34 @ t35 @ t36 @ t37 @ PrelBase.Char
	 @ t34 @ t35 @ t36 @ t37)
	eta eta1 eta2 eta3 eta4;
  ParCore.actionzu134 :: %forall t b t34 t35 t36 t37 a . t ->
							 PrelBase.Int ->
							 b ->
							 ParCore.HappyState
							 b
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   t34
							   t35
							   t36
							   t37
							   PrelBase.Char)
							  ->
							  PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
							 ->
							 PrelBase.ZMZN
							 (ParCore.HappyState
							  b
							  (ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    t34
							    t35
							    t36
							    t37
							    PrelBase.Char)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err a))
							 ->
							 ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  t34
							  t35
							  t36
							  t37
							  PrelBase.Char)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk
	      (ParCore.HappyAbsSyn t34 t35 t36 t37 PrelBase.Char)
	      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk
	       (ParCore.HappyAbsSyn t34 t35 t36 t37 PrelBase.Char)
	       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 PrelBase.Char)) ->
	ParCore.happyReducezu35 @ b @ a @ t34 @ t35 @ t36 @ t37 eta1 eta2
	eta3 eta4 eta5;
  %rec
  {happyDropStk1 :: %forall a . PrelBase.Int ->
				ParCore.HappyStk a -> ParCore.HappyStk a =
     \ @ a (ds::PrelBase.Int) (l::ParCore.HappyStk a) ->
	 %case ds %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	      %case ds1 %of (ds2::PrelGHC.Intzh)
		{%_ ->
		   %case l %of (wild1::ParCore.HappyStk a)
		     {ParCore.ZdwHappyStk (x::a) (xs::ParCore.HappyStk a) ->
			happyDropStk1 @ a
			(%case PrelNum.zdfNumInt %of (tpl::PrelNum.ZCTNum PrelBase.Int)
			   {PrelNum.ZdwZCDNum
			    (tpl1::PrelBase.ZCTEq PrelBase.Int)
			    (tpl2::PrelShow.ZCTShow PrelBase.Int)
			    (tpl3::PrelBase.Int -> PrelBase.Int -> PrelBase.Int)
			    (tpl4::PrelBase.Int -> PrelBase.Int -> PrelBase.Int)
			    (tpl5::PrelBase.Int -> PrelBase.Int -> PrelBase.Int)
			    (tpl6::PrelBase.Int -> PrelBase.Int)
			    (tpl7::PrelBase.Int -> PrelBase.Int)
			    (tpl8::PrelBase.Int -> PrelBase.Int)
			    (tpl9::PrelNum.Integer -> PrelBase.Int) ->
			      tpl3 wild (PrelBase.ZdwIzh (1::PrelGHC.Intzh))})
			xs};
		 (0::PrelGHC.Intzh) ->
		   l}}};
  ParCore.happyDropStk :: %forall a . PrelBase.Int ->
				      ParCore.HappyStk a -> ParCore.HappyStk a =
    \ @ a (eta::PrelBase.Int) (eta1::ParCore.HappyStk a) ->
	happyDropStk1 @ a eta eta1;
  %rec
  {happyDrop1 :: %forall a . PrelBase.Int ->
			     PrelBase.ZMZN a -> PrelBase.ZMZN a =
     \ @ a (ds::PrelBase.Int) (l::PrelBase.ZMZN a) ->
	 %case ds %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	      %case ds1 %of (ds2::PrelGHC.Intzh)
		{%_ ->
		   %case l %of (wild1::PrelBase.ZMZN a)
		     {PrelBase.ZdwZMZN ->
			PrelErr.patError @ (PrelBase.ZMZN a)
			(PrelBase.unpackCStringzh
			 ("GenericTemplate.hs:200|function happyDrop"::PrelGHC.Addrzh));
		      PrelBase.ZdwZC (ds3::a) (t::PrelBase.ZMZN a) ->
			happyDrop1 @ a
			(%case PrelNum.zdfNumInt %of (tpl::PrelNum.ZCTNum PrelBase.Int)
			   {PrelNum.ZdwZCDNum
			    (tpl1::PrelBase.ZCTEq PrelBase.Int)
			    (tpl2::PrelShow.ZCTShow PrelBase.Int)
			    (tpl3::PrelBase.Int -> PrelBase.Int -> PrelBase.Int)
			    (tpl4::PrelBase.Int -> PrelBase.Int -> PrelBase.Int)
			    (tpl5::PrelBase.Int -> PrelBase.Int -> PrelBase.Int)
			    (tpl6::PrelBase.Int -> PrelBase.Int)
			    (tpl7::PrelBase.Int -> PrelBase.Int)
			    (tpl8::PrelBase.Int -> PrelBase.Int)
			    (tpl9::PrelNum.Integer -> PrelBase.Int) ->
			      tpl3 wild (PrelBase.ZdwIzh (1::PrelGHC.Intzh))})
			t};
		 (0::PrelGHC.Intzh) ->
		   l}}};
  ParCore.happyDrop :: %forall a . PrelBase.Int ->
				   PrelBase.ZMZN a -> PrelBase.ZMZN a =
    \ @ a (eta::PrelBase.Int) (eta1::PrelBase.ZMZN a) ->
	happyDrop1 @ a eta eta1;
  ParCore.happyReduce :: %forall a b t34 t35 t36 t37 t38 . PrelBase.Int
							   ->
							   PrelBase.Int ->
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)
							    ->
							    ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38))
							   ->
							   PrelBase.Int ->
							   b ->
							   ParCore.HappyState
							   b
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err a)
							   ->
							   PrelBase.ZMZN
							   (ParCore.HappyState
							    b
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a))
							   ->
							   ParCore.HappyStk
							   (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err a =
    \ @ a
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (k::PrelBase.Int)
      (i::PrelBase.Int)
      (fn::ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	   ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
      (ds::PrelBase.Int)
      (tk::b)
      (st::ParCore.HappyState
	   b
	   (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	    PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (sts::PrelBase.ZMZN
	    (ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (stk::ParCore.HappyStk
	    (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	%case ds %of (wild::PrelBase.Int)
	  {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	     %case ds1 %of (ds2::PrelGHC.Intzh)
	       {%_ ->
		  %case (happyDrop1
			 @ (ParCore.HappyState
			    b
			    (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
			     PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			 k
			 (PrelBase.ZdwZC
			  @ (ParCore.HappyState
			     b
			     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
			      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			  st sts))
		  %of (wild1::PrelBase.ZMZN
			      (ParCore.HappyState
			       b
			       (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
		    {PrelBase.ZdwZMZN ->
		       %coerce (PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		       PrelErr.irrefutPatError
		       @ (PrelTup.Z3T
			  (PrelBase.ZMZN
			   (ParCore.HappyState
			    b
			    (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
			     PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
			  (ParCore.HappyState
			   b
			   (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
			    PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			  (PrelBase.Int ->
			   PrelBase.Int ->
			   b ->
			   ParCore.HappyState
			   b
			   (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
			    PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			   ->
			   PrelBase.ZMZN
			   (ParCore.HappyState
			    b
			    (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
			     PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			   ->
			   ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
			   PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		       (PrelBase.unpackCStringzh
			("GenericTemplate.hs:191|(sts1@((st1@(ParCore.HappyState action)) PrelBase.: _))"::PrelGHC.Addrzh));
		     PrelBase.ZdwZC
		     (st1::ParCore.HappyState
			   b
			   (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
			    PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		     (ds3::PrelBase.ZMZN
			   (ParCore.HappyState
			    b
			    (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
			     PrelBase.ZMZN LexCore.Token -> ErrM.Err a))) ->
		       (%coerce (PrelBase.Int ->
				 PrelBase.Int ->
				 b ->
				 ParCore.HappyState
				 b
				 (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				  PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				 ->
				 PrelBase.ZMZN
				 (ParCore.HappyState
				  b
				  (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				   PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				 ->
				 ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				 PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			st1)
		       i wild tk st1 wild1 (fn stk)};
		(1::PrelGHC.Intzh) ->
		  ParCore.happyFail @ a @ b @ t34 @ t35 @ t36 @ t37 @ t38
		  (PrelBase.ZdwIzh (1::PrelGHC.Intzh)) tk st sts stk}};
  ParCore.happyReducezu106 :: %forall b a t34 t36 t37 t38 . PrelBase.Int
							    ->
							    b ->
							    ParCore.HappyState
							    b
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      (PrelBase.ZMZN PrelBase.Char)
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a)
							    ->
							    PrelBase.ZMZN
							    (ParCore.HappyState
							     b
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       (PrelBase.ZMZN PrelBase.Char)
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a))
							    ->
							    ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     (PrelBase.ZMZN PrelBase.Char)
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk
	      (ParCore.HappyAbsSyn t34 (PrelBase.ZMZN PrelBase.Char) t36 t37 t38)
	      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk
	       (ParCore.HappyAbsSyn t34 (PrelBase.ZMZN PrelBase.Char) t36 t37 t38)
	       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn
	      t34
	      (PrelBase.ZMZN PrelBase.Char)
	      t36
	      t37
	      t38)) ->
	ParCore.happyReduce @ a @ b @ t34 @ (PrelBase.ZMZN PrelBase.Char)
	@ t36 @ t37 @ t38 (PrelBase.ZdwIzh (5::PrelGHC.Intzh))
	(PrelBase.ZdwIzh (68::PrelGHC.Intzh))
	(ParCore.happyReductionzu106 @ t34 @ t36 @ t37 @ t38) eta eta1 eta2
	eta3 eta4;
  ParCore.actionzu219 :: %forall t b t34 t36 t37 t38 a . t ->
							 PrelBase.Int ->
							 b ->
							 ParCore.HappyState
							 b
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   t34
							   (PrelBase.ZMZN PrelBase.Char)
							   t36
							   t37
							   t38)
							  ->
							  PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
							 ->
							 PrelBase.ZMZN
							 (ParCore.HappyState
							  b
							  (ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    t34
							    (PrelBase.ZMZN PrelBase.Char)
							    t36
							    t37
							    t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err a))
							 ->
							 ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  t34
							  (PrelBase.ZMZN PrelBase.Char)
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk
	      (ParCore.HappyAbsSyn t34 (PrelBase.ZMZN PrelBase.Char) t36 t37 t38)
	      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk
	       (ParCore.HappyAbsSyn t34 (PrelBase.ZMZN PrelBase.Char) t36 t37 t38)
	       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn
	      t34
	      (PrelBase.ZMZN PrelBase.Char)
	      t36
	      t37
	      t38)) ->
	ParCore.happyReducezu106 @ b @ a @ t34 @ t36 @ t37 @ t38 eta1 eta2
	eta3 eta4 eta5;
  ParCore.actionzu201 :: %forall t t34 t36 t37 t38 a . PrelNum.ZCTNum
						       t
						       ->
						       t ->
						       PrelBase.Int ->
						       LexCore.Token ->
						       ParCore.HappyState
						       LexCore.Token
						       (ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 t34
							 (PrelBase.ZMZN PrelBase.Char)
							 t36
							 t37
							 t38)
							->
							PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						       ->
						       PrelBase.ZMZN
						       (ParCore.HappyState
							LexCore.Token
							(ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  t34
							  (PrelBase.ZMZN PrelBase.Char)
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						       ->
						       ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							t34
							(PrelBase.ZMZN PrelBase.Char)
							t36
							t37
							t38)
						       ->
						       PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t @ t34 @ t36 @ t37 @ t38 @ a (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (90::PrelGHC.Intzh))}
	%in %let happyShift3 :: (PrelBase.Int ->
				 PrelBase.Int ->
				 LexCore.Token ->
				 ParCore.HappyState
				 LexCore.Token
				 (ParCore.HappyStk
				  (ParCore.HappyAbsSyn
				   t34
				   (PrelBase.ZMZN PrelBase.Char)
				   t36
				   t37
				   t38)
				  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				 ->
				 PrelBase.ZMZN
				 (ParCore.HappyState
				  LexCore.Token
				  (ParCore.HappyStk
				   (ParCore.HappyAbsSyn
				    t34
				    (PrelBase.ZMZN PrelBase.Char)
				    t36
				    t37
				    t38)
				   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				 ->
				 ParCore.HappyStk
				 (ParCore.HappyAbsSyn t34 (PrelBase.ZMZN PrelBase.Char) t36 t37 t38)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				->
				PrelBase.Int ->
				LexCore.Token ->
				ParCore.HappyState
				LexCore.Token
				(ParCore.HappyStk
				 (ParCore.HappyAbsSyn t34 (PrelBase.ZMZN PrelBase.Char) t36 t37 t38)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				->
				PrelBase.ZMZN
				(ParCore.HappyState
				 LexCore.Token
				 (ParCore.HappyStk
				  (ParCore.HappyAbsSyn
				   t34
				   (PrelBase.ZMZN PrelBase.Char)
				   t36
				   t37
				   t38)
				  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				->
				ParCore.HappyStk
				(ParCore.HappyAbsSyn t34 (PrelBase.ZMZN PrelBase.Char) t36 t37 t38)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
		   ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a) @ t34
		   @ (PrelBase.ZMZN PrelBase.Char) @ t36 @ t37 @ t38 PrelNum.zdfNumInt
	    %in \ (ds::t) ->
		    %case zddNum %of (tpl::PrelNum.ZCTNum t)
		      {PrelNum.ZdwZCDNum
		       (tpl1::PrelBase.ZCTEq t)
		       (tpl2::PrelShow.ZCTShow t)
		       (tpl3::t -> t -> t)
		       (tpl4::t -> t -> t)
		       (tpl5::t -> t -> t)
		       (tpl6::t -> t)
		       (tpl7::t -> t)
		       (tpl8::t -> t)
		       (tpl9::PrelNum.Integer -> t) ->
			 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
			   {PrelBase.ZdwZCDEq
			    (tpl11::t -> t -> PrelBase.Bool)
			    (tpl12::t -> t -> PrelBase.Bool) ->
			      %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
				{PrelBase.ZdwTrue ->
				   happyShift3
				   (ParCore.actionzu219 @ PrelBase.Int @ LexCore.Token @ t34 @ t36
				    @ t37 @ t38 @ a);
				 PrelBase.ZdwFalse ->
				   ParCore.happyFail @ a @ LexCore.Token @ t34
				   @ (PrelBase.ZMZN PrelBase.Char) @ t36 @ t37 @ t38}}};
  ParCore.happyReducezu105 :: %forall b a t34 t35 t36 t37 . PrelBase.Int
							    ->
							    b ->
							    ParCore.HappyState
							    b
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      PrelBase.Char)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a)
							    ->
							    PrelBase.ZMZN
							    (ParCore.HappyState
							     b
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       PrelBase.Char)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a))
							    ->
							    ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     PrelBase.Char)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk
	      (ParCore.HappyAbsSyn t34 t35 t36 t37 PrelBase.Char)
	      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk
	       (ParCore.HappyAbsSyn t34 t35 t36 t37 PrelBase.Char)
	       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 PrelBase.Char)) ->
	ParCore.happyReduce @ a @ b @ t34 @ t35 @ t36 @ t37 @ PrelBase.Char
	(PrelBase.ZdwIzh (5::PrelGHC.Intzh))
	(PrelBase.ZdwIzh (68::PrelGHC.Intzh))
	(ParCore.happyReductionzu105 @ t34 @ t35 @ t36 @ t37) eta eta1 eta2
	eta3 eta4;
  ParCore.actionzu216 :: %forall t b t34 t35 t36 t37 a . t ->
							 PrelBase.Int ->
							 b ->
							 ParCore.HappyState
							 b
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   t34
							   t35
							   t36
							   t37
							   PrelBase.Char)
							  ->
							  PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
							 ->
							 PrelBase.ZMZN
							 (ParCore.HappyState
							  b
							  (ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    t34
							    t35
							    t36
							    t37
							    PrelBase.Char)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err a))
							 ->
							 ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  t34
							  t35
							  t36
							  t37
							  PrelBase.Char)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk
	      (ParCore.HappyAbsSyn t34 t35 t36 t37 PrelBase.Char)
	      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk
	       (ParCore.HappyAbsSyn t34 t35 t36 t37 PrelBase.Char)
	       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 PrelBase.Char)) ->
	ParCore.happyReducezu105 @ b @ a @ t34 @ t35 @ t36 @ t37 eta1 eta2
	eta3 eta4 eta5;
  ParCore.actionzu204 :: %forall t t34 t35 t36 t37 a . PrelNum.ZCTNum
						       t
						       ->
						       t ->
						       PrelBase.Int ->
						       LexCore.Token ->
						       ParCore.HappyState
						       LexCore.Token
						       (ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 t34
							 t35
							 t36
							 t37
							 PrelBase.Char)
							->
							PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						       ->
						       PrelBase.ZMZN
						       (ParCore.HappyState
							LexCore.Token
							(ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  t34
							  t35
							  t36
							  t37
							  PrelBase.Char)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						       ->
						       ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							t34
							t35
							t36
							t37
							PrelBase.Char)
						       ->
						       PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t @ t34 @ t35 @ t36 @ t37 @ a (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (90::PrelGHC.Intzh))}
	%in %let happyShift3 :: (PrelBase.Int ->
				 PrelBase.Int ->
				 LexCore.Token ->
				 ParCore.HappyState
				 LexCore.Token
				 (ParCore.HappyStk
				  (ParCore.HappyAbsSyn t34 t35 t36 t37 PrelBase.Char)
				  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				 ->
				 PrelBase.ZMZN
				 (ParCore.HappyState
				  LexCore.Token
				  (ParCore.HappyStk
				   (ParCore.HappyAbsSyn t34 t35 t36 t37 PrelBase.Char)
				   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				 ->
				 ParCore.HappyStk
				 (ParCore.HappyAbsSyn t34 t35 t36 t37 PrelBase.Char)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				->
				PrelBase.Int ->
				LexCore.Token ->
				ParCore.HappyState
				LexCore.Token
				(ParCore.HappyStk
				 (ParCore.HappyAbsSyn t34 t35 t36 t37 PrelBase.Char)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				->
				PrelBase.ZMZN
				(ParCore.HappyState
				 LexCore.Token
				 (ParCore.HappyStk
				  (ParCore.HappyAbsSyn t34 t35 t36 t37 PrelBase.Char)
				  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				->
				ParCore.HappyStk
				(ParCore.HappyAbsSyn t34 t35 t36 t37 PrelBase.Char)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
		   ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a) @ t34 @ t35 @ t36
		   @ t37 @ PrelBase.Char PrelNum.zdfNumInt
	    %in \ (ds::t) ->
		    %case zddNum %of (tpl::PrelNum.ZCTNum t)
		      {PrelNum.ZdwZCDNum
		       (tpl1::PrelBase.ZCTEq t)
		       (tpl2::PrelShow.ZCTShow t)
		       (tpl3::t -> t -> t)
		       (tpl4::t -> t -> t)
		       (tpl5::t -> t -> t)
		       (tpl6::t -> t)
		       (tpl7::t -> t)
		       (tpl8::t -> t)
		       (tpl9::PrelNum.Integer -> t) ->
			 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
			   {PrelBase.ZdwZCDEq
			    (tpl11::t -> t -> PrelBase.Bool)
			    (tpl12::t -> t -> PrelBase.Bool) ->
			      %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
				{PrelBase.ZdwTrue ->
				   happyShift3
				   (ParCore.actionzu216 @ PrelBase.Int @ LexCore.Token @ t34 @ t35
				    @ t36 @ t37 @ a);
				 PrelBase.ZdwFalse ->
				   ParCore.happyFail @ a @ LexCore.Token @ t34 @ t35 @ t36 @ t37
				   @ PrelBase.Char}}};
  ParCore.happyReducezu104 :: %forall b a t34 t35 t36 t38 . PrelBase.Int
							    ->
							    b ->
							    ParCore.HappyState
							    b
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      PrelFloat.Double
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a)
							    ->
							    PrelBase.ZMZN
							    (ParCore.HappyState
							     b
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       PrelFloat.Double
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a))
							    ->
							    ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     PrelFloat.Double
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk
	      (ParCore.HappyAbsSyn t34 t35 t36 PrelFloat.Double t38)
	      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk
	       (ParCore.HappyAbsSyn t34 t35 t36 PrelFloat.Double t38)
	       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 PrelFloat.Double t38)) ->
	ParCore.happyReduce @ a @ b @ t34 @ t35 @ t36 @ PrelFloat.Double
	@ t38 (PrelBase.ZdwIzh (5::PrelGHC.Intzh))
	(PrelBase.ZdwIzh (68::PrelGHC.Intzh))
	(ParCore.happyReductionzu104 @ t34 @ t35 @ t36 @ t38) eta eta1 eta2
	eta3 eta4;
  ParCore.actionzu217 :: %forall t b t34 t35 t36 t38 a . t ->
							 PrelBase.Int ->
							 b ->
							 ParCore.HappyState
							 b
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   t34
							   t35
							   t36
							   PrelFloat.Double
							   t38)
							  ->
							  PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
							 ->
							 PrelBase.ZMZN
							 (ParCore.HappyState
							  b
							  (ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    t34
							    t35
							    t36
							    PrelFloat.Double
							    t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err a))
							 ->
							 ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  t34
							  t35
							  t36
							  PrelFloat.Double
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk
	      (ParCore.HappyAbsSyn t34 t35 t36 PrelFloat.Double t38)
	      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk
	       (ParCore.HappyAbsSyn t34 t35 t36 PrelFloat.Double t38)
	       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 PrelFloat.Double t38)) ->
	ParCore.happyReducezu104 @ b @ a @ t34 @ t35 @ t36 @ t38 eta1 eta2
	eta3 eta4 eta5;
  ParCore.actionzu203 :: %forall t t34 t35 t36 t38 a . PrelNum.ZCTNum
						       t
						       ->
						       t ->
						       PrelBase.Int ->
						       LexCore.Token ->
						       ParCore.HappyState
						       LexCore.Token
						       (ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 t34
							 t35
							 t36
							 PrelFloat.Double
							 t38)
							->
							PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						       ->
						       PrelBase.ZMZN
						       (ParCore.HappyState
							LexCore.Token
							(ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  t34
							  t35
							  t36
							  PrelFloat.Double
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						       ->
						       ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							t34
							t35
							t36
							PrelFloat.Double
							t38)
						       ->
						       PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t @ t34 @ t35 @ t36 @ t38 @ a (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (90::PrelGHC.Intzh))}
	%in %let happyShift3 :: (PrelBase.Int ->
				 PrelBase.Int ->
				 LexCore.Token ->
				 ParCore.HappyState
				 LexCore.Token
				 (ParCore.HappyStk
				  (ParCore.HappyAbsSyn t34 t35 t36 PrelFloat.Double t38)
				  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				 ->
				 PrelBase.ZMZN
				 (ParCore.HappyState
				  LexCore.Token
				  (ParCore.HappyStk
				   (ParCore.HappyAbsSyn t34 t35 t36 PrelFloat.Double t38)
				   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				 ->
				 ParCore.HappyStk
				 (ParCore.HappyAbsSyn t34 t35 t36 PrelFloat.Double t38)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				->
				PrelBase.Int ->
				LexCore.Token ->
				ParCore.HappyState
				LexCore.Token
				(ParCore.HappyStk
				 (ParCore.HappyAbsSyn t34 t35 t36 PrelFloat.Double t38)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				->
				PrelBase.ZMZN
				(ParCore.HappyState
				 LexCore.Token
				 (ParCore.HappyStk
				  (ParCore.HappyAbsSyn t34 t35 t36 PrelFloat.Double t38)
				  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				->
				ParCore.HappyStk
				(ParCore.HappyAbsSyn t34 t35 t36 PrelFloat.Double t38)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
		   ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a) @ t34 @ t35 @ t36
		   @ PrelFloat.Double @ t38 PrelNum.zdfNumInt
	    %in \ (ds::t) ->
		    %case zddNum %of (tpl::PrelNum.ZCTNum t)
		      {PrelNum.ZdwZCDNum
		       (tpl1::PrelBase.ZCTEq t)
		       (tpl2::PrelShow.ZCTShow t)
		       (tpl3::t -> t -> t)
		       (tpl4::t -> t -> t)
		       (tpl5::t -> t -> t)
		       (tpl6::t -> t)
		       (tpl7::t -> t)
		       (tpl8::t -> t)
		       (tpl9::PrelNum.Integer -> t) ->
			 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
			   {PrelBase.ZdwZCDEq
			    (tpl11::t -> t -> PrelBase.Bool)
			    (tpl12::t -> t -> PrelBase.Bool) ->
			      %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
				{PrelBase.ZdwTrue ->
				   happyShift3
				   (ParCore.actionzu217 @ PrelBase.Int @ LexCore.Token @ t34 @ t35
				    @ t36 @ t38 @ a);
				 PrelBase.ZdwFalse ->
				   ParCore.happyFail @ a @ LexCore.Token @ t34 @ t35 @ t36
				   @ PrelFloat.Double @ t38}}};
  ParCore.happyReducezu103 :: %forall b a t34 t35 t37 t38 . PrelBase.Int
							    ->
							    b ->
							    ParCore.HappyState
							    b
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      PrelNum.Integer
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a)
							    ->
							    PrelBase.ZMZN
							    (ParCore.HappyState
							     b
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       PrelNum.Integer
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a))
							    ->
							    ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     PrelNum.Integer
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk
	      (ParCore.HappyAbsSyn t34 t35 PrelNum.Integer t37 t38)
	      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk
	       (ParCore.HappyAbsSyn t34 t35 PrelNum.Integer t37 t38)
	       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 PrelNum.Integer t37 t38)) ->
	ParCore.happyReduce @ a @ b @ t34 @ t35 @ PrelNum.Integer @ t37
	@ t38 (PrelBase.ZdwIzh (5::PrelGHC.Intzh))
	(PrelBase.ZdwIzh (68::PrelGHC.Intzh))
	(ParCore.happyReductionzu103 @ t34 @ t35 @ t37 @ t38) eta eta1 eta2
	eta3 eta4;
  ParCore.actionzu218 :: %forall t b t34 t35 t37 t38 a . t ->
							 PrelBase.Int ->
							 b ->
							 ParCore.HappyState
							 b
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   t34
							   t35
							   PrelNum.Integer
							   t37
							   t38)
							  ->
							  PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
							 ->
							 PrelBase.ZMZN
							 (ParCore.HappyState
							  b
							  (ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    t34
							    t35
							    PrelNum.Integer
							    t37
							    t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err a))
							 ->
							 ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  t34
							  t35
							  PrelNum.Integer
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk
	      (ParCore.HappyAbsSyn t34 t35 PrelNum.Integer t37 t38)
	      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk
	       (ParCore.HappyAbsSyn t34 t35 PrelNum.Integer t37 t38)
	       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 PrelNum.Integer t37 t38)) ->
	ParCore.happyReducezu103 @ b @ a @ t34 @ t35 @ t37 @ t38 eta1 eta2
	eta3 eta4 eta5;
  ParCore.actionzu202 :: %forall t t34 t35 t37 t38 a . PrelNum.ZCTNum
						       t
						       ->
						       t ->
						       PrelBase.Int ->
						       LexCore.Token ->
						       ParCore.HappyState
						       LexCore.Token
						       (ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 t34
							 t35
							 PrelNum.Integer
							 t37
							 t38)
							->
							PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						       ->
						       PrelBase.ZMZN
						       (ParCore.HappyState
							LexCore.Token
							(ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  t34
							  t35
							  PrelNum.Integer
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						       ->
						       ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							t34
							t35
							PrelNum.Integer
							t37
							t38)
						       ->
						       PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t @ t34 @ t35 @ t37 @ t38 @ a (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (90::PrelGHC.Intzh))}
	%in %let happyShift3 :: (PrelBase.Int ->
				 PrelBase.Int ->
				 LexCore.Token ->
				 ParCore.HappyState
				 LexCore.Token
				 (ParCore.HappyStk
				  (ParCore.HappyAbsSyn t34 t35 PrelNum.Integer t37 t38)
				  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				 ->
				 PrelBase.ZMZN
				 (ParCore.HappyState
				  LexCore.Token
				  (ParCore.HappyStk
				   (ParCore.HappyAbsSyn t34 t35 PrelNum.Integer t37 t38)
				   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				 ->
				 ParCore.HappyStk
				 (ParCore.HappyAbsSyn t34 t35 PrelNum.Integer t37 t38)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				->
				PrelBase.Int ->
				LexCore.Token ->
				ParCore.HappyState
				LexCore.Token
				(ParCore.HappyStk
				 (ParCore.HappyAbsSyn t34 t35 PrelNum.Integer t37 t38)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				->
				PrelBase.ZMZN
				(ParCore.HappyState
				 LexCore.Token
				 (ParCore.HappyStk
				  (ParCore.HappyAbsSyn t34 t35 PrelNum.Integer t37 t38)
				  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				->
				ParCore.HappyStk
				(ParCore.HappyAbsSyn t34 t35 PrelNum.Integer t37 t38)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
		   ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a) @ t34 @ t35
		   @ PrelNum.Integer @ t37 @ t38 PrelNum.zdfNumInt
	    %in \ (ds::t) ->
		    %case zddNum %of (tpl::PrelNum.ZCTNum t)
		      {PrelNum.ZdwZCDNum
		       (tpl1::PrelBase.ZCTEq t)
		       (tpl2::PrelShow.ZCTShow t)
		       (tpl3::t -> t -> t)
		       (tpl4::t -> t -> t)
		       (tpl5::t -> t -> t)
		       (tpl6::t -> t)
		       (tpl7::t -> t)
		       (tpl8::t -> t)
		       (tpl9::PrelNum.Integer -> t) ->
			 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
			   {PrelBase.ZdwZCDEq
			    (tpl11::t -> t -> PrelBase.Bool)
			    (tpl12::t -> t -> PrelBase.Bool) ->
			      %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
				{PrelBase.ZdwTrue ->
				   happyShift3
				   (ParCore.actionzu218 @ PrelBase.Int @ LexCore.Token @ t34 @ t35
				    @ t37 @ t38 @ a);
				 PrelBase.ZdwFalse ->
				   ParCore.happyFail @ a @ LexCore.Token @ t34 @ t35
				   @ PrelNum.Integer @ t37 @ t38}}};
  ParCore.happyReducezu93 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReduce @ a @ b @ t34 @ t35 @ t36 @ t37 @ t38
	(PrelBase.ZdwIzh (4::PrelGHC.Intzh))
	(PrelBase.ZdwIzh (64::PrelGHC.Intzh))
	(ParCore.happyReductionzu93 @ t34 @ t35 @ t36 @ t37 @ t38) eta eta1
	eta2 eta3 eta4;
  ParCore.actionzu211 :: %forall t b t34 t35 t36 t37 t38 a . t ->
							     PrelBase.Int ->
							     b ->
							     ParCore.HappyState
							     b
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a)
							     ->
							     PrelBase.ZMZN
							     (ParCore.HappyState
							      b
							      (ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a))
							     ->
							     ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReducezu93 @ b @ a @ t34 @ t35 @ t36 @ t37 @ t38 eta1
	eta2 eta3 eta4 eta5;
  ParCore.happyReducezu80 :: %forall b a t35 t36 t37 t38 . PrelBase.Int
							   ->
							   b ->
							   ParCore.HappyState
							   b
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     (PrelBase.ZMZN PrelBase.Char)
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err a)
							   ->
							   PrelBase.ZMZN
							   (ParCore.HappyState
							    b
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      (PrelBase.ZMZN PrelBase.Char)
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a))
							   ->
							   ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    (PrelBase.ZMZN PrelBase.Char)
							    t35
							    t36
							    t37
							    t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err a =
    \ @ b
      @ a
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk
	      (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
	      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk
	       (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
	       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn
	      (PrelBase.ZMZN PrelBase.Char)
	      t35
	      t36
	      t37
	      t38)) ->
	ParCore.happyReduce @ a @ b @ (PrelBase.ZMZN PrelBase.Char) @ t35
	@ t36 @ t37 @ t38 (PrelBase.ZdwIzh (5::PrelGHC.Intzh))
	(PrelBase.ZdwIzh (58::PrelGHC.Intzh))
	(ParCore.happyReductionzu80 @ t35 @ t36 @ t37 @ t38) eta eta1 eta2
	eta3 eta4;
  ParCore.actionzu212 :: %forall t b t35 t36 t37 t38 a . t ->
							 PrelBase.Int ->
							 b ->
							 ParCore.HappyState
							 b
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   t38)
							  ->
							  PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
							 ->
							 PrelBase.ZMZN
							 (ParCore.HappyState
							  b
							  (ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    (PrelBase.ZMZN PrelBase.Char)
							    t35
							    t36
							    t37
							    t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err a))
							 ->
							 ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t
      @ b
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk
	      (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
	      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk
	       (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
	       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn
	      (PrelBase.ZMZN PrelBase.Char)
	      t35
	      t36
	      t37
	      t38)) ->
	ParCore.happyReducezu80 @ b @ a @ t35 @ t36 @ t37 @ t38 eta1 eta2
	eta3 eta4 eta5;
  ParCore.actionzu210 :: %forall t t35 t36 t37 t38 a . PrelNum.ZCTNum
						       t
						       ->
						       t ->
						       PrelBase.Int ->
						       LexCore.Token ->
						       ParCore.HappyState
						       LexCore.Token
						       (ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38)
							->
							PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						       ->
						       PrelBase.ZMZN
						       (ParCore.HappyState
							LexCore.Token
							(ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						       ->
						       ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)
						       ->
						       PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t @ t35 @ t36 @ t37 @ t38 @ a (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (90::PrelGHC.Intzh))}
	%in %let happyShift3 :: (PrelBase.Int ->
				 PrelBase.Int ->
				 LexCore.Token ->
				 ParCore.HappyState
				 LexCore.Token
				 (ParCore.HappyStk
				  (ParCore.HappyAbsSyn
				   (PrelBase.ZMZN PrelBase.Char)
				   t35
				   t36
				   t37
				   t38)
				  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				 ->
				 PrelBase.ZMZN
				 (ParCore.HappyState
				  LexCore.Token
				  (ParCore.HappyStk
				   (ParCore.HappyAbsSyn
				    (PrelBase.ZMZN PrelBase.Char)
				    t35
				    t36
				    t37
				    t38)
				   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				 ->
				 ParCore.HappyStk
				 (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				->
				PrelBase.Int ->
				LexCore.Token ->
				ParCore.HappyState
				LexCore.Token
				(ParCore.HappyStk
				 (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				->
				PrelBase.ZMZN
				(ParCore.HappyState
				 LexCore.Token
				 (ParCore.HappyStk
				  (ParCore.HappyAbsSyn
				   (PrelBase.ZMZN PrelBase.Char)
				   t35
				   t36
				   t37
				   t38)
				  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				->
				ParCore.HappyStk
				(ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
		   ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a)
		   @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38
		   PrelNum.zdfNumInt
	    %in \ (ds::t) ->
		    %case zddNum %of (tpl::PrelNum.ZCTNum t)
		      {PrelNum.ZdwZCDNum
		       (tpl1::PrelBase.ZCTEq t)
		       (tpl2::PrelShow.ZCTShow t)
		       (tpl3::t -> t -> t)
		       (tpl4::t -> t -> t)
		       (tpl5::t -> t -> t)
		       (tpl6::t -> t)
		       (tpl7::t -> t)
		       (tpl8::t -> t)
		       (tpl9::PrelNum.Integer -> t) ->
			 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
			   {PrelBase.ZdwZCDEq
			    (tpl11::t -> t -> PrelBase.Bool)
			    (tpl12::t -> t -> PrelBase.Bool) ->
			      %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
				{PrelBase.ZdwTrue ->
				   happyShift3
				   (ParCore.actionzu212 @ PrelBase.Int @ LexCore.Token @ t35 @ t36
				    @ t37 @ t38 @ a);
				 PrelBase.ZdwFalse ->
				   ParCore.happyFail @ a @ LexCore.Token
				   @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38}}};
  ParCore.actionzu165 :: %forall t t35 t36 t37 t38 a . PrelNum.ZCTNum
						       t
						       ->
						       t ->
						       PrelBase.Int ->
						       LexCore.Token ->
						       ParCore.HappyState
						       LexCore.Token
						       (ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38)
							->
							PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						       ->
						       PrelBase.ZMZN
						       (ParCore.HappyState
							LexCore.Token
							(ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						       ->
						       ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)
						       ->
						       PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t @ t35 @ t36 @ t37 @ t38 @ a (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (96::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (95::PrelGHC.Intzh))}
	    %in %let lit3 :: t =
		       %case zddNum %of (tpl::PrelNum.ZCTNum t)
			 {PrelNum.ZdwZCDNum
			  (tpl1::PrelBase.ZCTEq t)
			  (tpl2::PrelShow.ZCTShow t)
			  (tpl3::t -> t -> t)
			  (tpl4::t -> t -> t)
			  (tpl5::t -> t -> t)
			  (tpl6::t -> t)
			  (tpl7::t -> t)
			  (tpl8::t -> t)
			  (tpl9::PrelNum.Integer -> t) ->
			    tpl9 (PrelNum.ZdwSzh (94::PrelGHC.Intzh))}
		%in %let lit4 :: t =
			   %case zddNum %of (tpl::PrelNum.ZCTNum t)
			     {PrelNum.ZdwZCDNum
			      (tpl1::PrelBase.ZCTEq t)
			      (tpl2::PrelShow.ZCTShow t)
			      (tpl3::t -> t -> t)
			      (tpl4::t -> t -> t)
			      (tpl5::t -> t -> t)
			      (tpl6::t -> t)
			      (tpl7::t -> t)
			      (tpl8::t -> t)
			      (tpl9::PrelNum.Integer -> t) ->
				tpl9 (PrelNum.ZdwSzh (89::PrelGHC.Intzh))}
		    %in %let lit5 :: t =
			       %case zddNum %of (tpl::PrelNum.ZCTNum t)
				 {PrelNum.ZdwZCDNum
				  (tpl1::PrelBase.ZCTEq t)
				  (tpl2::PrelShow.ZCTShow t)
				  (tpl3::t -> t -> t)
				  (tpl4::t -> t -> t)
				  (tpl5::t -> t -> t)
				  (tpl6::t -> t)
				  (tpl7::t -> t)
				  (tpl8::t -> t)
				  (tpl9::PrelNum.Integer -> t) ->
				    tpl9 (PrelNum.ZdwSzh (66::PrelGHC.Intzh))}
			%in %let actionzu2101 :: PrelBase.Int ->
						 PrelBase.Int ->
						 LexCore.Token ->
						 ParCore.HappyState
						 LexCore.Token
						 (ParCore.HappyStk
						  (ParCore.HappyAbsSyn
						   (PrelBase.ZMZN PrelBase.Char)
						   t35
						   t36
						   t37
						   t38)
						  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						 ->
						 PrelBase.ZMZN
						 (ParCore.HappyState
						  LexCore.Token
						  (ParCore.HappyStk
						   (ParCore.HappyAbsSyn
						    (PrelBase.ZMZN PrelBase.Char)
						    t35
						    t36
						    t37
						    t38)
						   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						 ->
						 ParCore.HappyStk
						 (ParCore.HappyAbsSyn
						  (PrelBase.ZMZN PrelBase.Char)
						  t35
						  t36
						  t37
						  t38)
						 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
				   ParCore.actionzu210 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38 @ a
				   PrelNum.zdfNumInt
			    %in %let happyShift3 :: (PrelBase.Int ->
						     PrelBase.Int ->
						     LexCore.Token ->
						     ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						     ->
						     PrelBase.ZMZN
						     (ParCore.HappyState
						      LexCore.Token
						      (ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)
						       ->
						       PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						     ->
						     ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						    ->
						    PrelBase.Int ->
						    LexCore.Token ->
						    ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						    ->
						    PrelBase.ZMZN
						    (ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						    ->
						    ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38)
						    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
				       ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a)
				       @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38
				       PrelNum.zdfNumInt
				%in \ (ds::t) ->
					%case zddNum %of (tpl::PrelNum.ZCTNum t)
					  {PrelNum.ZdwZCDNum
					   (tpl1::PrelBase.ZCTEq t)
					   (tpl2::PrelShow.ZCTShow t)
					   (tpl3::t -> t -> t)
					   (tpl4::t -> t -> t)
					   (tpl5::t -> t -> t)
					   (tpl6::t -> t)
					   (tpl7::t -> t)
					   (tpl8::t -> t)
					   (tpl9::PrelNum.Integer -> t) ->
					     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
					       {PrelBase.ZdwZCDEq
						(tpl11::t -> t -> PrelBase.Bool)
						(tpl12::t -> t -> PrelBase.Bool) ->
						  %case (tpl12 lit4 ds) %of (wild::PrelBase.Bool)
						    {PrelBase.ZdwTrue ->
						       happyShift3
						       (%note "InlineMe"
							actionzu391 @ (PrelBase.ZMZN PrelBase.Char)
							@ t35 @ t36 @ t37 @ t38 @ a);
						     PrelBase.ZdwFalse ->
						       %case (tpl12 lit3 ds)
						       %of (wild1::PrelBase.Bool)
							 {PrelBase.ZdwTrue ->
							    happyShift3
							    (ParCore.actionzu40 @ PrelBase.Int
							     @ LexCore.Token
							     @ (PrelBase.ZMZN PrelBase.Char) @ t35
							     @ t36 @ t37 @ t38 @ a);
							  PrelBase.ZdwFalse ->
							    %case (tpl12 lit2 ds)
							    %of (wild2::PrelBase.Bool)
							      {PrelBase.ZdwTrue ->
								 happyShift3
								 (ParCore.actionzu41 @ PrelBase.Int
								  @ LexCore.Token
								  @ (PrelBase.ZMZN PrelBase.Char)
								  @ t35 @ t36 @ t37 @ t38 @ a);
							       PrelBase.ZdwFalse ->
								 %case (tpl12 lit1 ds)
								 %of (wild3::PrelBase.Bool)
								   {PrelBase.ZdwTrue ->
								      happyShift3
								      (ParCore.actionzu42
								       @ PrelBase.Int
								       @ LexCore.Token
								       @ (PrelBase.ZMZN
									  PrelBase.Char)
								       @ t35 @ t36 @ t37 @ t38 @ a);
								    PrelBase.ZdwFalse ->
								      %case (tpl12 lit5 ds)
								      %of (wild4::PrelBase.Bool)
									{PrelBase.ZdwTrue ->
									   ParCore.happyGoto
									   @ (ParCore.HappyState
									      LexCore.Token
									      (ParCore.HappyStk
									       (ParCore.HappyAbsSyn
										(PrelBase.ZMZN
										 PrelBase.Char)
										t35
										t36
										t37
										t38)
									       ->
									       PrelBase.ZMZN
									       LexCore.Token
									       -> ErrM.Err a))
									   @ LexCore.Token
									   @ (ParCore.HappyStk
									      (ParCore.HappyAbsSyn
									       (PrelBase.ZMZN
										PrelBase.Char)
									       t35
									       t36
									       t37
									       t38)
									      ->
									      PrelBase.ZMZN
									      LexCore.Token
									      -> ErrM.Err a)
									   actionzu2101;
									 PrelBase.ZdwFalse ->
									   ParCore.happyFail @ a
									   @ LexCore.Token
									   @ (PrelBase.ZMZN
									      PrelBase.Char)
									   @ t35 @ t36 @ t37
									   @ t38}}}}}}};
  ParCore.actionzu149 :: %forall t t35 t36 t37 t38 a . PrelNum.ZCTNum
						       t
						       ->
						       t ->
						       PrelBase.Int ->
						       LexCore.Token ->
						       ParCore.HappyState
						       LexCore.Token
						       (ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38)
							->
							PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						       ->
						       PrelBase.ZMZN
						       (ParCore.HappyState
							LexCore.Token
							(ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						       ->
						       ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)
						       ->
						       PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t @ t35 @ t36 @ t37 @ t38 @ a (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (78::PrelGHC.Intzh))}
	%in %let actionzu1651 :: PrelBase.Int ->
				 PrelBase.Int ->
				 LexCore.Token ->
				 ParCore.HappyState
				 LexCore.Token
				 (ParCore.HappyStk
				  (ParCore.HappyAbsSyn
				   (PrelBase.ZMZN PrelBase.Char)
				   t35
				   t36
				   t37
				   t38)
				  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				 ->
				 PrelBase.ZMZN
				 (ParCore.HappyState
				  LexCore.Token
				  (ParCore.HappyStk
				   (ParCore.HappyAbsSyn
				    (PrelBase.ZMZN PrelBase.Char)
				    t35
				    t36
				    t37
				    t38)
				   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				 ->
				 ParCore.HappyStk
				 (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
		   ParCore.actionzu165 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38 @ a
		   PrelNum.zdfNumInt
	    %in %let happyShift3 :: (PrelBase.Int ->
				     PrelBase.Int ->
				     LexCore.Token ->
				     ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       t35
				       t36
				       t37
				       t38)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				     ->
				     PrelBase.ZMZN
				     (ParCore.HappyState
				      LexCore.Token
				      (ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					t35
					t36
					t37
					t38)
				       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				     ->
				     ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      t35
				      t36
				      t37
				      t38)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				    ->
				    PrelBase.Int ->
				    LexCore.Token ->
				    ParCore.HappyState
				    LexCore.Token
				    (ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      t35
				      t36
				      t37
				      t38)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				    ->
				    PrelBase.ZMZN
				    (ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       t35
				       t36
				       t37
				       t38)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				    ->
				    ParCore.HappyStk
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     t35
				     t36
				     t37
				     t38)
				    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
		       ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a)
		       @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38
		       PrelNum.zdfNumInt
		%in \ (ds::t) ->
			%case zddNum %of (tpl::PrelNum.ZCTNum t)
			  {PrelNum.ZdwZCDNum
			   (tpl1::PrelBase.ZCTEq t)
			   (tpl2::PrelShow.ZCTShow t)
			   (tpl3::t -> t -> t)
			   (tpl4::t -> t -> t)
			   (tpl5::t -> t -> t)
			   (tpl6::t -> t)
			   (tpl7::t -> t)
			   (tpl8::t -> t)
			   (tpl9::PrelNum.Integer -> t) ->
			     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
			       {PrelBase.ZdwZCDEq
				(tpl11::t -> t -> PrelBase.Bool)
				(tpl12::t -> t -> PrelBase.Bool) ->
				  %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
				    {PrelBase.ZdwTrue ->
				       happyShift3 actionzu1651;
				     PrelBase.ZdwFalse ->
				       ParCore.happyFail @ a @ LexCore.Token
				       @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38}}};
  ParCore.actionzu60 :: %forall t t35 t36 t37 t38 a . PrelNum.ZCTNum
						      t
						      ->
						      t ->
						      PrelBase.Int ->
						      LexCore.Token ->
						      ParCore.HappyState
						      LexCore.Token
						      (ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)
						       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						      ->
						      PrelBase.ZMZN
						      (ParCore.HappyState
						       LexCore.Token
						       (ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38)
							->
							PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						      ->
						      ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t @ t35 @ t36 @ t37 @ t38 @ a (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (97::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (34::PrelGHC.Intzh))}
	    %in %let actionzu1491 :: PrelBase.Int ->
				     PrelBase.Int ->
				     LexCore.Token ->
				     ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       t35
				       t36
				       t37
				       t38)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				     ->
				     PrelBase.ZMZN
				     (ParCore.HappyState
				      LexCore.Token
				      (ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					t35
					t36
					t37
					t38)
				       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				     ->
				     ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      t35
				      t36
				      t37
				      t38)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
		       ParCore.actionzu149 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38 @ a
		       PrelNum.zdfNumInt
		%in %let happyShift3 :: (PrelBase.Int ->
					 PrelBase.Int ->
					 LexCore.Token ->
					 ParCore.HappyState
					 LexCore.Token
					 (ParCore.HappyStk
					  (ParCore.HappyAbsSyn
					   (PrelBase.ZMZN PrelBase.Char)
					   t35
					   t36
					   t37
					   t38)
					  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
					 ->
					 PrelBase.ZMZN
					 (ParCore.HappyState
					  LexCore.Token
					  (ParCore.HappyStk
					   (ParCore.HappyAbsSyn
					    (PrelBase.ZMZN PrelBase.Char)
					    t35
					    t36
					    t37
					    t38)
					   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
					 ->
					 ParCore.HappyStk
					 (ParCore.HappyAbsSyn
					  (PrelBase.ZMZN PrelBase.Char)
					  t35
					  t36
					  t37
					  t38)
					 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
					->
					PrelBase.Int ->
					LexCore.Token ->
					ParCore.HappyState
					LexCore.Token
					(ParCore.HappyStk
					 (ParCore.HappyAbsSyn
					  (PrelBase.ZMZN PrelBase.Char)
					  t35
					  t36
					  t37
					  t38)
					 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
					->
					PrelBase.ZMZN
					(ParCore.HappyState
					 LexCore.Token
					 (ParCore.HappyStk
					  (ParCore.HappyAbsSyn
					   (PrelBase.ZMZN PrelBase.Char)
					   t35
					   t36
					   t37
					   t38)
					  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
					->
					ParCore.HappyStk
					(ParCore.HappyAbsSyn
					 (PrelBase.ZMZN PrelBase.Char)
					 t35
					 t36
					 t37
					 t38)
					-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
			   ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a)
			   @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38
			   PrelNum.zdfNumInt
		    %in \ (ds::t) ->
			    %case zddNum %of (tpl::PrelNum.ZCTNum t)
			      {PrelNum.ZdwZCDNum
			       (tpl1::PrelBase.ZCTEq t)
			       (tpl2::PrelShow.ZCTShow t)
			       (tpl3::t -> t -> t)
			       (tpl4::t -> t -> t)
			       (tpl5::t -> t -> t)
			       (tpl6::t -> t)
			       (tpl7::t -> t)
			       (tpl8::t -> t)
			       (tpl9::PrelNum.Integer -> t) ->
				 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
				   {PrelBase.ZdwZCDEq
				    (tpl11::t -> t -> PrelBase.Bool)
				    (tpl12::t -> t -> PrelBase.Bool) ->
				      %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
					{PrelBase.ZdwTrue ->
					   happyShift3
					   (ParCore.actionzu32 @ PrelBase.Int @ LexCore.Token @ t35
					    @ t36 @ t37 @ t38 @ a);
					 PrelBase.ZdwFalse ->
					   %case (tpl12 lit2 ds) %of (wild1::PrelBase.Bool)
					     {PrelBase.ZdwTrue ->
						ParCore.happyGoto
						@ (ParCore.HappyState
						   LexCore.Token
						   (ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38)
						    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						@ LexCore.Token
						@ (ParCore.HappyStk
						   (ParCore.HappyAbsSyn
						    (PrelBase.ZMZN PrelBase.Char)
						    t35
						    t36
						    t37
						    t38)
						   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						actionzu1491;
					      PrelBase.ZdwFalse ->
						ParCore.happyFail @ a @ LexCore.Token
						@ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37
						@ t38}}}};
  actionzu1551 :: %forall t35 t36 t37 t38 a . PrelBase.Int ->
					      PrelBase.Int ->
					      LexCore.Token ->
					      ParCore.HappyState
					      LexCore.Token
					      (ParCore.HappyStk
					       (ParCore.HappyAbsSyn
						(PrelBase.ZMZN PrelBase.Char)
						t35
						t36
						t37
						t38)
					       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
					      ->
					      PrelBase.ZMZN
					      (ParCore.HappyState
					       LexCore.Token
					       (ParCore.HappyStk
						(ParCore.HappyAbsSyn
						 (PrelBase.ZMZN PrelBase.Char)
						 t35
						 t36
						 t37
						 t38)
						-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
					      ->
					      ParCore.HappyStk
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38)
					      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t35 @ t36 @ t37 @ t38 @ a ->
	ParCore.actionzu155 @ PrelBase.Int @ (PrelBase.ZMZN PrelBase.Char)
	@ t35 @ t36 @ t37 @ t38 @ a PrelNum.zdfNumInt;
  actionzu601 :: %forall t35 t36 t37 t38 a . PrelBase.Int ->
					     PrelBase.Int ->
					     LexCore.Token ->
					     ParCore.HappyState
					     LexCore.Token
					     (ParCore.HappyStk
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38)
					      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
					     ->
					     PrelBase.ZMZN
					     (ParCore.HappyState
					      LexCore.Token
					      (ParCore.HappyStk
					       (ParCore.HappyAbsSyn
						(PrelBase.ZMZN PrelBase.Char)
						t35
						t36
						t37
						t38)
					       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
					     ->
					     ParCore.HappyStk
					     (ParCore.HappyAbsSyn
					      (PrelBase.ZMZN PrelBase.Char)
					      t35
					      t36
					      t37
					      t38)
					     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t35 @ t36 @ t37 @ t38 @ a ->
	ParCore.actionzu60 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38 @ a
	PrelNum.zdfNumInt;
  actionzu451 :: %forall t35 t36 t37 t38 a . PrelBase.Int ->
					     PrelBase.Int ->
					     LexCore.Token ->
					     ParCore.HappyState
					     LexCore.Token
					     (ParCore.HappyStk
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38)
					      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
					     ->
					     PrelBase.ZMZN
					     (ParCore.HappyState
					      LexCore.Token
					      (ParCore.HappyStk
					       (ParCore.HappyAbsSyn
						(PrelBase.ZMZN PrelBase.Char)
						t35
						t36
						t37
						t38)
					       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
					     ->
					     ParCore.HappyStk
					     (ParCore.HappyAbsSyn
					      (PrelBase.ZMZN PrelBase.Char)
					      t35
					      t36
					      t37
					      t38)
					     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t35 @ t36 @ t37 @ t38 @ a ->
	ParCore.actionzu45 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38 @ a
	PrelNum.zdfNumInt;
  happyShift3 :: %forall t35 t36 t37 t38 a . (PrelBase.Int ->
					      PrelBase.Int ->
					      LexCore.Token ->
					      ParCore.HappyState
					      LexCore.Token
					      (ParCore.HappyStk
					       (ParCore.HappyAbsSyn
						(PrelBase.ZMZN PrelBase.Char)
						t35
						t36
						t37
						t38)
					       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
					      ->
					      PrelBase.ZMZN
					      (ParCore.HappyState
					       LexCore.Token
					       (ParCore.HappyStk
						(ParCore.HappyAbsSyn
						 (PrelBase.ZMZN PrelBase.Char)
						 t35
						 t36
						 t37
						 t38)
						-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
					      ->
					      ParCore.HappyStk
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38)
					      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
					     ->
					     PrelBase.Int ->
					     LexCore.Token ->
					     ParCore.HappyState
					     LexCore.Token
					     (ParCore.HappyStk
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38)
					      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
					     ->
					     PrelBase.ZMZN
					     (ParCore.HappyState
					      LexCore.Token
					      (ParCore.HappyStk
					       (ParCore.HappyAbsSyn
						(PrelBase.ZMZN PrelBase.Char)
						t35
						t36
						t37
						t38)
					       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
					     ->
					     ParCore.HappyStk
					     (ParCore.HappyAbsSyn
					      (PrelBase.ZMZN PrelBase.Char)
					      t35
					      t36
					      t37
					      t38)
					     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t35 @ t36 @ t37 @ t38 @ a ->
	ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a)
	@ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38
	PrelNum.zdfNumInt;
  %rec
  {actionzu1541 :: %forall t35 t36 t37 t38 a . PrelBase.Int ->
					       PrelBase.Int ->
					       LexCore.Token ->
					       ParCore.HappyState
					       LexCore.Token
					       (ParCore.HappyStk
						(ParCore.HappyAbsSyn
						 (PrelBase.ZMZN PrelBase.Char)
						 t35
						 t36
						 t37
						 t38)
						-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
					       ->
					       PrelBase.ZMZN
					       (ParCore.HappyState
						LexCore.Token
						(ParCore.HappyStk
						 (ParCore.HappyAbsSyn
						  (PrelBase.ZMZN PrelBase.Char)
						  t35
						  t36
						  t37
						  t38)
						 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
					       ->
					       ParCore.HappyStk
					       (ParCore.HappyAbsSyn
						(PrelBase.ZMZN PrelBase.Char)
						t35
						t36
						t37
						t38)
					       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
     \ @ t35 @ t36 @ t37 @ t38 @ a (ds::PrelBase.Int) ->
	 %case ds %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	      %case ds1 %of (ds2::PrelGHC.Intzh)
		{%_ ->
		   ParCore.happyFail @ a @ LexCore.Token
		   @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38;
		 (89::PrelGHC.Intzh) ->
		   happyShift3 @ t35 @ t36 @ t37 @ t38 @ a
		   (%note "InlineMe"
		    actionzu601 @ t35 @ t36 @ t37 @ t38 @ a);
		 (93::PrelGHC.Intzh) ->
		   happyShift3 @ t35 @ t36 @ t37 @ t38 @ a
		   (%note "InlineMe"
		    actionzu1641 @ t35 @ t36 @ t37 @ t38 @ a);
		 (97::PrelGHC.Intzh) ->
		   happyShift3 @ t35 @ t36 @ t37 @ t38 @ a
		   (ParCore.actionzu32 @ PrelBase.Int @ LexCore.Token @ t35 @ t36
		    @ t37 @ t38 @ a);
		 (34::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu58 @ PrelBase.Int @ LexCore.Token @ t35 @ t36
		    @ t37 @ t38 @ a);
		 (58::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu150 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38 @ a)}};
   actionzu511 :: %forall t35 t36 t37 t38 a . PrelBase.Int ->
					      PrelBase.Int ->
					      LexCore.Token ->
					      ParCore.HappyState
					      LexCore.Token
					      (ParCore.HappyStk
					       (ParCore.HappyAbsSyn
						(PrelBase.ZMZN PrelBase.Char)
						t35
						t36
						t37
						t38)
					       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
					      ->
					      PrelBase.ZMZN
					      (ParCore.HappyState
					       LexCore.Token
					       (ParCore.HappyStk
						(ParCore.HappyAbsSyn
						 (PrelBase.ZMZN PrelBase.Char)
						 t35
						 t36
						 t37
						 t38)
						-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
					      ->
					      ParCore.HappyStk
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38)
					      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
     \ @ t35
       @ t36
       @ t37
       @ t38
       @ a
       (eta::PrelBase.Int)
       (eta1::PrelBase.Int)
       (eta2::LexCore.Token)
       (eta3::ParCore.HappyState
	      LexCore.Token
	      (ParCore.HappyStk
	       (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
	       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)) ->
	 %case eta %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds::PrelGHC.Intzh) ->
	      %case ds %of (ds1::PrelGHC.Intzh)
		{%_ ->
		   ParCore.happyReducezu82 @ LexCore.Token @ a
		   @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38 eta1 eta2
		   eta3;
		 (59::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu1541 @ t35 @ t36 @ t37 @ t38 @ a)
		   eta1 eta2 eta3}};
   actionzu501 :: %forall t35 t36 t37 t38 a . PrelBase.Int ->
					      PrelBase.Int ->
					      LexCore.Token ->
					      ParCore.HappyState
					      LexCore.Token
					      (ParCore.HappyStk
					       (ParCore.HappyAbsSyn
						(PrelBase.ZMZN PrelBase.Char)
						t35
						t36
						t37
						t38)
					       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
					      ->
					      PrelBase.ZMZN
					      (ParCore.HappyState
					       LexCore.Token
					       (ParCore.HappyStk
						(ParCore.HappyAbsSyn
						 (PrelBase.ZMZN PrelBase.Char)
						 t35
						 t36
						 t37
						 t38)
						-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
					      ->
					      ParCore.HappyStk
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38)
					      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
     \ @ t35 @ t36 @ t37 @ t38 @ a (ds::PrelBase.Int) ->
	 %case ds %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	      %case ds1 %of (ds2::PrelGHC.Intzh)
		{%_ ->
		   ParCore.happyFail @ a @ LexCore.Token
		   @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38;
		 (89::PrelGHC.Intzh) ->
		   happyShift3 @ t35 @ t36 @ t37 @ t38 @ a
		   (%note "InlineMe"
		    actionzu501 @ t35 @ t36 @ t37 @ t38 @ a);
		 (92::PrelGHC.Intzh) ->
		   happyShift3 @ t35 @ t36 @ t37 @ t38 @ a
		   (%note "InlineMe"
		    actionzu511 @ t35 @ t36 @ t37 @ t38 @ a);
		 (97::PrelGHC.Intzh) ->
		   happyShift3 @ t35 @ t36 @ t37 @ t38 @ a
		   (ParCore.actionzu32 @ PrelBase.Int @ LexCore.Token @ t35 @ t36
		    @ t37 @ t38 @ a);
		 (34::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu451 @ t35 @ t36 @ t37 @ t38 @ a);
		 (62::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu46 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38 @ a);
		 (63::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu471 @ t35 @ t36 @ t37 @ t38 @ a);
		 (64::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu1551 @ t35 @ t36 @ t37 @ t38 @ a);
		 (69::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu49 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38 @ a)}};
   actionzu1641 :: %forall t35 t36 t37 t38 a . PrelBase.Int ->
					       PrelBase.Int ->
					       LexCore.Token ->
					       ParCore.HappyState
					       LexCore.Token
					       (ParCore.HappyStk
						(ParCore.HappyAbsSyn
						 (PrelBase.ZMZN PrelBase.Char)
						 t35
						 t36
						 t37
						 t38)
						-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
					       ->
					       PrelBase.ZMZN
					       (ParCore.HappyState
						LexCore.Token
						(ParCore.HappyStk
						 (ParCore.HappyAbsSyn
						  (PrelBase.ZMZN PrelBase.Char)
						  t35
						  t36
						  t37
						  t38)
						 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
					       ->
					       ParCore.HappyStk
					       (ParCore.HappyAbsSyn
						(PrelBase.ZMZN PrelBase.Char)
						t35
						t36
						t37
						t38)
					       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
     \ @ t35 @ t36 @ t37 @ t38 @ a (ds::PrelBase.Int) ->
	 %case ds %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	      %case ds1 %of (ds2::PrelGHC.Intzh)
		{%_ ->
		   ParCore.happyFail @ a @ LexCore.Token
		   @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38;
		 (89::PrelGHC.Intzh) ->
		   happyShift3 @ t35 @ t36 @ t37 @ t38 @ a
		   (%note "InlineMe"
		    actionzu501 @ t35 @ t36 @ t37 @ t38 @ a);
		 (92::PrelGHC.Intzh) ->
		   happyShift3 @ t35 @ t36 @ t37 @ t38 @ a
		   (%note "InlineMe"
		    actionzu511 @ t35 @ t36 @ t37 @ t38 @ a);
		 (97::PrelGHC.Intzh) ->
		   happyShift3 @ t35 @ t36 @ t37 @ t38 @ a
		   (ParCore.actionzu32 @ PrelBase.Int @ LexCore.Token @ t35 @ t36
		    @ t37 @ t38 @ a);
		 (34::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu451 @ t35 @ t36 @ t37 @ t38 @ a);
		 (62::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu46 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38 @ a);
		 (63::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu471 @ t35 @ t36 @ t37 @ t38 @ a);
		 (64::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu211 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38 @ a);
		 (69::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu49 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38 @ a)}};
   actionzu1561 :: %forall t35 t36 t37 t38 a . PrelBase.Int ->
					       PrelBase.Int ->
					       LexCore.Token ->
					       ParCore.HappyState
					       LexCore.Token
					       (ParCore.HappyStk
						(ParCore.HappyAbsSyn
						 (PrelBase.ZMZN PrelBase.Char)
						 t35
						 t36
						 t37
						 t38)
						-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
					       ->
					       PrelBase.ZMZN
					       (ParCore.HappyState
						LexCore.Token
						(ParCore.HappyStk
						 (ParCore.HappyAbsSyn
						  (PrelBase.ZMZN PrelBase.Char)
						  t35
						  t36
						  t37
						  t38)
						 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
					       ->
					       ParCore.HappyStk
					       (ParCore.HappyAbsSyn
						(PrelBase.ZMZN PrelBase.Char)
						t35
						t36
						t37
						t38)
					       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
     \ @ t35 @ t36 @ t37 @ t38 @ a (ds::PrelBase.Int) ->
	 %case ds %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	      %case ds1 %of (ds2::PrelGHC.Intzh)
		{%_ ->
		   ParCore.happyFail @ a @ LexCore.Token
		   @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38;
		 (89::PrelGHC.Intzh) ->
		   happyShift3 @ t35 @ t36 @ t37 @ t38 @ a
		   (%note "InlineMe"
		    actionzu501 @ t35 @ t36 @ t37 @ t38 @ a);
		 (92::PrelGHC.Intzh) ->
		   happyShift3 @ t35 @ t36 @ t37 @ t38 @ a
		   (%note "InlineMe"
		    actionzu511 @ t35 @ t36 @ t37 @ t38 @ a);
		 (97::PrelGHC.Intzh) ->
		   happyShift3 @ t35 @ t36 @ t37 @ t38 @ a
		   (ParCore.actionzu32 @ PrelBase.Int @ LexCore.Token @ t35 @ t36
		    @ t37 @ t38 @ a);
		 (34::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu451 @ t35 @ t36 @ t37 @ t38 @ a);
		 (62::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu46 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38 @ a);
		 (63::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu471 @ t35 @ t36 @ t37 @ t38 @ a);
		 (64::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu162 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38 @ a);
		 (69::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu49 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38 @ a)}};
   actionzu471 :: %forall t35 t36 t37 t38 a . PrelBase.Int ->
					      PrelBase.Int ->
					      LexCore.Token ->
					      ParCore.HappyState
					      LexCore.Token
					      (ParCore.HappyStk
					       (ParCore.HappyAbsSyn
						(PrelBase.ZMZN PrelBase.Char)
						t35
						t36
						t37
						t38)
					       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
					      ->
					      PrelBase.ZMZN
					      (ParCore.HappyState
					       LexCore.Token
					       (ParCore.HappyStk
						(ParCore.HappyAbsSyn
						 (PrelBase.ZMZN PrelBase.Char)
						 t35
						 t36
						 t37
						 t38)
						-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
					      ->
					      ParCore.HappyStk
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38)
					      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
     \ @ t35 @ t36 @ t37 @ t38 @ a (ds::PrelBase.Int) ->
	 %case ds %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	      %case ds1 %of (ds2::PrelGHC.Intzh)
		{%_ ->
		   ParCore.happyReducezu94 @ LexCore.Token @ a
		   @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38;
		 (81::PrelGHC.Intzh) ->
		   happyShift3 @ t35 @ t36 @ t37 @ t38 @ a
		   (%note "InlineMe"
		    actionzu1561 @ t35 @ t36 @ t37 @ t38 @ a);
		 (89::PrelGHC.Intzh) ->
		   happyShift3 @ t35 @ t36 @ t37 @ t38 @ a
		   (%note "InlineMe"
		    actionzu501 @ t35 @ t36 @ t37 @ t38 @ a);
		 (97::PrelGHC.Intzh) ->
		   happyShift3 @ t35 @ t36 @ t37 @ t38 @ a
		   (ParCore.actionzu32 @ PrelBase.Int @ LexCore.Token @ t35 @ t36
		    @ t37 @ t38 @ a);
		 (34::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu451 @ t35 @ t36 @ t37 @ t38 @ a);
		 (62::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu153 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38 @ a);
		 (69::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu49 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38 @ a)}}};
  ParCore.actionzu164 :: %forall t35 t36 t37 t38 a . PrelBase.Int ->
						     PrelBase.Int ->
						     LexCore.Token ->
						     ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						     ->
						     PrelBase.ZMZN
						     (ParCore.HappyState
						      LexCore.Token
						      (ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)
						       ->
						       PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						     ->
						     ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t35 @ t36 @ t37 @ t38 @ a ->
	%note "InlineMe"
	actionzu1641 @ t35 @ t36 @ t37 @ t38 @ a;
  ParCore.actionzu156 :: %forall t35 t36 t37 t38 a . PrelBase.Int ->
						     PrelBase.Int ->
						     LexCore.Token ->
						     ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						     ->
						     PrelBase.ZMZN
						     (ParCore.HappyState
						      LexCore.Token
						      (ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)
						       ->
						       PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						     ->
						     ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t35 @ t36 @ t37 @ t38 @ a ->
	%note "InlineMe"
	actionzu1561 @ t35 @ t36 @ t37 @ t38 @ a;
  ParCore.actionzu154 :: %forall t35 t36 t37 t38 a . PrelBase.Int ->
						     PrelBase.Int ->
						     LexCore.Token ->
						     ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						     ->
						     PrelBase.ZMZN
						     (ParCore.HappyState
						      LexCore.Token
						      (ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)
						       ->
						       PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						     ->
						     ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t35 @ t36 @ t37 @ t38 @ a ->
	%note "InlineMe"
	actionzu1541 @ t35 @ t36 @ t37 @ t38 @ a;
  ParCore.actionzu51 :: %forall t35 t36 t37 t38 a . PrelBase.Int ->
						    PrelBase.Int ->
						    LexCore.Token ->
						    ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						    ->
						    PrelBase.ZMZN
						    (ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						    ->
						    ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38)
						    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t35 @ t36 @ t37 @ t38 @ a ->
	%note "InlineMe"
	actionzu511 @ t35 @ t36 @ t37 @ t38 @ a;
  ParCore.actionzu50 :: %forall t35 t36 t37 t38 a . PrelBase.Int ->
						    PrelBase.Int ->
						    LexCore.Token ->
						    ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						    ->
						    PrelBase.ZMZN
						    (ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						    ->
						    ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38)
						    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t35 @ t36 @ t37 @ t38 @ a ->
	%note "InlineMe"
	actionzu501 @ t35 @ t36 @ t37 @ t38 @ a;
  ParCore.actionzu190 :: %forall t t35 t36 t37 t38 a . PrelNum.ZCTNum
						       t
						       ->
						       t ->
						       PrelBase.Int ->
						       LexCore.Token ->
						       ParCore.HappyState
						       LexCore.Token
						       (ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38)
							->
							PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						       ->
						       PrelBase.ZMZN
						       (ParCore.HappyState
							LexCore.Token
							(ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						       ->
						       ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)
						       ->
						       PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t @ t35 @ t36 @ t37 @ t38 @ a (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (62::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (34::PrelGHC.Intzh))}
	    %in %let lit3 :: t =
		       %case zddNum %of (tpl::PrelNum.ZCTNum t)
			 {PrelNum.ZdwZCDNum
			  (tpl1::PrelBase.ZCTEq t)
			  (tpl2::PrelShow.ZCTShow t)
			  (tpl3::t -> t -> t)
			  (tpl4::t -> t -> t)
			  (tpl5::t -> t -> t)
			  (tpl6::t -> t)
			  (tpl7::t -> t)
			  (tpl8::t -> t)
			  (tpl9::PrelNum.Integer -> t) ->
			    tpl9 (PrelNum.ZdwSzh (97::PrelGHC.Intzh))}
		%in %let lit4 :: t =
			   %case zddNum %of (tpl::PrelNum.ZCTNum t)
			     {PrelNum.ZdwZCDNum
			      (tpl1::PrelBase.ZCTEq t)
			      (tpl2::PrelShow.ZCTShow t)
			      (tpl3::t -> t -> t)
			      (tpl4::t -> t -> t)
			      (tpl5::t -> t -> t)
			      (tpl6::t -> t)
			      (tpl7::t -> t)
			      (tpl8::t -> t)
			      (tpl9::PrelNum.Integer -> t) ->
				tpl9 (PrelNum.ZdwSzh (89::PrelGHC.Intzh))}
		    %in %let lit5 :: t =
			       %case zddNum %of (tpl::PrelNum.ZCTNum t)
				 {PrelNum.ZdwZCDNum
				  (tpl1::PrelBase.ZCTEq t)
				  (tpl2::PrelShow.ZCTShow t)
				  (tpl3::t -> t -> t)
				  (tpl4::t -> t -> t)
				  (tpl5::t -> t -> t)
				  (tpl6::t -> t)
				  (tpl7::t -> t)
				  (tpl8::t -> t)
				  (tpl9::PrelNum.Integer -> t) ->
				    tpl9 (PrelNum.ZdwSzh (69::PrelGHC.Intzh))}
			%in %let actionzu452 :: PrelBase.Int ->
						PrelBase.Int ->
						LexCore.Token ->
						ParCore.HappyState
						LexCore.Token
						(ParCore.HappyStk
						 (ParCore.HappyAbsSyn
						  (PrelBase.ZMZN PrelBase.Char)
						  t35
						  t36
						  t37
						  t38)
						 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						->
						PrelBase.ZMZN
						(ParCore.HappyState
						 LexCore.Token
						 (ParCore.HappyStk
						  (ParCore.HappyAbsSyn
						   (PrelBase.ZMZN PrelBase.Char)
						   t35
						   t36
						   t37
						   t38)
						  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						->
						ParCore.HappyStk
						(ParCore.HappyAbsSyn
						 (PrelBase.ZMZN PrelBase.Char)
						 t35
						 t36
						 t37
						 t38)
						-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
				   ParCore.actionzu45 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38 @ a
				   PrelNum.zdfNumInt
			    %in %let happyShift4 :: (PrelBase.Int ->
						     PrelBase.Int ->
						     LexCore.Token ->
						     ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						     ->
						     PrelBase.ZMZN
						     (ParCore.HappyState
						      LexCore.Token
						      (ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)
						       ->
						       PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						     ->
						     ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						    ->
						    PrelBase.Int ->
						    LexCore.Token ->
						    ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						    ->
						    PrelBase.ZMZN
						    (ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						    ->
						    ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38)
						    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
				       ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a)
				       @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38
				       PrelNum.zdfNumInt
				%in \ (ds::t) ->
					%case zddNum %of (tpl::PrelNum.ZCTNum t)
					  {PrelNum.ZdwZCDNum
					   (tpl1::PrelBase.ZCTEq t)
					   (tpl2::PrelShow.ZCTShow t)
					   (tpl3::t -> t -> t)
					   (tpl4::t -> t -> t)
					   (tpl5::t -> t -> t)
					   (tpl6::t -> t)
					   (tpl7::t -> t)
					   (tpl8::t -> t)
					   (tpl9::PrelNum.Integer -> t) ->
					     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
					       {PrelBase.ZdwZCDEq
						(tpl11::t -> t -> PrelBase.Bool)
						(tpl12::t -> t -> PrelBase.Bool) ->
						  %case (tpl12 lit4 ds) %of (wild::PrelBase.Bool)
						    {PrelBase.ZdwTrue ->
						       happyShift4
						       (%note "InlineMe"
							actionzu501 @ t35 @ t36 @ t37 @ t38 @ a);
						     PrelBase.ZdwFalse ->
						       %case (tpl12 lit3 ds)
						       %of (wild1::PrelBase.Bool)
							 {PrelBase.ZdwTrue ->
							    happyShift4
							    (ParCore.actionzu32 @ PrelBase.Int
							     @ LexCore.Token @ t35 @ t36 @ t37 @ t38
							     @ a);
							  PrelBase.ZdwFalse ->
							    %case (tpl12 lit2 ds)
							    %of (wild2::PrelBase.Bool)
							      {PrelBase.ZdwTrue ->
								 ParCore.happyGoto
								 @ (ParCore.HappyState
								    LexCore.Token
								    (ParCore.HappyStk
								     (ParCore.HappyAbsSyn
								      (PrelBase.ZMZN PrelBase.Char)
								      t35
								      t36
								      t37
								      t38)
								     ->
								     PrelBase.ZMZN LexCore.Token ->
								     ErrM.Err a))
								 @ LexCore.Token
								 @ (ParCore.HappyStk
								    (ParCore.HappyAbsSyn
								     (PrelBase.ZMZN PrelBase.Char)
								     t35
								     t36
								     t37
								     t38)
								    ->
								    PrelBase.ZMZN LexCore.Token ->
								    ErrM.Err a)
								 actionzu452;
							       PrelBase.ZdwFalse ->
								 %case (tpl12 lit1 ds)
								 %of (wild3::PrelBase.Bool)
								   {PrelBase.ZdwTrue ->
								      ParCore.happyGoto
								      @ (ParCore.HappyState
									 LexCore.Token
									 (ParCore.HappyStk
									  (ParCore.HappyAbsSyn
									   (PrelBase.ZMZN
									    PrelBase.Char)
									   t35
									   t36
									   t37
									   t38)
									  ->
									  PrelBase.ZMZN
									  LexCore.Token
									  -> ErrM.Err a))
								      @ LexCore.Token
								      @ (ParCore.HappyStk
									 (ParCore.HappyAbsSyn
									  (PrelBase.ZMZN
									   PrelBase.Char)
									  t35
									  t36
									  t37
									  t38)
									 ->
									 PrelBase.ZMZN LexCore.Token
									 -> ErrM.Err a)
								      (ParCore.actionzu157
								       @ PrelBase.Int
								       @ LexCore.Token
								       @ (PrelBase.ZMZN
									  PrelBase.Char)
								       @ t35 @ t36 @ t37 @ t38 @ a);
								    PrelBase.ZdwFalse ->
								      %case (tpl12 lit5 ds)
								      %of (wild4::PrelBase.Bool)
									{PrelBase.ZdwTrue ->
									   ParCore.happyGoto
									   @ (ParCore.HappyState
									      LexCore.Token
									      (ParCore.HappyStk
									       (ParCore.HappyAbsSyn
										(PrelBase.ZMZN
										 PrelBase.Char)
										t35
										t36
										t37
										t38)
									       ->
									       PrelBase.ZMZN
									       LexCore.Token
									       -> ErrM.Err a))
									   @ LexCore.Token
									   @ (ParCore.HappyStk
									      (ParCore.HappyAbsSyn
									       (PrelBase.ZMZN
										PrelBase.Char)
									       t35
									       t36
									       t37
									       t38)
									      ->
									      PrelBase.ZMZN
									      LexCore.Token
									      -> ErrM.Err a)
									   (ParCore.actionzu49
									    @ PrelBase.Int
									    @ LexCore.Token
									    @ (PrelBase.ZMZN
									       PrelBase.Char)
									    @ t35 @ t36 @ t37 @ t38
									    @ a);
									 PrelBase.ZdwFalse ->
									   ParCore.happyReducezu43
									   @ LexCore.Token @ a
									   @ (PrelBase.ZMZN
									      PrelBase.Char)
									   @ t35 @ t36 @ t37
									   @ t38}}}}}}};
  ParCore.actionzu181 :: %forall t t36 t37 t38 a . PrelNum.ZCTNum t
						   ->
						   t ->
						   PrelBase.Int ->
						   LexCore.Token ->
						   ParCore.HappyState
						   LexCore.Token
						   (ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     (PrelBase.ZMZN PrelBase.Char)
						     t36
						     t37
						     t38)
						    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						   ->
						   PrelBase.ZMZN
						   (ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      (PrelBase.ZMZN PrelBase.Char)
						      t36
						      t37
						      t38)
						     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						   ->
						   ParCore.HappyStk
						   (ParCore.HappyAbsSyn
						    (PrelBase.ZMZN PrelBase.Char)
						    (PrelBase.ZMZN PrelBase.Char)
						    t36
						    t37
						    t38)
						   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t @ t36 @ t37 @ t38 @ a (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (62::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (34::PrelGHC.Intzh))}
	    %in %let lit3 :: t =
		       %case zddNum %of (tpl::PrelNum.ZCTNum t)
			 {PrelNum.ZdwZCDNum
			  (tpl1::PrelBase.ZCTEq t)
			  (tpl2::PrelShow.ZCTShow t)
			  (tpl3::t -> t -> t)
			  (tpl4::t -> t -> t)
			  (tpl5::t -> t -> t)
			  (tpl6::t -> t)
			  (tpl7::t -> t)
			  (tpl8::t -> t)
			  (tpl9::PrelNum.Integer -> t) ->
			    tpl9 (PrelNum.ZdwSzh (97::PrelGHC.Intzh))}
		%in %let lit4 :: t =
			   %case zddNum %of (tpl::PrelNum.ZCTNum t)
			     {PrelNum.ZdwZCDNum
			      (tpl1::PrelBase.ZCTEq t)
			      (tpl2::PrelShow.ZCTShow t)
			      (tpl3::t -> t -> t)
			      (tpl4::t -> t -> t)
			      (tpl5::t -> t -> t)
			      (tpl6::t -> t)
			      (tpl7::t -> t)
			      (tpl8::t -> t)
			      (tpl9::PrelNum.Integer -> t) ->
				tpl9 (PrelNum.ZdwSzh (89::PrelGHC.Intzh))}
		    %in %let lit5 :: t =
			       %case zddNum %of (tpl::PrelNum.ZCTNum t)
				 {PrelNum.ZdwZCDNum
				  (tpl1::PrelBase.ZCTEq t)
				  (tpl2::PrelShow.ZCTShow t)
				  (tpl3::t -> t -> t)
				  (tpl4::t -> t -> t)
				  (tpl5::t -> t -> t)
				  (tpl6::t -> t)
				  (tpl7::t -> t)
				  (tpl8::t -> t)
				  (tpl9::PrelNum.Integer -> t) ->
				    tpl9 (PrelNum.ZdwSzh (69::PrelGHC.Intzh))}
			%in %let actionzu2011 :: PrelBase.Int ->
						 PrelBase.Int ->
						 LexCore.Token ->
						 ParCore.HappyState
						 LexCore.Token
						 (ParCore.HappyStk
						  (ParCore.HappyAbsSyn
						   (PrelBase.ZMZN PrelBase.Char)
						   (PrelBase.ZMZN PrelBase.Char)
						   t36
						   t37
						   t38)
						  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						 ->
						 PrelBase.ZMZN
						 (ParCore.HappyState
						  LexCore.Token
						  (ParCore.HappyStk
						   (ParCore.HappyAbsSyn
						    (PrelBase.ZMZN PrelBase.Char)
						    (PrelBase.ZMZN PrelBase.Char)
						    t36
						    t37
						    t38)
						   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						 ->
						 ParCore.HappyStk
						 (ParCore.HappyAbsSyn
						  (PrelBase.ZMZN PrelBase.Char)
						  (PrelBase.ZMZN PrelBase.Char)
						  t36
						  t37
						  t38)
						 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
				   ParCore.actionzu201 @ PrelBase.Int
				   @ (PrelBase.ZMZN PrelBase.Char) @ t36 @ t37 @ t38 @ a
				   PrelNum.zdfNumInt
			    %in %let actionzu452 :: PrelBase.Int ->
						    PrelBase.Int ->
						    LexCore.Token ->
						    ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      (PrelBase.ZMZN PrelBase.Char)
						      t36
						      t37
						      t38)
						     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						    ->
						    PrelBase.ZMZN
						    (ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       (PrelBase.ZMZN PrelBase.Char)
						       t36
						       t37
						       t38)
						      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						    ->
						    ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     (PrelBase.ZMZN PrelBase.Char)
						     t36
						     t37
						     t38)
						    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
				       ParCore.actionzu45 @ PrelBase.Int
				       @ (PrelBase.ZMZN PrelBase.Char) @ t36 @ t37 @ t38 @ a
				       PrelNum.zdfNumInt
				%in %let happyShift4 :: (PrelBase.Int ->
							 PrelBase.Int ->
							 LexCore.Token ->
							 ParCore.HappyState
							 LexCore.Token
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   (PrelBase.ZMZN PrelBase.Char)
							   t36
							   t37
							   t38)
							  ->
							  PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
							 ->
							 PrelBase.ZMZN
							 (ParCore.HappyState
							  LexCore.Token
							  (ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    (PrelBase.ZMZN PrelBase.Char)
							    (PrelBase.ZMZN PrelBase.Char)
							    t36
							    t37
							    t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err a))
							 ->
							 ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  (PrelBase.ZMZN PrelBase.Char)
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
							->
							PrelBase.Int ->
							LexCore.Token ->
							ParCore.HappyState
							LexCore.Token
							(ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  (PrelBase.ZMZN PrelBase.Char)
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
							->
							PrelBase.ZMZN
							(ParCore.HappyState
							 LexCore.Token
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   (PrelBase.ZMZN PrelBase.Char)
							   t36
							   t37
							   t38)
							  ->
							  PrelBase.ZMZN LexCore.Token ->
							  ErrM.Err a))
							->
							ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 (PrelBase.ZMZN PrelBase.Char)
							 t36
							 t37
							 t38)
							->
							PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
					   ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a)
					   @ (PrelBase.ZMZN PrelBase.Char)
					   @ (PrelBase.ZMZN PrelBase.Char) @ t36 @ t37 @ t38
					   PrelNum.zdfNumInt
				    %in \ (ds::t) ->
					    %case zddNum %of (tpl::PrelNum.ZCTNum t)
					      {PrelNum.ZdwZCDNum
					       (tpl1::PrelBase.ZCTEq t)
					       (tpl2::PrelShow.ZCTShow t)
					       (tpl3::t -> t -> t)
					       (tpl4::t -> t -> t)
					       (tpl5::t -> t -> t)
					       (tpl6::t -> t)
					       (tpl7::t -> t)
					       (tpl8::t -> t)
					       (tpl9::PrelNum.Integer -> t) ->
						 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
						   {PrelBase.ZdwZCDEq
						    (tpl11::t -> t -> PrelBase.Bool)
						    (tpl12::t -> t -> PrelBase.Bool) ->
						      %case (tpl12 lit4 ds)
						      %of (wild::PrelBase.Bool)
							{PrelBase.ZdwTrue ->
							   happyShift4
							   (%note "InlineMe"
							    actionzu501
							    @ (PrelBase.ZMZN PrelBase.Char) @ t36
							    @ t37 @ t38 @ a);
							 PrelBase.ZdwFalse ->
							   %case (tpl12 lit3 ds)
							   %of (wild1::PrelBase.Bool)
							     {PrelBase.ZdwTrue ->
								happyShift4
								(ParCore.actionzu32 @ PrelBase.Int
								 @ LexCore.Token
								 @ (PrelBase.ZMZN PrelBase.Char)
								 @ t36 @ t37 @ t38 @ a);
							      PrelBase.ZdwFalse ->
								%case (tpl12 lit2 ds)
								%of (wild2::PrelBase.Bool)
								  {PrelBase.ZdwTrue ->
								     ParCore.happyGoto
								     @ (ParCore.HappyState
									LexCore.Token
									(ParCore.HappyStk
									 (ParCore.HappyAbsSyn
									  (PrelBase.ZMZN
									   PrelBase.Char)
									  (PrelBase.ZMZN
									   PrelBase.Char)
									  t36
									  t37
									  t38)
									 ->
									 PrelBase.ZMZN LexCore.Token
									 -> ErrM.Err a))
								     @ LexCore.Token
								     @ (ParCore.HappyStk
									(ParCore.HappyAbsSyn
									 (PrelBase.ZMZN
									  PrelBase.Char)
									 (PrelBase.ZMZN
									  PrelBase.Char)
									 t36
									 t37
									 t38)
									->
									PrelBase.ZMZN LexCore.Token
									-> ErrM.Err a)
								     actionzu452;
								   PrelBase.ZdwFalse ->
								     %case (tpl12 lit1 ds)
								     %of (wild3::PrelBase.Bool)
								       {PrelBase.ZdwTrue ->
									  ParCore.happyGoto
									  @ (ParCore.HappyState
									     LexCore.Token
									     (ParCore.HappyStk
									      (ParCore.HappyAbsSyn
									       (PrelBase.ZMZN
										PrelBase.Char)
									       (PrelBase.ZMZN
										PrelBase.Char)
									       t36
									       t37
									       t38)
									      ->
									      PrelBase.ZMZN
									      LexCore.Token
									      -> ErrM.Err a))
									  @ LexCore.Token
									  @ (ParCore.HappyStk
									     (ParCore.HappyAbsSyn
									      (PrelBase.ZMZN
									       PrelBase.Char)
									      (PrelBase.ZMZN
									       PrelBase.Char)
									      t36
									      t37
									      t38)
									     ->
									     PrelBase.ZMZN
									     LexCore.Token
									     -> ErrM.Err a)
									  actionzu2011;
									PrelBase.ZdwFalse ->
									  %case (tpl12 lit5 ds)
									  %of (wild4::PrelBase.Bool)
									    {PrelBase.ZdwTrue ->
									       ParCore.happyGoto
									       @ (ParCore.HappyState
										  LexCore.Token
										  (ParCore.HappyStk
										   (ParCore.HappyAbsSyn
										    (PrelBase.ZMZN
										     PrelBase.Char)
										    (PrelBase.ZMZN
										     PrelBase.Char)
										    t36
										    t37
										    t38)
										   ->
										   PrelBase.ZMZN
										   LexCore.Token
										   -> ErrM.Err a))
									       @ LexCore.Token
									       @ (ParCore.HappyStk
										  (ParCore.HappyAbsSyn
										   (PrelBase.ZMZN
										    PrelBase.Char)
										   (PrelBase.ZMZN
										    PrelBase.Char)
										   t36
										   t37
										   t38)
										  ->
										  PrelBase.ZMZN
										  LexCore.Token
										  -> ErrM.Err a)
									       (ParCore.actionzu49
										@ PrelBase.Int
										@ LexCore.Token
										@ (PrelBase.ZMZN
										   PrelBase.Char)
										@ (PrelBase.ZMZN
										   PrelBase.Char)
										@ t36 @ t37 @ t38
										@ a);
									     PrelBase.ZdwFalse ->
									       ParCore.happyFail @ a
									       @ LexCore.Token
									       @ (PrelBase.ZMZN
										  PrelBase.Char)
									       @ (PrelBase.ZMZN
										  PrelBase.Char)
									       @ t36 @ t37
									       @ t38}}}}}}};
  ParCore.actionzu126 :: %forall t t36 t37 t38 a . PrelNum.ZCTNum t
						   ->
						   t ->
						   PrelBase.Int ->
						   LexCore.Token ->
						   ParCore.HappyState
						   LexCore.Token
						   (ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     (PrelBase.ZMZN PrelBase.Char)
						     t36
						     t37
						     t38)
						    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						   ->
						   PrelBase.ZMZN
						   (ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      (PrelBase.ZMZN PrelBase.Char)
						      t36
						      t37
						      t38)
						     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						   ->
						   ParCore.HappyStk
						   (ParCore.HappyAbsSyn
						    (PrelBase.ZMZN PrelBase.Char)
						    (PrelBase.ZMZN PrelBase.Char)
						    t36
						    t37
						    t38)
						   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t @ t36 @ t37 @ t38 @ a (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (78::PrelGHC.Intzh))}
	%in %let actionzu1811 :: PrelBase.Int ->
				 PrelBase.Int ->
				 LexCore.Token ->
				 ParCore.HappyState
				 LexCore.Token
				 (ParCore.HappyStk
				  (ParCore.HappyAbsSyn
				   (PrelBase.ZMZN PrelBase.Char)
				   (PrelBase.ZMZN PrelBase.Char)
				   t36
				   t37
				   t38)
				  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				 ->
				 PrelBase.ZMZN
				 (ParCore.HappyState
				  LexCore.Token
				  (ParCore.HappyStk
				   (ParCore.HappyAbsSyn
				    (PrelBase.ZMZN PrelBase.Char)
				    (PrelBase.ZMZN PrelBase.Char)
				    t36
				    t37
				    t38)
				   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				 ->
				 ParCore.HappyStk
				 (ParCore.HappyAbsSyn
				  (PrelBase.ZMZN PrelBase.Char)
				  (PrelBase.ZMZN PrelBase.Char)
				  t36
				  t37
				  t38)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
		   ParCore.actionzu181 @ PrelBase.Int @ t36 @ t37 @ t38 @ a
		   PrelNum.zdfNumInt
	    %in %let happyShift4 :: (PrelBase.Int ->
				     PrelBase.Int ->
				     LexCore.Token ->
				     ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       t36
				       t37
				       t38)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				     ->
				     PrelBase.ZMZN
				     (ParCore.HappyState
				      LexCore.Token
				      (ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					(PrelBase.ZMZN PrelBase.Char)
					t36
					t37
					t38)
				       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				     ->
				     ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      t36
				      t37
				      t38)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				    ->
				    PrelBase.Int ->
				    LexCore.Token ->
				    ParCore.HappyState
				    LexCore.Token
				    (ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      t36
				      t37
				      t38)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				    ->
				    PrelBase.ZMZN
				    (ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       t36
				       t37
				       t38)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				    ->
				    ParCore.HappyStk
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     (PrelBase.ZMZN PrelBase.Char)
				     t36
				     t37
				     t38)
				    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
		       ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a)
		       @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		       @ t36 @ t37 @ t38 PrelNum.zdfNumInt
		%in \ (ds::t) ->
			%case zddNum %of (tpl::PrelNum.ZCTNum t)
			  {PrelNum.ZdwZCDNum
			   (tpl1::PrelBase.ZCTEq t)
			   (tpl2::PrelShow.ZCTShow t)
			   (tpl3::t -> t -> t)
			   (tpl4::t -> t -> t)
			   (tpl5::t -> t -> t)
			   (tpl6::t -> t)
			   (tpl7::t -> t)
			   (tpl8::t -> t)
			   (tpl9::PrelNum.Integer -> t) ->
			     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
			       {PrelBase.ZdwZCDEq
				(tpl11::t -> t -> PrelBase.Bool)
				(tpl12::t -> t -> PrelBase.Bool) ->
				  %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
				    {PrelBase.ZdwTrue ->
				       happyShift4 actionzu1811;
				     PrelBase.ZdwFalse ->
				       ParCore.happyFail @ a @ LexCore.Token
				       @ (PrelBase.ZMZN PrelBase.Char)
				       @ (PrelBase.ZMZN PrelBase.Char) @ t36 @ t37 @ t38}}};
  ParCore.actionzu180 :: %forall t t35 t37 t38 a . PrelNum.ZCTNum t
						   ->
						   t ->
						   PrelBase.Int ->
						   LexCore.Token ->
						   ParCore.HappyState
						   LexCore.Token
						   (ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     PrelNum.Integer
						     t37
						     t38)
						    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						   ->
						   PrelBase.ZMZN
						   (ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      PrelNum.Integer
						      t37
						      t38)
						     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						   ->
						   ParCore.HappyStk
						   (ParCore.HappyAbsSyn
						    (PrelBase.ZMZN PrelBase.Char)
						    t35
						    PrelNum.Integer
						    t37
						    t38)
						   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t @ t35 @ t37 @ t38 @ a (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (62::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (34::PrelGHC.Intzh))}
	    %in %let lit3 :: t =
		       %case zddNum %of (tpl::PrelNum.ZCTNum t)
			 {PrelNum.ZdwZCDNum
			  (tpl1::PrelBase.ZCTEq t)
			  (tpl2::PrelShow.ZCTShow t)
			  (tpl3::t -> t -> t)
			  (tpl4::t -> t -> t)
			  (tpl5::t -> t -> t)
			  (tpl6::t -> t)
			  (tpl7::t -> t)
			  (tpl8::t -> t)
			  (tpl9::PrelNum.Integer -> t) ->
			    tpl9 (PrelNum.ZdwSzh (97::PrelGHC.Intzh))}
		%in %let lit4 :: t =
			   %case zddNum %of (tpl::PrelNum.ZCTNum t)
			     {PrelNum.ZdwZCDNum
			      (tpl1::PrelBase.ZCTEq t)
			      (tpl2::PrelShow.ZCTShow t)
			      (tpl3::t -> t -> t)
			      (tpl4::t -> t -> t)
			      (tpl5::t -> t -> t)
			      (tpl6::t -> t)
			      (tpl7::t -> t)
			      (tpl8::t -> t)
			      (tpl9::PrelNum.Integer -> t) ->
				tpl9 (PrelNum.ZdwSzh (89::PrelGHC.Intzh))}
		    %in %let lit5 :: t =
			       %case zddNum %of (tpl::PrelNum.ZCTNum t)
				 {PrelNum.ZdwZCDNum
				  (tpl1::PrelBase.ZCTEq t)
				  (tpl2::PrelShow.ZCTShow t)
				  (tpl3::t -> t -> t)
				  (tpl4::t -> t -> t)
				  (tpl5::t -> t -> t)
				  (tpl6::t -> t)
				  (tpl7::t -> t)
				  (tpl8::t -> t)
				  (tpl9::PrelNum.Integer -> t) ->
				    tpl9 (PrelNum.ZdwSzh (69::PrelGHC.Intzh))}
			%in %let actionzu2021 :: PrelBase.Int ->
						 PrelBase.Int ->
						 LexCore.Token ->
						 ParCore.HappyState
						 LexCore.Token
						 (ParCore.HappyStk
						  (ParCore.HappyAbsSyn
						   (PrelBase.ZMZN PrelBase.Char)
						   t35
						   PrelNum.Integer
						   t37
						   t38)
						  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						 ->
						 PrelBase.ZMZN
						 (ParCore.HappyState
						  LexCore.Token
						  (ParCore.HappyStk
						   (ParCore.HappyAbsSyn
						    (PrelBase.ZMZN PrelBase.Char)
						    t35
						    PrelNum.Integer
						    t37
						    t38)
						   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						 ->
						 ParCore.HappyStk
						 (ParCore.HappyAbsSyn
						  (PrelBase.ZMZN PrelBase.Char)
						  t35
						  PrelNum.Integer
						  t37
						  t38)
						 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
				   ParCore.actionzu202 @ PrelBase.Int
				   @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t37 @ t38 @ a
				   PrelNum.zdfNumInt
			    %in %let actionzu452 :: PrelBase.Int ->
						    PrelBase.Int ->
						    LexCore.Token ->
						    ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      PrelNum.Integer
						      t37
						      t38)
						     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						    ->
						    PrelBase.ZMZN
						    (ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       PrelNum.Integer
						       t37
						       t38)
						      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						    ->
						    ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     PrelNum.Integer
						     t37
						     t38)
						    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
				       ParCore.actionzu45 @ PrelBase.Int @ t35 @ PrelNum.Integer
				       @ t37 @ t38 @ a PrelNum.zdfNumInt
				%in %let happyShift4 :: (PrelBase.Int ->
							 PrelBase.Int ->
							 LexCore.Token ->
							 ParCore.HappyState
							 LexCore.Token
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   PrelNum.Integer
							   t37
							   t38)
							  ->
							  PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
							 ->
							 PrelBase.ZMZN
							 (ParCore.HappyState
							  LexCore.Token
							  (ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    (PrelBase.ZMZN PrelBase.Char)
							    t35
							    PrelNum.Integer
							    t37
							    t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err a))
							 ->
							 ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  PrelNum.Integer
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
							->
							PrelBase.Int ->
							LexCore.Token ->
							ParCore.HappyState
							LexCore.Token
							(ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  PrelNum.Integer
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
							->
							PrelBase.ZMZN
							(ParCore.HappyState
							 LexCore.Token
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   PrelNum.Integer
							   t37
							   t38)
							  ->
							  PrelBase.ZMZN LexCore.Token ->
							  ErrM.Err a))
							->
							ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 PrelNum.Integer
							 t37
							 t38)
							->
							PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
					   ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a)
					   @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ PrelNum.Integer
					   @ t37 @ t38 PrelNum.zdfNumInt
				    %in \ (ds::t) ->
					    %case zddNum %of (tpl::PrelNum.ZCTNum t)
					      {PrelNum.ZdwZCDNum
					       (tpl1::PrelBase.ZCTEq t)
					       (tpl2::PrelShow.ZCTShow t)
					       (tpl3::t -> t -> t)
					       (tpl4::t -> t -> t)
					       (tpl5::t -> t -> t)
					       (tpl6::t -> t)
					       (tpl7::t -> t)
					       (tpl8::t -> t)
					       (tpl9::PrelNum.Integer -> t) ->
						 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
						   {PrelBase.ZdwZCDEq
						    (tpl11::t -> t -> PrelBase.Bool)
						    (tpl12::t -> t -> PrelBase.Bool) ->
						      %case (tpl12 lit4 ds)
						      %of (wild::PrelBase.Bool)
							{PrelBase.ZdwTrue ->
							   happyShift4
							   (%note "InlineMe"
							    actionzu501 @ t35 @ PrelNum.Integer
							    @ t37 @ t38 @ a);
							 PrelBase.ZdwFalse ->
							   %case (tpl12 lit3 ds)
							   %of (wild1::PrelBase.Bool)
							     {PrelBase.ZdwTrue ->
								happyShift4
								(ParCore.actionzu32 @ PrelBase.Int
								 @ LexCore.Token @ t35
								 @ PrelNum.Integer @ t37 @ t38 @ a);
							      PrelBase.ZdwFalse ->
								%case (tpl12 lit2 ds)
								%of (wild2::PrelBase.Bool)
								  {PrelBase.ZdwTrue ->
								     ParCore.happyGoto
								     @ (ParCore.HappyState
									LexCore.Token
									(ParCore.HappyStk
									 (ParCore.HappyAbsSyn
									  (PrelBase.ZMZN
									   PrelBase.Char)
									  t35
									  PrelNum.Integer
									  t37
									  t38)
									 ->
									 PrelBase.ZMZN LexCore.Token
									 -> ErrM.Err a))
								     @ LexCore.Token
								     @ (ParCore.HappyStk
									(ParCore.HappyAbsSyn
									 (PrelBase.ZMZN
									  PrelBase.Char)
									 t35
									 PrelNum.Integer
									 t37
									 t38)
									->
									PrelBase.ZMZN LexCore.Token
									-> ErrM.Err a)
								     actionzu452;
								   PrelBase.ZdwFalse ->
								     %case (tpl12 lit1 ds)
								     %of (wild3::PrelBase.Bool)
								       {PrelBase.ZdwTrue ->
									  ParCore.happyGoto
									  @ (ParCore.HappyState
									     LexCore.Token
									     (ParCore.HappyStk
									      (ParCore.HappyAbsSyn
									       (PrelBase.ZMZN
										PrelBase.Char)
									       t35
									       PrelNum.Integer
									       t37
									       t38)
									      ->
									      PrelBase.ZMZN
									      LexCore.Token
									      -> ErrM.Err a))
									  @ LexCore.Token
									  @ (ParCore.HappyStk
									     (ParCore.HappyAbsSyn
									      (PrelBase.ZMZN
									       PrelBase.Char)
									      t35
									      PrelNum.Integer
									      t37
									      t38)
									     ->
									     PrelBase.ZMZN
									     LexCore.Token
									     -> ErrM.Err a)
									  actionzu2021;
									PrelBase.ZdwFalse ->
									  %case (tpl12 lit5 ds)
									  %of (wild4::PrelBase.Bool)
									    {PrelBase.ZdwTrue ->
									       ParCore.happyGoto
									       @ (ParCore.HappyState
										  LexCore.Token
										  (ParCore.HappyStk
										   (ParCore.HappyAbsSyn
										    (PrelBase.ZMZN
										     PrelBase.Char)
										    t35
										    PrelNum.Integer
										    t37
										    t38)
										   ->
										   PrelBase.ZMZN
										   LexCore.Token
										   -> ErrM.Err a))
									       @ LexCore.Token
									       @ (ParCore.HappyStk
										  (ParCore.HappyAbsSyn
										   (PrelBase.ZMZN
										    PrelBase.Char)
										   t35
										   PrelNum.Integer
										   t37
										   t38)
										  ->
										  PrelBase.ZMZN
										  LexCore.Token
										  -> ErrM.Err a)
									       (ParCore.actionzu49
										@ PrelBase.Int
										@ LexCore.Token
										@ (PrelBase.ZMZN
										   PrelBase.Char)
										@ t35
										@ PrelNum.Integer
										@ t37 @ t38 @ a);
									     PrelBase.ZdwFalse ->
									       ParCore.happyFail @ a
									       @ LexCore.Token
									       @ (PrelBase.ZMZN
										  PrelBase.Char)
									       @ t35
									       @ PrelNum.Integer
									       @ t37 @ t38}}}}}}};
  ParCore.actionzu127 :: %forall t t35 t37 t38 a . PrelNum.ZCTNum t
						   ->
						   t ->
						   PrelBase.Int ->
						   LexCore.Token ->
						   ParCore.HappyState
						   LexCore.Token
						   (ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     PrelNum.Integer
						     t37
						     t38)
						    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						   ->
						   PrelBase.ZMZN
						   (ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      PrelNum.Integer
						      t37
						      t38)
						     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						   ->
						   ParCore.HappyStk
						   (ParCore.HappyAbsSyn
						    (PrelBase.ZMZN PrelBase.Char)
						    t35
						    PrelNum.Integer
						    t37
						    t38)
						   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t @ t35 @ t37 @ t38 @ a (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (78::PrelGHC.Intzh))}
	%in %let actionzu1801 :: PrelBase.Int ->
				 PrelBase.Int ->
				 LexCore.Token ->
				 ParCore.HappyState
				 LexCore.Token
				 (ParCore.HappyStk
				  (ParCore.HappyAbsSyn
				   (PrelBase.ZMZN PrelBase.Char)
				   t35
				   PrelNum.Integer
				   t37
				   t38)
				  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				 ->
				 PrelBase.ZMZN
				 (ParCore.HappyState
				  LexCore.Token
				  (ParCore.HappyStk
				   (ParCore.HappyAbsSyn
				    (PrelBase.ZMZN PrelBase.Char)
				    t35
				    PrelNum.Integer
				    t37
				    t38)
				   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				 ->
				 ParCore.HappyStk
				 (ParCore.HappyAbsSyn
				  (PrelBase.ZMZN PrelBase.Char)
				  t35
				  PrelNum.Integer
				  t37
				  t38)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
		   ParCore.actionzu180 @ PrelBase.Int @ t35 @ t37 @ t38 @ a
		   PrelNum.zdfNumInt
	    %in %let happyShift4 :: (PrelBase.Int ->
				     PrelBase.Int ->
				     LexCore.Token ->
				     ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       t35
				       PrelNum.Integer
				       t37
				       t38)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				     ->
				     PrelBase.ZMZN
				     (ParCore.HappyState
				      LexCore.Token
				      (ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					t35
					PrelNum.Integer
					t37
					t38)
				       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				     ->
				     ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      t35
				      PrelNum.Integer
				      t37
				      t38)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				    ->
				    PrelBase.Int ->
				    LexCore.Token ->
				    ParCore.HappyState
				    LexCore.Token
				    (ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      t35
				      PrelNum.Integer
				      t37
				      t38)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				    ->
				    PrelBase.ZMZN
				    (ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       t35
				       PrelNum.Integer
				       t37
				       t38)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				    ->
				    ParCore.HappyStk
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     t35
				     PrelNum.Integer
				     t37
				     t38)
				    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
		       ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a)
		       @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ PrelNum.Integer @ t37 @ t38
		       PrelNum.zdfNumInt
		%in \ (ds::t) ->
			%case zddNum %of (tpl::PrelNum.ZCTNum t)
			  {PrelNum.ZdwZCDNum
			   (tpl1::PrelBase.ZCTEq t)
			   (tpl2::PrelShow.ZCTShow t)
			   (tpl3::t -> t -> t)
			   (tpl4::t -> t -> t)
			   (tpl5::t -> t -> t)
			   (tpl6::t -> t)
			   (tpl7::t -> t)
			   (tpl8::t -> t)
			   (tpl9::PrelNum.Integer -> t) ->
			     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
			       {PrelBase.ZdwZCDEq
				(tpl11::t -> t -> PrelBase.Bool)
				(tpl12::t -> t -> PrelBase.Bool) ->
				  %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
				    {PrelBase.ZdwTrue ->
				       happyShift4 actionzu1801;
				     PrelBase.ZdwFalse ->
				       ParCore.happyFail @ a @ LexCore.Token
				       @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ PrelNum.Integer @ t37
				       @ t38}}};
  ParCore.actionzu179 :: %forall t t35 t36 t38 a . PrelNum.ZCTNum t
						   ->
						   t ->
						   PrelBase.Int ->
						   LexCore.Token ->
						   ParCore.HappyState
						   LexCore.Token
						   (ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     PrelFloat.Double
						     t38)
						    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						   ->
						   PrelBase.ZMZN
						   (ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      PrelFloat.Double
						      t38)
						     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						   ->
						   ParCore.HappyStk
						   (ParCore.HappyAbsSyn
						    (PrelBase.ZMZN PrelBase.Char)
						    t35
						    t36
						    PrelFloat.Double
						    t38)
						   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t @ t35 @ t36 @ t38 @ a (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (62::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (34::PrelGHC.Intzh))}
	    %in %let lit3 :: t =
		       %case zddNum %of (tpl::PrelNum.ZCTNum t)
			 {PrelNum.ZdwZCDNum
			  (tpl1::PrelBase.ZCTEq t)
			  (tpl2::PrelShow.ZCTShow t)
			  (tpl3::t -> t -> t)
			  (tpl4::t -> t -> t)
			  (tpl5::t -> t -> t)
			  (tpl6::t -> t)
			  (tpl7::t -> t)
			  (tpl8::t -> t)
			  (tpl9::PrelNum.Integer -> t) ->
			    tpl9 (PrelNum.ZdwSzh (97::PrelGHC.Intzh))}
		%in %let lit4 :: t =
			   %case zddNum %of (tpl::PrelNum.ZCTNum t)
			     {PrelNum.ZdwZCDNum
			      (tpl1::PrelBase.ZCTEq t)
			      (tpl2::PrelShow.ZCTShow t)
			      (tpl3::t -> t -> t)
			      (tpl4::t -> t -> t)
			      (tpl5::t -> t -> t)
			      (tpl6::t -> t)
			      (tpl7::t -> t)
			      (tpl8::t -> t)
			      (tpl9::PrelNum.Integer -> t) ->
				tpl9 (PrelNum.ZdwSzh (89::PrelGHC.Intzh))}
		    %in %let lit5 :: t =
			       %case zddNum %of (tpl::PrelNum.ZCTNum t)
				 {PrelNum.ZdwZCDNum
				  (tpl1::PrelBase.ZCTEq t)
				  (tpl2::PrelShow.ZCTShow t)
				  (tpl3::t -> t -> t)
				  (tpl4::t -> t -> t)
				  (tpl5::t -> t -> t)
				  (tpl6::t -> t)
				  (tpl7::t -> t)
				  (tpl8::t -> t)
				  (tpl9::PrelNum.Integer -> t) ->
				    tpl9 (PrelNum.ZdwSzh (69::PrelGHC.Intzh))}
			%in %let actionzu2031 :: PrelBase.Int ->
						 PrelBase.Int ->
						 LexCore.Token ->
						 ParCore.HappyState
						 LexCore.Token
						 (ParCore.HappyStk
						  (ParCore.HappyAbsSyn
						   (PrelBase.ZMZN PrelBase.Char)
						   t35
						   t36
						   PrelFloat.Double
						   t38)
						  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						 ->
						 PrelBase.ZMZN
						 (ParCore.HappyState
						  LexCore.Token
						  (ParCore.HappyStk
						   (ParCore.HappyAbsSyn
						    (PrelBase.ZMZN PrelBase.Char)
						    t35
						    t36
						    PrelFloat.Double
						    t38)
						   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						 ->
						 ParCore.HappyStk
						 (ParCore.HappyAbsSyn
						  (PrelBase.ZMZN PrelBase.Char)
						  t35
						  t36
						  PrelFloat.Double
						  t38)
						 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
				   ParCore.actionzu203 @ PrelBase.Int
				   @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t38 @ a
				   PrelNum.zdfNumInt
			    %in %let actionzu452 :: PrelBase.Int ->
						    PrelBase.Int ->
						    LexCore.Token ->
						    ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      PrelFloat.Double
						      t38)
						     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						    ->
						    PrelBase.ZMZN
						    (ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       PrelFloat.Double
						       t38)
						      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						    ->
						    ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     PrelFloat.Double
						     t38)
						    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
				       ParCore.actionzu45 @ PrelBase.Int @ t35 @ t36
				       @ PrelFloat.Double @ t38 @ a PrelNum.zdfNumInt
				%in %let happyShift4 :: (PrelBase.Int ->
							 PrelBase.Int ->
							 LexCore.Token ->
							 ParCore.HappyState
							 LexCore.Token
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   PrelFloat.Double
							   t38)
							  ->
							  PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
							 ->
							 PrelBase.ZMZN
							 (ParCore.HappyState
							  LexCore.Token
							  (ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    (PrelBase.ZMZN PrelBase.Char)
							    t35
							    t36
							    PrelFloat.Double
							    t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err a))
							 ->
							 ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  PrelFloat.Double
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
							->
							PrelBase.Int ->
							LexCore.Token ->
							ParCore.HappyState
							LexCore.Token
							(ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  PrelFloat.Double
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
							->
							PrelBase.ZMZN
							(ParCore.HappyState
							 LexCore.Token
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   PrelFloat.Double
							   t38)
							  ->
							  PrelBase.ZMZN LexCore.Token ->
							  ErrM.Err a))
							->
							ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 PrelFloat.Double
							 t38)
							->
							PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
					   ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a)
					   @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36
					   @ PrelFloat.Double @ t38 PrelNum.zdfNumInt
				    %in \ (ds::t) ->
					    %case zddNum %of (tpl::PrelNum.ZCTNum t)
					      {PrelNum.ZdwZCDNum
					       (tpl1::PrelBase.ZCTEq t)
					       (tpl2::PrelShow.ZCTShow t)
					       (tpl3::t -> t -> t)
					       (tpl4::t -> t -> t)
					       (tpl5::t -> t -> t)
					       (tpl6::t -> t)
					       (tpl7::t -> t)
					       (tpl8::t -> t)
					       (tpl9::PrelNum.Integer -> t) ->
						 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
						   {PrelBase.ZdwZCDEq
						    (tpl11::t -> t -> PrelBase.Bool)
						    (tpl12::t -> t -> PrelBase.Bool) ->
						      %case (tpl12 lit4 ds)
						      %of (wild::PrelBase.Bool)
							{PrelBase.ZdwTrue ->
							   happyShift4
							   (%note "InlineMe"
							    actionzu501 @ t35 @ t36
							    @ PrelFloat.Double @ t38 @ a);
							 PrelBase.ZdwFalse ->
							   %case (tpl12 lit3 ds)
							   %of (wild1::PrelBase.Bool)
							     {PrelBase.ZdwTrue ->
								happyShift4
								(ParCore.actionzu32 @ PrelBase.Int
								 @ LexCore.Token @ t35 @ t36
								 @ PrelFloat.Double @ t38 @ a);
							      PrelBase.ZdwFalse ->
								%case (tpl12 lit2 ds)
								%of (wild2::PrelBase.Bool)
								  {PrelBase.ZdwTrue ->
								     ParCore.happyGoto
								     @ (ParCore.HappyState
									LexCore.Token
									(ParCore.HappyStk
									 (ParCore.HappyAbsSyn
									  (PrelBase.ZMZN
									   PrelBase.Char)
									  t35
									  t36
									  PrelFloat.Double
									  t38)
									 ->
									 PrelBase.ZMZN LexCore.Token
									 -> ErrM.Err a))
								     @ LexCore.Token
								     @ (ParCore.HappyStk
									(ParCore.HappyAbsSyn
									 (PrelBase.ZMZN
									  PrelBase.Char)
									 t35
									 t36
									 PrelFloat.Double
									 t38)
									->
									PrelBase.ZMZN LexCore.Token
									-> ErrM.Err a)
								     actionzu452;
								   PrelBase.ZdwFalse ->
								     %case (tpl12 lit1 ds)
								     %of (wild3::PrelBase.Bool)
								       {PrelBase.ZdwTrue ->
									  ParCore.happyGoto
									  @ (ParCore.HappyState
									     LexCore.Token
									     (ParCore.HappyStk
									      (ParCore.HappyAbsSyn
									       (PrelBase.ZMZN
										PrelBase.Char)
									       t35
									       t36
									       PrelFloat.Double
									       t38)
									      ->
									      PrelBase.ZMZN
									      LexCore.Token
									      -> ErrM.Err a))
									  @ LexCore.Token
									  @ (ParCore.HappyStk
									     (ParCore.HappyAbsSyn
									      (PrelBase.ZMZN
									       PrelBase.Char)
									      t35
									      t36
									      PrelFloat.Double
									      t38)
									     ->
									     PrelBase.ZMZN
									     LexCore.Token
									     -> ErrM.Err a)
									  actionzu2031;
									PrelBase.ZdwFalse ->
									  %case (tpl12 lit5 ds)
									  %of (wild4::PrelBase.Bool)
									    {PrelBase.ZdwTrue ->
									       ParCore.happyGoto
									       @ (ParCore.HappyState
										  LexCore.Token
										  (ParCore.HappyStk
										   (ParCore.HappyAbsSyn
										    (PrelBase.ZMZN
										     PrelBase.Char)
										    t35
										    t36
										    PrelFloat.Double
										    t38)
										   ->
										   PrelBase.ZMZN
										   LexCore.Token
										   -> ErrM.Err a))
									       @ LexCore.Token
									       @ (ParCore.HappyStk
										  (ParCore.HappyAbsSyn
										   (PrelBase.ZMZN
										    PrelBase.Char)
										   t35
										   t36
										   PrelFloat.Double
										   t38)
										  ->
										  PrelBase.ZMZN
										  LexCore.Token
										  -> ErrM.Err a)
									       (ParCore.actionzu49
										@ PrelBase.Int
										@ LexCore.Token
										@ (PrelBase.ZMZN
										   PrelBase.Char)
										@ t35 @ t36
										@ PrelFloat.Double
										@ t38 @ a);
									     PrelBase.ZdwFalse ->
									       ParCore.happyFail @ a
									       @ LexCore.Token
									       @ (PrelBase.ZMZN
										  PrelBase.Char)
									       @ t35 @ t36
									       @ PrelFloat.Double
									       @ t38}}}}}}};
  ParCore.actionzu128 :: %forall t t35 t36 t38 a . PrelNum.ZCTNum t
						   ->
						   t ->
						   PrelBase.Int ->
						   LexCore.Token ->
						   ParCore.HappyState
						   LexCore.Token
						   (ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     PrelFloat.Double
						     t38)
						    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						   ->
						   PrelBase.ZMZN
						   (ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      PrelFloat.Double
						      t38)
						     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						   ->
						   ParCore.HappyStk
						   (ParCore.HappyAbsSyn
						    (PrelBase.ZMZN PrelBase.Char)
						    t35
						    t36
						    PrelFloat.Double
						    t38)
						   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t @ t35 @ t36 @ t38 @ a (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (78::PrelGHC.Intzh))}
	%in %let actionzu1791 :: PrelBase.Int ->
				 PrelBase.Int ->
				 LexCore.Token ->
				 ParCore.HappyState
				 LexCore.Token
				 (ParCore.HappyStk
				  (ParCore.HappyAbsSyn
				   (PrelBase.ZMZN PrelBase.Char)
				   t35
				   t36
				   PrelFloat.Double
				   t38)
				  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				 ->
				 PrelBase.ZMZN
				 (ParCore.HappyState
				  LexCore.Token
				  (ParCore.HappyStk
				   (ParCore.HappyAbsSyn
				    (PrelBase.ZMZN PrelBase.Char)
				    t35
				    t36
				    PrelFloat.Double
				    t38)
				   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				 ->
				 ParCore.HappyStk
				 (ParCore.HappyAbsSyn
				  (PrelBase.ZMZN PrelBase.Char)
				  t35
				  t36
				  PrelFloat.Double
				  t38)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
		   ParCore.actionzu179 @ PrelBase.Int @ t35 @ t36 @ t38 @ a
		   PrelNum.zdfNumInt
	    %in %let happyShift4 :: (PrelBase.Int ->
				     PrelBase.Int ->
				     LexCore.Token ->
				     ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       t35
				       t36
				       PrelFloat.Double
				       t38)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				     ->
				     PrelBase.ZMZN
				     (ParCore.HappyState
				      LexCore.Token
				      (ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					t35
					t36
					PrelFloat.Double
					t38)
				       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				     ->
				     ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      t35
				      t36
				      PrelFloat.Double
				      t38)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				    ->
				    PrelBase.Int ->
				    LexCore.Token ->
				    ParCore.HappyState
				    LexCore.Token
				    (ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      t35
				      t36
				      PrelFloat.Double
				      t38)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				    ->
				    PrelBase.ZMZN
				    (ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       t35
				       t36
				       PrelFloat.Double
				       t38)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				    ->
				    ParCore.HappyStk
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     t35
				     t36
				     PrelFloat.Double
				     t38)
				    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
		       ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a)
		       @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ PrelFloat.Double
		       @ t38 PrelNum.zdfNumInt
		%in \ (ds::t) ->
			%case zddNum %of (tpl::PrelNum.ZCTNum t)
			  {PrelNum.ZdwZCDNum
			   (tpl1::PrelBase.ZCTEq t)
			   (tpl2::PrelShow.ZCTShow t)
			   (tpl3::t -> t -> t)
			   (tpl4::t -> t -> t)
			   (tpl5::t -> t -> t)
			   (tpl6::t -> t)
			   (tpl7::t -> t)
			   (tpl8::t -> t)
			   (tpl9::PrelNum.Integer -> t) ->
			     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
			       {PrelBase.ZdwZCDEq
				(tpl11::t -> t -> PrelBase.Bool)
				(tpl12::t -> t -> PrelBase.Bool) ->
				  %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
				    {PrelBase.ZdwTrue ->
				       happyShift4 actionzu1791;
				     PrelBase.ZdwFalse ->
				       ParCore.happyFail @ a @ LexCore.Token
				       @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36
				       @ PrelFloat.Double @ t38}}};
  ParCore.actionzu178 :: %forall t t35 t36 t37 a . PrelNum.ZCTNum t
						   ->
						   t ->
						   PrelBase.Int ->
						   LexCore.Token ->
						   ParCore.HappyState
						   LexCore.Token
						   (ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     PrelBase.Char)
						    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						   ->
						   PrelBase.ZMZN
						   (ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      PrelBase.Char)
						     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						   ->
						   ParCore.HappyStk
						   (ParCore.HappyAbsSyn
						    (PrelBase.ZMZN PrelBase.Char)
						    t35
						    t36
						    t37
						    PrelBase.Char)
						   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t @ t35 @ t36 @ t37 @ a (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (62::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (34::PrelGHC.Intzh))}
	    %in %let lit3 :: t =
		       %case zddNum %of (tpl::PrelNum.ZCTNum t)
			 {PrelNum.ZdwZCDNum
			  (tpl1::PrelBase.ZCTEq t)
			  (tpl2::PrelShow.ZCTShow t)
			  (tpl3::t -> t -> t)
			  (tpl4::t -> t -> t)
			  (tpl5::t -> t -> t)
			  (tpl6::t -> t)
			  (tpl7::t -> t)
			  (tpl8::t -> t)
			  (tpl9::PrelNum.Integer -> t) ->
			    tpl9 (PrelNum.ZdwSzh (97::PrelGHC.Intzh))}
		%in %let lit4 :: t =
			   %case zddNum %of (tpl::PrelNum.ZCTNum t)
			     {PrelNum.ZdwZCDNum
			      (tpl1::PrelBase.ZCTEq t)
			      (tpl2::PrelShow.ZCTShow t)
			      (tpl3::t -> t -> t)
			      (tpl4::t -> t -> t)
			      (tpl5::t -> t -> t)
			      (tpl6::t -> t)
			      (tpl7::t -> t)
			      (tpl8::t -> t)
			      (tpl9::PrelNum.Integer -> t) ->
				tpl9 (PrelNum.ZdwSzh (89::PrelGHC.Intzh))}
		    %in %let lit5 :: t =
			       %case zddNum %of (tpl::PrelNum.ZCTNum t)
				 {PrelNum.ZdwZCDNum
				  (tpl1::PrelBase.ZCTEq t)
				  (tpl2::PrelShow.ZCTShow t)
				  (tpl3::t -> t -> t)
				  (tpl4::t -> t -> t)
				  (tpl5::t -> t -> t)
				  (tpl6::t -> t)
				  (tpl7::t -> t)
				  (tpl8::t -> t)
				  (tpl9::PrelNum.Integer -> t) ->
				    tpl9 (PrelNum.ZdwSzh (69::PrelGHC.Intzh))}
			%in %let actionzu2041 :: PrelBase.Int ->
						 PrelBase.Int ->
						 LexCore.Token ->
						 ParCore.HappyState
						 LexCore.Token
						 (ParCore.HappyStk
						  (ParCore.HappyAbsSyn
						   (PrelBase.ZMZN PrelBase.Char)
						   t35
						   t36
						   t37
						   PrelBase.Char)
						  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						 ->
						 PrelBase.ZMZN
						 (ParCore.HappyState
						  LexCore.Token
						  (ParCore.HappyStk
						   (ParCore.HappyAbsSyn
						    (PrelBase.ZMZN PrelBase.Char)
						    t35
						    t36
						    t37
						    PrelBase.Char)
						   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						 ->
						 ParCore.HappyStk
						 (ParCore.HappyAbsSyn
						  (PrelBase.ZMZN PrelBase.Char)
						  t35
						  t36
						  t37
						  PrelBase.Char)
						 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
				   ParCore.actionzu204 @ PrelBase.Int
				   @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ a
				   PrelNum.zdfNumInt
			    %in %let actionzu452 :: PrelBase.Int ->
						    PrelBase.Int ->
						    LexCore.Token ->
						    ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      PrelBase.Char)
						     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						    ->
						    PrelBase.ZMZN
						    (ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       PrelBase.Char)
						      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						    ->
						    ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     PrelBase.Char)
						    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
				       ParCore.actionzu45 @ PrelBase.Int @ t35 @ t36 @ t37
				       @ PrelBase.Char @ a PrelNum.zdfNumInt
				%in %let happyShift4 :: (PrelBase.Int ->
							 PrelBase.Int ->
							 LexCore.Token ->
							 ParCore.HappyState
							 LexCore.Token
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   PrelBase.Char)
							  ->
							  PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
							 ->
							 PrelBase.ZMZN
							 (ParCore.HappyState
							  LexCore.Token
							  (ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    (PrelBase.ZMZN PrelBase.Char)
							    t35
							    t36
							    t37
							    PrelBase.Char)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err a))
							 ->
							 ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  PrelBase.Char)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
							->
							PrelBase.Int ->
							LexCore.Token ->
							ParCore.HappyState
							LexCore.Token
							(ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  PrelBase.Char)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
							->
							PrelBase.ZMZN
							(ParCore.HappyState
							 LexCore.Token
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   PrelBase.Char)
							  ->
							  PrelBase.ZMZN LexCore.Token ->
							  ErrM.Err a))
							->
							ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 PrelBase.Char)
							->
							PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
					   ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a)
					   @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37
					   @ PrelBase.Char PrelNum.zdfNumInt
				    %in \ (ds::t) ->
					    %case zddNum %of (tpl::PrelNum.ZCTNum t)
					      {PrelNum.ZdwZCDNum
					       (tpl1::PrelBase.ZCTEq t)
					       (tpl2::PrelShow.ZCTShow t)
					       (tpl3::t -> t -> t)
					       (tpl4::t -> t -> t)
					       (tpl5::t -> t -> t)
					       (tpl6::t -> t)
					       (tpl7::t -> t)
					       (tpl8::t -> t)
					       (tpl9::PrelNum.Integer -> t) ->
						 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
						   {PrelBase.ZdwZCDEq
						    (tpl11::t -> t -> PrelBase.Bool)
						    (tpl12::t -> t -> PrelBase.Bool) ->
						      %case (tpl12 lit4 ds)
						      %of (wild::PrelBase.Bool)
							{PrelBase.ZdwTrue ->
							   happyShift4
							   (%note "InlineMe"
							    actionzu501 @ t35 @ t36 @ t37
							    @ PrelBase.Char @ a);
							 PrelBase.ZdwFalse ->
							   %case (tpl12 lit3 ds)
							   %of (wild1::PrelBase.Bool)
							     {PrelBase.ZdwTrue ->
								happyShift4
								(ParCore.actionzu32 @ PrelBase.Int
								 @ LexCore.Token @ t35 @ t36 @ t37
								 @ PrelBase.Char @ a);
							      PrelBase.ZdwFalse ->
								%case (tpl12 lit2 ds)
								%of (wild2::PrelBase.Bool)
								  {PrelBase.ZdwTrue ->
								     ParCore.happyGoto
								     @ (ParCore.HappyState
									LexCore.Token
									(ParCore.HappyStk
									 (ParCore.HappyAbsSyn
									  (PrelBase.ZMZN
									   PrelBase.Char)
									  t35
									  t36
									  t37
									  PrelBase.Char)
									 ->
									 PrelBase.ZMZN LexCore.Token
									 -> ErrM.Err a))
								     @ LexCore.Token
								     @ (ParCore.HappyStk
									(ParCore.HappyAbsSyn
									 (PrelBase.ZMZN
									  PrelBase.Char)
									 t35
									 t36
									 t37
									 PrelBase.Char)
									->
									PrelBase.ZMZN LexCore.Token
									-> ErrM.Err a)
								     actionzu452;
								   PrelBase.ZdwFalse ->
								     %case (tpl12 lit1 ds)
								     %of (wild3::PrelBase.Bool)
								       {PrelBase.ZdwTrue ->
									  ParCore.happyGoto
									  @ (ParCore.HappyState
									     LexCore.Token
									     (ParCore.HappyStk
									      (ParCore.HappyAbsSyn
									       (PrelBase.ZMZN
										PrelBase.Char)
									       t35
									       t36
									       t37
									       PrelBase.Char)
									      ->
									      PrelBase.ZMZN
									      LexCore.Token
									      -> ErrM.Err a))
									  @ LexCore.Token
									  @ (ParCore.HappyStk
									     (ParCore.HappyAbsSyn
									      (PrelBase.ZMZN
									       PrelBase.Char)
									      t35
									      t36
									      t37
									      PrelBase.Char)
									     ->
									     PrelBase.ZMZN
									     LexCore.Token
									     -> ErrM.Err a)
									  actionzu2041;
									PrelBase.ZdwFalse ->
									  %case (tpl12 lit5 ds)
									  %of (wild4::PrelBase.Bool)
									    {PrelBase.ZdwTrue ->
									       ParCore.happyGoto
									       @ (ParCore.HappyState
										  LexCore.Token
										  (ParCore.HappyStk
										   (ParCore.HappyAbsSyn
										    (PrelBase.ZMZN
										     PrelBase.Char)
										    t35
										    t36
										    t37
										    PrelBase.Char)
										   ->
										   PrelBase.ZMZN
										   LexCore.Token
										   -> ErrM.Err a))
									       @ LexCore.Token
									       @ (ParCore.HappyStk
										  (ParCore.HappyAbsSyn
										   (PrelBase.ZMZN
										    PrelBase.Char)
										   t35
										   t36
										   t37
										   PrelBase.Char)
										  ->
										  PrelBase.ZMZN
										  LexCore.Token
										  -> ErrM.Err a)
									       (ParCore.actionzu49
										@ PrelBase.Int
										@ LexCore.Token
										@ (PrelBase.ZMZN
										   PrelBase.Char)
										@ t35 @ t36 @ t37
										@ PrelBase.Char
										@ a);
									     PrelBase.ZdwFalse ->
									       ParCore.happyFail @ a
									       @ LexCore.Token
									       @ (PrelBase.ZMZN
										  PrelBase.Char)
									       @ t35 @ t36 @ t37
									       @ PrelBase.Char}}}}}}};
  ParCore.actionzu129 :: %forall t t35 t36 t37 a . PrelNum.ZCTNum t
						   ->
						   t ->
						   PrelBase.Int ->
						   LexCore.Token ->
						   ParCore.HappyState
						   LexCore.Token
						   (ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     PrelBase.Char)
						    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						   ->
						   PrelBase.ZMZN
						   (ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      PrelBase.Char)
						     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						   ->
						   ParCore.HappyStk
						   (ParCore.HappyAbsSyn
						    (PrelBase.ZMZN PrelBase.Char)
						    t35
						    t36
						    t37
						    PrelBase.Char)
						   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t @ t35 @ t36 @ t37 @ a (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (78::PrelGHC.Intzh))}
	%in %let actionzu1781 :: PrelBase.Int ->
				 PrelBase.Int ->
				 LexCore.Token ->
				 ParCore.HappyState
				 LexCore.Token
				 (ParCore.HappyStk
				  (ParCore.HappyAbsSyn
				   (PrelBase.ZMZN PrelBase.Char)
				   t35
				   t36
				   t37
				   PrelBase.Char)
				  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				 ->
				 PrelBase.ZMZN
				 (ParCore.HappyState
				  LexCore.Token
				  (ParCore.HappyStk
				   (ParCore.HappyAbsSyn
				    (PrelBase.ZMZN PrelBase.Char)
				    t35
				    t36
				    t37
				    PrelBase.Char)
				   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				 ->
				 ParCore.HappyStk
				 (ParCore.HappyAbsSyn
				  (PrelBase.ZMZN PrelBase.Char)
				  t35
				  t36
				  t37
				  PrelBase.Char)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
		   ParCore.actionzu178 @ PrelBase.Int @ t35 @ t36 @ t37 @ a
		   PrelNum.zdfNumInt
	    %in %let happyShift4 :: (PrelBase.Int ->
				     PrelBase.Int ->
				     LexCore.Token ->
				     ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       t35
				       t36
				       t37
				       PrelBase.Char)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				     ->
				     PrelBase.ZMZN
				     (ParCore.HappyState
				      LexCore.Token
				      (ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					t35
					t36
					t37
					PrelBase.Char)
				       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				     ->
				     ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      t35
				      t36
				      t37
				      PrelBase.Char)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				    ->
				    PrelBase.Int ->
				    LexCore.Token ->
				    ParCore.HappyState
				    LexCore.Token
				    (ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      t35
				      t36
				      t37
				      PrelBase.Char)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				    ->
				    PrelBase.ZMZN
				    (ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       t35
				       t36
				       t37
				       PrelBase.Char)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				    ->
				    ParCore.HappyStk
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     t35
				     t36
				     t37
				     PrelBase.Char)
				    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
		       ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a)
		       @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ PrelBase.Char
		       PrelNum.zdfNumInt
		%in \ (ds::t) ->
			%case zddNum %of (tpl::PrelNum.ZCTNum t)
			  {PrelNum.ZdwZCDNum
			   (tpl1::PrelBase.ZCTEq t)
			   (tpl2::PrelShow.ZCTShow t)
			   (tpl3::t -> t -> t)
			   (tpl4::t -> t -> t)
			   (tpl5::t -> t -> t)
			   (tpl6::t -> t)
			   (tpl7::t -> t)
			   (tpl8::t -> t)
			   (tpl9::PrelNum.Integer -> t) ->
			     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
			       {PrelBase.ZdwZCDEq
				(tpl11::t -> t -> PrelBase.Bool)
				(tpl12::t -> t -> PrelBase.Bool) ->
				  %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
				    {PrelBase.ZdwTrue ->
				       happyShift4 actionzu1781;
				     PrelBase.ZdwFalse ->
				       ParCore.happyFail @ a @ LexCore.Token
				       @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37
				       @ PrelBase.Char}}};
  ParCore.actionzu36 :: %forall t a . PrelNum.ZCTNum t ->
				      t ->
				      PrelBase.Int ->
				      LexCore.Token ->
				      ParCore.HappyState
				      LexCore.Token
				      (ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					(PrelBase.ZMZN PrelBase.Char)
					PrelNum.Integer
					PrelFloat.Double
					PrelBase.Char)
				       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				      ->
				      PrelBase.ZMZN
				      (ParCore.HappyState
				       LexCore.Token
				       (ParCore.HappyStk
					(ParCore.HappyAbsSyn
					 (PrelBase.ZMZN PrelBase.Char)
					 (PrelBase.ZMZN PrelBase.Char)
					 PrelNum.Integer
					 PrelFloat.Double
					 PrelBase.Char)
					-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				      ->
				      ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t @ a (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (37::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (36::PrelGHC.Intzh))}
	    %in %let lit3 :: t =
		       %case zddNum %of (tpl::PrelNum.ZCTNum t)
			 {PrelNum.ZdwZCDNum
			  (tpl1::PrelBase.ZCTEq t)
			  (tpl2::PrelShow.ZCTShow t)
			  (tpl3::t -> t -> t)
			  (tpl4::t -> t -> t)
			  (tpl5::t -> t -> t)
			  (tpl6::t -> t)
			  (tpl7::t -> t)
			  (tpl8::t -> t)
			  (tpl9::PrelNum.Integer -> t) ->
			    tpl9 (PrelNum.ZdwSzh (35::PrelGHC.Intzh))}
		%in %let lit4 :: t =
			   %case zddNum %of (tpl::PrelNum.ZCTNum t)
			     {PrelNum.ZdwZCDNum
			      (tpl1::PrelBase.ZCTEq t)
			      (tpl2::PrelShow.ZCTShow t)
			      (tpl3::t -> t -> t)
			      (tpl4::t -> t -> t)
			      (tpl5::t -> t -> t)
			      (tpl6::t -> t)
			      (tpl7::t -> t)
			      (tpl8::t -> t)
			      (tpl9::PrelNum.Integer -> t) ->
				tpl9 (PrelNum.ZdwSzh (101::PrelGHC.Intzh))}
		    %in %let lit5 :: t =
			       %case zddNum %of (tpl::PrelNum.ZCTNum t)
				 {PrelNum.ZdwZCDNum
				  (tpl1::PrelBase.ZCTEq t)
				  (tpl2::PrelShow.ZCTShow t)
				  (tpl3::t -> t -> t)
				  (tpl4::t -> t -> t)
				  (tpl5::t -> t -> t)
				  (tpl6::t -> t)
				  (tpl7::t -> t)
				  (tpl8::t -> t)
				  (tpl9::PrelNum.Integer -> t) ->
				    tpl9 (PrelNum.ZdwSzh (100::PrelGHC.Intzh))}
			%in %let lit6 :: t =
				   %case zddNum %of (tpl::PrelNum.ZCTNum t)
				     {PrelNum.ZdwZCDNum
				      (tpl1::PrelBase.ZCTEq t)
				      (tpl2::PrelShow.ZCTShow t)
				      (tpl3::t -> t -> t)
				      (tpl4::t -> t -> t)
				      (tpl5::t -> t -> t)
				      (tpl6::t -> t)
				      (tpl7::t -> t)
				      (tpl8::t -> t)
				      (tpl9::PrelNum.Integer -> t) ->
					tpl9 (PrelNum.ZdwSzh (99::PrelGHC.Intzh))}
			    %in %let lit7 :: t =
				       %case zddNum %of (tpl::PrelNum.ZCTNum t)
					 {PrelNum.ZdwZCDNum
					  (tpl1::PrelBase.ZCTEq t)
					  (tpl2::PrelShow.ZCTShow t)
					  (tpl3::t -> t -> t)
					  (tpl4::t -> t -> t)
					  (tpl5::t -> t -> t)
					  (tpl6::t -> t)
					  (tpl7::t -> t)
					  (tpl8::t -> t)
					  (tpl9::PrelNum.Integer -> t) ->
					    tpl9 (PrelNum.ZdwSzh (98::PrelGHC.Intzh))}
				%in %let lit8 :: t =
					   %case zddNum %of (tpl::PrelNum.ZCTNum t)
					     {PrelNum.ZdwZCDNum
					      (tpl1::PrelBase.ZCTEq t)
					      (tpl2::PrelShow.ZCTShow t)
					      (tpl3::t -> t -> t)
					      (tpl4::t -> t -> t)
					      (tpl5::t -> t -> t)
					      (tpl6::t -> t)
					      (tpl7::t -> t)
					      (tpl8::t -> t)
					      (tpl9::PrelNum.Integer -> t) ->
						tpl9 (PrelNum.ZdwSzh (38::PrelGHC.Intzh))}
				    %in %let actionzu1291 :: PrelBase.Int ->
							     PrelBase.Int ->
							     LexCore.Token ->
							     ParCore.HappyState
							     LexCore.Token
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       (PrelBase.ZMZN PrelBase.Char)
							       (PrelBase.ZMZN PrelBase.Char)
							       PrelNum.Integer
							       PrelFloat.Double
							       PrelBase.Char)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a)
							     ->
							     PrelBase.ZMZN
							     (ParCore.HappyState
							      LexCore.Token
							      (ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								(PrelBase.ZMZN PrelBase.Char)
								(PrelBase.ZMZN PrelBase.Char)
								PrelNum.Integer
								PrelFloat.Double
								PrelBase.Char)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a))
							     ->
							     ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      (PrelBase.ZMZN PrelBase.Char)
							      (PrelBase.ZMZN PrelBase.Char)
							      PrelNum.Integer
							      PrelFloat.Double
							      PrelBase.Char)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a =
					       ParCore.actionzu129 @ PrelBase.Int
					       @ (PrelBase.ZMZN PrelBase.Char) @ PrelNum.Integer
					       @ PrelFloat.Double @ a PrelNum.zdfNumInt
					%in %let actionzu1281 :: PrelBase.Int ->
								 PrelBase.Int ->
								 LexCore.Token ->
								 ParCore.HappyState
								 LexCore.Token
								 (ParCore.HappyStk
								  (ParCore.HappyAbsSyn
								   (PrelBase.ZMZN PrelBase.Char)
								   (PrelBase.ZMZN PrelBase.Char)
								   PrelNum.Integer
								   PrelFloat.Double
								   PrelBase.Char)
								  ->
								  PrelBase.ZMZN LexCore.Token ->
								  ErrM.Err a)
								 ->
								 PrelBase.ZMZN
								 (ParCore.HappyState
								  LexCore.Token
								  (ParCore.HappyStk
								   (ParCore.HappyAbsSyn
								    (PrelBase.ZMZN PrelBase.Char)
								    (PrelBase.ZMZN PrelBase.Char)
								    PrelNum.Integer
								    PrelFloat.Double
								    PrelBase.Char)
								   ->
								   PrelBase.ZMZN LexCore.Token ->
								   ErrM.Err a))
								 ->
								 ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  (PrelBase.ZMZN PrelBase.Char)
								  (PrelBase.ZMZN PrelBase.Char)
								  PrelNum.Integer
								  PrelFloat.Double
								  PrelBase.Char)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a =
						   ParCore.actionzu128 @ PrelBase.Int
						   @ (PrelBase.ZMZN PrelBase.Char) @ PrelNum.Integer
						   @ PrelBase.Char @ a PrelNum.zdfNumInt
					    %in %let actionzu1271 :: PrelBase.Int ->
								     PrelBase.Int ->
								     LexCore.Token ->
								     ParCore.HappyState
								     LexCore.Token
								     (ParCore.HappyStk
								      (ParCore.HappyAbsSyn
								       (PrelBase.ZMZN PrelBase.Char)
								       (PrelBase.ZMZN PrelBase.Char)
								       PrelNum.Integer
								       PrelFloat.Double
								       PrelBase.Char)
								      ->
								      PrelBase.ZMZN LexCore.Token ->
								      ErrM.Err a)
								     ->
								     PrelBase.ZMZN
								     (ParCore.HappyState
								      LexCore.Token
								      (ParCore.HappyStk
								       (ParCore.HappyAbsSyn
									(PrelBase.ZMZN
									 PrelBase.Char)
									(PrelBase.ZMZN
									 PrelBase.Char)
									PrelNum.Integer
									PrelFloat.Double
									PrelBase.Char)
								       ->
								       PrelBase.ZMZN LexCore.Token
								       -> ErrM.Err a))
								     ->
								     ParCore.HappyStk
								     (ParCore.HappyAbsSyn
								      (PrelBase.ZMZN PrelBase.Char)
								      (PrelBase.ZMZN PrelBase.Char)
								      PrelNum.Integer
								      PrelFloat.Double
								      PrelBase.Char)
								     ->
								     PrelBase.ZMZN LexCore.Token ->
								     ErrM.Err a =
						       ParCore.actionzu127 @ PrelBase.Int
						       @ (PrelBase.ZMZN PrelBase.Char)
						       @ PrelFloat.Double @ PrelBase.Char @ a
						       PrelNum.zdfNumInt
						%in %let actionzu1261 :: PrelBase.Int ->
									 PrelBase.Int ->
									 LexCore.Token ->
									 ParCore.HappyState
									 LexCore.Token
									 (ParCore.HappyStk
									  (ParCore.HappyAbsSyn
									   (PrelBase.ZMZN
									    PrelBase.Char)
									   (PrelBase.ZMZN
									    PrelBase.Char)
									   PrelNum.Integer
									   PrelFloat.Double
									   PrelBase.Char)
									  ->
									  PrelBase.ZMZN
									  LexCore.Token
									  -> ErrM.Err a)
									 ->
									 PrelBase.ZMZN
									 (ParCore.HappyState
									  LexCore.Token
									  (ParCore.HappyStk
									   (ParCore.HappyAbsSyn
									    (PrelBase.ZMZN
									     PrelBase.Char)
									    (PrelBase.ZMZN
									     PrelBase.Char)
									    PrelNum.Integer
									    PrelFloat.Double
									    PrelBase.Char)
									   ->
									   PrelBase.ZMZN
									   LexCore.Token
									   -> ErrM.Err a))
									 ->
									 ParCore.HappyStk
									 (ParCore.HappyAbsSyn
									  (PrelBase.ZMZN
									   PrelBase.Char)
									  (PrelBase.ZMZN
									   PrelBase.Char)
									  PrelNum.Integer
									  PrelFloat.Double
									  PrelBase.Char)
									 ->
									 PrelBase.ZMZN LexCore.Token
									 -> ErrM.Err a =
							   ParCore.actionzu126 @ PrelBase.Int
							   @ PrelNum.Integer @ PrelFloat.Double
							   @ PrelBase.Char @ a PrelNum.zdfNumInt
						    %in %let happyShift4 :: (PrelBase.Int ->
									     PrelBase.Int ->
									     LexCore.Token ->
									     ParCore.HappyState
									     LexCore.Token
									     (ParCore.HappyStk
									      (ParCore.HappyAbsSyn
									       (PrelBase.ZMZN
										PrelBase.Char)
									       (PrelBase.ZMZN
										PrelBase.Char)
									       PrelNum.Integer
									       PrelFloat.Double
									       PrelBase.Char)
									      ->
									      PrelBase.ZMZN
									      LexCore.Token
									      -> ErrM.Err a)
									     ->
									     PrelBase.ZMZN
									     (ParCore.HappyState
									      LexCore.Token
									      (ParCore.HappyStk
									       (ParCore.HappyAbsSyn
										(PrelBase.ZMZN
										 PrelBase.Char)
										(PrelBase.ZMZN
										 PrelBase.Char)
										PrelNum.Integer
										PrelFloat.Double
										PrelBase.Char)
									       ->
									       PrelBase.ZMZN
									       LexCore.Token
									       -> ErrM.Err a))
									     ->
									     ParCore.HappyStk
									     (ParCore.HappyAbsSyn
									      (PrelBase.ZMZN
									       PrelBase.Char)
									      (PrelBase.ZMZN
									       PrelBase.Char)
									      PrelNum.Integer
									      PrelFloat.Double
									      PrelBase.Char)
									     ->
									     PrelBase.ZMZN
									     LexCore.Token
									     -> ErrM.Err a)
									    ->
									    PrelBase.Int ->
									    LexCore.Token ->
									    ParCore.HappyState
									    LexCore.Token
									    (ParCore.HappyStk
									     (ParCore.HappyAbsSyn
									      (PrelBase.ZMZN
									       PrelBase.Char)
									      (PrelBase.ZMZN
									       PrelBase.Char)
									      PrelNum.Integer
									      PrelFloat.Double
									      PrelBase.Char)
									     ->
									     PrelBase.ZMZN
									     LexCore.Token
									     -> ErrM.Err a)
									    ->
									    PrelBase.ZMZN
									    (ParCore.HappyState
									     LexCore.Token
									     (ParCore.HappyStk
									      (ParCore.HappyAbsSyn
									       (PrelBase.ZMZN
										PrelBase.Char)
									       (PrelBase.ZMZN
										PrelBase.Char)
									       PrelNum.Integer
									       PrelFloat.Double
									       PrelBase.Char)
									      ->
									      PrelBase.ZMZN
									      LexCore.Token
									      -> ErrM.Err a))
									    ->
									    ParCore.HappyStk
									    (ParCore.HappyAbsSyn
									     (PrelBase.ZMZN
									      PrelBase.Char)
									     (PrelBase.ZMZN
									      PrelBase.Char)
									     PrelNum.Integer
									     PrelFloat.Double
									     PrelBase.Char)
									    ->
									    PrelBase.ZMZN
									    LexCore.Token
									    -> ErrM.Err a =
							       ParCore.happyShift @ PrelBase.Int
							       @ (ErrM.Err a)
							       @ (PrelBase.ZMZN PrelBase.Char)
							       @ (PrelBase.ZMZN PrelBase.Char)
							       @ PrelNum.Integer @ PrelFloat.Double
							       @ PrelBase.Char PrelNum.zdfNumInt
							%in \ (ds::t) ->
								%case zddNum
								%of (tpl::PrelNum.ZCTNum t)
								  {PrelNum.ZdwZCDNum
								   (tpl1::PrelBase.ZCTEq t)
								   (tpl2::PrelShow.ZCTShow t)
								   (tpl3::t -> t -> t)
								   (tpl4::t -> t -> t)
								   (tpl5::t -> t -> t)
								   (tpl6::t -> t)
								   (tpl7::t -> t)
								   (tpl8::t -> t)
								   (tpl9::PrelNum.Integer -> t) ->
								     %case tpl1
								     %of (tpl10::PrelBase.ZCTEq t)
								       {PrelBase.ZdwZCDEq
									(tpl11::t ->
										t -> PrelBase.Bool)
									(tpl12::t ->
										t ->
										PrelBase.Bool) ->
									  %case (tpl12 lit7 ds)
									  %of (wild::PrelBase.Bool)
									    {PrelBase.ZdwTrue ->
									       happyShift4
									       (ParCore.actionzu131
										@ PrelBase.Int
										@ LexCore.Token
										@ (PrelBase.ZMZN
										   PrelBase.Char)
										@ PrelNum.Integer
										@ PrelFloat.Double
										@ PrelBase.Char
										@ a);
									     PrelBase.ZdwFalse ->
									       %case (tpl12 lit6 ds)
									       %of (wild1::PrelBase.Bool)
										 {PrelBase.ZdwTrue
										  ->
										    happyShift4
										    (ParCore.actionzu132
										     @ PrelBase.Int
										     @ LexCore.Token
										     @ (PrelBase.ZMZN
											PrelBase.Char)
										     @ (PrelBase.ZMZN
											PrelBase.Char)
										     @ PrelFloat.Double
										     @ PrelBase.Char
										     @ a);
										  PrelBase.ZdwFalse
										  ->
										    %case (tpl12
											   lit5 ds)
										    %of (wild2::PrelBase.Bool)
										      {PrelBase.ZdwTrue
										       ->
											 happyShift4
											 (ParCore.actionzu133
											  @ PrelBase.Int
											  @ LexCore.Token
											  @ (PrelBase.ZMZN
											     PrelBase.Char)
											  @ (PrelBase.ZMZN
											     PrelBase.Char)
											  @ PrelNum.Integer
											  @ PrelBase.Char
											  @ a);
										       PrelBase.ZdwFalse
										       ->
											 %case (tpl12
												lit4
												ds)
											 %of (wild3::PrelBase.Bool)
											   {PrelBase.ZdwTrue
											    ->
											      happyShift4
											      (ParCore.actionzu134
											       @ PrelBase.Int
											       @ LexCore.Token
											       @ (PrelBase.ZMZN
												  PrelBase.Char)
											       @ (PrelBase.ZMZN
												  PrelBase.Char)
											       @ PrelNum.Integer
											       @ PrelFloat.Double
											       @ a);
											    PrelBase.ZdwFalse
											    ->
											      %case (tpl12
												     lit3
												     ds)
											      %of (wild4::PrelBase.Bool)
												{PrelBase.ZdwTrue
												 ->
												   ParCore.happyGoto
												   @ (ParCore.HappyState
												      LexCore.Token
												      (ParCore.HappyStk
												       (ParCore.HappyAbsSyn
													(PrelBase.ZMZN
													 PrelBase.Char)
													(PrelBase.ZMZN
													 PrelBase.Char)
													PrelNum.Integer
													PrelFloat.Double
													PrelBase.Char)
												       ->
												       PrelBase.ZMZN
												       LexCore.Token
												       ->
												       ErrM.Err
												       a))
												   @ LexCore.Token
												   @ (ParCore.HappyStk
												      (ParCore.HappyAbsSyn
												       (PrelBase.ZMZN
													PrelBase.Char)
												       (PrelBase.ZMZN
													PrelBase.Char)
												       PrelNum.Integer
												       PrelFloat.Double
												       PrelBase.Char)
												      ->
												      PrelBase.ZMZN
												      LexCore.Token
												      ->
												      ErrM.Err
												      a)
												   actionzu1261;
												 PrelBase.ZdwFalse
												 ->
												   %case (tpl12
													  lit2
													  ds)
												   %of (wild5::PrelBase.Bool)
												     {PrelBase.ZdwTrue
												      ->
													ParCore.happyGoto
													@ (ParCore.HappyState
													   LexCore.Token
													   (ParCore.HappyStk
													    (ParCore.HappyAbsSyn
													     (PrelBase.ZMZN
													      PrelBase.Char)
													     (PrelBase.ZMZN
													      PrelBase.Char)
													     PrelNum.Integer
													     PrelFloat.Double
													     PrelBase.Char)
													    ->
													    PrelBase.ZMZN
													    LexCore.Token
													    ->
													    ErrM.Err
													    a))
													@ LexCore.Token
													@ (ParCore.HappyStk
													   (ParCore.HappyAbsSyn
													    (PrelBase.ZMZN
													     PrelBase.Char)
													    (PrelBase.ZMZN
													     PrelBase.Char)
													    PrelNum.Integer
													    PrelFloat.Double
													    PrelBase.Char)
													   ->
													   PrelBase.ZMZN
													   LexCore.Token
													   ->
													   ErrM.Err
													   a)
													actionzu1271;
												      PrelBase.ZdwFalse
												      ->
													%case (tpl12
													       lit1
													       ds)
													%of (wild6::PrelBase.Bool)
													  {PrelBase.ZdwTrue
													   ->
													     ParCore.happyGoto
													     @ (ParCore.HappyState
														LexCore.Token
														(ParCore.HappyStk
														 (ParCore.HappyAbsSyn
														  (PrelBase.ZMZN
														   PrelBase.Char)
														  (PrelBase.ZMZN
														   PrelBase.Char)
														  PrelNum.Integer
														  PrelFloat.Double
														  PrelBase.Char)
														 ->
														 PrelBase.ZMZN
														 LexCore.Token
														 ->
														 ErrM.Err
														 a))
													     @ LexCore.Token
													     @ (ParCore.HappyStk
														(ParCore.HappyAbsSyn
														 (PrelBase.ZMZN
														  PrelBase.Char)
														 (PrelBase.ZMZN
														  PrelBase.Char)
														 PrelNum.Integer
														 PrelFloat.Double
														 PrelBase.Char)
														->
														PrelBase.ZMZN
														LexCore.Token
														->
														ErrM.Err
														a)
													     actionzu1281;
													   PrelBase.ZdwFalse
													   ->
													     %case (tpl12
														    lit8
														    ds)
													     %of (wild7::PrelBase.Bool)
													       {PrelBase.ZdwTrue
														->
														  ParCore.happyGoto
														  @ (ParCore.HappyState
														     LexCore.Token
														     (ParCore.HappyStk
														      (ParCore.HappyAbsSyn
														       (PrelBase.ZMZN
															PrelBase.Char)
														       (PrelBase.ZMZN
															PrelBase.Char)
														       PrelNum.Integer
														       PrelFloat.Double
														       PrelBase.Char)
														      ->
														      PrelBase.ZMZN
														      LexCore.Token
														      ->
														      ErrM.Err
														      a))
														  @ LexCore.Token
														  @ (ParCore.HappyStk
														     (ParCore.HappyAbsSyn
														      (PrelBase.ZMZN
														       PrelBase.Char)
														      (PrelBase.ZMZN
														       PrelBase.Char)
														      PrelNum.Integer
														      PrelFloat.Double
														      PrelBase.Char)
														     ->
														     PrelBase.ZMZN
														     LexCore.Token
														     ->
														     ErrM.Err
														     a)
														  actionzu1291;
														PrelBase.ZdwFalse
														->
														  ParCore.happyFail
														  @ a
														  @ LexCore.Token
														  @ (PrelBase.ZMZN
														     PrelBase.Char)
														  @ (PrelBase.ZMZN
														     PrelBase.Char)
														  @ PrelNum.Integer
														  @ PrelFloat.Double
														  @ PrelBase.Char}}}}}}}}}};
  actionzu361 :: PrelBase.Int ->
		 PrelBase.Int ->
		 LexCore.Token ->
		 ParCore.HappyState
		 LexCore.Token
		 (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char)
		  ->
		  PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char))
		 ->
		 PrelBase.ZMZN
		 (ParCore.HappyState
		  LexCore.Token
		  (ParCore.HappyStk
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char)
		   ->
		   PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char)))
		 ->
		 ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char)
		 ->
		 PrelBase.ZMZN LexCore.Token ->
		 ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char) =
    ParCore.actionzu36 @ PrelBase.Int
    @ (ParCore.HappyAbsSyn
       (PrelBase.ZMZN PrelBase.Char)
       (PrelBase.ZMZN PrelBase.Char)
       PrelNum.Integer
       PrelFloat.Double
       PrelBase.Char)
    PrelNum.zdfNumInt;
  ParCore.actionzu125 :: %forall t t35 t36 t37 t38 a . PrelNum.ZCTNum
						       t
						       ->
						       t ->
						       PrelBase.Int ->
						       LexCore.Token ->
						       ParCore.HappyState
						       LexCore.Token
						       (ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38)
							->
							PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						       ->
						       PrelBase.ZMZN
						       (ParCore.HappyState
							LexCore.Token
							(ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						       ->
						       ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)
						       ->
						       PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t @ t35 @ t36 @ t37 @ t38 @ a (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (62::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (34::PrelGHC.Intzh))}
	    %in %let lit3 :: t =
		       %case zddNum %of (tpl::PrelNum.ZCTNum t)
			 {PrelNum.ZdwZCDNum
			  (tpl1::PrelBase.ZCTEq t)
			  (tpl2::PrelShow.ZCTShow t)
			  (tpl3::t -> t -> t)
			  (tpl4::t -> t -> t)
			  (tpl5::t -> t -> t)
			  (tpl6::t -> t)
			  (tpl7::t -> t)
			  (tpl8::t -> t)
			  (tpl9::PrelNum.Integer -> t) ->
			    tpl9 (PrelNum.ZdwSzh (97::PrelGHC.Intzh))}
		%in %let lit4 :: t =
			   %case zddNum %of (tpl::PrelNum.ZCTNum t)
			     {PrelNum.ZdwZCDNum
			      (tpl1::PrelBase.ZCTEq t)
			      (tpl2::PrelShow.ZCTShow t)
			      (tpl3::t -> t -> t)
			      (tpl4::t -> t -> t)
			      (tpl5::t -> t -> t)
			      (tpl6::t -> t)
			      (tpl7::t -> t)
			      (tpl8::t -> t)
			      (tpl9::PrelNum.Integer -> t) ->
				tpl9 (PrelNum.ZdwSzh (89::PrelGHC.Intzh))}
		    %in %let lit5 :: t =
			       %case zddNum %of (tpl::PrelNum.ZCTNum t)
				 {PrelNum.ZdwZCDNum
				  (tpl1::PrelBase.ZCTEq t)
				  (tpl2::PrelShow.ZCTShow t)
				  (tpl3::t -> t -> t)
				  (tpl4::t -> t -> t)
				  (tpl5::t -> t -> t)
				  (tpl6::t -> t)
				  (tpl7::t -> t)
				  (tpl8::t -> t)
				  (tpl9::PrelNum.Integer -> t) ->
				    tpl9 (PrelNum.ZdwSzh (69::PrelGHC.Intzh))}
			%in %let actionzu452 :: PrelBase.Int ->
						PrelBase.Int ->
						LexCore.Token ->
						ParCore.HappyState
						LexCore.Token
						(ParCore.HappyStk
						 (ParCore.HappyAbsSyn
						  (PrelBase.ZMZN PrelBase.Char)
						  t35
						  t36
						  t37
						  t38)
						 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						->
						PrelBase.ZMZN
						(ParCore.HappyState
						 LexCore.Token
						 (ParCore.HappyStk
						  (ParCore.HappyAbsSyn
						   (PrelBase.ZMZN PrelBase.Char)
						   t35
						   t36
						   t37
						   t38)
						  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						->
						ParCore.HappyStk
						(ParCore.HappyAbsSyn
						 (PrelBase.ZMZN PrelBase.Char)
						 t35
						 t36
						 t37
						 t38)
						-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
				   ParCore.actionzu45 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38 @ a
				   PrelNum.zdfNumInt
			    %in %let happyShift4 :: (PrelBase.Int ->
						     PrelBase.Int ->
						     LexCore.Token ->
						     ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						     ->
						     PrelBase.ZMZN
						     (ParCore.HappyState
						      LexCore.Token
						      (ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)
						       ->
						       PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						     ->
						     ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						    ->
						    PrelBase.Int ->
						    LexCore.Token ->
						    ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						    ->
						    PrelBase.ZMZN
						    (ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						    ->
						    ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38)
						    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
				       ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a)
				       @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38
				       PrelNum.zdfNumInt
				%in \ (ds::t) ->
					%case zddNum %of (tpl::PrelNum.ZCTNum t)
					  {PrelNum.ZdwZCDNum
					   (tpl1::PrelBase.ZCTEq t)
					   (tpl2::PrelShow.ZCTShow t)
					   (tpl3::t -> t -> t)
					   (tpl4::t -> t -> t)
					   (tpl5::t -> t -> t)
					   (tpl6::t -> t)
					   (tpl7::t -> t)
					   (tpl8::t -> t)
					   (tpl9::PrelNum.Integer -> t) ->
					     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
					       {PrelBase.ZdwZCDEq
						(tpl11::t -> t -> PrelBase.Bool)
						(tpl12::t -> t -> PrelBase.Bool) ->
						  %case (tpl12 lit4 ds) %of (wild::PrelBase.Bool)
						    {PrelBase.ZdwTrue ->
						       happyShift4
						       (%note "InlineMe"
							actionzu501 @ t35 @ t36 @ t37 @ t38 @ a);
						     PrelBase.ZdwFalse ->
						       %case (tpl12 lit3 ds)
						       %of (wild1::PrelBase.Bool)
							 {PrelBase.ZdwTrue ->
							    happyShift4
							    (ParCore.actionzu32 @ PrelBase.Int
							     @ LexCore.Token @ t35 @ t36 @ t37 @ t38
							     @ a);
							  PrelBase.ZdwFalse ->
							    %case (tpl12 lit2 ds)
							    %of (wild2::PrelBase.Bool)
							      {PrelBase.ZdwTrue ->
								 ParCore.happyGoto
								 @ (ParCore.HappyState
								    LexCore.Token
								    (ParCore.HappyStk
								     (ParCore.HappyAbsSyn
								      (PrelBase.ZMZN PrelBase.Char)
								      t35
								      t36
								      t37
								      t38)
								     ->
								     PrelBase.ZMZN LexCore.Token ->
								     ErrM.Err a))
								 @ LexCore.Token
								 @ (ParCore.HappyStk
								    (ParCore.HappyAbsSyn
								     (PrelBase.ZMZN PrelBase.Char)
								     t35
								     t36
								     t37
								     t38)
								    ->
								    PrelBase.ZMZN LexCore.Token ->
								    ErrM.Err a)
								 actionzu452;
							       PrelBase.ZdwFalse ->
								 %case (tpl12 lit1 ds)
								 %of (wild3::PrelBase.Bool)
								   {PrelBase.ZdwTrue ->
								      ParCore.happyGoto
								      @ (ParCore.HappyState
									 LexCore.Token
									 (ParCore.HappyStk
									  (ParCore.HappyAbsSyn
									   (PrelBase.ZMZN
									    PrelBase.Char)
									   t35
									   t36
									   t37
									   t38)
									  ->
									  PrelBase.ZMZN
									  LexCore.Token
									  -> ErrM.Err a))
								      @ LexCore.Token
								      @ (ParCore.HappyStk
									 (ParCore.HappyAbsSyn
									  (PrelBase.ZMZN
									   PrelBase.Char)
									  t35
									  t36
									  t37
									  t38)
									 ->
									 PrelBase.ZMZN LexCore.Token
									 -> ErrM.Err a)
								      (ParCore.actionzu182
								       @ PrelBase.Int
								       @ LexCore.Token
								       @ (PrelBase.ZMZN
									  PrelBase.Char)
								       @ t35 @ t36 @ t37 @ t38 @ a);
								    PrelBase.ZdwFalse ->
								      %case (tpl12 lit5 ds)
								      %of (wild4::PrelBase.Bool)
									{PrelBase.ZdwTrue ->
									   ParCore.happyGoto
									   @ (ParCore.HappyState
									      LexCore.Token
									      (ParCore.HappyStk
									       (ParCore.HappyAbsSyn
										(PrelBase.ZMZN
										 PrelBase.Char)
										t35
										t36
										t37
										t38)
									       ->
									       PrelBase.ZMZN
									       LexCore.Token
									       -> ErrM.Err a))
									   @ LexCore.Token
									   @ (ParCore.HappyStk
									      (ParCore.HappyAbsSyn
									       (PrelBase.ZMZN
										PrelBase.Char)
									       t35
									       t36
									       t37
									       t38)
									      ->
									      PrelBase.ZMZN
									      LexCore.Token
									      -> ErrM.Err a)
									   (ParCore.actionzu49
									    @ PrelBase.Int
									    @ LexCore.Token
									    @ (PrelBase.ZMZN
									       PrelBase.Char)
									    @ t35 @ t36 @ t37 @ t38
									    @ a);
									 PrelBase.ZdwFalse ->
									   ParCore.happyFail @ a
									   @ LexCore.Token
									   @ (PrelBase.ZMZN
									      PrelBase.Char)
									   @ t35 @ t36 @ t37
									   @ t38}}}}}}};
  actionzu1251 :: PrelBase.Int ->
		  PrelBase.Int ->
		  LexCore.Token ->
		  ParCore.HappyState
		  LexCore.Token
		  (ParCore.HappyStk
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char)
		   ->
		   PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char))
		  ->
		  PrelBase.ZMZN
		  (ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelNum.Integer
		     PrelFloat.Double
		     PrelBase.Char)
		    ->
		    PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelNum.Integer
		     PrelFloat.Double
		     PrelBase.Char)))
		  ->
		  ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char)
		  ->
		  PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char) =
    ParCore.actionzu125 @ PrelBase.Int @ (PrelBase.ZMZN PrelBase.Char)
    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char
    @ (ParCore.HappyAbsSyn
       (PrelBase.ZMZN PrelBase.Char)
       (PrelBase.ZMZN PrelBase.Char)
       PrelNum.Integer
       PrelFloat.Double
       PrelBase.Char)
    PrelNum.zdfNumInt;
  ParCore.actionzu47 :: %forall t35 t36 t37 t38 a . PrelBase.Int ->
						    PrelBase.Int ->
						    LexCore.Token ->
						    ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						    ->
						    PrelBase.ZMZN
						    (ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						    ->
						    ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38)
						    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t35 @ t36 @ t37 @ t38 @ a ->
	%note "InlineMe"
	actionzu471 @ t35 @ t36 @ t37 @ t38 @ a;
  ParCore.actionzu135 :: %forall t t36 t37 t38 a . PrelNum.ZCTNum t
						   ->
						   t ->
						   PrelBase.Int ->
						   LexCore.Token ->
						   ParCore.HappyState
						   LexCore.Token
						   (ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     (PrelBase.ZMZN PrelBase.Char)
						     t36
						     t37
						     t38)
						    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						   ->
						   PrelBase.ZMZN
						   (ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      (PrelBase.ZMZN PrelBase.Char)
						      t36
						      t37
						      t38)
						     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						   ->
						   ParCore.HappyStk
						   (ParCore.HappyAbsSyn
						    (PrelBase.ZMZN PrelBase.Char)
						    (PrelBase.ZMZN PrelBase.Char)
						    t36
						    t37
						    t38)
						   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t @ t36 @ t37 @ t38 @ a (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (64::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (63::PrelGHC.Intzh))}
	    %in %let lit3 :: t =
		       %case zddNum %of (tpl::PrelNum.ZCTNum t)
			 {PrelNum.ZdwZCDNum
			  (tpl1::PrelBase.ZCTEq t)
			  (tpl2::PrelShow.ZCTShow t)
			  (tpl3::t -> t -> t)
			  (tpl4::t -> t -> t)
			  (tpl5::t -> t -> t)
			  (tpl6::t -> t)
			  (tpl7::t -> t)
			  (tpl8::t -> t)
			  (tpl9::PrelNum.Integer -> t) ->
			    tpl9 (PrelNum.ZdwSzh (62::PrelGHC.Intzh))}
		%in %let lit4 :: t =
			   %case zddNum %of (tpl::PrelNum.ZCTNum t)
			     {PrelNum.ZdwZCDNum
			      (tpl1::PrelBase.ZCTEq t)
			      (tpl2::PrelShow.ZCTShow t)
			      (tpl3::t -> t -> t)
			      (tpl4::t -> t -> t)
			      (tpl5::t -> t -> t)
			      (tpl6::t -> t)
			      (tpl7::t -> t)
			      (tpl8::t -> t)
			      (tpl9::PrelNum.Integer -> t) ->
				tpl9 (PrelNum.ZdwSzh (34::PrelGHC.Intzh))}
		    %in %let lit5 :: t =
			       %case zddNum %of (tpl::PrelNum.ZCTNum t)
				 {PrelNum.ZdwZCDNum
				  (tpl1::PrelBase.ZCTEq t)
				  (tpl2::PrelShow.ZCTShow t)
				  (tpl3::t -> t -> t)
				  (tpl4::t -> t -> t)
				  (tpl5::t -> t -> t)
				  (tpl6::t -> t)
				  (tpl7::t -> t)
				  (tpl8::t -> t)
				  (tpl9::PrelNum.Integer -> t) ->
				    tpl9 (PrelNum.ZdwSzh (97::PrelGHC.Intzh))}
			%in %let lit6 :: t =
				   %case zddNum %of (tpl::PrelNum.ZCTNum t)
				     {PrelNum.ZdwZCDNum
				      (tpl1::PrelBase.ZCTEq t)
				      (tpl2::PrelShow.ZCTShow t)
				      (tpl3::t -> t -> t)
				      (tpl4::t -> t -> t)
				      (tpl5::t -> t -> t)
				      (tpl6::t -> t)
				      (tpl7::t -> t)
				      (tpl8::t -> t)
				      (tpl9::PrelNum.Integer -> t) ->
					tpl9 (PrelNum.ZdwSzh (92::PrelGHC.Intzh))}
			    %in %let lit7 :: t =
				       %case zddNum %of (tpl::PrelNum.ZCTNum t)
					 {PrelNum.ZdwZCDNum
					  (tpl1::PrelBase.ZCTEq t)
					  (tpl2::PrelShow.ZCTShow t)
					  (tpl3::t -> t -> t)
					  (tpl4::t -> t -> t)
					  (tpl5::t -> t -> t)
					  (tpl6::t -> t)
					  (tpl7::t -> t)
					  (tpl8::t -> t)
					  (tpl9::PrelNum.Integer -> t) ->
					    tpl9 (PrelNum.ZdwSzh (89::PrelGHC.Intzh))}
				%in %let lit8 :: t =
					   %case zddNum %of (tpl::PrelNum.ZCTNum t)
					     {PrelNum.ZdwZCDNum
					      (tpl1::PrelBase.ZCTEq t)
					      (tpl2::PrelShow.ZCTShow t)
					      (tpl3::t -> t -> t)
					      (tpl4::t -> t -> t)
					      (tpl5::t -> t -> t)
					      (tpl6::t -> t)
					      (tpl7::t -> t)
					      (tpl8::t -> t)
					      (tpl9::PrelNum.Integer -> t) ->
						tpl9 (PrelNum.ZdwSzh (69::PrelGHC.Intzh))}
				    %in %let actionzu452 :: PrelBase.Int ->
							    PrelBase.Int ->
							    LexCore.Token ->
							    ParCore.HappyState
							    LexCore.Token
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      (PrelBase.ZMZN PrelBase.Char)
							      (PrelBase.ZMZN PrelBase.Char)
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a)
							    ->
							    PrelBase.ZMZN
							    (ParCore.HappyState
							     LexCore.Token
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       (PrelBase.ZMZN PrelBase.Char)
							       (PrelBase.ZMZN PrelBase.Char)
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a))
							    ->
							    ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     (PrelBase.ZMZN PrelBase.Char)
							     (PrelBase.ZMZN PrelBase.Char)
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err a =
					       ParCore.actionzu45 @ PrelBase.Int
					       @ (PrelBase.ZMZN PrelBase.Char) @ t36 @ t37 @ t38 @ a
					       PrelNum.zdfNumInt
					%in %let happyShift4 :: (PrelBase.Int ->
								 PrelBase.Int ->
								 LexCore.Token ->
								 ParCore.HappyState
								 LexCore.Token
								 (ParCore.HappyStk
								  (ParCore.HappyAbsSyn
								   (PrelBase.ZMZN PrelBase.Char)
								   (PrelBase.ZMZN PrelBase.Char)
								   t36
								   t37
								   t38)
								  ->
								  PrelBase.ZMZN LexCore.Token ->
								  ErrM.Err a)
								 ->
								 PrelBase.ZMZN
								 (ParCore.HappyState
								  LexCore.Token
								  (ParCore.HappyStk
								   (ParCore.HappyAbsSyn
								    (PrelBase.ZMZN PrelBase.Char)
								    (PrelBase.ZMZN PrelBase.Char)
								    t36
								    t37
								    t38)
								   ->
								   PrelBase.ZMZN LexCore.Token ->
								   ErrM.Err a))
								 ->
								 ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  (PrelBase.ZMZN PrelBase.Char)
								  (PrelBase.ZMZN PrelBase.Char)
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a)
								->
								PrelBase.Int ->
								LexCore.Token ->
								ParCore.HappyState
								LexCore.Token
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  (PrelBase.ZMZN PrelBase.Char)
								  (PrelBase.ZMZN PrelBase.Char)
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a)
								->
								PrelBase.ZMZN
								(ParCore.HappyState
								 LexCore.Token
								 (ParCore.HappyStk
								  (ParCore.HappyAbsSyn
								   (PrelBase.ZMZN PrelBase.Char)
								   (PrelBase.ZMZN PrelBase.Char)
								   t36
								   t37
								   t38)
								  ->
								  PrelBase.ZMZN LexCore.Token ->
								  ErrM.Err a))
								->
								ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 (PrelBase.ZMZN PrelBase.Char)
								 (PrelBase.ZMZN PrelBase.Char)
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a =
						   ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a)
						   @ (PrelBase.ZMZN PrelBase.Char)
						   @ (PrelBase.ZMZN PrelBase.Char) @ t36 @ t37 @ t38
						   PrelNum.zdfNumInt
					    %in \ (ds::t) ->
						    %case zddNum %of (tpl::PrelNum.ZCTNum t)
						      {PrelNum.ZdwZCDNum
						       (tpl1::PrelBase.ZCTEq t)
						       (tpl2::PrelShow.ZCTShow t)
						       (tpl3::t -> t -> t)
						       (tpl4::t -> t -> t)
						       (tpl5::t -> t -> t)
						       (tpl6::t -> t)
						       (tpl7::t -> t)
						       (tpl8::t -> t)
						       (tpl9::PrelNum.Integer -> t) ->
							 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
							   {PrelBase.ZdwZCDEq
							    (tpl11::t -> t -> PrelBase.Bool)
							    (tpl12::t -> t -> PrelBase.Bool) ->
							      %case (tpl12 lit7 ds)
							      %of (wild::PrelBase.Bool)
								{PrelBase.ZdwTrue ->
								   happyShift4
								   (%note "InlineMe"
								    actionzu501
								    @ (PrelBase.ZMZN PrelBase.Char)
								    @ t36 @ t37 @ t38 @ a);
								 PrelBase.ZdwFalse ->
								   %case (tpl12 lit6 ds)
								   %of (wild1::PrelBase.Bool)
								     {PrelBase.ZdwTrue ->
									happyShift4
									(%note "InlineMe"
									 actionzu511
									 @ (PrelBase.ZMZN
									    PrelBase.Char)
									 @ t36 @ t37 @ t38 @ a);
								      PrelBase.ZdwFalse ->
									%case (tpl12 lit5 ds)
									%of (wild2::PrelBase.Bool)
									  {PrelBase.ZdwTrue ->
									     happyShift4
									     (ParCore.actionzu32
									      @ PrelBase.Int
									      @ LexCore.Token
									      @ (PrelBase.ZMZN
										 PrelBase.Char)
									      @ t36 @ t37 @ t38
									      @ a);
									   PrelBase.ZdwFalse ->
									     %case (tpl12 lit4 ds)
									     %of (wild3::PrelBase.Bool)
									       {PrelBase.ZdwTrue ->
										  ParCore.happyGoto
										  @ (ParCore.HappyState
										     LexCore.Token
										     (ParCore.HappyStk
										      (ParCore.HappyAbsSyn
										       (PrelBase.ZMZN
											PrelBase.Char)
										       (PrelBase.ZMZN
											PrelBase.Char)
										       t36
										       t37
										       t38)
										      ->
										      PrelBase.ZMZN
										      LexCore.Token
										      ->
										      ErrM.Err a))
										  @ LexCore.Token
										  @ (ParCore.HappyStk
										     (ParCore.HappyAbsSyn
										      (PrelBase.ZMZN
										       PrelBase.Char)
										      (PrelBase.ZMZN
										       PrelBase.Char)
										      t36
										      t37
										      t38)
										     ->
										     PrelBase.ZMZN
										     LexCore.Token
										     -> ErrM.Err a)
										  actionzu452;
										PrelBase.ZdwFalse ->
										  %case (tpl12 lit3
											 ds)
										  %of (wild4::PrelBase.Bool)
										    {PrelBase.ZdwTrue
										     ->
										       ParCore.happyGoto
										       @ (ParCore.HappyState
											  LexCore.Token
											  (ParCore.HappyStk
											   (ParCore.HappyAbsSyn
											    (PrelBase.ZMZN
											     PrelBase.Char)
											    (PrelBase.ZMZN
											     PrelBase.Char)
											    t36
											    t37
											    t38)
											   ->
											   PrelBase.ZMZN
											   LexCore.Token
											   ->
											   ErrM.Err
											   a))
										       @ LexCore.Token
										       @ (ParCore.HappyStk
											  (ParCore.HappyAbsSyn
											   (PrelBase.ZMZN
											    PrelBase.Char)
											   (PrelBase.ZMZN
											    PrelBase.Char)
											   t36
											   t37
											   t38)
											  ->
											  PrelBase.ZMZN
											  LexCore.Token
											  ->
											  ErrM.Err
											  a)
										       (ParCore.actionzu46
											@ PrelBase.Int
											@ LexCore.Token
											@ (PrelBase.ZMZN
											   PrelBase.Char)
											@ (PrelBase.ZMZN
											   PrelBase.Char)
											@ t36 @ t37
											@ t38 @ a);
										     PrelBase.ZdwFalse
										     ->
										       %case (tpl12
											      lit2
											      ds)
										       %of (wild5::PrelBase.Bool)
											 {PrelBase.ZdwTrue
											  ->
											    ParCore.happyGoto
											    @ (ParCore.HappyState
											       LexCore.Token
											       (ParCore.HappyStk
												(ParCore.HappyAbsSyn
												 (PrelBase.ZMZN
												  PrelBase.Char)
												 (PrelBase.ZMZN
												  PrelBase.Char)
												 t36
												 t37
												 t38)
												->
												PrelBase.ZMZN
												LexCore.Token
												->
												ErrM.Err
												a))
											    @ LexCore.Token
											    @ (ParCore.HappyStk
											       (ParCore.HappyAbsSyn
												(PrelBase.ZMZN
												 PrelBase.Char)
												(PrelBase.ZMZN
												 PrelBase.Char)
												t36
												t37
												t38)
											       ->
											       PrelBase.ZMZN
											       LexCore.Token
											       ->
											       ErrM.Err
											       a)
											    (%note "InlineMe"
											     actionzu471
											     @ (PrelBase.ZMZN
												PrelBase.Char)
											     @ t36
											     @ t37
											     @ t38
											     @ a);
											  PrelBase.ZdwFalse
											  ->
											    %case (tpl12
												   lit1
												   ds)
											    %of (wild6::PrelBase.Bool)
											      {PrelBase.ZdwTrue
											       ->
												 ParCore.happyGoto
												 @ (ParCore.HappyState
												    LexCore.Token
												    (ParCore.HappyStk
												     (ParCore.HappyAbsSyn
												      (PrelBase.ZMZN
												       PrelBase.Char)
												      (PrelBase.ZMZN
												       PrelBase.Char)
												      t36
												      t37
												      t38)
												     ->
												     PrelBase.ZMZN
												     LexCore.Token
												     ->
												     ErrM.Err
												     a))
												 @ LexCore.Token
												 @ (ParCore.HappyStk
												    (ParCore.HappyAbsSyn
												     (PrelBase.ZMZN
												      PrelBase.Char)
												     (PrelBase.ZMZN
												      PrelBase.Char)
												     t36
												     t37
												     t38)
												    ->
												    PrelBase.ZMZN
												    LexCore.Token
												    ->
												    ErrM.Err
												    a)
												 (ParCore.actionzu176
												  @ PrelBase.Int
												  @ LexCore.Token
												  @ (PrelBase.ZMZN
												     PrelBase.Char)
												  @ t36
												  @ t37
												  @ t38
												  @ a);
											       PrelBase.ZdwFalse
											       ->
												 %case (tpl12
													lit8
													ds)
												 %of (wild7::PrelBase.Bool)
												   {PrelBase.ZdwTrue
												    ->
												      ParCore.happyGoto
												      @ (ParCore.HappyState
													 LexCore.Token
													 (ParCore.HappyStk
													  (ParCore.HappyAbsSyn
													   (PrelBase.ZMZN
													    PrelBase.Char)
													   (PrelBase.ZMZN
													    PrelBase.Char)
													   t36
													   t37
													   t38)
													  ->
													  PrelBase.ZMZN
													  LexCore.Token
													  ->
													  ErrM.Err
													  a))
												      @ LexCore.Token
												      @ (ParCore.HappyStk
													 (ParCore.HappyAbsSyn
													  (PrelBase.ZMZN
													   PrelBase.Char)
													  (PrelBase.ZMZN
													   PrelBase.Char)
													  t36
													  t37
													  t38)
													 ->
													 PrelBase.ZMZN
													 LexCore.Token
													 ->
													 ErrM.Err
													 a)
												      (ParCore.actionzu49
												       @ PrelBase.Int
												       @ LexCore.Token
												       @ (PrelBase.ZMZN
													  PrelBase.Char)
												       @ (PrelBase.ZMZN
													  PrelBase.Char)
												       @ t36
												       @ t37
												       @ t38
												       @ a);
												    PrelBase.ZdwFalse
												    ->
												      ParCore.happyFail
												      @ a
												      @ LexCore.Token
												      @ (PrelBase.ZMZN
													 PrelBase.Char)
												      @ (PrelBase.ZMZN
													 PrelBase.Char)
												      @ t36
												      @ t37
												      @ t38}}}}}}}}}};
  ParCore.actionzu86 :: %forall t t36 t37 t38 a . PrelNum.ZCTNum t ->
						  t ->
						  PrelBase.Int ->
						  LexCore.Token ->
						  ParCore.HappyState
						  LexCore.Token
						  (ParCore.HappyStk
						   (ParCore.HappyAbsSyn
						    (PrelBase.ZMZN PrelBase.Char)
						    (PrelBase.ZMZN PrelBase.Char)
						    t36
						    t37
						    t38)
						   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						  ->
						  PrelBase.ZMZN
						  (ParCore.HappyState
						   LexCore.Token
						   (ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     (PrelBase.ZMZN PrelBase.Char)
						     t36
						     t37
						     t38)
						    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						  ->
						  ParCore.HappyStk
						  (ParCore.HappyAbsSyn
						   (PrelBase.ZMZN PrelBase.Char)
						   (PrelBase.ZMZN PrelBase.Char)
						   t36
						   t37
						   t38)
						  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t @ t36 @ t37 @ t38 @ a (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (98::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (35::PrelGHC.Intzh))}
	    %in %let actionzu1351 :: PrelBase.Int ->
				     PrelBase.Int ->
				     LexCore.Token ->
				     ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       t36
				       t37
				       t38)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				     ->
				     PrelBase.ZMZN
				     (ParCore.HappyState
				      LexCore.Token
				      (ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					(PrelBase.ZMZN PrelBase.Char)
					t36
					t37
					t38)
				       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				     ->
				     ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      t36
				      t37
				      t38)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
		       ParCore.actionzu135 @ PrelBase.Int @ t36 @ t37 @ t38 @ a
		       PrelNum.zdfNumInt
		%in %let happyShift4 :: (PrelBase.Int ->
					 PrelBase.Int ->
					 LexCore.Token ->
					 ParCore.HappyState
					 LexCore.Token
					 (ParCore.HappyStk
					  (ParCore.HappyAbsSyn
					   (PrelBase.ZMZN PrelBase.Char)
					   (PrelBase.ZMZN PrelBase.Char)
					   t36
					   t37
					   t38)
					  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
					 ->
					 PrelBase.ZMZN
					 (ParCore.HappyState
					  LexCore.Token
					  (ParCore.HappyStk
					   (ParCore.HappyAbsSyn
					    (PrelBase.ZMZN PrelBase.Char)
					    (PrelBase.ZMZN PrelBase.Char)
					    t36
					    t37
					    t38)
					   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
					 ->
					 ParCore.HappyStk
					 (ParCore.HappyAbsSyn
					  (PrelBase.ZMZN PrelBase.Char)
					  (PrelBase.ZMZN PrelBase.Char)
					  t36
					  t37
					  t38)
					 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
					->
					PrelBase.Int ->
					LexCore.Token ->
					ParCore.HappyState
					LexCore.Token
					(ParCore.HappyStk
					 (ParCore.HappyAbsSyn
					  (PrelBase.ZMZN PrelBase.Char)
					  (PrelBase.ZMZN PrelBase.Char)
					  t36
					  t37
					  t38)
					 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
					->
					PrelBase.ZMZN
					(ParCore.HappyState
					 LexCore.Token
					 (ParCore.HappyStk
					  (ParCore.HappyAbsSyn
					   (PrelBase.ZMZN PrelBase.Char)
					   (PrelBase.ZMZN PrelBase.Char)
					   t36
					   t37
					   t38)
					  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
					->
					ParCore.HappyStk
					(ParCore.HappyAbsSyn
					 (PrelBase.ZMZN PrelBase.Char)
					 (PrelBase.ZMZN PrelBase.Char)
					 t36
					 t37
					 t38)
					-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
			   ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a)
			   @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
			   @ t36 @ t37 @ t38 PrelNum.zdfNumInt
		    %in \ (ds::t) ->
			    %case zddNum %of (tpl::PrelNum.ZCTNum t)
			      {PrelNum.ZdwZCDNum
			       (tpl1::PrelBase.ZCTEq t)
			       (tpl2::PrelShow.ZCTShow t)
			       (tpl3::t -> t -> t)
			       (tpl4::t -> t -> t)
			       (tpl5::t -> t -> t)
			       (tpl6::t -> t)
			       (tpl7::t -> t)
			       (tpl8::t -> t)
			       (tpl9::PrelNum.Integer -> t) ->
				 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
				   {PrelBase.ZdwZCDEq
				    (tpl11::t -> t -> PrelBase.Bool)
				    (tpl12::t -> t -> PrelBase.Bool) ->
				      %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
					{PrelBase.ZdwTrue ->
					   happyShift4
					   (ParCore.actionzu131 @ PrelBase.Int @ LexCore.Token
					    @ (PrelBase.ZMZN PrelBase.Char) @ t36 @ t37 @ t38 @ a);
					 PrelBase.ZdwFalse ->
					   %case (tpl12 lit2 ds) %of (wild1::PrelBase.Bool)
					     {PrelBase.ZdwTrue ->
						ParCore.happyGoto
						@ (ParCore.HappyState
						   LexCore.Token
						   (ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     (PrelBase.ZMZN PrelBase.Char)
						     t36
						     t37
						     t38)
						    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						@ LexCore.Token
						@ (ParCore.HappyStk
						   (ParCore.HappyAbsSyn
						    (PrelBase.ZMZN PrelBase.Char)
						    (PrelBase.ZMZN PrelBase.Char)
						    t36
						    t37
						    t38)
						   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						actionzu1351;
					      PrelBase.ZdwFalse ->
						ParCore.happyFail @ a @ LexCore.Token
						@ (PrelBase.ZMZN PrelBase.Char)
						@ (PrelBase.ZMZN PrelBase.Char) @ t36 @ t37
						@ t38}}}};
  actionzu861 :: PrelBase.Int ->
		 PrelBase.Int ->
		 LexCore.Token ->
		 ParCore.HappyState
		 LexCore.Token
		 (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char)
		  ->
		  PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char))
		 ->
		 PrelBase.ZMZN
		 (ParCore.HappyState
		  LexCore.Token
		  (ParCore.HappyStk
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char)
		   ->
		   PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char)))
		 ->
		 ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char)
		 ->
		 PrelBase.ZMZN LexCore.Token ->
		 ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char) =
    ParCore.actionzu86 @ PrelBase.Int @ PrelNum.Integer
    @ PrelFloat.Double @ PrelBase.Char
    @ (ParCore.HappyAbsSyn
       (PrelBase.ZMZN PrelBase.Char)
       (PrelBase.ZMZN PrelBase.Char)
       PrelNum.Integer
       PrelFloat.Double
       PrelBase.Char)
    PrelNum.zdfNumInt;
  ParCore.actionzu104 :: %forall t t35 t36 t37 t38 a . PrelNum.ZCTNum
						       t
						       ->
						       t ->
						       PrelBase.Int ->
						       LexCore.Token ->
						       ParCore.HappyState
						       LexCore.Token
						       (ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38)
							->
							PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						       ->
						       PrelBase.ZMZN
						       (ParCore.HappyState
							LexCore.Token
							(ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						       ->
						       ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)
						       ->
						       PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t @ t35 @ t36 @ t37 @ t38 @ a (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (64::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (63::PrelGHC.Intzh))}
	    %in %let lit3 :: t =
		       %case zddNum %of (tpl::PrelNum.ZCTNum t)
			 {PrelNum.ZdwZCDNum
			  (tpl1::PrelBase.ZCTEq t)
			  (tpl2::PrelShow.ZCTShow t)
			  (tpl3::t -> t -> t)
			  (tpl4::t -> t -> t)
			  (tpl5::t -> t -> t)
			  (tpl6::t -> t)
			  (tpl7::t -> t)
			  (tpl8::t -> t)
			  (tpl9::PrelNum.Integer -> t) ->
			    tpl9 (PrelNum.ZdwSzh (62::PrelGHC.Intzh))}
		%in %let lit4 :: t =
			   %case zddNum %of (tpl::PrelNum.ZCTNum t)
			     {PrelNum.ZdwZCDNum
			      (tpl1::PrelBase.ZCTEq t)
			      (tpl2::PrelShow.ZCTShow t)
			      (tpl3::t -> t -> t)
			      (tpl4::t -> t -> t)
			      (tpl5::t -> t -> t)
			      (tpl6::t -> t)
			      (tpl7::t -> t)
			      (tpl8::t -> t)
			      (tpl9::PrelNum.Integer -> t) ->
				tpl9 (PrelNum.ZdwSzh (34::PrelGHC.Intzh))}
		    %in %let lit5 :: t =
			       %case zddNum %of (tpl::PrelNum.ZCTNum t)
				 {PrelNum.ZdwZCDNum
				  (tpl1::PrelBase.ZCTEq t)
				  (tpl2::PrelShow.ZCTShow t)
				  (tpl3::t -> t -> t)
				  (tpl4::t -> t -> t)
				  (tpl5::t -> t -> t)
				  (tpl6::t -> t)
				  (tpl7::t -> t)
				  (tpl8::t -> t)
				  (tpl9::PrelNum.Integer -> t) ->
				    tpl9 (PrelNum.ZdwSzh (97::PrelGHC.Intzh))}
			%in %let lit6 :: t =
				   %case zddNum %of (tpl::PrelNum.ZCTNum t)
				     {PrelNum.ZdwZCDNum
				      (tpl1::PrelBase.ZCTEq t)
				      (tpl2::PrelShow.ZCTShow t)
				      (tpl3::t -> t -> t)
				      (tpl4::t -> t -> t)
				      (tpl5::t -> t -> t)
				      (tpl6::t -> t)
				      (tpl7::t -> t)
				      (tpl8::t -> t)
				      (tpl9::PrelNum.Integer -> t) ->
					tpl9 (PrelNum.ZdwSzh (92::PrelGHC.Intzh))}
			    %in %let lit7 :: t =
				       %case zddNum %of (tpl::PrelNum.ZCTNum t)
					 {PrelNum.ZdwZCDNum
					  (tpl1::PrelBase.ZCTEq t)
					  (tpl2::PrelShow.ZCTShow t)
					  (tpl3::t -> t -> t)
					  (tpl4::t -> t -> t)
					  (tpl5::t -> t -> t)
					  (tpl6::t -> t)
					  (tpl7::t -> t)
					  (tpl8::t -> t)
					  (tpl9::PrelNum.Integer -> t) ->
					    tpl9 (PrelNum.ZdwSzh (89::PrelGHC.Intzh))}
				%in %let lit8 :: t =
					   %case zddNum %of (tpl::PrelNum.ZCTNum t)
					     {PrelNum.ZdwZCDNum
					      (tpl1::PrelBase.ZCTEq t)
					      (tpl2::PrelShow.ZCTShow t)
					      (tpl3::t -> t -> t)
					      (tpl4::t -> t -> t)
					      (tpl5::t -> t -> t)
					      (tpl6::t -> t)
					      (tpl7::t -> t)
					      (tpl8::t -> t)
					      (tpl9::PrelNum.Integer -> t) ->
						tpl9 (PrelNum.ZdwSzh (69::PrelGHC.Intzh))}
				    %in %let actionzu452 :: PrelBase.Int ->
							    PrelBase.Int ->
							    LexCore.Token ->
							    ParCore.HappyState
							    LexCore.Token
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      (PrelBase.ZMZN PrelBase.Char)
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a)
							    ->
							    PrelBase.ZMZN
							    (ParCore.HappyState
							     LexCore.Token
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       (PrelBase.ZMZN PrelBase.Char)
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a))
							    ->
							    ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     (PrelBase.ZMZN PrelBase.Char)
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err a =
					       ParCore.actionzu45 @ PrelBase.Int @ t35 @ t36 @ t37
					       @ t38 @ a PrelNum.zdfNumInt
					%in %let happyShift4 :: (PrelBase.Int ->
								 PrelBase.Int ->
								 LexCore.Token ->
								 ParCore.HappyState
								 LexCore.Token
								 (ParCore.HappyStk
								  (ParCore.HappyAbsSyn
								   (PrelBase.ZMZN PrelBase.Char)
								   t35
								   t36
								   t37
								   t38)
								  ->
								  PrelBase.ZMZN LexCore.Token ->
								  ErrM.Err a)
								 ->
								 PrelBase.ZMZN
								 (ParCore.HappyState
								  LexCore.Token
								  (ParCore.HappyStk
								   (ParCore.HappyAbsSyn
								    (PrelBase.ZMZN PrelBase.Char)
								    t35
								    t36
								    t37
								    t38)
								   ->
								   PrelBase.ZMZN LexCore.Token ->
								   ErrM.Err a))
								 ->
								 ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  (PrelBase.ZMZN PrelBase.Char)
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a)
								->
								PrelBase.Int ->
								LexCore.Token ->
								ParCore.HappyState
								LexCore.Token
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  (PrelBase.ZMZN PrelBase.Char)
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a)
								->
								PrelBase.ZMZN
								(ParCore.HappyState
								 LexCore.Token
								 (ParCore.HappyStk
								  (ParCore.HappyAbsSyn
								   (PrelBase.ZMZN PrelBase.Char)
								   t35
								   t36
								   t37
								   t38)
								  ->
								  PrelBase.ZMZN LexCore.Token ->
								  ErrM.Err a))
								->
								ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 (PrelBase.ZMZN PrelBase.Char)
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a =
						   ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a)
						   @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37
						   @ t38 PrelNum.zdfNumInt
					    %in \ (ds::t) ->
						    %case zddNum %of (tpl::PrelNum.ZCTNum t)
						      {PrelNum.ZdwZCDNum
						       (tpl1::PrelBase.ZCTEq t)
						       (tpl2::PrelShow.ZCTShow t)
						       (tpl3::t -> t -> t)
						       (tpl4::t -> t -> t)
						       (tpl5::t -> t -> t)
						       (tpl6::t -> t)
						       (tpl7::t -> t)
						       (tpl8::t -> t)
						       (tpl9::PrelNum.Integer -> t) ->
							 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
							   {PrelBase.ZdwZCDEq
							    (tpl11::t -> t -> PrelBase.Bool)
							    (tpl12::t -> t -> PrelBase.Bool) ->
							      %case (tpl12 lit7 ds)
							      %of (wild::PrelBase.Bool)
								{PrelBase.ZdwTrue ->
								   happyShift4
								   (%note "InlineMe"
								    actionzu501 @ t35 @ t36 @ t37
								    @ t38 @ a);
								 PrelBase.ZdwFalse ->
								   %case (tpl12 lit6 ds)
								   %of (wild1::PrelBase.Bool)
								     {PrelBase.ZdwTrue ->
									happyShift4
									(%note "InlineMe"
									 actionzu511 @ t35 @ t36
									 @ t37 @ t38 @ a);
								      PrelBase.ZdwFalse ->
									%case (tpl12 lit5 ds)
									%of (wild2::PrelBase.Bool)
									  {PrelBase.ZdwTrue ->
									     happyShift4
									     (ParCore.actionzu32
									      @ PrelBase.Int
									      @ LexCore.Token @ t35
									      @ t36 @ t37 @ t38
									      @ a);
									   PrelBase.ZdwFalse ->
									     %case (tpl12 lit4 ds)
									     %of (wild3::PrelBase.Bool)
									       {PrelBase.ZdwTrue ->
										  ParCore.happyGoto
										  @ (ParCore.HappyState
										     LexCore.Token
										     (ParCore.HappyStk
										      (ParCore.HappyAbsSyn
										       (PrelBase.ZMZN
											PrelBase.Char)
										       t35
										       t36
										       t37
										       t38)
										      ->
										      PrelBase.ZMZN
										      LexCore.Token
										      ->
										      ErrM.Err a))
										  @ LexCore.Token
										  @ (ParCore.HappyStk
										     (ParCore.HappyAbsSyn
										      (PrelBase.ZMZN
										       PrelBase.Char)
										      t35
										      t36
										      t37
										      t38)
										     ->
										     PrelBase.ZMZN
										     LexCore.Token
										     -> ErrM.Err a)
										  actionzu452;
										PrelBase.ZdwFalse ->
										  %case (tpl12 lit3
											 ds)
										  %of (wild4::PrelBase.Bool)
										    {PrelBase.ZdwTrue
										     ->
										       ParCore.happyGoto
										       @ (ParCore.HappyState
											  LexCore.Token
											  (ParCore.HappyStk
											   (ParCore.HappyAbsSyn
											    (PrelBase.ZMZN
											     PrelBase.Char)
											    t35
											    t36
											    t37
											    t38)
											   ->
											   PrelBase.ZMZN
											   LexCore.Token
											   ->
											   ErrM.Err
											   a))
										       @ LexCore.Token
										       @ (ParCore.HappyStk
											  (ParCore.HappyAbsSyn
											   (PrelBase.ZMZN
											    PrelBase.Char)
											   t35
											   t36
											   t37
											   t38)
											  ->
											  PrelBase.ZMZN
											  LexCore.Token
											  ->
											  ErrM.Err
											  a)
										       (ParCore.actionzu46
											@ PrelBase.Int
											@ LexCore.Token
											@ (PrelBase.ZMZN
											   PrelBase.Char)
											@ t35 @ t36
											@ t37 @ t38
											@ a);
										     PrelBase.ZdwFalse
										     ->
										       %case (tpl12
											      lit2
											      ds)
										       %of (wild5::PrelBase.Bool)
											 {PrelBase.ZdwTrue
											  ->
											    ParCore.happyGoto
											    @ (ParCore.HappyState
											       LexCore.Token
											       (ParCore.HappyStk
												(ParCore.HappyAbsSyn
												 (PrelBase.ZMZN
												  PrelBase.Char)
												 t35
												 t36
												 t37
												 t38)
												->
												PrelBase.ZMZN
												LexCore.Token
												->
												ErrM.Err
												a))
											    @ LexCore.Token
											    @ (ParCore.HappyStk
											       (ParCore.HappyAbsSyn
												(PrelBase.ZMZN
												 PrelBase.Char)
												t35
												t36
												t37
												t38)
											       ->
											       PrelBase.ZMZN
											       LexCore.Token
											       ->
											       ErrM.Err
											       a)
											    (%note "InlineMe"
											     actionzu471
											     @ t35
											     @ t36
											     @ t37
											     @ t38
											     @ a);
											  PrelBase.ZdwFalse
											  ->
											    %case (tpl12
												   lit1
												   ds)
											    %of (wild6::PrelBase.Bool)
											      {PrelBase.ZdwTrue
											       ->
												 ParCore.happyGoto
												 @ (ParCore.HappyState
												    LexCore.Token
												    (ParCore.HappyStk
												     (ParCore.HappyAbsSyn
												      (PrelBase.ZMZN
												       PrelBase.Char)
												      t35
												      t36
												      t37
												      t38)
												     ->
												     PrelBase.ZMZN
												     LexCore.Token
												     ->
												     ErrM.Err
												     a))
												 @ LexCore.Token
												 @ (ParCore.HappyStk
												    (ParCore.HappyAbsSyn
												     (PrelBase.ZMZN
												      PrelBase.Char)
												     t35
												     t36
												     t37
												     t38)
												    ->
												    PrelBase.ZMZN
												    LexCore.Token
												    ->
												    ErrM.Err
												    a)
												 (ParCore.actionzu115
												  @ PrelBase.Int
												  @ LexCore.Token
												  @ (PrelBase.ZMZN
												     PrelBase.Char)
												  @ t35
												  @ t36
												  @ t37
												  @ t38
												  @ a);
											       PrelBase.ZdwFalse
											       ->
												 %case (tpl12
													lit8
													ds)
												 %of (wild7::PrelBase.Bool)
												   {PrelBase.ZdwTrue
												    ->
												      ParCore.happyGoto
												      @ (ParCore.HappyState
													 LexCore.Token
													 (ParCore.HappyStk
													  (ParCore.HappyAbsSyn
													   (PrelBase.ZMZN
													    PrelBase.Char)
													   t35
													   t36
													   t37
													   t38)
													  ->
													  PrelBase.ZMZN
													  LexCore.Token
													  ->
													  ErrM.Err
													  a))
												      @ LexCore.Token
												      @ (ParCore.HappyStk
													 (ParCore.HappyAbsSyn
													  (PrelBase.ZMZN
													   PrelBase.Char)
													  t35
													  t36
													  t37
													  t38)
													 ->
													 PrelBase.ZMZN
													 LexCore.Token
													 ->
													 ErrM.Err
													 a)
												      (ParCore.actionzu49
												       @ PrelBase.Int
												       @ LexCore.Token
												       @ (PrelBase.ZMZN
													  PrelBase.Char)
												       @ t35
												       @ t36
												       @ t37
												       @ t38
												       @ a);
												    PrelBase.ZdwFalse
												    ->
												      ParCore.happyFail
												      @ a
												      @ LexCore.Token
												      @ (PrelBase.ZMZN
													 PrelBase.Char)
												      @ t35
												      @ t36
												      @ t37
												      @ t38}}}}}}}}}};
  ParCore.actionzu73 :: %forall t t35 t36 t37 t38 a . PrelNum.ZCTNum
						      t
						      ->
						      t ->
						      PrelBase.Int ->
						      LexCore.Token ->
						      ParCore.HappyState
						      LexCore.Token
						      (ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)
						       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						      ->
						      PrelBase.ZMZN
						      (ParCore.HappyState
						       LexCore.Token
						       (ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38)
							->
							PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						      ->
						      ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t @ t35 @ t36 @ t37 @ t38 @ a (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (34::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (97::PrelGHC.Intzh))}
	    %in %let lit3 :: t =
		       %case zddNum %of (tpl::PrelNum.ZCTNum t)
			 {PrelNum.ZdwZCDNum
			  (tpl1::PrelBase.ZCTEq t)
			  (tpl2::PrelShow.ZCTShow t)
			  (tpl3::t -> t -> t)
			  (tpl4::t -> t -> t)
			  (tpl5::t -> t -> t)
			  (tpl6::t -> t)
			  (tpl7::t -> t)
			  (tpl8::t -> t)
			  (tpl9::PrelNum.Integer -> t) ->
			    tpl9 (PrelNum.ZdwSzh (89::PrelGHC.Intzh))}
		%in %let lit4 :: t =
			   %case zddNum %of (tpl::PrelNum.ZCTNum t)
			     {PrelNum.ZdwZCDNum
			      (tpl1::PrelBase.ZCTEq t)
			      (tpl2::PrelShow.ZCTShow t)
			      (tpl3::t -> t -> t)
			      (tpl4::t -> t -> t)
			      (tpl5::t -> t -> t)
			      (tpl6::t -> t)
			      (tpl7::t -> t)
			      (tpl8::t -> t)
			      (tpl9::PrelNum.Integer -> t) ->
				tpl9 (PrelNum.ZdwSzh (58::PrelGHC.Intzh))}
		    %in %let actionzu602 :: PrelBase.Int ->
					    PrelBase.Int ->
					    LexCore.Token ->
					    ParCore.HappyState
					    LexCore.Token
					    (ParCore.HappyStk
					     (ParCore.HappyAbsSyn
					      (PrelBase.ZMZN PrelBase.Char)
					      t35
					      t36
					      t37
					      t38)
					     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
					    ->
					    PrelBase.ZMZN
					    (ParCore.HappyState
					     LexCore.Token
					     (ParCore.HappyStk
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38)
					      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
					    ->
					    ParCore.HappyStk
					    (ParCore.HappyAbsSyn
					     (PrelBase.ZMZN PrelBase.Char)
					     t35
					     t36
					     t37
					     t38)
					    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
			       ParCore.actionzu60 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38 @ a
			       PrelNum.zdfNumInt
			%in %let happyShift4 :: (PrelBase.Int ->
						 PrelBase.Int ->
						 LexCore.Token ->
						 ParCore.HappyState
						 LexCore.Token
						 (ParCore.HappyStk
						  (ParCore.HappyAbsSyn
						   (PrelBase.ZMZN PrelBase.Char)
						   t35
						   t36
						   t37
						   t38)
						  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						 ->
						 PrelBase.ZMZN
						 (ParCore.HappyState
						  LexCore.Token
						  (ParCore.HappyStk
						   (ParCore.HappyAbsSyn
						    (PrelBase.ZMZN PrelBase.Char)
						    t35
						    t36
						    t37
						    t38)
						   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						 ->
						 ParCore.HappyStk
						 (ParCore.HappyAbsSyn
						  (PrelBase.ZMZN PrelBase.Char)
						  t35
						  t36
						  t37
						  t38)
						 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						->
						PrelBase.Int ->
						LexCore.Token ->
						ParCore.HappyState
						LexCore.Token
						(ParCore.HappyStk
						 (ParCore.HappyAbsSyn
						  (PrelBase.ZMZN PrelBase.Char)
						  t35
						  t36
						  t37
						  t38)
						 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						->
						PrelBase.ZMZN
						(ParCore.HappyState
						 LexCore.Token
						 (ParCore.HappyStk
						  (ParCore.HappyAbsSyn
						   (PrelBase.ZMZN PrelBase.Char)
						   t35
						   t36
						   t37
						   t38)
						  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						->
						ParCore.HappyStk
						(ParCore.HappyAbsSyn
						 (PrelBase.ZMZN PrelBase.Char)
						 t35
						 t36
						 t37
						 t38)
						-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
				   ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a)
				   @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38
				   PrelNum.zdfNumInt
			    %in \ (ds::t) ->
				    %case zddNum %of (tpl::PrelNum.ZCTNum t)
				      {PrelNum.ZdwZCDNum
				       (tpl1::PrelBase.ZCTEq t)
				       (tpl2::PrelShow.ZCTShow t)
				       (tpl3::t -> t -> t)
				       (tpl4::t -> t -> t)
				       (tpl5::t -> t -> t)
				       (tpl6::t -> t)
				       (tpl7::t -> t)
				       (tpl8::t -> t)
				       (tpl9::PrelNum.Integer -> t) ->
					 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
					   {PrelBase.ZdwZCDEq
					    (tpl11::t -> t -> PrelBase.Bool)
					    (tpl12::t -> t -> PrelBase.Bool) ->
					      %case (tpl12 lit3 ds) %of (wild::PrelBase.Bool)
						{PrelBase.ZdwTrue ->
						   happyShift4 actionzu602;
						 PrelBase.ZdwFalse ->
						   %case (tpl12 lit2 ds) %of (wild1::PrelBase.Bool)
						     {PrelBase.ZdwTrue ->
							happyShift4
							(ParCore.actionzu32 @ PrelBase.Int
							 @ LexCore.Token @ t35 @ t36 @ t37 @ t38
							 @ a);
						      PrelBase.ZdwFalse ->
							%case (tpl12 lit1 ds)
							%of (wild2::PrelBase.Bool)
							  {PrelBase.ZdwTrue ->
							     ParCore.happyGoto
							     @ (ParCore.HappyState
								LexCore.Token
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  (PrelBase.ZMZN PrelBase.Char)
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							     @ LexCore.Token
							     @ (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 (PrelBase.ZMZN PrelBase.Char)
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							     (ParCore.actionzu58 @ PrelBase.Int
							      @ LexCore.Token @ t35 @ t36 @ t37
							      @ t38 @ a);
							   PrelBase.ZdwFalse ->
							     %case (tpl12 lit4 ds)
							     %of (wild3::PrelBase.Bool)
							       {PrelBase.ZdwTrue ->
								  ParCore.happyGoto
								  @ (ParCore.HappyState
								     LexCore.Token
								     (ParCore.HappyStk
								      (ParCore.HappyAbsSyn
								       (PrelBase.ZMZN PrelBase.Char)
								       t35
								       t36
								       t37
								       t38)
								      ->
								      PrelBase.ZMZN LexCore.Token ->
								      ErrM.Err a))
								  @ LexCore.Token
								  @ (ParCore.HappyStk
								     (ParCore.HappyAbsSyn
								      (PrelBase.ZMZN PrelBase.Char)
								      t35
								      t36
								      t37
								      t38)
								     ->
								     PrelBase.ZMZN LexCore.Token ->
								     ErrM.Err a)
								  (ParCore.actionzu141
								   @ PrelBase.Int @ LexCore.Token
								   @ (PrelBase.ZMZN PrelBase.Char)
								   @ t35 @ t36 @ t37 @ t38 @ a);
								PrelBase.ZdwFalse ->
								  ParCore.happyFail @ a
								  @ LexCore.Token
								  @ (PrelBase.ZMZN PrelBase.Char)
								  @ t35 @ t36 @ t37 @ t38}}}}}};
  ParCore.actionzu56 :: %forall t t35 t36 t37 t38 a . PrelNum.ZCTNum
						      t
						      ->
						      t ->
						      PrelBase.Int ->
						      LexCore.Token ->
						      ParCore.HappyState
						      LexCore.Token
						      (ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)
						       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						      ->
						      PrelBase.ZMZN
						      (ParCore.HappyState
						       LexCore.Token
						       (ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38)
							->
							PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						      ->
						      ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t @ t35 @ t36 @ t37 @ t38 @ a (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (34::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (97::PrelGHC.Intzh))}
	    %in %let lit3 :: t =
		       %case zddNum %of (tpl::PrelNum.ZCTNum t)
			 {PrelNum.ZdwZCDNum
			  (tpl1::PrelBase.ZCTEq t)
			  (tpl2::PrelShow.ZCTShow t)
			  (tpl3::t -> t -> t)
			  (tpl4::t -> t -> t)
			  (tpl5::t -> t -> t)
			  (tpl6::t -> t)
			  (tpl7::t -> t)
			  (tpl8::t -> t)
			  (tpl9::PrelNum.Integer -> t) ->
			    tpl9 (PrelNum.ZdwSzh (89::PrelGHC.Intzh))}
		%in %let lit4 :: t =
			   %case zddNum %of (tpl::PrelNum.ZCTNum t)
			     {PrelNum.ZdwZCDNum
			      (tpl1::PrelBase.ZCTEq t)
			      (tpl2::PrelShow.ZCTShow t)
			      (tpl3::t -> t -> t)
			      (tpl4::t -> t -> t)
			      (tpl5::t -> t -> t)
			      (tpl6::t -> t)
			      (tpl7::t -> t)
			      (tpl8::t -> t)
			      (tpl9::PrelNum.Integer -> t) ->
				tpl9 (PrelNum.ZdwSzh (58::PrelGHC.Intzh))}
		    %in %let actionzu602 :: PrelBase.Int ->
					    PrelBase.Int ->
					    LexCore.Token ->
					    ParCore.HappyState
					    LexCore.Token
					    (ParCore.HappyStk
					     (ParCore.HappyAbsSyn
					      (PrelBase.ZMZN PrelBase.Char)
					      t35
					      t36
					      t37
					      t38)
					     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
					    ->
					    PrelBase.ZMZN
					    (ParCore.HappyState
					     LexCore.Token
					     (ParCore.HappyStk
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38)
					      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
					    ->
					    ParCore.HappyStk
					    (ParCore.HappyAbsSyn
					     (PrelBase.ZMZN PrelBase.Char)
					     t35
					     t36
					     t37
					     t38)
					    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
			       ParCore.actionzu60 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38 @ a
			       PrelNum.zdfNumInt
			%in %let happyShift4 :: (PrelBase.Int ->
						 PrelBase.Int ->
						 LexCore.Token ->
						 ParCore.HappyState
						 LexCore.Token
						 (ParCore.HappyStk
						  (ParCore.HappyAbsSyn
						   (PrelBase.ZMZN PrelBase.Char)
						   t35
						   t36
						   t37
						   t38)
						  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						 ->
						 PrelBase.ZMZN
						 (ParCore.HappyState
						  LexCore.Token
						  (ParCore.HappyStk
						   (ParCore.HappyAbsSyn
						    (PrelBase.ZMZN PrelBase.Char)
						    t35
						    t36
						    t37
						    t38)
						   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						 ->
						 ParCore.HappyStk
						 (ParCore.HappyAbsSyn
						  (PrelBase.ZMZN PrelBase.Char)
						  t35
						  t36
						  t37
						  t38)
						 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						->
						PrelBase.Int ->
						LexCore.Token ->
						ParCore.HappyState
						LexCore.Token
						(ParCore.HappyStk
						 (ParCore.HappyAbsSyn
						  (PrelBase.ZMZN PrelBase.Char)
						  t35
						  t36
						  t37
						  t38)
						 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						->
						PrelBase.ZMZN
						(ParCore.HappyState
						 LexCore.Token
						 (ParCore.HappyStk
						  (ParCore.HappyAbsSyn
						   (PrelBase.ZMZN PrelBase.Char)
						   t35
						   t36
						   t37
						   t38)
						  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						->
						ParCore.HappyStk
						(ParCore.HappyAbsSyn
						 (PrelBase.ZMZN PrelBase.Char)
						 t35
						 t36
						 t37
						 t38)
						-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
				   ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a)
				   @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38
				   PrelNum.zdfNumInt
			    %in \ (ds::t) ->
				    %case zddNum %of (tpl::PrelNum.ZCTNum t)
				      {PrelNum.ZdwZCDNum
				       (tpl1::PrelBase.ZCTEq t)
				       (tpl2::PrelShow.ZCTShow t)
				       (tpl3::t -> t -> t)
				       (tpl4::t -> t -> t)
				       (tpl5::t -> t -> t)
				       (tpl6::t -> t)
				       (tpl7::t -> t)
				       (tpl8::t -> t)
				       (tpl9::PrelNum.Integer -> t) ->
					 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
					   {PrelBase.ZdwZCDEq
					    (tpl11::t -> t -> PrelBase.Bool)
					    (tpl12::t -> t -> PrelBase.Bool) ->
					      %case (tpl12 lit3 ds) %of (wild::PrelBase.Bool)
						{PrelBase.ZdwTrue ->
						   happyShift4 actionzu602;
						 PrelBase.ZdwFalse ->
						   %case (tpl12 lit2 ds) %of (wild1::PrelBase.Bool)
						     {PrelBase.ZdwTrue ->
							happyShift4
							(ParCore.actionzu32 @ PrelBase.Int
							 @ LexCore.Token @ t35 @ t36 @ t37 @ t38
							 @ a);
						      PrelBase.ZdwFalse ->
							%case (tpl12 lit1 ds)
							%of (wild2::PrelBase.Bool)
							  {PrelBase.ZdwTrue ->
							     ParCore.happyGoto
							     @ (ParCore.HappyState
								LexCore.Token
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  (PrelBase.ZMZN PrelBase.Char)
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							     @ LexCore.Token
							     @ (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 (PrelBase.ZMZN PrelBase.Char)
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							     (ParCore.actionzu58 @ PrelBase.Int
							      @ LexCore.Token @ t35 @ t36 @ t37
							      @ t38 @ a);
							   PrelBase.ZdwFalse ->
							     %case (tpl12 lit4 ds)
							     %of (wild3::PrelBase.Bool)
							       {PrelBase.ZdwTrue ->
								  ParCore.happyGoto
								  @ (ParCore.HappyState
								     LexCore.Token
								     (ParCore.HappyStk
								      (ParCore.HappyAbsSyn
								       (PrelBase.ZMZN PrelBase.Char)
								       t35
								       t36
								       t37
								       t38)
								      ->
								      PrelBase.ZMZN LexCore.Token ->
								      ErrM.Err a))
								  @ LexCore.Token
								  @ (ParCore.HappyStk
								     (ParCore.HappyAbsSyn
								      (PrelBase.ZMZN PrelBase.Char)
								      t35
								      t36
								      t37
								      t38)
								     ->
								     PrelBase.ZMZN LexCore.Token ->
								     ErrM.Err a)
								  (ParCore.actionzu151
								   @ PrelBase.Int @ LexCore.Token
								   @ (PrelBase.ZMZN PrelBase.Char)
								   @ t35 @ t36 @ t37 @ t38 @ a);
								PrelBase.ZdwFalse ->
								  ParCore.happyFail @ a
								  @ LexCore.Token
								  @ (PrelBase.ZMZN PrelBase.Char)
								  @ t35 @ t36 @ t37 @ t38}}}}}};
  ParCore.actionzu116 :: %forall t t35 t36 t37 t38 a . PrelNum.ZCTNum
						       t
						       ->
						       t ->
						       PrelBase.Int ->
						       LexCore.Token ->
						       ParCore.HappyState
						       LexCore.Token
						       (ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38)
							->
							PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						       ->
						       PrelBase.ZMZN
						       (ParCore.HappyState
							LexCore.Token
							(ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						       ->
						       ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)
						       ->
						       PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t @ t35 @ t36 @ t37 @ t38 @ a (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (60::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (79::PrelGHC.Intzh))}
	    %in %let lit3 :: t =
		       %case zddNum %of (tpl::PrelNum.ZCTNum t)
			 {PrelNum.ZdwZCDNum
			  (tpl1::PrelBase.ZCTEq t)
			  (tpl2::PrelShow.ZCTShow t)
			  (tpl3::t -> t -> t)
			  (tpl4::t -> t -> t)
			  (tpl5::t -> t -> t)
			  (tpl6::t -> t)
			  (tpl7::t -> t)
			  (tpl8::t -> t)
			  (tpl9::PrelNum.Integer -> t) ->
			    tpl9 (PrelNum.ZdwSzh (65::PrelGHC.Intzh))}
		%in %let actionzu1901 :: PrelBase.Int ->
					 PrelBase.Int ->
					 LexCore.Token ->
					 ParCore.HappyState
					 LexCore.Token
					 (ParCore.HappyStk
					  (ParCore.HappyAbsSyn
					   (PrelBase.ZMZN PrelBase.Char)
					   t35
					   t36
					   t37
					   t38)
					  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
					 ->
					 PrelBase.ZMZN
					 (ParCore.HappyState
					  LexCore.Token
					  (ParCore.HappyStk
					   (ParCore.HappyAbsSyn
					    (PrelBase.ZMZN PrelBase.Char)
					    t35
					    t36
					    t37
					    t38)
					   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
					 ->
					 ParCore.HappyStk
					 (ParCore.HappyAbsSyn
					  (PrelBase.ZMZN PrelBase.Char)
					  t35
					  t36
					  t37
					  t38)
					 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
			   ParCore.actionzu190 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38 @ a
			   PrelNum.zdfNumInt
		    %in %let actionzu561 :: PrelBase.Int ->
					    PrelBase.Int ->
					    LexCore.Token ->
					    ParCore.HappyState
					    LexCore.Token
					    (ParCore.HappyStk
					     (ParCore.HappyAbsSyn
					      (PrelBase.ZMZN PrelBase.Char)
					      t35
					      t36
					      t37
					      t38)
					     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
					    ->
					    PrelBase.ZMZN
					    (ParCore.HappyState
					     LexCore.Token
					     (ParCore.HappyStk
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38)
					      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
					    ->
					    ParCore.HappyStk
					    (ParCore.HappyAbsSyn
					     (PrelBase.ZMZN PrelBase.Char)
					     t35
					     t36
					     t37
					     t38)
					    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
			       ParCore.actionzu56 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38 @ a
			       PrelNum.zdfNumInt
			%in %let happyShift4 :: (PrelBase.Int ->
						 PrelBase.Int ->
						 LexCore.Token ->
						 ParCore.HappyState
						 LexCore.Token
						 (ParCore.HappyStk
						  (ParCore.HappyAbsSyn
						   (PrelBase.ZMZN PrelBase.Char)
						   t35
						   t36
						   t37
						   t38)
						  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						 ->
						 PrelBase.ZMZN
						 (ParCore.HappyState
						  LexCore.Token
						  (ParCore.HappyStk
						   (ParCore.HappyAbsSyn
						    (PrelBase.ZMZN PrelBase.Char)
						    t35
						    t36
						    t37
						    t38)
						   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						 ->
						 ParCore.HappyStk
						 (ParCore.HappyAbsSyn
						  (PrelBase.ZMZN PrelBase.Char)
						  t35
						  t36
						  t37
						  t38)
						 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						->
						PrelBase.Int ->
						LexCore.Token ->
						ParCore.HappyState
						LexCore.Token
						(ParCore.HappyStk
						 (ParCore.HappyAbsSyn
						  (PrelBase.ZMZN PrelBase.Char)
						  t35
						  t36
						  t37
						  t38)
						 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						->
						PrelBase.ZMZN
						(ParCore.HappyState
						 LexCore.Token
						 (ParCore.HappyStk
						  (ParCore.HappyAbsSyn
						   (PrelBase.ZMZN PrelBase.Char)
						   t35
						   t36
						   t37
						   t38)
						  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						->
						ParCore.HappyStk
						(ParCore.HappyAbsSyn
						 (PrelBase.ZMZN PrelBase.Char)
						 t35
						 t36
						 t37
						 t38)
						-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
				   ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a)
				   @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38
				   PrelNum.zdfNumInt
			    %in \ (ds::t) ->
				    %case zddNum %of (tpl::PrelNum.ZCTNum t)
				      {PrelNum.ZdwZCDNum
				       (tpl1::PrelBase.ZCTEq t)
				       (tpl2::PrelShow.ZCTShow t)
				       (tpl3::t -> t -> t)
				       (tpl4::t -> t -> t)
				       (tpl5::t -> t -> t)
				       (tpl6::t -> t)
				       (tpl7::t -> t)
				       (tpl8::t -> t)
				       (tpl9::PrelNum.Integer -> t) ->
					 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
					   {PrelBase.ZdwZCDEq
					    (tpl11::t -> t -> PrelBase.Bool)
					    (tpl12::t -> t -> PrelBase.Bool) ->
					      %case (tpl12 lit2 ds) %of (wild::PrelBase.Bool)
						{PrelBase.ZdwTrue ->
						   happyShift4 actionzu561;
						 PrelBase.ZdwFalse ->
						   %case (tpl12 lit1 ds) %of (wild1::PrelBase.Bool)
						     {PrelBase.ZdwTrue ->
							ParCore.happyGoto
							@ (ParCore.HappyState
							   LexCore.Token
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     (PrelBase.ZMZN PrelBase.Char)
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err a))
							@ LexCore.Token
							@ (ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    (PrelBase.ZMZN PrelBase.Char)
							    t35
							    t36
							    t37
							    t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err a)
							(ParCore.actionzu152 @ PrelBase.Int
							 @ LexCore.Token
							 @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36
							 @ t37 @ t38 @ a);
						      PrelBase.ZdwFalse ->
							%case (tpl12 lit3 ds)
							%of (wild2::PrelBase.Bool)
							  {PrelBase.ZdwTrue ->
							     ParCore.happyGoto
							     @ (ParCore.HappyState
								LexCore.Token
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  (PrelBase.ZMZN PrelBase.Char)
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							     @ LexCore.Token
							     @ (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 (PrelBase.ZMZN PrelBase.Char)
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							     actionzu1901;
							   PrelBase.ZdwFalse ->
							     ParCore.happyReducezu95 @ LexCore.Token
							     @ a @ (PrelBase.ZMZN PrelBase.Char)
							     @ t35 @ t36 @ t37 @ t38}}}}};
  ParCore.actionzu101 :: %forall t t35 t36 t37 t38 a . PrelNum.ZCTNum
						       t
						       ->
						       t ->
						       PrelBase.Int ->
						       LexCore.Token ->
						       ParCore.HappyState
						       LexCore.Token
						       (ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38)
							->
							PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						       ->
						       PrelBase.ZMZN
						       (ParCore.HappyState
							LexCore.Token
							(ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						       ->
						       ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)
						       ->
						       PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t @ t35 @ t36 @ t37 @ t38 @ a (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (61::PrelGHC.Intzh))}
	%in %let actionzu1161 :: PrelBase.Int ->
				 PrelBase.Int ->
				 LexCore.Token ->
				 ParCore.HappyState
				 LexCore.Token
				 (ParCore.HappyStk
				  (ParCore.HappyAbsSyn
				   (PrelBase.ZMZN PrelBase.Char)
				   t35
				   t36
				   t37
				   t38)
				  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				 ->
				 PrelBase.ZMZN
				 (ParCore.HappyState
				  LexCore.Token
				  (ParCore.HappyStk
				   (ParCore.HappyAbsSyn
				    (PrelBase.ZMZN PrelBase.Char)
				    t35
				    t36
				    t37
				    t38)
				   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				 ->
				 ParCore.HappyStk
				 (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
		   ParCore.actionzu116 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38 @ a
		   PrelNum.zdfNumInt
	    %in \ (ds::t) ->
		    %case zddNum %of (tpl::PrelNum.ZCTNum t)
		      {PrelNum.ZdwZCDNum
		       (tpl1::PrelBase.ZCTEq t)
		       (tpl2::PrelShow.ZCTShow t)
		       (tpl3::t -> t -> t)
		       (tpl4::t -> t -> t)
		       (tpl5::t -> t -> t)
		       (tpl6::t -> t)
		       (tpl7::t -> t)
		       (tpl8::t -> t)
		       (tpl9::PrelNum.Integer -> t) ->
			 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
			   {PrelBase.ZdwZCDEq
			    (tpl11::t -> t -> PrelBase.Bool)
			    (tpl12::t -> t -> PrelBase.Bool) ->
			      %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
				{PrelBase.ZdwTrue ->
				   ParCore.happyGoto
				   @ (ParCore.HappyState
				      LexCore.Token
				      (ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					t35
					t36
					t37
					t38)
				       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				   @ LexCore.Token
				   @ (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       t35
				       t36
				       t37
				       t38)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				   actionzu1161;
				 PrelBase.ZdwFalse ->
				   ParCore.happyReducezu85 @ LexCore.Token @ a
				   @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38}}};
  actionzu1011 :: %forall t35 t36 t37 t38 a . PrelBase.Int ->
					      PrelBase.Int ->
					      LexCore.Token ->
					      ParCore.HappyState
					      LexCore.Token
					      (ParCore.HappyStk
					       (ParCore.HappyAbsSyn
						(PrelBase.ZMZN PrelBase.Char)
						t35
						t36
						t37
						t38)
					       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
					      ->
					      PrelBase.ZMZN
					      (ParCore.HappyState
					       LexCore.Token
					       (ParCore.HappyStk
						(ParCore.HappyAbsSyn
						 (PrelBase.ZMZN PrelBase.Char)
						 t35
						 t36
						 t37
						 t38)
						-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
					      ->
					      ParCore.HappyStk
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38)
					      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t35 @ t36 @ t37 @ t38 @ a ->
	ParCore.actionzu101 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38 @ a
	PrelNum.zdfNumInt;
  actionzu332 :: %forall t35 t36 t37 t38 a . PrelBase.Int ->
					     PrelBase.Int ->
					     LexCore.Token ->
					     ParCore.HappyState
					     LexCore.Token
					     (ParCore.HappyStk
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38)
					      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
					     ->
					     PrelBase.ZMZN
					     (ParCore.HappyState
					      LexCore.Token
					      (ParCore.HappyStk
					       (ParCore.HappyAbsSyn
						(PrelBase.ZMZN PrelBase.Char)
						t35
						t36
						t37
						t38)
					       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
					     ->
					     ParCore.HappyStk
					     (ParCore.HappyAbsSyn
					      (PrelBase.ZMZN PrelBase.Char)
					      t35
					      t36
					      t37
					      t38)
					     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t35 @ t36 @ t37 @ t38 @ a ->
	ParCore.actionzu33 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38 @ a
	PrelNum.zdfNumInt;
  happyShift4 :: %forall t35 t36 t37 t38 a . (PrelBase.Int ->
					      PrelBase.Int ->
					      LexCore.Token ->
					      ParCore.HappyState
					      LexCore.Token
					      (ParCore.HappyStk
					       (ParCore.HappyAbsSyn
						(PrelBase.ZMZN PrelBase.Char)
						t35
						t36
						t37
						t38)
					       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
					      ->
					      PrelBase.ZMZN
					      (ParCore.HappyState
					       LexCore.Token
					       (ParCore.HappyStk
						(ParCore.HappyAbsSyn
						 (PrelBase.ZMZN PrelBase.Char)
						 t35
						 t36
						 t37
						 t38)
						-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
					      ->
					      ParCore.HappyStk
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38)
					      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
					     ->
					     PrelBase.Int ->
					     LexCore.Token ->
					     ParCore.HappyState
					     LexCore.Token
					     (ParCore.HappyStk
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38)
					      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
					     ->
					     PrelBase.ZMZN
					     (ParCore.HappyState
					      LexCore.Token
					      (ParCore.HappyStk
					       (ParCore.HappyAbsSyn
						(PrelBase.ZMZN PrelBase.Char)
						t35
						t36
						t37
						t38)
					       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
					     ->
					     ParCore.HappyStk
					     (ParCore.HappyAbsSyn
					      (PrelBase.ZMZN PrelBase.Char)
					      t35
					      t36
					      t37
					      t38)
					     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t35 @ t36 @ t37 @ t38 @ a ->
	ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a)
	@ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38
	PrelNum.zdfNumInt;
  %rec
  {actionzu1171 :: %forall t35 t36 t37 t38 a . PrelBase.Int ->
					       PrelBase.Int ->
					       LexCore.Token ->
					       ParCore.HappyState
					       LexCore.Token
					       (ParCore.HappyStk
						(ParCore.HappyAbsSyn
						 (PrelBase.ZMZN PrelBase.Char)
						 t35
						 t36
						 t37
						 t38)
						-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
					       ->
					       PrelBase.ZMZN
					       (ParCore.HappyState
						LexCore.Token
						(ParCore.HappyStk
						 (ParCore.HappyAbsSyn
						  (PrelBase.ZMZN PrelBase.Char)
						  t35
						  t36
						  t37
						  t38)
						 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
					       ->
					       ParCore.HappyStk
					       (ParCore.HappyAbsSyn
						(PrelBase.ZMZN PrelBase.Char)
						t35
						t36
						t37
						t38)
					       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
     \ @ t35 @ t36 @ t37 @ t38 @ a (ds::PrelBase.Int) ->
	 %case ds %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	      %case ds1 %of (ds2::PrelGHC.Intzh)
		{%_ ->
		   ParCore.happyFail @ a @ LexCore.Token
		   @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38;
		 (97::PrelGHC.Intzh) ->
		   happyShift4 @ t35 @ t36 @ t37 @ t38 @ a
		   (ParCore.actionzu32 @ PrelBase.Int @ LexCore.Token @ t35 @ t36
		    @ t37 @ t38 @ a);
		 (34::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu332 @ t35 @ t36 @ t37 @ t38 @ a);
		 (43::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu991 @ t35 @ t36 @ t37 @ t38 @ a);
		 (44::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu189 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38 @ a);
		 (69::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu1011 @ t35 @ t36 @ t37 @ t38 @ a)}};
   actionzu991 :: %forall t35 t36 t37 t38 a . PrelBase.Int ->
					      PrelBase.Int ->
					      LexCore.Token ->
					      ParCore.HappyState
					      LexCore.Token
					      (ParCore.HappyStk
					       (ParCore.HappyAbsSyn
						(PrelBase.ZMZN PrelBase.Char)
						t35
						t36
						t37
						t38)
					       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
					      ->
					      PrelBase.ZMZN
					      (ParCore.HappyState
					       LexCore.Token
					       (ParCore.HappyStk
						(ParCore.HappyAbsSyn
						 (PrelBase.ZMZN PrelBase.Char)
						 t35
						 t36
						 t37
						 t38)
						-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
					      ->
					      ParCore.HappyStk
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38)
					      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
     \ @ t35 @ t36 @ t37 @ t38 @ a (ds::PrelBase.Int) ->
	 %case ds %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	      %case ds1 %of (ds2::PrelGHC.Intzh)
		{%_ ->
		   ParCore.happyReducezu44 @ LexCore.Token @ a
		   @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38;
		 (71::PrelGHC.Intzh) ->
		   happyShift4 @ t35 @ t36 @ t37 @ t38 @ a
		   (%note "InlineMe"
		    actionzu1171 @ t35 @ t36 @ t37 @ t38 @ a)}}};
  ParCore.actionzu117 :: %forall t35 t36 t37 t38 a . PrelBase.Int ->
						     PrelBase.Int ->
						     LexCore.Token ->
						     ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						     ->
						     PrelBase.ZMZN
						     (ParCore.HappyState
						      LexCore.Token
						      (ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)
						       ->
						       PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						     ->
						     ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t35 @ t36 @ t37 @ t38 @ a ->
	%note "InlineMe"
	actionzu1171 @ t35 @ t36 @ t37 @ t38 @ a;
  ParCore.actionzu99 :: %forall t35 t36 t37 t38 a . PrelBase.Int ->
						    PrelBase.Int ->
						    LexCore.Token ->
						    ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						    ->
						    PrelBase.ZMZN
						    (ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						    ->
						    ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38)
						    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t35 @ t36 @ t37 @ t38 @ a ->
	%note "InlineMe"
	actionzu991 @ t35 @ t36 @ t37 @ t38 @ a;
  ParCore.happyReducezu77 :: %forall b a t35 t36 t37 t38 . PrelBase.Int
							   ->
							   b ->
							   ParCore.HappyState
							   b
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     (PrelBase.ZMZN PrelBase.Char)
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err a)
							   ->
							   PrelBase.ZMZN
							   (ParCore.HappyState
							    b
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      (PrelBase.ZMZN PrelBase.Char)
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a))
							   ->
							   ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    (PrelBase.ZMZN PrelBase.Char)
							    t35
							    t36
							    t37
							    t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err a =
    \ @ b
      @ a
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk
	      (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
	      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk
	       (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
	       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn
	      (PrelBase.ZMZN PrelBase.Char)
	      t35
	      t36
	      t37
	      t38)) ->
	ParCore.happyReduce @ a @ b @ (PrelBase.ZMZN PrelBase.Char) @ t35
	@ t36 @ t37 @ t38 (PrelBase.ZdwIzh (5::PrelGHC.Intzh))
	(PrelBase.ZdwIzh (56::PrelGHC.Intzh))
	(ParCore.happyReductionzu77 @ t35 @ t36 @ t37 @ t38) eta eta1 eta2
	eta3 eta4;
  ParCore.actionzu213 :: %forall t b t35 t36 t37 t38 a . t ->
							 PrelBase.Int ->
							 b ->
							 ParCore.HappyState
							 b
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   t38)
							  ->
							  PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
							 ->
							 PrelBase.ZMZN
							 (ParCore.HappyState
							  b
							  (ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    (PrelBase.ZMZN PrelBase.Char)
							    t35
							    t36
							    t37
							    t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err a))
							 ->
							 ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t
      @ b
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk
	      (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
	      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk
	       (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
	       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn
	      (PrelBase.ZMZN PrelBase.Char)
	      t35
	      t36
	      t37
	      t38)) ->
	ParCore.happyReducezu77 @ b @ a @ t35 @ t36 @ t37 @ t38 eta1 eta2
	eta3 eta4 eta5;
  ParCore.actionzu209 :: %forall t t35 t36 t37 t38 a . PrelNum.ZCTNum
						       t
						       ->
						       t ->
						       PrelBase.Int ->
						       LexCore.Token ->
						       ParCore.HappyState
						       LexCore.Token
						       (ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38)
							->
							PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						       ->
						       PrelBase.ZMZN
						       (ParCore.HappyState
							LexCore.Token
							(ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						       ->
						       ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)
						       ->
						       PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t @ t35 @ t36 @ t37 @ t38 @ a (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (90::PrelGHC.Intzh))}
	%in %let happyShift5 :: (PrelBase.Int ->
				 PrelBase.Int ->
				 LexCore.Token ->
				 ParCore.HappyState
				 LexCore.Token
				 (ParCore.HappyStk
				  (ParCore.HappyAbsSyn
				   (PrelBase.ZMZN PrelBase.Char)
				   t35
				   t36
				   t37
				   t38)
				  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				 ->
				 PrelBase.ZMZN
				 (ParCore.HappyState
				  LexCore.Token
				  (ParCore.HappyStk
				   (ParCore.HappyAbsSyn
				    (PrelBase.ZMZN PrelBase.Char)
				    t35
				    t36
				    t37
				    t38)
				   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				 ->
				 ParCore.HappyStk
				 (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				->
				PrelBase.Int ->
				LexCore.Token ->
				ParCore.HappyState
				LexCore.Token
				(ParCore.HappyStk
				 (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				->
				PrelBase.ZMZN
				(ParCore.HappyState
				 LexCore.Token
				 (ParCore.HappyStk
				  (ParCore.HappyAbsSyn
				   (PrelBase.ZMZN PrelBase.Char)
				   t35
				   t36
				   t37
				   t38)
				  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				->
				ParCore.HappyStk
				(ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
		   ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a)
		   @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38
		   PrelNum.zdfNumInt
	    %in \ (ds::t) ->
		    %case zddNum %of (tpl::PrelNum.ZCTNum t)
		      {PrelNum.ZdwZCDNum
		       (tpl1::PrelBase.ZCTEq t)
		       (tpl2::PrelShow.ZCTShow t)
		       (tpl3::t -> t -> t)
		       (tpl4::t -> t -> t)
		       (tpl5::t -> t -> t)
		       (tpl6::t -> t)
		       (tpl7::t -> t)
		       (tpl8::t -> t)
		       (tpl9::PrelNum.Integer -> t) ->
			 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
			   {PrelBase.ZdwZCDEq
			    (tpl11::t -> t -> PrelBase.Bool)
			    (tpl12::t -> t -> PrelBase.Bool) ->
			      %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
				{PrelBase.ZdwTrue ->
				   happyShift5
				   (ParCore.actionzu213 @ PrelBase.Int @ LexCore.Token @ t35 @ t36
				    @ t37 @ t38 @ a);
				 PrelBase.ZdwFalse ->
				   ParCore.happyFail @ a @ LexCore.Token
				   @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38}}};
  ParCore.actionzu166 :: %forall t t35 t36 t37 t38 a . PrelNum.ZCTNum
						       t
						       ->
						       t ->
						       PrelBase.Int ->
						       LexCore.Token ->
						       ParCore.HappyState
						       LexCore.Token
						       (ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38)
							->
							PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						       ->
						       PrelBase.ZMZN
						       (ParCore.HappyState
							LexCore.Token
							(ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						       ->
						       ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)
						       ->
						       PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t @ t35 @ t36 @ t37 @ t38 @ a (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (64::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (63::PrelGHC.Intzh))}
	    %in %let lit3 :: t =
		       %case zddNum %of (tpl::PrelNum.ZCTNum t)
			 {PrelNum.ZdwZCDNum
			  (tpl1::PrelBase.ZCTEq t)
			  (tpl2::PrelShow.ZCTShow t)
			  (tpl3::t -> t -> t)
			  (tpl4::t -> t -> t)
			  (tpl5::t -> t -> t)
			  (tpl6::t -> t)
			  (tpl7::t -> t)
			  (tpl8::t -> t)
			  (tpl9::PrelNum.Integer -> t) ->
			    tpl9 (PrelNum.ZdwSzh (62::PrelGHC.Intzh))}
		%in %let lit4 :: t =
			   %case zddNum %of (tpl::PrelNum.ZCTNum t)
			     {PrelNum.ZdwZCDNum
			      (tpl1::PrelBase.ZCTEq t)
			      (tpl2::PrelShow.ZCTShow t)
			      (tpl3::t -> t -> t)
			      (tpl4::t -> t -> t)
			      (tpl5::t -> t -> t)
			      (tpl6::t -> t)
			      (tpl7::t -> t)
			      (tpl8::t -> t)
			      (tpl9::PrelNum.Integer -> t) ->
				tpl9 (PrelNum.ZdwSzh (34::PrelGHC.Intzh))}
		    %in %let lit5 :: t =
			       %case zddNum %of (tpl::PrelNum.ZCTNum t)
				 {PrelNum.ZdwZCDNum
				  (tpl1::PrelBase.ZCTEq t)
				  (tpl2::PrelShow.ZCTShow t)
				  (tpl3::t -> t -> t)
				  (tpl4::t -> t -> t)
				  (tpl5::t -> t -> t)
				  (tpl6::t -> t)
				  (tpl7::t -> t)
				  (tpl8::t -> t)
				  (tpl9::PrelNum.Integer -> t) ->
				    tpl9 (PrelNum.ZdwSzh (97::PrelGHC.Intzh))}
			%in %let lit6 :: t =
				   %case zddNum %of (tpl::PrelNum.ZCTNum t)
				     {PrelNum.ZdwZCDNum
				      (tpl1::PrelBase.ZCTEq t)
				      (tpl2::PrelShow.ZCTShow t)
				      (tpl3::t -> t -> t)
				      (tpl4::t -> t -> t)
				      (tpl5::t -> t -> t)
				      (tpl6::t -> t)
				      (tpl7::t -> t)
				      (tpl8::t -> t)
				      (tpl9::PrelNum.Integer -> t) ->
					tpl9 (PrelNum.ZdwSzh (92::PrelGHC.Intzh))}
			    %in %let lit7 :: t =
				       %case zddNum %of (tpl::PrelNum.ZCTNum t)
					 {PrelNum.ZdwZCDNum
					  (tpl1::PrelBase.ZCTEq t)
					  (tpl2::PrelShow.ZCTShow t)
					  (tpl3::t -> t -> t)
					  (tpl4::t -> t -> t)
					  (tpl5::t -> t -> t)
					  (tpl6::t -> t)
					  (tpl7::t -> t)
					  (tpl8::t -> t)
					  (tpl9::PrelNum.Integer -> t) ->
					    tpl9 (PrelNum.ZdwSzh (89::PrelGHC.Intzh))}
				%in %let lit8 :: t =
					   %case zddNum %of (tpl::PrelNum.ZCTNum t)
					     {PrelNum.ZdwZCDNum
					      (tpl1::PrelBase.ZCTEq t)
					      (tpl2::PrelShow.ZCTShow t)
					      (tpl3::t -> t -> t)
					      (tpl4::t -> t -> t)
					      (tpl5::t -> t -> t)
					      (tpl6::t -> t)
					      (tpl7::t -> t)
					      (tpl8::t -> t)
					      (tpl9::PrelNum.Integer -> t) ->
						tpl9 (PrelNum.ZdwSzh (69::PrelGHC.Intzh))}
				    %in %let actionzu2091 :: PrelBase.Int ->
							     PrelBase.Int ->
							     LexCore.Token ->
							     ParCore.HappyState
							     LexCore.Token
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       (PrelBase.ZMZN PrelBase.Char)
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a)
							     ->
							     PrelBase.ZMZN
							     (ParCore.HappyState
							      LexCore.Token
							      (ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								(PrelBase.ZMZN PrelBase.Char)
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a))
							     ->
							     ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      (PrelBase.ZMZN PrelBase.Char)
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a =
					       ParCore.actionzu209 @ PrelBase.Int @ t35 @ t36 @ t37
					       @ t38 @ a PrelNum.zdfNumInt
					%in %let actionzu452 :: PrelBase.Int ->
								PrelBase.Int ->
								LexCore.Token ->
								ParCore.HappyState
								LexCore.Token
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  (PrelBase.ZMZN PrelBase.Char)
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a)
								->
								PrelBase.ZMZN
								(ParCore.HappyState
								 LexCore.Token
								 (ParCore.HappyStk
								  (ParCore.HappyAbsSyn
								   (PrelBase.ZMZN PrelBase.Char)
								   t35
								   t36
								   t37
								   t38)
								  ->
								  PrelBase.ZMZN LexCore.Token ->
								  ErrM.Err a))
								->
								ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 (PrelBase.ZMZN PrelBase.Char)
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a =
						   ParCore.actionzu45 @ PrelBase.Int @ t35 @ t36
						   @ t37 @ t38 @ a PrelNum.zdfNumInt
					    %in %let happyShift5 :: (PrelBase.Int ->
								     PrelBase.Int ->
								     LexCore.Token ->
								     ParCore.HappyState
								     LexCore.Token
								     (ParCore.HappyStk
								      (ParCore.HappyAbsSyn
								       (PrelBase.ZMZN PrelBase.Char)
								       t35
								       t36
								       t37
								       t38)
								      ->
								      PrelBase.ZMZN LexCore.Token ->
								      ErrM.Err a)
								     ->
								     PrelBase.ZMZN
								     (ParCore.HappyState
								      LexCore.Token
								      (ParCore.HappyStk
								       (ParCore.HappyAbsSyn
									(PrelBase.ZMZN
									 PrelBase.Char)
									t35
									t36
									t37
									t38)
								       ->
								       PrelBase.ZMZN LexCore.Token
								       -> ErrM.Err a))
								     ->
								     ParCore.HappyStk
								     (ParCore.HappyAbsSyn
								      (PrelBase.ZMZN PrelBase.Char)
								      t35
								      t36
								      t37
								      t38)
								     ->
								     PrelBase.ZMZN LexCore.Token ->
								     ErrM.Err a)
								    ->
								    PrelBase.Int ->
								    LexCore.Token ->
								    ParCore.HappyState
								    LexCore.Token
								    (ParCore.HappyStk
								     (ParCore.HappyAbsSyn
								      (PrelBase.ZMZN PrelBase.Char)
								      t35
								      t36
								      t37
								      t38)
								     ->
								     PrelBase.ZMZN LexCore.Token ->
								     ErrM.Err a)
								    ->
								    PrelBase.ZMZN
								    (ParCore.HappyState
								     LexCore.Token
								     (ParCore.HappyStk
								      (ParCore.HappyAbsSyn
								       (PrelBase.ZMZN PrelBase.Char)
								       t35
								       t36
								       t37
								       t38)
								      ->
								      PrelBase.ZMZN LexCore.Token ->
								      ErrM.Err a))
								    ->
								    ParCore.HappyStk
								    (ParCore.HappyAbsSyn
								     (PrelBase.ZMZN PrelBase.Char)
								     t35
								     t36
								     t37
								     t38)
								    ->
								    PrelBase.ZMZN LexCore.Token ->
								    ErrM.Err a =
						       ParCore.happyShift @ PrelBase.Int
						       @ (ErrM.Err a)
						       @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36
						       @ t37 @ t38 PrelNum.zdfNumInt
						%in \ (ds::t) ->
							%case zddNum %of (tpl::PrelNum.ZCTNum t)
							  {PrelNum.ZdwZCDNum
							   (tpl1::PrelBase.ZCTEq t)
							   (tpl2::PrelShow.ZCTShow t)
							   (tpl3::t -> t -> t)
							   (tpl4::t -> t -> t)
							   (tpl5::t -> t -> t)
							   (tpl6::t -> t)
							   (tpl7::t -> t)
							   (tpl8::t -> t)
							   (tpl9::PrelNum.Integer -> t) ->
							     %case tpl1
							     %of (tpl10::PrelBase.ZCTEq t)
							       {PrelBase.ZdwZCDEq
								(tpl11::t -> t -> PrelBase.Bool)
								(tpl12::t -> t -> PrelBase.Bool) ->
								  %case (tpl12 lit7 ds)
								  %of (wild::PrelBase.Bool)
								    {PrelBase.ZdwTrue ->
								       happyShift5
								       (%note "InlineMe"
									actionzu501 @ t35 @ t36
									@ t37 @ t38 @ a);
								     PrelBase.ZdwFalse ->
								       %case (tpl12 lit6 ds)
								       %of (wild1::PrelBase.Bool)
									 {PrelBase.ZdwTrue ->
									    happyShift5
									    (%note "InlineMe"
									     actionzu511 @ t35 @ t36
									     @ t37 @ t38 @ a);
									  PrelBase.ZdwFalse ->
									    %case (tpl12 lit5 ds)
									    %of (wild2::PrelBase.Bool)
									      {PrelBase.ZdwTrue ->
										 happyShift5
										 (ParCore.actionzu32
										  @ PrelBase.Int
										  @ LexCore.Token
										  @ t35 @ t36 @ t37
										  @ t38 @ a);
									       PrelBase.ZdwFalse ->
										 %case (tpl12 lit4
											ds)
										 %of (wild3::PrelBase.Bool)
										   {PrelBase.ZdwTrue
										    ->
										      ParCore.happyGoto
										      @ (ParCore.HappyState
											 LexCore.Token
											 (ParCore.HappyStk
											  (ParCore.HappyAbsSyn
											   (PrelBase.ZMZN
											    PrelBase.Char)
											   t35
											   t36
											   t37
											   t38)
											  ->
											  PrelBase.ZMZN
											  LexCore.Token
											  ->
											  ErrM.Err
											  a))
										      @ LexCore.Token
										      @ (ParCore.HappyStk
											 (ParCore.HappyAbsSyn
											  (PrelBase.ZMZN
											   PrelBase.Char)
											  t35
											  t36
											  t37
											  t38)
											 ->
											 PrelBase.ZMZN
											 LexCore.Token
											 ->
											 ErrM.Err a)
										      actionzu452;
										    PrelBase.ZdwFalse
										    ->
										      %case (tpl12
											     lit3
											     ds)
										      %of (wild4::PrelBase.Bool)
											{PrelBase.ZdwTrue
											 ->
											   ParCore.happyGoto
											   @ (ParCore.HappyState
											      LexCore.Token
											      (ParCore.HappyStk
											       (ParCore.HappyAbsSyn
												(PrelBase.ZMZN
												 PrelBase.Char)
												t35
												t36
												t37
												t38)
											       ->
											       PrelBase.ZMZN
											       LexCore.Token
											       ->
											       ErrM.Err
											       a))
											   @ LexCore.Token
											   @ (ParCore.HappyStk
											      (ParCore.HappyAbsSyn
											       (PrelBase.ZMZN
												PrelBase.Char)
											       t35
											       t36
											       t37
											       t38)
											      ->
											      PrelBase.ZMZN
											      LexCore.Token
											      ->
											      ErrM.Err
											      a)
											   (ParCore.actionzu46
											    @ PrelBase.Int
											    @ LexCore.Token
											    @ (PrelBase.ZMZN
											       PrelBase.Char)
											    @ t35
											    @ t36
											    @ t37
											    @ t38
											    @ a);
											 PrelBase.ZdwFalse
											 ->
											   %case (tpl12
												  lit2
												  ds)
											   %of (wild5::PrelBase.Bool)
											     {PrelBase.ZdwTrue
											      ->
												ParCore.happyGoto
												@ (ParCore.HappyState
												   LexCore.Token
												   (ParCore.HappyStk
												    (ParCore.HappyAbsSyn
												     (PrelBase.ZMZN
												      PrelBase.Char)
												     t35
												     t36
												     t37
												     t38)
												    ->
												    PrelBase.ZMZN
												    LexCore.Token
												    ->
												    ErrM.Err
												    a))
												@ LexCore.Token
												@ (ParCore.HappyStk
												   (ParCore.HappyAbsSyn
												    (PrelBase.ZMZN
												     PrelBase.Char)
												    t35
												    t36
												    t37
												    t38)
												   ->
												   PrelBase.ZMZN
												   LexCore.Token
												   ->
												   ErrM.Err
												   a)
												(%note "InlineMe"
												 actionzu471
												 @ t35
												 @ t36
												 @ t37
												 @ t38
												 @ a);
											      PrelBase.ZdwFalse
											      ->
												%case (tpl12
												       lit1
												       ds)
												%of (wild6::PrelBase.Bool)
												  {PrelBase.ZdwTrue
												   ->
												     ParCore.happyGoto
												     @ (ParCore.HappyState
													LexCore.Token
													(ParCore.HappyStk
													 (ParCore.HappyAbsSyn
													  (PrelBase.ZMZN
													   PrelBase.Char)
													  t35
													  t36
													  t37
													  t38)
													 ->
													 PrelBase.ZMZN
													 LexCore.Token
													 ->
													 ErrM.Err
													 a))
												     @ LexCore.Token
												     @ (ParCore.HappyStk
													(ParCore.HappyAbsSyn
													 (PrelBase.ZMZN
													  PrelBase.Char)
													 t35
													 t36
													 t37
													 t38)
													->
													PrelBase.ZMZN
													LexCore.Token
													->
													ErrM.Err
													a)
												     actionzu2091;
												   PrelBase.ZdwFalse
												   ->
												     %case (tpl12
													    lit8
													    ds)
												     %of (wild7::PrelBase.Bool)
												       {PrelBase.ZdwTrue
													->
													  ParCore.happyGoto
													  @ (ParCore.HappyState
													     LexCore.Token
													     (ParCore.HappyStk
													      (ParCore.HappyAbsSyn
													       (PrelBase.ZMZN
														PrelBase.Char)
													       t35
													       t36
													       t37
													       t38)
													      ->
													      PrelBase.ZMZN
													      LexCore.Token
													      ->
													      ErrM.Err
													      a))
													  @ LexCore.Token
													  @ (ParCore.HappyStk
													     (ParCore.HappyAbsSyn
													      (PrelBase.ZMZN
													       PrelBase.Char)
													      t35
													      t36
													      t37
													      t38)
													     ->
													     PrelBase.ZMZN
													     LexCore.Token
													     ->
													     ErrM.Err
													     a)
													  (ParCore.actionzu49
													   @ PrelBase.Int
													   @ LexCore.Token
													   @ (PrelBase.ZMZN
													      PrelBase.Char)
													   @ t35
													   @ t36
													   @ t37
													   @ t38
													   @ a);
													PrelBase.ZdwFalse
													->
													  ParCore.happyFail
													  @ a
													  @ LexCore.Token
													  @ (PrelBase.ZMZN
													     PrelBase.Char)
													  @ t35
													  @ t36
													  @ t37
													  @ t38}}}}}}}}}};
  ParCore.actionzu147 :: %forall t t35 t36 t37 t38 a . PrelNum.ZCTNum
						       t
						       ->
						       t ->
						       PrelBase.Int ->
						       LexCore.Token ->
						       ParCore.HappyState
						       LexCore.Token
						       (ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38)
							->
							PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						       ->
						       PrelBase.ZMZN
						       (ParCore.HappyState
							LexCore.Token
							(ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						       ->
						       ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)
						       ->
						       PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t @ t35 @ t36 @ t37 @ t38 @ a (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (78::PrelGHC.Intzh))}
	%in %let actionzu1661 :: PrelBase.Int ->
				 PrelBase.Int ->
				 LexCore.Token ->
				 ParCore.HappyState
				 LexCore.Token
				 (ParCore.HappyStk
				  (ParCore.HappyAbsSyn
				   (PrelBase.ZMZN PrelBase.Char)
				   t35
				   t36
				   t37
				   t38)
				  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				 ->
				 PrelBase.ZMZN
				 (ParCore.HappyState
				  LexCore.Token
				  (ParCore.HappyStk
				   (ParCore.HappyAbsSyn
				    (PrelBase.ZMZN PrelBase.Char)
				    t35
				    t36
				    t37
				    t38)
				   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				 ->
				 ParCore.HappyStk
				 (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
		   ParCore.actionzu166 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38 @ a
		   PrelNum.zdfNumInt
	    %in %let happyShift5 :: (PrelBase.Int ->
				     PrelBase.Int ->
				     LexCore.Token ->
				     ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       t35
				       t36
				       t37
				       t38)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				     ->
				     PrelBase.ZMZN
				     (ParCore.HappyState
				      LexCore.Token
				      (ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					t35
					t36
					t37
					t38)
				       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				     ->
				     ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      t35
				      t36
				      t37
				      t38)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				    ->
				    PrelBase.Int ->
				    LexCore.Token ->
				    ParCore.HappyState
				    LexCore.Token
				    (ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      t35
				      t36
				      t37
				      t38)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				    ->
				    PrelBase.ZMZN
				    (ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       t35
				       t36
				       t37
				       t38)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				    ->
				    ParCore.HappyStk
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     t35
				     t36
				     t37
				     t38)
				    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
		       ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a)
		       @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38
		       PrelNum.zdfNumInt
		%in \ (ds::t) ->
			%case zddNum %of (tpl::PrelNum.ZCTNum t)
			  {PrelNum.ZdwZCDNum
			   (tpl1::PrelBase.ZCTEq t)
			   (tpl2::PrelShow.ZCTShow t)
			   (tpl3::t -> t -> t)
			   (tpl4::t -> t -> t)
			   (tpl5::t -> t -> t)
			   (tpl6::t -> t)
			   (tpl7::t -> t)
			   (tpl8::t -> t)
			   (tpl9::PrelNum.Integer -> t) ->
			     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
			       {PrelBase.ZdwZCDEq
				(tpl11::t -> t -> PrelBase.Bool)
				(tpl12::t -> t -> PrelBase.Bool) ->
				  %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
				    {PrelBase.ZdwTrue ->
				       happyShift5 actionzu1661;
				     PrelBase.ZdwFalse ->
				       ParCore.happyFail @ a @ LexCore.Token
				       @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38}}};
  ParCore.actionzu63 :: %forall t t35 t36 t37 t38 a . PrelNum.ZCTNum
						      t
						      ->
						      t ->
						      PrelBase.Int ->
						      LexCore.Token ->
						      ParCore.HappyState
						      LexCore.Token
						      (ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)
						       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						      ->
						      PrelBase.ZMZN
						      (ParCore.HappyState
						       LexCore.Token
						       (ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38)
							->
							PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						      ->
						      ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t @ t35 @ t36 @ t37 @ t38 @ a (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (97::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (34::PrelGHC.Intzh))}
	    %in %let actionzu1471 :: PrelBase.Int ->
				     PrelBase.Int ->
				     LexCore.Token ->
				     ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       t35
				       t36
				       t37
				       t38)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				     ->
				     PrelBase.ZMZN
				     (ParCore.HappyState
				      LexCore.Token
				      (ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					t35
					t36
					t37
					t38)
				       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				     ->
				     ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      t35
				      t36
				      t37
				      t38)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
		       ParCore.actionzu147 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38 @ a
		       PrelNum.zdfNumInt
		%in %let happyShift5 :: (PrelBase.Int ->
					 PrelBase.Int ->
					 LexCore.Token ->
					 ParCore.HappyState
					 LexCore.Token
					 (ParCore.HappyStk
					  (ParCore.HappyAbsSyn
					   (PrelBase.ZMZN PrelBase.Char)
					   t35
					   t36
					   t37
					   t38)
					  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
					 ->
					 PrelBase.ZMZN
					 (ParCore.HappyState
					  LexCore.Token
					  (ParCore.HappyStk
					   (ParCore.HappyAbsSyn
					    (PrelBase.ZMZN PrelBase.Char)
					    t35
					    t36
					    t37
					    t38)
					   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
					 ->
					 ParCore.HappyStk
					 (ParCore.HappyAbsSyn
					  (PrelBase.ZMZN PrelBase.Char)
					  t35
					  t36
					  t37
					  t38)
					 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
					->
					PrelBase.Int ->
					LexCore.Token ->
					ParCore.HappyState
					LexCore.Token
					(ParCore.HappyStk
					 (ParCore.HappyAbsSyn
					  (PrelBase.ZMZN PrelBase.Char)
					  t35
					  t36
					  t37
					  t38)
					 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
					->
					PrelBase.ZMZN
					(ParCore.HappyState
					 LexCore.Token
					 (ParCore.HappyStk
					  (ParCore.HappyAbsSyn
					   (PrelBase.ZMZN PrelBase.Char)
					   t35
					   t36
					   t37
					   t38)
					  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
					->
					ParCore.HappyStk
					(ParCore.HappyAbsSyn
					 (PrelBase.ZMZN PrelBase.Char)
					 t35
					 t36
					 t37
					 t38)
					-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
			   ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a)
			   @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38
			   PrelNum.zdfNumInt
		    %in \ (ds::t) ->
			    %case zddNum %of (tpl::PrelNum.ZCTNum t)
			      {PrelNum.ZdwZCDNum
			       (tpl1::PrelBase.ZCTEq t)
			       (tpl2::PrelShow.ZCTShow t)
			       (tpl3::t -> t -> t)
			       (tpl4::t -> t -> t)
			       (tpl5::t -> t -> t)
			       (tpl6::t -> t)
			       (tpl7::t -> t)
			       (tpl8::t -> t)
			       (tpl9::PrelNum.Integer -> t) ->
				 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
				   {PrelBase.ZdwZCDEq
				    (tpl11::t -> t -> PrelBase.Bool)
				    (tpl12::t -> t -> PrelBase.Bool) ->
				      %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
					{PrelBase.ZdwTrue ->
					   happyShift5
					   (ParCore.actionzu32 @ PrelBase.Int @ LexCore.Token @ t35
					    @ t36 @ t37 @ t38 @ a);
					 PrelBase.ZdwFalse ->
					   %case (tpl12 lit2 ds) %of (wild1::PrelBase.Bool)
					     {PrelBase.ZdwTrue ->
						ParCore.happyGoto
						@ (ParCore.HappyState
						   LexCore.Token
						   (ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38)
						    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						@ LexCore.Token
						@ (ParCore.HappyStk
						   (ParCore.HappyAbsSyn
						    (PrelBase.ZMZN PrelBase.Char)
						    t35
						    t36
						    t37
						    t38)
						   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						actionzu1471;
					      PrelBase.ZdwFalse ->
						ParCore.happyFail @ a @ LexCore.Token
						@ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37
						@ t38}}}};
  actionzu631 :: %forall t35 t36 t37 t38 a . PrelBase.Int ->
					     PrelBase.Int ->
					     LexCore.Token ->
					     ParCore.HappyState
					     LexCore.Token
					     (ParCore.HappyStk
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38)
					      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
					     ->
					     PrelBase.ZMZN
					     (ParCore.HappyState
					      LexCore.Token
					      (ParCore.HappyStk
					       (ParCore.HappyAbsSyn
						(PrelBase.ZMZN PrelBase.Char)
						t35
						t36
						t37
						t38)
					       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
					     ->
					     ParCore.HappyStk
					     (ParCore.HappyAbsSyn
					      (PrelBase.ZMZN PrelBase.Char)
					      t35
					      t36
					      t37
					      t38)
					     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t35 @ t36 @ t37 @ t38 @ a ->
	ParCore.actionzu63 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38 @ a
	PrelNum.zdfNumInt;
  actionzu731 :: %forall t35 t36 t37 t38 a . PrelBase.Int ->
					     PrelBase.Int ->
					     LexCore.Token ->
					     ParCore.HappyState
					     LexCore.Token
					     (ParCore.HappyStk
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38)
					      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
					     ->
					     PrelBase.ZMZN
					     (ParCore.HappyState
					      LexCore.Token
					      (ParCore.HappyStk
					       (ParCore.HappyAbsSyn
						(PrelBase.ZMZN PrelBase.Char)
						t35
						t36
						t37
						t38)
					       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
					     ->
					     ParCore.HappyStk
					     (ParCore.HappyAbsSyn
					      (PrelBase.ZMZN PrelBase.Char)
					      t35
					      t36
					      t37
					      t38)
					     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t35 @ t36 @ t37 @ t38 @ a ->
	ParCore.actionzu73 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38 @ a
	PrelNum.zdfNumInt;
  happyShift5 :: %forall t35 t36 t37 t38 a . (PrelBase.Int ->
					      PrelBase.Int ->
					      LexCore.Token ->
					      ParCore.HappyState
					      LexCore.Token
					      (ParCore.HappyStk
					       (ParCore.HappyAbsSyn
						(PrelBase.ZMZN PrelBase.Char)
						t35
						t36
						t37
						t38)
					       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
					      ->
					      PrelBase.ZMZN
					      (ParCore.HappyState
					       LexCore.Token
					       (ParCore.HappyStk
						(ParCore.HappyAbsSyn
						 (PrelBase.ZMZN PrelBase.Char)
						 t35
						 t36
						 t37
						 t38)
						-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
					      ->
					      ParCore.HappyStk
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38)
					      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
					     ->
					     PrelBase.Int ->
					     LexCore.Token ->
					     ParCore.HappyState
					     LexCore.Token
					     (ParCore.HappyStk
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38)
					      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
					     ->
					     PrelBase.ZMZN
					     (ParCore.HappyState
					      LexCore.Token
					      (ParCore.HappyStk
					       (ParCore.HappyAbsSyn
						(PrelBase.ZMZN PrelBase.Char)
						t35
						t36
						t37
						t38)
					       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
					     ->
					     ParCore.HappyStk
					     (ParCore.HappyAbsSyn
					      (PrelBase.ZMZN PrelBase.Char)
					      t35
					      t36
					      t37
					      t38)
					     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t35 @ t36 @ t37 @ t38 @ a ->
	ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a)
	@ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38
	PrelNum.zdfNumInt;
  %rec
  {actionzu701 :: %forall t35 t36 t37 t38 a . PrelBase.Int ->
					      PrelBase.Int ->
					      LexCore.Token ->
					      ParCore.HappyState
					      LexCore.Token
					      (ParCore.HappyStk
					       (ParCore.HappyAbsSyn
						(PrelBase.ZMZN PrelBase.Char)
						t35
						t36
						t37
						t38)
					       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
					      ->
					      PrelBase.ZMZN
					      (ParCore.HappyState
					       LexCore.Token
					       (ParCore.HappyStk
						(ParCore.HappyAbsSyn
						 (PrelBase.ZMZN PrelBase.Char)
						 t35
						 t36
						 t37
						 t38)
						-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
					      ->
					      ParCore.HappyStk
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38)
					      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
     \ @ t35 @ t36 @ t37 @ t38 @ a (ds::PrelBase.Int) ->
	 %case ds %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	      %case ds1 %of (ds2::PrelGHC.Intzh)
		{%_ ->
		   ParCore.happyReducezu70 @ LexCore.Token @ a
		   @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38;
		 (79::PrelGHC.Intzh) ->
		   happyShift5 @ t35 @ t36 @ t37 @ t38 @ a
		   (%note "InlineMe"
		    actionzu731 @ t35 @ t36 @ t37 @ t38 @ a);
		 (89::PrelGHC.Intzh) ->
		   happyShift5 @ t35 @ t36 @ t37 @ t38 @ a
		   (%note "InlineMe"
		    actionzu631 @ t35 @ t36 @ t37 @ t38 @ a);
		 (52::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu701 @ t35 @ t36 @ t37 @ t38 @ a);
		 (53::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu142 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38 @ a);
		 (56::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu72 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38 @ a)}}};
  ParCore.actionzu70 :: %forall t35 t36 t37 t38 a . PrelBase.Int ->
						    PrelBase.Int ->
						    LexCore.Token ->
						    ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						    ->
						    PrelBase.ZMZN
						    (ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						    ->
						    ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38)
						    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t35 @ t36 @ t37 @ t38 @ a (eta::PrelBase.Int) ->
	actionzu701 @ t35 @ t36 @ t37 @ t38 @ a eta;
  ParCore.happyReducezu72 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReduce @ a @ b @ t34 @ t35 @ t36 @ t37 @ t38
	(PrelBase.ZdwIzh (5::PrelGHC.Intzh))
	(PrelBase.ZdwIzh (54::PrelGHC.Intzh))
	(ParCore.happyReductionzu72 @ t34 @ t35 @ t36 @ t37 @ t38) eta eta1
	eta2 eta3 eta4;
  ParCore.actionzu214 :: %forall t b t34 t35 t36 t37 t38 a . t ->
							     PrelBase.Int ->
							     b ->
							     ParCore.HappyState
							     b
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a)
							     ->
							     PrelBase.ZMZN
							     (ParCore.HappyState
							      b
							      (ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a))
							     ->
							     ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReducezu72 @ b @ a @ t34 @ t35 @ t36 @ t37 @ t38 eta1
	eta2 eta3 eta4 eta5;
  ParCore.happyReducezu63 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReduce @ a @ b @ t34 @ t35 @ t36 @ t37 @ t38
	(PrelBase.ZdwIzh (7::PrelGHC.Intzh))
	(PrelBase.ZdwIzh (51::PrelGHC.Intzh))
	(ParCore.happyReductionzu63 @ t34 @ t35 @ t36 @ t37 @ t38) eta eta1
	eta2 eta3 eta4;
  ParCore.actionzu225 :: %forall t b t34 t35 t36 t37 t38 a . t ->
							     PrelBase.Int ->
							     b ->
							     ParCore.HappyState
							     b
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a)
							     ->
							     PrelBase.ZMZN
							     (ParCore.HappyState
							      b
							      (ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a))
							     ->
							     ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReducezu63 @ b @ a @ t34 @ t35 @ t36 @ t37 @ t38 eta1
	eta2 eta3 eta4 eta5;
  ParCore.actionzu224 :: %forall t t34 t35 t36 t37 t38 a . PrelNum.ZCTNum
							   t
							   ->
							   t ->
							   PrelBase.Int ->
							   LexCore.Token ->
							   ParCore.HappyState
							   LexCore.Token
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err a)
							   ->
							   PrelBase.ZMZN
							   (ParCore.HappyState
							    LexCore.Token
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a))
							   ->
							   ParCore.HappyStk
							   (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err a =
    \ @ t
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (75::PrelGHC.Intzh))}
	%in %let happyShift6 :: (PrelBase.Int ->
				 PrelBase.Int ->
				 LexCore.Token ->
				 ParCore.HappyState
				 LexCore.Token
				 (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				  PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				 ->
				 PrelBase.ZMZN
				 (ParCore.HappyState
				  LexCore.Token
				  (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				   PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				 ->
				 ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				 PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				->
				PrelBase.Int ->
				LexCore.Token ->
				ParCore.HappyState
				LexCore.Token
				(ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				 PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				->
				PrelBase.ZMZN
				(ParCore.HappyState
				 LexCore.Token
				 (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				  PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				->
				ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
		   ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a) @ t34 @ t35 @ t36
		   @ t37 @ t38 PrelNum.zdfNumInt
	    %in \ (ds::t) ->
		    %case zddNum %of (tpl::PrelNum.ZCTNum t)
		      {PrelNum.ZdwZCDNum
		       (tpl1::PrelBase.ZCTEq t)
		       (tpl2::PrelShow.ZCTShow t)
		       (tpl3::t -> t -> t)
		       (tpl4::t -> t -> t)
		       (tpl5::t -> t -> t)
		       (tpl6::t -> t)
		       (tpl7::t -> t)
		       (tpl8::t -> t)
		       (tpl9::PrelNum.Integer -> t) ->
			 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
			   {PrelBase.ZdwZCDEq
			    (tpl11::t -> t -> PrelBase.Bool)
			    (tpl12::t -> t -> PrelBase.Bool) ->
			      %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
				{PrelBase.ZdwTrue ->
				   happyShift6
				   (ParCore.actionzu225 @ PrelBase.Int @ LexCore.Token @ t34 @ t35
				    @ t36 @ t37 @ t38 @ a);
				 PrelBase.ZdwFalse ->
				   ParCore.happyFail @ a @ LexCore.Token @ t34 @ t35 @ t36 @ t37
				   @ t38}}};
  ParCore.happyReducezu62 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReduce @ a @ b @ t34 @ t35 @ t36 @ t37 @ t38
	(PrelBase.ZdwIzh (4::PrelGHC.Intzh))
	(PrelBase.ZdwIzh (51::PrelGHC.Intzh))
	(ParCore.happyReductionzu62 @ t34 @ t35 @ t36 @ t37 @ t38) eta eta1
	eta2 eta3 eta4;
  ParCore.actionzu206 :: %forall t b t34 t35 t36 t37 t38 a . t ->
							     PrelBase.Int ->
							     b ->
							     ParCore.HappyState
							     b
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a)
							     ->
							     PrelBase.ZMZN
							     (ParCore.HappyState
							      b
							      (ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a))
							     ->
							     ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReducezu62 @ b @ a @ t34 @ t35 @ t36 @ t37 @ t38 eta1
	eta2 eta3 eta4 eta5;
  ParCore.happyReducezu61 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReduce @ a @ b @ t34 @ t35 @ t36 @ t37 @ t38
	(PrelBase.ZdwIzh (4::PrelGHC.Intzh))
	(PrelBase.ZdwIzh (51::PrelGHC.Intzh))
	(ParCore.happyReductionzu61 @ t34 @ t35 @ t36 @ t37 @ t38) eta eta1
	eta2 eta3 eta4;
  ParCore.actionzu207 :: %forall t b t34 t35 t36 t37 t38 a . t ->
							     PrelBase.Int ->
							     b ->
							     ParCore.HappyState
							     b
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a)
							     ->
							     PrelBase.ZMZN
							     (ParCore.HappyState
							      b
							      (ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a))
							     ->
							     ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReducezu61 @ b @ a @ t34 @ t35 @ t36 @ t37 @ t38 eta1
	eta2 eta3 eta4 eta5;
  ParCore.happyReducezu51 :: %forall b a t35 t36 t37 t38 . PrelBase.Int
							   ->
							   b ->
							   ParCore.HappyState
							   b
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     (PrelBase.ZMZN PrelBase.Char)
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err a)
							   ->
							   PrelBase.ZMZN
							   (ParCore.HappyState
							    b
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      (PrelBase.ZMZN PrelBase.Char)
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a))
							   ->
							   ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    (PrelBase.ZMZN PrelBase.Char)
							    t35
							    t36
							    t37
							    t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err a =
    \ @ b
      @ a
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk
	      (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
	      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk
	       (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
	       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn
	      (PrelBase.ZMZN PrelBase.Char)
	      t35
	      t36
	      t37
	      t38)) ->
	ParCore.happyReduce @ a @ b @ (PrelBase.ZMZN PrelBase.Char) @ t35
	@ t36 @ t37 @ t38 (PrelBase.ZdwIzh (5::PrelGHC.Intzh))
	(PrelBase.ZdwIzh (47::PrelGHC.Intzh))
	(ParCore.happyReductionzu51 @ t35 @ t36 @ t37 @ t38) eta eta1 eta2
	eta3 eta4;
  ParCore.actionzu220 :: %forall t b t35 t36 t37 t38 a . t ->
							 PrelBase.Int ->
							 b ->
							 ParCore.HappyState
							 b
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   t38)
							  ->
							  PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
							 ->
							 PrelBase.ZMZN
							 (ParCore.HappyState
							  b
							  (ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    (PrelBase.ZMZN PrelBase.Char)
							    t35
							    t36
							    t37
							    t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err a))
							 ->
							 ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t
      @ b
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk
	      (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
	      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk
	       (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
	       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn
	      (PrelBase.ZMZN PrelBase.Char)
	      t35
	      t36
	      t37
	      t38)) ->
	ParCore.happyReducezu51 @ b @ a @ t35 @ t36 @ t37 @ t38 eta1 eta2
	eta3 eta4 eta5;
  ParCore.happyReducezu50 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReduce @ a @ b @ t34 @ t35 @ t36 @ t37 @ t38
	(PrelBase.ZdwIzh (5::PrelGHC.Intzh))
	(PrelBase.ZdwIzh (47::PrelGHC.Intzh))
	(ParCore.happyReductionzu50 @ t34 @ t35 @ t36 @ t37 @ t38) eta eta1
	eta2 eta3 eta4;
  ParCore.actionzu221 :: %forall t b t34 t35 t36 t37 t38 a . t ->
							     PrelBase.Int ->
							     b ->
							     ParCore.HappyState
							     b
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a)
							     ->
							     PrelBase.ZMZN
							     (ParCore.HappyState
							      b
							      (ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a))
							     ->
							     ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReducezu50 @ b @ a @ t34 @ t35 @ t36 @ t37 @ t38 eta1
	eta2 eta3 eta4 eta5;
  ParCore.happyReducezu46 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReduce @ a @ b @ t34 @ t35 @ t36 @ t37 @ t38
	(PrelBase.ZdwIzh (4::PrelGHC.Intzh))
	(PrelBase.ZdwIzh (45::PrelGHC.Intzh))
	(ParCore.happyReductionzu46 @ t34 @ t35 @ t36 @ t37 @ t38) eta eta1
	eta2 eta3 eta4;
  ParCore.actionzu198 :: %forall t b t34 t35 t36 t37 t38 a . t ->
							     PrelBase.Int ->
							     b ->
							     ParCore.HappyState
							     b
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a)
							     ->
							     PrelBase.ZMZN
							     (ParCore.HappyState
							      b
							      (ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a))
							     ->
							     ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReducezu46 @ b @ a @ t34 @ t35 @ t36 @ t37 @ t38 eta1
	eta2 eta3 eta4 eta5;
  ParCore.actionzu188 :: %forall t t34 t35 t36 t37 t38 a . PrelNum.ZCTNum
							   t
							   ->
							   t ->
							   PrelBase.Int ->
							   LexCore.Token ->
							   ParCore.HappyState
							   LexCore.Token
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err a)
							   ->
							   PrelBase.ZMZN
							   (ParCore.HappyState
							    LexCore.Token
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a))
							   ->
							   ParCore.HappyStk
							   (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err a =
    \ @ t
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (75::PrelGHC.Intzh))}
	%in %let happyShift6 :: (PrelBase.Int ->
				 PrelBase.Int ->
				 LexCore.Token ->
				 ParCore.HappyState
				 LexCore.Token
				 (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				  PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				 ->
				 PrelBase.ZMZN
				 (ParCore.HappyState
				  LexCore.Token
				  (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				   PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				 ->
				 ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				 PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				->
				PrelBase.Int ->
				LexCore.Token ->
				ParCore.HappyState
				LexCore.Token
				(ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				 PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				->
				PrelBase.ZMZN
				(ParCore.HappyState
				 LexCore.Token
				 (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				  PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				->
				ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
		   ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a) @ t34 @ t35 @ t36
		   @ t37 @ t38 PrelNum.zdfNumInt
	    %in \ (ds::t) ->
		    %case zddNum %of (tpl::PrelNum.ZCTNum t)
		      {PrelNum.ZdwZCDNum
		       (tpl1::PrelBase.ZCTEq t)
		       (tpl2::PrelShow.ZCTShow t)
		       (tpl3::t -> t -> t)
		       (tpl4::t -> t -> t)
		       (tpl5::t -> t -> t)
		       (tpl6::t -> t)
		       (tpl7::t -> t)
		       (tpl8::t -> t)
		       (tpl9::PrelNum.Integer -> t) ->
			 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
			   {PrelBase.ZdwZCDEq
			    (tpl11::t -> t -> PrelBase.Bool)
			    (tpl12::t -> t -> PrelBase.Bool) ->
			      %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
				{PrelBase.ZdwTrue ->
				   happyShift6
				   (ParCore.actionzu198 @ PrelBase.Int @ LexCore.Token @ t34 @ t35
				    @ t36 @ t37 @ t38 @ a);
				 PrelBase.ZdwFalse ->
				   ParCore.happyFail @ a @ LexCore.Token @ t34 @ t35 @ t36 @ t37
				   @ t38}}};
  actionzu561 :: %forall a . PrelBase.Int ->
			     PrelBase.Int ->
			     LexCore.Token ->
			     ParCore.HappyState
			     LexCore.Token
			     (ParCore.HappyStk
			      (ParCore.HappyAbsSyn
			       (PrelBase.ZMZN PrelBase.Char)
			       (PrelBase.ZMZN PrelBase.Char)
			       PrelNum.Integer
			       PrelFloat.Double
			       PrelBase.Char)
			      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			     ->
			     PrelBase.ZMZN
			     (ParCore.HappyState
			      LexCore.Token
			      (ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			     ->
			     ParCore.HappyStk
			     (ParCore.HappyAbsSyn
			      (PrelBase.ZMZN PrelBase.Char)
			      (PrelBase.ZMZN PrelBase.Char)
			      PrelNum.Integer
			      PrelFloat.Double
			      PrelBase.Char)
			     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	ParCore.actionzu56 @ PrelBase.Int @ (PrelBase.ZMZN PrelBase.Char)
	@ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a
	PrelNum.zdfNumInt;
  actionzu1231 :: %forall a . PrelBase.Int ->
			      PrelBase.Int ->
			      LexCore.Token ->
			      ParCore.HappyState
			      LexCore.Token
			      (ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			      ->
			      PrelBase.ZMZN
			      (ParCore.HappyState
			       LexCore.Token
			       (ParCore.HappyStk
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 (PrelBase.ZMZN PrelBase.Char)
				 PrelNum.Integer
				 PrelFloat.Double
				 PrelBase.Char)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			      ->
			      ParCore.HappyStk
			      (ParCore.HappyAbsSyn
			       (PrelBase.ZMZN PrelBase.Char)
			       (PrelBase.ZMZN PrelBase.Char)
			       PrelNum.Integer
			       PrelFloat.Double
			       PrelBase.Char)
			      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	ParCore.actionzu123 @ PrelBase.Int @ (PrelBase.ZMZN PrelBase.Char)
	@ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a
	PrelNum.zdfNumInt;
  actionzu1881 :: %forall a . PrelBase.Int ->
			      PrelBase.Int ->
			      LexCore.Token ->
			      ParCore.HappyState
			      LexCore.Token
			      (ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			      ->
			      PrelBase.ZMZN
			      (ParCore.HappyState
			       LexCore.Token
			       (ParCore.HappyStk
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 (PrelBase.ZMZN PrelBase.Char)
				 PrelNum.Integer
				 PrelFloat.Double
				 PrelBase.Char)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			      ->
			      ParCore.HappyStk
			      (ParCore.HappyAbsSyn
			       (PrelBase.ZMZN PrelBase.Char)
			       (PrelBase.ZMZN PrelBase.Char)
			       PrelNum.Integer
			       PrelFloat.Double
			       PrelBase.Char)
			      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	ParCore.actionzu188 @ PrelBase.Int @ (PrelBase.ZMZN PrelBase.Char)
	@ (PrelBase.ZMZN PrelBase.Char) @ PrelNum.Integer
	@ PrelFloat.Double @ PrelBase.Char @ a PrelNum.zdfNumInt;
  actionzu1252 :: %forall a . PrelBase.Int ->
			      PrelBase.Int ->
			      LexCore.Token ->
			      ParCore.HappyState
			      LexCore.Token
			      (ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			      ->
			      PrelBase.ZMZN
			      (ParCore.HappyState
			       LexCore.Token
			       (ParCore.HappyStk
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 (PrelBase.ZMZN PrelBase.Char)
				 PrelNum.Integer
				 PrelFloat.Double
				 PrelBase.Char)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			      ->
			      ParCore.HappyStk
			      (ParCore.HappyAbsSyn
			       (PrelBase.ZMZN PrelBase.Char)
			       (PrelBase.ZMZN PrelBase.Char)
			       PrelNum.Integer
			       PrelFloat.Double
			       PrelBase.Char)
			      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	ParCore.actionzu125 @ PrelBase.Int @ (PrelBase.ZMZN PrelBase.Char)
	@ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a
	PrelNum.zdfNumInt;
  actionzu732 :: %forall a . PrelBase.Int ->
			     PrelBase.Int ->
			     LexCore.Token ->
			     ParCore.HappyState
			     LexCore.Token
			     (ParCore.HappyStk
			      (ParCore.HappyAbsSyn
			       (PrelBase.ZMZN PrelBase.Char)
			       (PrelBase.ZMZN PrelBase.Char)
			       PrelNum.Integer
			       PrelFloat.Double
			       PrelBase.Char)
			      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			     ->
			     PrelBase.ZMZN
			     (ParCore.HappyState
			      LexCore.Token
			      (ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			     ->
			     ParCore.HappyStk
			     (ParCore.HappyAbsSyn
			      (PrelBase.ZMZN PrelBase.Char)
			      (PrelBase.ZMZN PrelBase.Char)
			      PrelNum.Integer
			      PrelFloat.Double
			      PrelBase.Char)
			     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	ParCore.actionzu73 @ PrelBase.Int @ (PrelBase.ZMZN PrelBase.Char)
	@ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a
	PrelNum.zdfNumInt;
  actionzu2241 :: %forall a . PrelBase.Int ->
			      PrelBase.Int ->
			      LexCore.Token ->
			      ParCore.HappyState
			      LexCore.Token
			      (ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			      ->
			      PrelBase.ZMZN
			      (ParCore.HappyState
			       LexCore.Token
			       (ParCore.HappyStk
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 (PrelBase.ZMZN PrelBase.Char)
				 PrelNum.Integer
				 PrelFloat.Double
				 PrelBase.Char)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			      ->
			      ParCore.HappyStk
			      (ParCore.HappyAbsSyn
			       (PrelBase.ZMZN PrelBase.Char)
			       (PrelBase.ZMZN PrelBase.Char)
			       PrelNum.Integer
			       PrelFloat.Double
			       PrelBase.Char)
			      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	ParCore.actionzu224 @ PrelBase.Int @ (PrelBase.ZMZN PrelBase.Char)
	@ (PrelBase.ZMZN PrelBase.Char) @ PrelNum.Integer
	@ PrelFloat.Double @ PrelBase.Char @ a PrelNum.zdfNumInt;
  actionzu333 :: %forall a . PrelBase.Int ->
			     PrelBase.Int ->
			     LexCore.Token ->
			     ParCore.HappyState
			     LexCore.Token
			     (ParCore.HappyStk
			      (ParCore.HappyAbsSyn
			       (PrelBase.ZMZN PrelBase.Char)
			       (PrelBase.ZMZN PrelBase.Char)
			       PrelNum.Integer
			       PrelFloat.Double
			       PrelBase.Char)
			      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			     ->
			     PrelBase.ZMZN
			     (ParCore.HappyState
			      LexCore.Token
			      (ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			     ->
			     ParCore.HappyStk
			     (ParCore.HappyAbsSyn
			      (PrelBase.ZMZN PrelBase.Char)
			      (PrelBase.ZMZN PrelBase.Char)
			      PrelNum.Integer
			      PrelFloat.Double
			      PrelBase.Char)
			     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	ParCore.actionzu33 @ PrelBase.Int @ (PrelBase.ZMZN PrelBase.Char)
	@ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a
	PrelNum.zdfNumInt;
  actionzu362 :: %forall a . PrelBase.Int ->
			     PrelBase.Int ->
			     LexCore.Token ->
			     ParCore.HappyState
			     LexCore.Token
			     (ParCore.HappyStk
			      (ParCore.HappyAbsSyn
			       (PrelBase.ZMZN PrelBase.Char)
			       (PrelBase.ZMZN PrelBase.Char)
			       PrelNum.Integer
			       PrelFloat.Double
			       PrelBase.Char)
			      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			     ->
			     PrelBase.ZMZN
			     (ParCore.HappyState
			      LexCore.Token
			      (ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			     ->
			     ParCore.HappyStk
			     (ParCore.HappyAbsSyn
			      (PrelBase.ZMZN PrelBase.Char)
			      (PrelBase.ZMZN PrelBase.Char)
			      PrelNum.Integer
			      PrelFloat.Double
			      PrelBase.Char)
			     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a -> ParCore.actionzu36 @ PrelBase.Int @ a PrelNum.zdfNumInt;
  actionzu632 :: %forall a . PrelBase.Int ->
			     PrelBase.Int ->
			     LexCore.Token ->
			     ParCore.HappyState
			     LexCore.Token
			     (ParCore.HappyStk
			      (ParCore.HappyAbsSyn
			       (PrelBase.ZMZN PrelBase.Char)
			       (PrelBase.ZMZN PrelBase.Char)
			       PrelNum.Integer
			       PrelFloat.Double
			       PrelBase.Char)
			      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			     ->
			     PrelBase.ZMZN
			     (ParCore.HappyState
			      LexCore.Token
			      (ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			     ->
			     ParCore.HappyStk
			     (ParCore.HappyAbsSyn
			      (PrelBase.ZMZN PrelBase.Char)
			      (PrelBase.ZMZN PrelBase.Char)
			      PrelNum.Integer
			      PrelFloat.Double
			      PrelBase.Char)
			     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	ParCore.actionzu63 @ PrelBase.Int @ (PrelBase.ZMZN PrelBase.Char)
	@ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a
	PrelNum.zdfNumInt;
  actionzu1301 :: %forall a . PrelBase.Int ->
			      PrelBase.Int ->
			      LexCore.Token ->
			      ParCore.HappyState
			      LexCore.Token
			      (ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			      ->
			      PrelBase.ZMZN
			      (ParCore.HappyState
			       LexCore.Token
			       (ParCore.HappyStk
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 (PrelBase.ZMZN PrelBase.Char)
				 PrelNum.Integer
				 PrelFloat.Double
				 PrelBase.Char)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			      ->
			      ParCore.HappyStk
			      (ParCore.HappyAbsSyn
			       (PrelBase.ZMZN PrelBase.Char)
			       (PrelBase.ZMZN PrelBase.Char)
			       PrelNum.Integer
			       PrelFloat.Double
			       PrelBase.Char)
			      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	ParCore.actionzu130 @ PrelBase.Int @ (PrelBase.ZMZN PrelBase.Char)
	@ (PrelBase.ZMZN PrelBase.Char) @ PrelNum.Integer
	@ PrelFloat.Double @ PrelBase.Char @ a PrelNum.zdfNumInt;
  actionzu1291 :: %forall a . PrelBase.Int ->
			      PrelBase.Int ->
			      LexCore.Token ->
			      ParCore.HappyState
			      LexCore.Token
			      (ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			      ->
			      PrelBase.ZMZN
			      (ParCore.HappyState
			       LexCore.Token
			       (ParCore.HappyStk
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 (PrelBase.ZMZN PrelBase.Char)
				 PrelNum.Integer
				 PrelFloat.Double
				 PrelBase.Char)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			      ->
			      ParCore.HappyStk
			      (ParCore.HappyAbsSyn
			       (PrelBase.ZMZN PrelBase.Char)
			       (PrelBase.ZMZN PrelBase.Char)
			       PrelNum.Integer
			       PrelFloat.Double
			       PrelBase.Char)
			      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	ParCore.actionzu129 @ PrelBase.Int @ (PrelBase.ZMZN PrelBase.Char)
	@ PrelNum.Integer @ PrelFloat.Double @ a PrelNum.zdfNumInt;
  actionzu1281 :: %forall a . PrelBase.Int ->
			      PrelBase.Int ->
			      LexCore.Token ->
			      ParCore.HappyState
			      LexCore.Token
			      (ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			      ->
			      PrelBase.ZMZN
			      (ParCore.HappyState
			       LexCore.Token
			       (ParCore.HappyStk
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 (PrelBase.ZMZN PrelBase.Char)
				 PrelNum.Integer
				 PrelFloat.Double
				 PrelBase.Char)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			      ->
			      ParCore.HappyStk
			      (ParCore.HappyAbsSyn
			       (PrelBase.ZMZN PrelBase.Char)
			       (PrelBase.ZMZN PrelBase.Char)
			       PrelNum.Integer
			       PrelFloat.Double
			       PrelBase.Char)
			      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	ParCore.actionzu128 @ PrelBase.Int @ (PrelBase.ZMZN PrelBase.Char)
	@ PrelNum.Integer @ PrelBase.Char @ a PrelNum.zdfNumInt;
  actionzu1271 :: %forall a . PrelBase.Int ->
			      PrelBase.Int ->
			      LexCore.Token ->
			      ParCore.HappyState
			      LexCore.Token
			      (ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			      ->
			      PrelBase.ZMZN
			      (ParCore.HappyState
			       LexCore.Token
			       (ParCore.HappyStk
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 (PrelBase.ZMZN PrelBase.Char)
				 PrelNum.Integer
				 PrelFloat.Double
				 PrelBase.Char)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			      ->
			      ParCore.HappyStk
			      (ParCore.HappyAbsSyn
			       (PrelBase.ZMZN PrelBase.Char)
			       (PrelBase.ZMZN PrelBase.Char)
			       PrelNum.Integer
			       PrelFloat.Double
			       PrelBase.Char)
			      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	ParCore.actionzu127 @ PrelBase.Int @ (PrelBase.ZMZN PrelBase.Char)
	@ PrelFloat.Double @ PrelBase.Char @ a PrelNum.zdfNumInt;
  actionzu1261 :: %forall a . PrelBase.Int ->
			      PrelBase.Int ->
			      LexCore.Token ->
			      ParCore.HappyState
			      LexCore.Token
			      (ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			      ->
			      PrelBase.ZMZN
			      (ParCore.HappyState
			       LexCore.Token
			       (ParCore.HappyStk
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 (PrelBase.ZMZN PrelBase.Char)
				 PrelNum.Integer
				 PrelFloat.Double
				 PrelBase.Char)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			      ->
			      ParCore.HappyStk
			      (ParCore.HappyAbsSyn
			       (PrelBase.ZMZN PrelBase.Char)
			       (PrelBase.ZMZN PrelBase.Char)
			       PrelNum.Integer
			       PrelFloat.Double
			       PrelBase.Char)
			      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	ParCore.actionzu126 @ PrelBase.Int @ PrelNum.Integer
	@ PrelFloat.Double @ PrelBase.Char @ a PrelNum.zdfNumInt;
  actionzu752 :: %forall a . PrelBase.Int ->
			     PrelBase.Int ->
			     LexCore.Token ->
			     ParCore.HappyState
			     LexCore.Token
			     (ParCore.HappyStk
			      (ParCore.HappyAbsSyn
			       (PrelBase.ZMZN PrelBase.Char)
			       (PrelBase.ZMZN PrelBase.Char)
			       PrelNum.Integer
			       PrelFloat.Double
			       PrelBase.Char)
			      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			     ->
			     PrelBase.ZMZN
			     (ParCore.HappyState
			      LexCore.Token
			      (ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			     ->
			     ParCore.HappyStk
			     (ParCore.HappyAbsSyn
			      (PrelBase.ZMZN PrelBase.Char)
			      (PrelBase.ZMZN PrelBase.Char)
			      PrelNum.Integer
			      PrelFloat.Double
			      PrelBase.Char)
			     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	ParCore.actionzu75 @ PrelBase.Int @ (PrelBase.ZMZN PrelBase.Char)
	@ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a
	PrelNum.zdfNumInt;
  actionzu862 :: %forall a . PrelBase.Int ->
			     PrelBase.Int ->
			     LexCore.Token ->
			     ParCore.HappyState
			     LexCore.Token
			     (ParCore.HappyStk
			      (ParCore.HappyAbsSyn
			       (PrelBase.ZMZN PrelBase.Char)
			       (PrelBase.ZMZN PrelBase.Char)
			       PrelNum.Integer
			       PrelFloat.Double
			       PrelBase.Char)
			      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			     ->
			     PrelBase.ZMZN
			     (ParCore.HappyState
			      LexCore.Token
			      (ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			     ->
			     ParCore.HappyStk
			     (ParCore.HappyAbsSyn
			      (PrelBase.ZMZN PrelBase.Char)
			      (PrelBase.ZMZN PrelBase.Char)
			      PrelNum.Integer
			      PrelFloat.Double
			      PrelBase.Char)
			     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	ParCore.actionzu86 @ PrelBase.Int @ PrelNum.Integer
	@ PrelFloat.Double @ PrelBase.Char @ a PrelNum.zdfNumInt;
  actionzu452 :: %forall a . PrelBase.Int ->
			     PrelBase.Int ->
			     LexCore.Token ->
			     ParCore.HappyState
			     LexCore.Token
			     (ParCore.HappyStk
			      (ParCore.HappyAbsSyn
			       (PrelBase.ZMZN PrelBase.Char)
			       (PrelBase.ZMZN PrelBase.Char)
			       PrelNum.Integer
			       PrelFloat.Double
			       PrelBase.Char)
			      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			     ->
			     PrelBase.ZMZN
			     (ParCore.HappyState
			      LexCore.Token
			      (ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			     ->
			     ParCore.HappyStk
			     (ParCore.HappyAbsSyn
			      (PrelBase.ZMZN PrelBase.Char)
			      (PrelBase.ZMZN PrelBase.Char)
			      PrelNum.Integer
			      PrelFloat.Double
			      PrelBase.Char)
			     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	ParCore.actionzu45 @ PrelBase.Int @ (PrelBase.ZMZN PrelBase.Char)
	@ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a
	PrelNum.zdfNumInt;
  happyShift6 :: %forall a . (PrelBase.Int ->
			      PrelBase.Int ->
			      LexCore.Token ->
			      ParCore.HappyState
			      LexCore.Token
			      (ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			      ->
			      PrelBase.ZMZN
			      (ParCore.HappyState
			       LexCore.Token
			       (ParCore.HappyStk
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 (PrelBase.ZMZN PrelBase.Char)
				 PrelNum.Integer
				 PrelFloat.Double
				 PrelBase.Char)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			      ->
			      ParCore.HappyStk
			      (ParCore.HappyAbsSyn
			       (PrelBase.ZMZN PrelBase.Char)
			       (PrelBase.ZMZN PrelBase.Char)
			       PrelNum.Integer
			       PrelFloat.Double
			       PrelBase.Char)
			      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			     ->
			     PrelBase.Int ->
			     LexCore.Token ->
			     ParCore.HappyState
			     LexCore.Token
			     (ParCore.HappyStk
			      (ParCore.HappyAbsSyn
			       (PrelBase.ZMZN PrelBase.Char)
			       (PrelBase.ZMZN PrelBase.Char)
			       PrelNum.Integer
			       PrelFloat.Double
			       PrelBase.Char)
			      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			     ->
			     PrelBase.ZMZN
			     (ParCore.HappyState
			      LexCore.Token
			      (ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			     ->
			     ParCore.HappyStk
			     (ParCore.HappyAbsSyn
			      (PrelBase.ZMZN PrelBase.Char)
			      (PrelBase.ZMZN PrelBase.Char)
			      PrelNum.Integer
			      PrelFloat.Double
			      PrelBase.Char)
			     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a)
	@ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
	@ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char
	PrelNum.zdfNumInt;
  %rec
  {actionzu851 :: %forall a . PrelBase.Int ->
			      PrelBase.Int ->
			      LexCore.Token ->
			      ParCore.HappyState
			      LexCore.Token
			      (ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			      ->
			      PrelBase.ZMZN
			      (ParCore.HappyState
			       LexCore.Token
			       (ParCore.HappyStk
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 (PrelBase.ZMZN PrelBase.Char)
				 PrelNum.Integer
				 PrelFloat.Double
				 PrelBase.Char)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			      ->
			      ParCore.HappyStk
			      (ParCore.HappyAbsSyn
			       (PrelBase.ZMZN PrelBase.Char)
			       (PrelBase.ZMZN PrelBase.Char)
			       PrelNum.Integer
			       PrelFloat.Double
			       PrelBase.Char)
			      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
     \ @ a (ds::PrelBase.Int) ->
	 %case ds %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	      %case ds1 %of (ds2::PrelGHC.Intzh)
		{%_ ->
		   ParCore.happyFail @ a @ LexCore.Token
		   @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		   @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char;
		 (98::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (ParCore.actionzu131 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ PrelNum.Integer
		    @ PrelFloat.Double @ PrelBase.Char @ a);
		 (35::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu1361 @ a)}};
   actionzu1401 :: %forall a . PrelBase.Int ->
			       PrelBase.Int ->
			       LexCore.Token ->
			       ParCore.HappyState
			       LexCore.Token
			       (ParCore.HappyStk
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 (PrelBase.ZMZN PrelBase.Char)
				 PrelNum.Integer
				 PrelFloat.Double
				 PrelBase.Char)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			       ->
			       PrelBase.ZMZN
			       (ParCore.HappyState
				LexCore.Token
				(ParCore.HappyStk
				 (ParCore.HappyAbsSyn
				  (PrelBase.ZMZN PrelBase.Char)
				  (PrelBase.ZMZN PrelBase.Char)
				  PrelNum.Integer
				  PrelFloat.Double
				  PrelBase.Char)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			       ->
			       ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
     \ @ a (ds::PrelBase.Int) ->
	 %case ds %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	      %case ds1 %of (ds2::PrelGHC.Intzh)
		{%_ ->
		   ParCore.happyFail @ a @ LexCore.Token
		   @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		   @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char;
		 (81::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu1711 @ a)}};
   actionzu811 :: %forall a . PrelBase.Int ->
			      PrelBase.Int ->
			      LexCore.Token ->
			      ParCore.HappyState
			      LexCore.Token
			      (ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			      ->
			      PrelBase.ZMZN
			      (ParCore.HappyState
			       LexCore.Token
			       (ParCore.HappyStk
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 (PrelBase.ZMZN PrelBase.Char)
				 PrelNum.Integer
				 PrelFloat.Double
				 PrelBase.Char)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			      ->
			      ParCore.HappyStk
			      (ParCore.HappyAbsSyn
			       (PrelBase.ZMZN PrelBase.Char)
			       (PrelBase.ZMZN PrelBase.Char)
			       PrelNum.Integer
			       PrelFloat.Double
			       PrelBase.Char)
			      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
     \ @ a (ds::PrelBase.Int) ->
	 %case ds %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	      %case ds1 %of (ds2::PrelGHC.Intzh)
		{%_ ->
		   ParCore.happyFail @ a @ LexCore.Token
		   @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		   @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char;
		 (79::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu732 @ a);
		 (89::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu632 @ a);
		 (52::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu70 @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a);
		 (53::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu1401 @ a);
		 (56::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu72 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a)}};
   actionzu681 :: %forall a . PrelBase.Int ->
			      PrelBase.Int ->
			      LexCore.Token ->
			      ParCore.HappyState
			      LexCore.Token
			      (ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			      ->
			      PrelBase.ZMZN
			      (ParCore.HappyState
			       LexCore.Token
			       (ParCore.HappyStk
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 (PrelBase.ZMZN PrelBase.Char)
				 PrelNum.Integer
				 PrelFloat.Double
				 PrelBase.Char)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			      ->
			      ParCore.HappyStk
			      (ParCore.HappyAbsSyn
			       (PrelBase.ZMZN PrelBase.Char)
			       (PrelBase.ZMZN PrelBase.Char)
			       PrelNum.Integer
			       PrelFloat.Double
			       PrelBase.Char)
			      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
     \ @ a (ds::PrelBase.Int) ->
	 %case ds %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	      %case ds1 %of (ds2::PrelGHC.Intzh)
		{%_ ->
		   ParCore.happyFail @ a @ LexCore.Token
		   @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		   @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char;
		 (81::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu1431 @ a)}};
   actionzu2051 :: %forall a . PrelBase.Int ->
			       PrelBase.Int ->
			       LexCore.Token ->
			       ParCore.HappyState
			       LexCore.Token
			       (ParCore.HappyStk
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 (PrelBase.ZMZN PrelBase.Char)
				 PrelNum.Integer
				 PrelFloat.Double
				 PrelBase.Char)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			       ->
			       PrelBase.ZMZN
			       (ParCore.HappyState
				LexCore.Token
				(ParCore.HappyStk
				 (ParCore.HappyAbsSyn
				  (PrelBase.ZMZN PrelBase.Char)
				  (PrelBase.ZMZN PrelBase.Char)
				  PrelNum.Integer
				  PrelFloat.Double
				  PrelBase.Char)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			       ->
			       ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
     \ @ a (ds::PrelBase.Int) ->
	 %case ds %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	      %case ds1 %of (ds2::PrelGHC.Intzh)
		{%_ ->
		   ParCore.happyFail @ a @ LexCore.Token
		   @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		   @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char;
		 (74::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu2151 @ a)}};
   actionzu1731 :: %forall a . PrelBase.Int ->
			       PrelBase.Int ->
			       LexCore.Token ->
			       ParCore.HappyState
			       LexCore.Token
			       (ParCore.HappyStk
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 (PrelBase.ZMZN PrelBase.Char)
				 PrelNum.Integer
				 PrelFloat.Double
				 PrelBase.Char)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			       ->
			       PrelBase.ZMZN
			       (ParCore.HappyState
				LexCore.Token
				(ParCore.HappyStk
				 (ParCore.HappyAbsSyn
				  (PrelBase.ZMZN PrelBase.Char)
				  (PrelBase.ZMZN PrelBase.Char)
				  PrelNum.Integer
				  PrelFloat.Double
				  PrelBase.Char)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			       ->
			       ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
     \ @ a (ds::PrelBase.Int) ->
	 %case ds %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	      %case ds1 %of (ds2::PrelGHC.Intzh)
		{%_ ->
		   ParCore.happyFail @ a @ LexCore.Token
		   @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		   @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char;
		 (89::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu632 @ a);
		 (56::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu2051 @ a)}};
   actionzu1381 :: %forall a . PrelBase.Int ->
			       PrelBase.Int ->
			       LexCore.Token ->
			       ParCore.HappyState
			       LexCore.Token
			       (ParCore.HappyStk
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 (PrelBase.ZMZN PrelBase.Char)
				 PrelNum.Integer
				 PrelFloat.Double
				 PrelBase.Char)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			       ->
			       PrelBase.ZMZN
			       (ParCore.HappyState
				LexCore.Token
				(ParCore.HappyStk
				 (ParCore.HappyAbsSyn
				  (PrelBase.ZMZN PrelBase.Char)
				  (PrelBase.ZMZN PrelBase.Char)
				  PrelNum.Integer
				  PrelFloat.Double
				  PrelBase.Char)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			       ->
			       ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
     \ @ a (ds::PrelBase.Int) ->
	 %case ds %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	      %case ds1 %of (ds2::PrelGHC.Intzh)
		{%_ ->
		   ParCore.happyFail @ a @ LexCore.Token
		   @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		   @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char;
		 (85::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu1731 @ a)}};
   actionzu831 :: %forall a . PrelBase.Int ->
			      PrelBase.Int ->
			      LexCore.Token ->
			      ParCore.HappyState
			      LexCore.Token
			      (ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			      ->
			      PrelBase.ZMZN
			      (ParCore.HappyState
			       LexCore.Token
			       (ParCore.HappyStk
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 (PrelBase.ZMZN PrelBase.Char)
				 PrelNum.Integer
				 PrelFloat.Double
				 PrelBase.Char)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			      ->
			      ParCore.HappyStk
			      (ParCore.HappyAbsSyn
			       (PrelBase.ZMZN PrelBase.Char)
			       (PrelBase.ZMZN PrelBase.Char)
			       PrelNum.Integer
			       PrelFloat.Double
			       PrelBase.Char)
			      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
     \ @ a (ds::PrelBase.Int) ->
	 %case ds %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	      %case ds1 %of (ds2::PrelGHC.Intzh)
		{%_ ->
		   ParCore.happyFail @ a @ LexCore.Token
		   @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		   @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char;
		 (89::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu871 @ a);
		 (97::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (ParCore.actionzu32 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ PrelNum.Integer
		    @ PrelFloat.Double @ PrelBase.Char @ a);
		 (34::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu752 @ a);
		 (49::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu1381 @ a);
		 (68::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu79 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a);
		 (69::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu80 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a)}};
   actionzu1841 :: %forall a . PrelBase.Int ->
			       PrelBase.Int ->
			       LexCore.Token ->
			       ParCore.HappyState
			       LexCore.Token
			       (ParCore.HappyStk
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 (PrelBase.ZMZN PrelBase.Char)
				 PrelNum.Integer
				 PrelFloat.Double
				 PrelBase.Char)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			       ->
			       PrelBase.ZMZN
			       (ParCore.HappyState
				LexCore.Token
				(ParCore.HappyStk
				 (ParCore.HappyAbsSyn
				  (PrelBase.ZMZN PrelBase.Char)
				  (PrelBase.ZMZN PrelBase.Char)
				  PrelNum.Integer
				  PrelFloat.Double
				  PrelBase.Char)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			       ->
			       ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
     \ @ a (ds::PrelBase.Int) ->
	 %case ds %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	      %case ds1 %of (ds2::PrelGHC.Intzh)
		{%_ ->
		   ParCore.happyFail @ a @ LexCore.Token
		   @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		   @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char;
		 (73::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu2001 @ a)}};
   actionzu1221 :: %forall a . PrelBase.Int ->
			       PrelBase.Int ->
			       LexCore.Token ->
			       ParCore.HappyState
			       LexCore.Token
			       (ParCore.HappyStk
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 (PrelBase.ZMZN PrelBase.Char)
				 PrelNum.Integer
				 PrelFloat.Double
				 PrelBase.Char)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			       ->
			       PrelBase.ZMZN
			       (ParCore.HappyState
				LexCore.Token
				(ParCore.HappyStk
				 (ParCore.HappyAbsSyn
				  (PrelBase.ZMZN PrelBase.Char)
				  (PrelBase.ZMZN PrelBase.Char)
				  PrelNum.Integer
				  PrelFloat.Double
				  PrelBase.Char)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			       ->
			       ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
     \ @ a (ds::PrelBase.Int) ->
	 %case ds %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	      %case ds1 %of (ds2::PrelGHC.Intzh)
		{%_ ->
		   ParCore.happyFail @ a @ LexCore.Token
		   @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		   @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char;
		 (89::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu501 @ (PrelBase.ZMZN PrelBase.Char) @ PrelNum.Integer
		    @ PrelFloat.Double @ PrelBase.Char @ a);
		 (92::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu511 @ (PrelBase.ZMZN PrelBase.Char) @ PrelNum.Integer
		    @ PrelFloat.Double @ PrelBase.Char @ a);
		 (97::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (ParCore.actionzu32 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ PrelNum.Integer
		    @ PrelFloat.Double @ PrelBase.Char @ a);
		 (34::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu452 @ a);
		 (62::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu46 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a);
		 (63::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu471 @ (PrelBase.ZMZN PrelBase.Char) @ PrelNum.Integer
		    @ PrelFloat.Double @ PrelBase.Char @ a);
		 (64::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu1841 @ a);
		 (69::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu49 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a)}};
   actionzu901 :: %forall a . PrelBase.Int ->
			      PrelBase.Int ->
			      LexCore.Token ->
			      ParCore.HappyState
			      LexCore.Token
			      (ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			      ->
			      PrelBase.ZMZN
			      (ParCore.HappyState
			       LexCore.Token
			       (ParCore.HappyStk
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 (PrelBase.ZMZN PrelBase.Char)
				 PrelNum.Integer
				 PrelFloat.Double
				 PrelBase.Char)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			      ->
			      ParCore.HappyStk
			      (ParCore.HappyAbsSyn
			       (PrelBase.ZMZN PrelBase.Char)
			       (PrelBase.ZMZN PrelBase.Char)
			       PrelNum.Integer
			       PrelFloat.Double
			       PrelBase.Char)
			      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
     \ @ a (ds::PrelBase.Int) ->
	 %case ds %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	      %case ds1 %of (ds2::PrelGHC.Intzh)
		{%_ ->
		   ParCore.happyFail @ a @ LexCore.Token
		   @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		   @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char;
		 (78::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu1221 @ a);
		 (93::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu1231 @ a)}};
   actionzu1391 :: %forall a . PrelBase.Int ->
			       PrelBase.Int ->
			       LexCore.Token ->
			       ParCore.HappyState
			       LexCore.Token
			       (ParCore.HappyStk
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 (PrelBase.ZMZN PrelBase.Char)
				 PrelNum.Integer
				 PrelFloat.Double
				 PrelBase.Char)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			       ->
			       PrelBase.ZMZN
			       (ParCore.HappyState
				LexCore.Token
				(ParCore.HappyStk
				 (ParCore.HappyAbsSyn
				  (PrelBase.ZMZN PrelBase.Char)
				  (PrelBase.ZMZN PrelBase.Char)
				  PrelNum.Integer
				  PrelFloat.Double
				  PrelBase.Char)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			       ->
			       ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
     \ @ a (ds::PrelBase.Int) ->
	 %case ds %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	      %case ds1 %of (ds2::PrelGHC.Intzh)
		{%_ ->
		   ParCore.happyFail @ a @ LexCore.Token
		   @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		   @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char;
		 (83::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu1721 @ a)}};
   actionzu1991 :: %forall a . PrelBase.Int ->
			       PrelBase.Int ->
			       LexCore.Token ->
			       ParCore.HappyState
			       LexCore.Token
			       (ParCore.HappyStk
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 (PrelBase.ZMZN PrelBase.Char)
				 PrelNum.Integer
				 PrelFloat.Double
				 PrelBase.Char)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			       ->
			       PrelBase.ZMZN
			       (ParCore.HappyState
				LexCore.Token
				(ParCore.HappyStk
				 (ParCore.HappyAbsSyn
				  (PrelBase.ZMZN PrelBase.Char)
				  (PrelBase.ZMZN PrelBase.Char)
				  PrelNum.Integer
				  PrelFloat.Double
				  PrelBase.Char)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			       ->
			       ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
     \ @ a (ds::PrelBase.Int) ->
	 %case ds %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	      %case ds1 %of (ds2::PrelGHC.Intzh)
		{%_ ->
		   ParCore.happyFail @ a @ LexCore.Token
		   @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		   @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char;
		 (80::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu811 @ a);
		 (82::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu821 @ a);
		 (84::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu831 @ a);
		 (86::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu841 @ a);
		 (87::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu851 @ a);
		 (88::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu862 @ a);
		 (89::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu871 @ a);
		 (97::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (ParCore.actionzu32 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ PrelNum.Integer
		    @ PrelFloat.Double @ PrelBase.Char @ a);
		 (34::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu752 @ a);
		 (49::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu76 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a);
		 (50::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu771 @ a);
		 (51::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu221 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a);
		 (68::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu79 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a);
		 (69::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu80 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a)}};
   actionzu1861 :: %forall a . PrelBase.Int ->
			       PrelBase.Int ->
			       LexCore.Token ->
			       ParCore.HappyState
			       LexCore.Token
			       (ParCore.HappyStk
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 (PrelBase.ZMZN PrelBase.Char)
				 PrelNum.Integer
				 PrelFloat.Double
				 PrelBase.Char)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			       ->
			       PrelBase.ZMZN
			       (ParCore.HappyState
				LexCore.Token
				(ParCore.HappyStk
				 (ParCore.HappyAbsSyn
				  (PrelBase.ZMZN PrelBase.Char)
				  (PrelBase.ZMZN PrelBase.Char)
				  PrelNum.Integer
				  PrelFloat.Double
				  PrelBase.Char)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			       ->
			       ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
     \ @ a (ds::PrelBase.Int) ->
	 %case ds %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	      %case ds1 %of (ds2::PrelGHC.Intzh)
		{%_ ->
		   ParCore.happyFail @ a @ LexCore.Token
		   @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		   @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char;
		 (73::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu1991 @ a)}};
   actionzu1201 :: %forall a . PrelBase.Int ->
			       PrelBase.Int ->
			       LexCore.Token ->
			       ParCore.HappyState
			       LexCore.Token
			       (ParCore.HappyStk
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 (PrelBase.ZMZN PrelBase.Char)
				 PrelNum.Integer
				 PrelFloat.Double
				 PrelBase.Char)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			       ->
			       PrelBase.ZMZN
			       (ParCore.HappyState
				LexCore.Token
				(ParCore.HappyStk
				 (ParCore.HappyAbsSyn
				  (PrelBase.ZMZN PrelBase.Char)
				  (PrelBase.ZMZN PrelBase.Char)
				  PrelNum.Integer
				  PrelFloat.Double
				  PrelBase.Char)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			       ->
			       ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
     \ @ a (ds::PrelBase.Int) ->
	 %case ds %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	      %case ds1 %of (ds2::PrelGHC.Intzh)
		{%_ ->
		   ParCore.happyFail @ a @ LexCore.Token
		   @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		   @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char;
		 (89::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu501 @ (PrelBase.ZMZN PrelBase.Char) @ PrelNum.Integer
		    @ PrelFloat.Double @ PrelBase.Char @ a);
		 (92::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu511 @ (PrelBase.ZMZN PrelBase.Char) @ PrelNum.Integer
		    @ PrelFloat.Double @ PrelBase.Char @ a);
		 (97::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (ParCore.actionzu32 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ PrelNum.Integer
		    @ PrelFloat.Double @ PrelBase.Char @ a);
		 (34::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu452 @ a);
		 (62::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu46 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a);
		 (63::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu471 @ (PrelBase.ZMZN PrelBase.Char) @ PrelNum.Integer
		    @ PrelFloat.Double @ PrelBase.Char @ a);
		 (64::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu1861 @ a);
		 (69::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu49 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a)}};
   actionzu931 :: %forall a . PrelBase.Int ->
			      PrelBase.Int ->
			      LexCore.Token ->
			      ParCore.HappyState
			      LexCore.Token
			      (ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			      ->
			      PrelBase.ZMZN
			      (ParCore.HappyState
			       LexCore.Token
			       (ParCore.HappyStk
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 (PrelBase.ZMZN PrelBase.Char)
				 PrelNum.Integer
				 PrelFloat.Double
				 PrelBase.Char)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			      ->
			      ParCore.HappyStk
			      (ParCore.HappyAbsSyn
			       (PrelBase.ZMZN PrelBase.Char)
			       (PrelBase.ZMZN PrelBase.Char)
			       PrelNum.Integer
			       PrelFloat.Double
			       PrelBase.Char)
			      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
     \ @ a (ds::PrelBase.Int) ->
	 %case ds %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	      %case ds1 %of (ds2::PrelGHC.Intzh)
		{%_ ->
		   ParCore.happyFail @ a @ LexCore.Token
		   @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		   @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char;
		 (78::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu1201 @ a)}};
   actionzu911 :: %forall a . PrelBase.Int ->
			      PrelBase.Int ->
			      LexCore.Token ->
			      ParCore.HappyState
			      LexCore.Token
			      (ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			      ->
			      PrelBase.ZMZN
			      (ParCore.HappyState
			       LexCore.Token
			       (ParCore.HappyStk
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 (PrelBase.ZMZN PrelBase.Char)
				 PrelNum.Integer
				 PrelFloat.Double
				 PrelBase.Char)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			      ->
			      ParCore.HappyStk
			      (ParCore.HappyAbsSyn
			       (PrelBase.ZMZN PrelBase.Char)
			       (PrelBase.ZMZN PrelBase.Char)
			       PrelNum.Integer
			       PrelFloat.Double
			       PrelBase.Char)
			      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
     \ @ a (ds::PrelBase.Int) ->
	 %case ds %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	      %case ds1 %of (ds2::PrelGHC.Intzh)
		{%_ ->
		   ParCore.happyReducezu52 @ LexCore.Token @ a
		   @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		   @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char;
		 (71::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu1211 @ a)}};
   actionzu1211 :: %forall a . PrelBase.Int ->
			       PrelBase.Int ->
			       LexCore.Token ->
			       ParCore.HappyState
			       LexCore.Token
			       (ParCore.HappyStk
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 (PrelBase.ZMZN PrelBase.Char)
				 PrelNum.Integer
				 PrelFloat.Double
				 PrelBase.Char)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			       ->
			       PrelBase.ZMZN
			       (ParCore.HappyState
				LexCore.Token
				(ParCore.HappyStk
				 (ParCore.HappyAbsSyn
				  (PrelBase.ZMZN PrelBase.Char)
				  (PrelBase.ZMZN PrelBase.Char)
				  PrelNum.Integer
				  PrelFloat.Double
				  PrelBase.Char)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			       ->
			       ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
     \ @ a (ds::PrelBase.Int) ->
	 %case ds %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	      %case ds1 %of (ds2::PrelGHC.Intzh)
		{%_ ->
		   ParCore.happyFail @ a @ LexCore.Token
		   @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		   @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char;
		 (97::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (ParCore.actionzu32 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ PrelNum.Integer
		    @ PrelFloat.Double @ PrelBase.Char @ a);
		 (34::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu901 @ a);
		 (47::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu911 @ a);
		 (48::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu185 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a);
		 (69::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu931 @ a)}};
   actionzu1181 :: %forall a . PrelBase.Int ->
			       PrelBase.Int ->
			       LexCore.Token ->
			       ParCore.HappyState
			       LexCore.Token
			       (ParCore.HappyStk
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 (PrelBase.ZMZN PrelBase.Char)
				 PrelNum.Integer
				 PrelFloat.Double
				 PrelBase.Char)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			       ->
			       PrelBase.ZMZN
			       (ParCore.HappyState
				LexCore.Token
				(ParCore.HappyStk
				 (ParCore.HappyAbsSyn
				  (PrelBase.ZMZN PrelBase.Char)
				  (PrelBase.ZMZN PrelBase.Char)
				  PrelNum.Integer
				  PrelFloat.Double
				  PrelBase.Char)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			       ->
			       ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
     \ @ a (ds::PrelBase.Int) ->
	 %case ds %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	      %case ds1 %of (ds2::PrelGHC.Intzh)
		{%_ ->
		   ParCore.happyFail @ a @ LexCore.Token
		   @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		   @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char;
		 (97::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (ParCore.actionzu32 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ PrelNum.Integer
		    @ PrelFloat.Double @ PrelBase.Char @ a);
		 (34::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu901 @ a);
		 (47::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu911 @ a);
		 (48::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu1881 @ a);
		 (69::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu931 @ a)}};
   actionzu981 :: %forall a . PrelBase.Int ->
			      PrelBase.Int ->
			      LexCore.Token ->
			      ParCore.HappyState
			      LexCore.Token
			      (ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			      ->
			      PrelBase.ZMZN
			      (ParCore.HappyState
			       LexCore.Token
			       (ParCore.HappyStk
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 (PrelBase.ZMZN PrelBase.Char)
				 PrelNum.Integer
				 PrelFloat.Double
				 PrelBase.Char)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			      ->
			      ParCore.HappyStk
			      (ParCore.HappyAbsSyn
			       (PrelBase.ZMZN PrelBase.Char)
			       (PrelBase.ZMZN PrelBase.Char)
			       PrelNum.Integer
			       PrelFloat.Double
			       PrelBase.Char)
			      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
     \ @ a (ds::PrelBase.Int) ->
	 %case ds %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	      %case ds1 %of (ds2::PrelGHC.Intzh)
		{%_ ->
		   ParCore.happyFail @ a @ LexCore.Token
		   @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		   @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char;
		 (74::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu1181 @ a)}};
   actionzu821 :: %forall a . PrelBase.Int ->
			      PrelBase.Int ->
			      LexCore.Token ->
			      ParCore.HappyState
			      LexCore.Token
			      (ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			      ->
			      PrelBase.ZMZN
			      (ParCore.HappyState
			       LexCore.Token
			       (ParCore.HappyStk
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 (PrelBase.ZMZN PrelBase.Char)
				 PrelNum.Integer
				 PrelFloat.Double
				 PrelBase.Char)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			      ->
			      ParCore.HappyStk
			      (ParCore.HappyAbsSyn
			       (PrelBase.ZMZN PrelBase.Char)
			       (PrelBase.ZMZN PrelBase.Char)
			       PrelNum.Integer
			       PrelFloat.Double
			       PrelBase.Char)
			      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
     \ @ a (ds::PrelBase.Int) ->
	 %case ds %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	      %case ds1 %of (ds2::PrelGHC.Intzh)
		{%_ ->
		   ParCore.happyFail @ a @ LexCore.Token
		   @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		   @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char;
		 (77::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu981 @ a);
		 (97::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (ParCore.actionzu32 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ PrelNum.Integer
		    @ PrelFloat.Double @ PrelBase.Char @ a);
		 (34::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu901 @ a);
		 (45::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu1391 @ a);
		 (47::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu97 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a);
		 (69::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu931 @ a)}};
   actionzu1721 :: %forall a . PrelBase.Int ->
			       PrelBase.Int ->
			       LexCore.Token ->
			       ParCore.HappyState
			       LexCore.Token
			       (ParCore.HappyStk
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 (PrelBase.ZMZN PrelBase.Char)
				 PrelNum.Integer
				 PrelFloat.Double
				 PrelBase.Char)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			       ->
			       PrelBase.ZMZN
			       (ParCore.HappyState
				LexCore.Token
				(ParCore.HappyStk
				 (ParCore.HappyAbsSyn
				  (PrelBase.ZMZN PrelBase.Char)
				  (PrelBase.ZMZN PrelBase.Char)
				  PrelNum.Integer
				  PrelFloat.Double
				  PrelBase.Char)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			       ->
			       ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
     \ @ a (ds::PrelBase.Int) ->
	 %case ds %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	      %case ds1 %of (ds2::PrelGHC.Intzh)
		{%_ ->
		   ParCore.happyFail @ a @ LexCore.Token
		   @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		   @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char;
		 (80::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu811 @ a);
		 (82::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu821 @ a);
		 (84::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu831 @ a);
		 (86::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu841 @ a);
		 (87::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu851 @ a);
		 (88::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu862 @ a);
		 (89::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu871 @ a);
		 (97::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (ParCore.actionzu32 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ PrelNum.Integer
		    @ PrelFloat.Double @ PrelBase.Char @ a);
		 (34::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu752 @ a);
		 (49::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu76 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a);
		 (50::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu771 @ a);
		 (51::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu206 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a);
		 (68::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu79 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a);
		 (69::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu80 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a)}};
   actionzu2001 :: %forall a . PrelBase.Int ->
			       PrelBase.Int ->
			       LexCore.Token ->
			       ParCore.HappyState
			       LexCore.Token
			       (ParCore.HappyStk
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 (PrelBase.ZMZN PrelBase.Char)
				 PrelNum.Integer
				 PrelFloat.Double
				 PrelBase.Char)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			       ->
			       PrelBase.ZMZN
			       (ParCore.HappyState
				LexCore.Token
				(ParCore.HappyStk
				 (ParCore.HappyAbsSyn
				  (PrelBase.ZMZN PrelBase.Char)
				  (PrelBase.ZMZN PrelBase.Char)
				  PrelNum.Integer
				  PrelFloat.Double
				  PrelBase.Char)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			       ->
			       ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
     \ @ a (ds::PrelBase.Int) ->
	 %case ds %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	      %case ds1 %of (ds2::PrelGHC.Intzh)
		{%_ ->
		   ParCore.happyFail @ a @ LexCore.Token
		   @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		   @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char;
		 (80::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu811 @ a);
		 (82::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu821 @ a);
		 (84::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu831 @ a);
		 (86::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu841 @ a);
		 (87::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu851 @ a);
		 (88::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu862 @ a);
		 (89::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu871 @ a);
		 (97::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (ParCore.actionzu32 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ PrelNum.Integer
		    @ PrelFloat.Double @ PrelBase.Char @ a);
		 (34::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu752 @ a);
		 (49::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu76 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a);
		 (50::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu771 @ a);
		 (51::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu220 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ PrelNum.Integer
		    @ PrelFloat.Double @ PrelBase.Char @ a);
		 (68::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu79 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a);
		 (69::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu80 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a)}};
   actionzu1451 :: %forall a . PrelBase.Int ->
			       PrelBase.Int ->
			       LexCore.Token ->
			       ParCore.HappyState
			       LexCore.Token
			       (ParCore.HappyStk
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 (PrelBase.ZMZN PrelBase.Char)
				 PrelNum.Integer
				 PrelFloat.Double
				 PrelBase.Char)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			       ->
			       PrelBase.ZMZN
			       (ParCore.HappyState
				LexCore.Token
				(ParCore.HappyStk
				 (ParCore.HappyAbsSyn
				  (PrelBase.ZMZN PrelBase.Char)
				  (PrelBase.ZMZN PrelBase.Char)
				  PrelNum.Integer
				  PrelFloat.Double
				  PrelBase.Char)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			       ->
			       ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
     \ @ a (ds::PrelBase.Int) ->
	 %case ds %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	      %case ds1 %of (ds2::PrelGHC.Intzh)
		{%_ ->
		   ParCore.happyFail @ a @ LexCore.Token
		   @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		   @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char;
		 (80::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu811 @ a);
		 (82::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu821 @ a);
		 (84::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu831 @ a);
		 (86::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu841 @ a);
		 (87::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu851 @ a);
		 (88::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu862 @ a);
		 (89::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu871 @ a);
		 (97::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (ParCore.actionzu32 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ PrelNum.Integer
		    @ PrelFloat.Double @ PrelBase.Char @ a);
		 (34::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu752 @ a);
		 (49::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu76 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a);
		 (50::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu771 @ a);
		 (51::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu168 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a);
		 (68::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu79 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a);
		 (69::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu80 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a)}};
   actionzu661 :: %forall a . PrelBase.Int ->
			      PrelBase.Int ->
			      LexCore.Token ->
			      ParCore.HappyState
			      LexCore.Token
			      (ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			      ->
			      PrelBase.ZMZN
			      (ParCore.HappyState
			       LexCore.Token
			       (ParCore.HappyStk
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 (PrelBase.ZMZN PrelBase.Char)
				 PrelNum.Integer
				 PrelFloat.Double
				 PrelBase.Char)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			      ->
			      ParCore.HappyStk
			      (ParCore.HappyAbsSyn
			       (PrelBase.ZMZN PrelBase.Char)
			       (PrelBase.ZMZN PrelBase.Char)
			       PrelNum.Integer
			       PrelFloat.Double
			       PrelBase.Char)
			      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
     \ @ a (ds::PrelBase.Int) ->
	 %case ds %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	      %case ds1 %of (ds2::PrelGHC.Intzh)
		{%_ ->
		   ParCore.happyFail @ a @ LexCore.Token
		   @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		   @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char;
		 (81::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu1451 @ a)}};
   actionzu2081 :: %forall a . PrelBase.Int ->
			       PrelBase.Int ->
			       LexCore.Token ->
			       ParCore.HappyState
			       LexCore.Token
			       (ParCore.HappyStk
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 (PrelBase.ZMZN PrelBase.Char)
				 PrelNum.Integer
				 PrelFloat.Double
				 PrelBase.Char)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			       ->
			       PrelBase.ZMZN
			       (ParCore.HappyState
				LexCore.Token
				(ParCore.HappyStk
				 (ParCore.HappyAbsSyn
				  (PrelBase.ZMZN PrelBase.Char)
				  (PrelBase.ZMZN PrelBase.Char)
				  PrelNum.Integer
				  PrelFloat.Double
				  PrelBase.Char)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			       ->
			       ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
     \ @ a (ds::PrelBase.Int) ->
	 %case ds %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	      %case ds1 %of (ds2::PrelGHC.Intzh)
		{%_ ->
		   ParCore.happyFail @ a @ LexCore.Token
		   @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		   @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char;
		 (80::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu811 @ a);
		 (82::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu821 @ a);
		 (84::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu831 @ a);
		 (86::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu841 @ a);
		 (87::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu851 @ a);
		 (88::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu862 @ a);
		 (89::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu871 @ a);
		 (97::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (ParCore.actionzu32 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ PrelNum.Integer
		    @ PrelFloat.Double @ PrelBase.Char @ a);
		 (34::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu752 @ a);
		 (49::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu76 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a);
		 (50::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu771 @ a);
		 (51::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu214 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a);
		 (68::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu79 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a);
		 (69::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu80 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a)}};
   actionzu1691 :: %forall a . PrelBase.Int ->
			       PrelBase.Int ->
			       LexCore.Token ->
			       ParCore.HappyState
			       LexCore.Token
			       (ParCore.HappyStk
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 (PrelBase.ZMZN PrelBase.Char)
				 PrelNum.Integer
				 PrelFloat.Double
				 PrelBase.Char)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			       ->
			       PrelBase.ZMZN
			       (ParCore.HappyState
				LexCore.Token
				(ParCore.HappyStk
				 (ParCore.HappyAbsSyn
				  (PrelBase.ZMZN PrelBase.Char)
				  (PrelBase.ZMZN PrelBase.Char)
				  PrelNum.Integer
				  PrelFloat.Double
				  PrelBase.Char)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			       ->
			       ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
     \ @ a (ds::PrelBase.Int) ->
	 %case ds %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	      %case ds1 %of (ds2::PrelGHC.Intzh)
		{%_ ->
		   ParCore.happyFail @ a @ LexCore.Token
		   @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		   @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char;
		 (81::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu2081 @ a);
		 (89::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu632 @ a);
		 (56::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu148 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a)}};
   actionzu1441 :: %forall a . PrelBase.Int ->
			       PrelBase.Int ->
			       LexCore.Token ->
			       ParCore.HappyState
			       LexCore.Token
			       (ParCore.HappyStk
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 (PrelBase.ZMZN PrelBase.Char)
				 PrelNum.Integer
				 PrelFloat.Double
				 PrelBase.Char)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			       ->
			       PrelBase.ZMZN
			       (ParCore.HappyState
				LexCore.Token
				(ParCore.HappyStk
				 (ParCore.HappyAbsSyn
				  (PrelBase.ZMZN PrelBase.Char)
				  (PrelBase.ZMZN PrelBase.Char)
				  PrelNum.Integer
				  PrelFloat.Double
				  PrelBase.Char)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			       ->
			       ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
     \ @ a (ds::PrelBase.Int) ->
	 %case ds %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	      %case ds1 %of (ds2::PrelGHC.Intzh)
		{%_ ->
		   ParCore.happyReducezu78 @ LexCore.Token @ a
		   @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		   @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char;
		 (79::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu561 @ a);
		 (57::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu1691 @ a);
		 (60::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu152 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a)}};
   actionzu671 :: %forall a . PrelBase.Int ->
			      PrelBase.Int ->
			      LexCore.Token ->
			      ParCore.HappyState
			      LexCore.Token
			      (ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			      ->
			      PrelBase.ZMZN
			      (ParCore.HappyState
			       LexCore.Token
			       (ParCore.HappyStk
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 (PrelBase.ZMZN PrelBase.Char)
				 PrelNum.Integer
				 PrelFloat.Double
				 PrelBase.Char)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			      ->
			      ParCore.HappyStk
			      (ParCore.HappyAbsSyn
			       (PrelBase.ZMZN PrelBase.Char)
			       (PrelBase.ZMZN PrelBase.Char)
			       PrelNum.Integer
			       PrelFloat.Double
			       PrelBase.Char)
			      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
     \ @ a
       (eta::PrelBase.Int)
       (eta1::PrelBase.Int)
       (eta2::LexCore.Token)
       (eta3::ParCore.HappyState
	      LexCore.Token
	      (ParCore.HappyStk
	       (ParCore.HappyAbsSyn
		(PrelBase.ZMZN PrelBase.Char)
		(PrelBase.ZMZN PrelBase.Char)
		PrelNum.Integer
		PrelFloat.Double
		PrelBase.Char)
	       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)) ->
	 %case eta %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds::PrelGHC.Intzh) ->
	      %case ds %of (ds1::PrelGHC.Intzh)
		{%_ ->
		   ParCore.happyReducezu85 @ LexCore.Token @ a
		   @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		   @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char eta1 eta2
		   eta3;
		 (61::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu1441 @ a)
		   eta1 eta2 eta3}};
   actionzu2151 :: %forall a . PrelBase.Int ->
			       PrelBase.Int ->
			       LexCore.Token ->
			       ParCore.HappyState
			       LexCore.Token
			       (ParCore.HappyStk
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 (PrelBase.ZMZN PrelBase.Char)
				 PrelNum.Integer
				 PrelFloat.Double
				 PrelBase.Char)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			       ->
			       PrelBase.ZMZN
			       (ParCore.HappyState
				LexCore.Token
				(ParCore.HappyStk
				 (ParCore.HappyAbsSyn
				  (PrelBase.ZMZN PrelBase.Char)
				  (PrelBase.ZMZN PrelBase.Char)
				  PrelNum.Integer
				  PrelFloat.Double
				  PrelBase.Char)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			       ->
			       ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
     \ @ a (ds::PrelBase.Int) ->
	 %case ds %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	      %case ds1 %of (ds2::PrelGHC.Intzh)
		{%_ ->
		   ParCore.happyFail @ a @ LexCore.Token
		   @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		   @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char;
		 (89::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu362 @ a);
		 (91::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu681 @ a);
		 (97::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (ParCore.actionzu32 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ PrelNum.Integer
		    @ PrelFloat.Double @ PrelBase.Char @ a);
		 (34::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu333 @ a);
		 (54::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu641 @ a);
		 (55::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu2241 @ a);
		 (68::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu661 @ a);
		 (69::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu671 @ a)}};
   actionzu1431 :: %forall a . PrelBase.Int ->
			       PrelBase.Int ->
			       LexCore.Token ->
			       ParCore.HappyState
			       LexCore.Token
			       (ParCore.HappyStk
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 (PrelBase.ZMZN PrelBase.Char)
				 PrelNum.Integer
				 PrelFloat.Double
				 PrelBase.Char)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			       ->
			       PrelBase.ZMZN
			       (ParCore.HappyState
				LexCore.Token
				(ParCore.HappyStk
				 (ParCore.HappyAbsSyn
				  (PrelBase.ZMZN PrelBase.Char)
				  (PrelBase.ZMZN PrelBase.Char)
				  PrelNum.Integer
				  PrelFloat.Double
				  PrelBase.Char)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			       ->
			       ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
     \ @ a (ds::PrelBase.Int) ->
	 %case ds %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	      %case ds1 %of (ds2::PrelGHC.Intzh)
		{%_ ->
		   ParCore.happyFail @ a @ LexCore.Token
		   @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		   @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char;
		 (80::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu811 @ a);
		 (82::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu821 @ a);
		 (84::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu831 @ a);
		 (86::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu841 @ a);
		 (87::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu851 @ a);
		 (88::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu862 @ a);
		 (89::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu871 @ a);
		 (97::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (ParCore.actionzu32 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ PrelNum.Integer
		    @ PrelFloat.Double @ PrelBase.Char @ a);
		 (34::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu752 @ a);
		 (49::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu76 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a);
		 (50::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu771 @ a);
		 (51::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu170 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a);
		 (68::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu79 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a);
		 (69::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu80 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a)}};
   actionzu1711 :: %forall a . PrelBase.Int ->
			       PrelBase.Int ->
			       LexCore.Token ->
			       ParCore.HappyState
			       LexCore.Token
			       (ParCore.HappyStk
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 (PrelBase.ZMZN PrelBase.Char)
				 PrelNum.Integer
				 PrelFloat.Double
				 PrelBase.Char)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			       ->
			       PrelBase.ZMZN
			       (ParCore.HappyState
				LexCore.Token
				(ParCore.HappyStk
				 (ParCore.HappyAbsSyn
				  (PrelBase.ZMZN PrelBase.Char)
				  (PrelBase.ZMZN PrelBase.Char)
				  PrelNum.Integer
				  PrelFloat.Double
				  PrelBase.Char)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			       ->
			       ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
     \ @ a (ds::PrelBase.Int) ->
	 %case ds %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	      %case ds1 %of (ds2::PrelGHC.Intzh)
		{%_ ->
		   ParCore.happyFail @ a @ LexCore.Token
		   @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		   @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char;
		 (80::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu811 @ a);
		 (82::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu821 @ a);
		 (84::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu831 @ a);
		 (86::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu841 @ a);
		 (87::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu851 @ a);
		 (88::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu862 @ a);
		 (89::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu871 @ a);
		 (97::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (ParCore.actionzu32 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ PrelNum.Integer
		    @ PrelFloat.Double @ PrelBase.Char @ a);
		 (34::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu752 @ a);
		 (49::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu76 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a);
		 (50::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu771 @ a);
		 (51::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu207 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a);
		 (68::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu79 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a);
		 (69::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu80 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a)}};
   actionzu1361 :: %forall a . PrelBase.Int ->
			       PrelBase.Int ->
			       LexCore.Token ->
			       ParCore.HappyState
			       LexCore.Token
			       (ParCore.HappyStk
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 (PrelBase.ZMZN PrelBase.Char)
				 PrelNum.Integer
				 PrelFloat.Double
				 PrelBase.Char)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			       ->
			       PrelBase.ZMZN
			       (ParCore.HappyState
				LexCore.Token
				(ParCore.HappyStk
				 (ParCore.HappyAbsSyn
				  (PrelBase.ZMZN PrelBase.Char)
				  (PrelBase.ZMZN PrelBase.Char)
				  PrelNum.Integer
				  PrelFloat.Double
				  PrelBase.Char)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			       ->
			       ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
     \ @ a (ds::PrelBase.Int) ->
	 %case ds %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	      %case ds1 %of (ds2::PrelGHC.Intzh)
		{%_ ->
		   ParCore.happyFail @ a @ LexCore.Token
		   @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		   @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char;
		 (80::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu811 @ a);
		 (82::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu821 @ a);
		 (84::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu831 @ a);
		 (86::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu841 @ a);
		 (87::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu851 @ a);
		 (88::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu862 @ a);
		 (89::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu871 @ a);
		 (97::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (ParCore.actionzu32 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ PrelNum.Integer
		    @ PrelFloat.Double @ PrelBase.Char @ a);
		 (34::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu752 @ a);
		 (49::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu76 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a);
		 (50::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu771 @ a);
		 (51::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu175 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ PrelNum.Integer
		    @ PrelFloat.Double @ PrelBase.Char @ a);
		 (68::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu79 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a);
		 (69::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu80 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a)}};
   actionzu871 :: %forall a . PrelBase.Int ->
			      PrelBase.Int ->
			      LexCore.Token ->
			      ParCore.HappyState
			      LexCore.Token
			      (ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			      ->
			      PrelBase.ZMZN
			      (ParCore.HappyState
			       LexCore.Token
			       (ParCore.HappyStk
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 (PrelBase.ZMZN PrelBase.Char)
				 PrelNum.Integer
				 PrelFloat.Double
				 PrelBase.Char)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			      ->
			      ParCore.HappyStk
			      (ParCore.HappyAbsSyn
			       (PrelBase.ZMZN PrelBase.Char)
			       (PrelBase.ZMZN PrelBase.Char)
			       PrelNum.Integer
			       PrelFloat.Double
			       PrelBase.Char)
			      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
     \ @ a (ds::PrelBase.Int) ->
	 %case ds %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	      %case ds1 %of (ds2::PrelGHC.Intzh)
		{%_ ->
		   ParCore.happyFail @ a @ LexCore.Token
		   @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		   @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char;
		 (80::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu811 @ a);
		 (82::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu821 @ a);
		 (84::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu831 @ a);
		 (86::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu841 @ a);
		 (87::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu851 @ a);
		 (88::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu862 @ a);
		 (89::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu871 @ a);
		 (97::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (ParCore.actionzu32 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ PrelNum.Integer
		    @ PrelFloat.Double @ PrelBase.Char @ a);
		 (98::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (ParCore.actionzu131 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ PrelNum.Integer
		    @ PrelFloat.Double @ PrelBase.Char @ a);
		 (99::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (ParCore.actionzu132 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelFloat.Double @ PrelBase.Char @ a);
		 (100::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (ParCore.actionzu133 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelBase.Char @ a);
		 (101::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (ParCore.actionzu134 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ a);
		 (34::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu752 @ a);
		 (35::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu1261 @ a);
		 (36::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu1271 @ a);
		 (37::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu1281 @ a);
		 (38::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu1291 @ a);
		 (49::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu76 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a);
		 (50::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu771 @ a);
		 (51::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu1301 @ a);
		 (68::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu79 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a);
		 (69::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu80 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a)}};
   actionzu771 :: %forall a . PrelBase.Int ->
			      PrelBase.Int ->
			      LexCore.Token ->
			      ParCore.HappyState
			      LexCore.Token
			      (ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			      ->
			      PrelBase.ZMZN
			      (ParCore.HappyState
			       LexCore.Token
			       (ParCore.HappyStk
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 (PrelBase.ZMZN PrelBase.Char)
				 PrelNum.Integer
				 PrelFloat.Double
				 PrelBase.Char)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			      ->
			      ParCore.HappyStk
			      (ParCore.HappyAbsSyn
			       (PrelBase.ZMZN PrelBase.Char)
			       (PrelBase.ZMZN PrelBase.Char)
			       PrelNum.Integer
			       PrelFloat.Double
			       PrelBase.Char)
			      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
     \ @ a (ds::PrelBase.Int) ->
	 %case ds %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	      %case ds1 %of (ds2::PrelGHC.Intzh)
		{%_ ->
		   ParCore.happyReducezu67 @ LexCore.Token @ a
		   @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		   @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char;
		 (79::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu1252 @ a);
		 (89::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu871 @ a);
		 (97::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (ParCore.actionzu32 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ PrelNum.Integer
		    @ PrelFloat.Double @ PrelBase.Char @ a);
		 (34::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu752 @ a);
		 (49::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu124 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a);
		 (68::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu79 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a);
		 (69::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu80 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a)}};
   actionzu1371 :: %forall a . PrelBase.Int ->
			       PrelBase.Int ->
			       LexCore.Token ->
			       ParCore.HappyState
			       LexCore.Token
			       (ParCore.HappyStk
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 (PrelBase.ZMZN PrelBase.Char)
				 PrelNum.Integer
				 PrelFloat.Double
				 PrelBase.Char)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			       ->
			       PrelBase.ZMZN
			       (ParCore.HappyState
				LexCore.Token
				(ParCore.HappyStk
				 (ParCore.HappyAbsSyn
				  (PrelBase.ZMZN PrelBase.Char)
				  (PrelBase.ZMZN PrelBase.Char)
				  PrelNum.Integer
				  PrelFloat.Double
				  PrelBase.Char)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			       ->
			       ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
     \ @ a (ds::PrelBase.Int) ->
	 %case ds %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	      %case ds1 %of (ds2::PrelGHC.Intzh)
		{%_ ->
		   ParCore.happyFail @ a @ LexCore.Token
		   @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		   @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char;
		 (80::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu811 @ a);
		 (82::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu821 @ a);
		 (84::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu831 @ a);
		 (86::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu841 @ a);
		 (87::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu851 @ a);
		 (88::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu862 @ a);
		 (89::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu871 @ a);
		 (97::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (ParCore.actionzu32 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ PrelNum.Integer
		    @ PrelFloat.Double @ PrelBase.Char @ a);
		 (34::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu752 @ a);
		 (49::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu76 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a);
		 (50::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu771 @ a);
		 (51::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu174 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a);
		 (68::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu79 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a);
		 (69::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu80 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a)}};
   actionzu841 :: %forall a . PrelBase.Int ->
			      PrelBase.Int ->
			      LexCore.Token ->
			      ParCore.HappyState
			      LexCore.Token
			      (ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			      ->
			      PrelBase.ZMZN
			      (ParCore.HappyState
			       LexCore.Token
			       (ParCore.HappyStk
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 (PrelBase.ZMZN PrelBase.Char)
				 PrelNum.Integer
				 PrelFloat.Double
				 PrelBase.Char)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			      ->
			      ParCore.HappyStk
			      (ParCore.HappyAbsSyn
			       (PrelBase.ZMZN PrelBase.Char)
			       (PrelBase.ZMZN PrelBase.Char)
			       PrelNum.Integer
			       PrelFloat.Double
			       PrelBase.Char)
			      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
     \ @ a (ds::PrelBase.Int) ->
	 %case ds %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	      %case ds1 %of (ds2::PrelGHC.Intzh)
		{%_ ->
		   ParCore.happyFail @ a @ LexCore.Token
		   @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		   @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char;
		 (89::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu501 @ (PrelBase.ZMZN PrelBase.Char) @ PrelNum.Integer
		    @ PrelFloat.Double @ PrelBase.Char @ a);
		 (97::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (ParCore.actionzu32 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ PrelNum.Integer
		    @ PrelFloat.Double @ PrelBase.Char @ a);
		 (34::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu452 @ a);
		 (62::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu1371 @ a);
		 (69::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu49 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a)}};
   actionzu1461 :: %forall a . PrelBase.Int ->
			       PrelBase.Int ->
			       LexCore.Token ->
			       ParCore.HappyState
			       LexCore.Token
			       (ParCore.HappyStk
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 (PrelBase.ZMZN PrelBase.Char)
				 PrelNum.Integer
				 PrelFloat.Double
				 PrelBase.Char)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			       ->
			       PrelBase.ZMZN
			       (ParCore.HappyState
				LexCore.Token
				(ParCore.HappyStk
				 (ParCore.HappyAbsSyn
				  (PrelBase.ZMZN PrelBase.Char)
				  (PrelBase.ZMZN PrelBase.Char)
				  PrelNum.Integer
				  PrelFloat.Double
				  PrelBase.Char)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			       ->
			       ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
     \ @ a (ds::PrelBase.Int) ->
	 %case ds %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	      %case ds1 %of (ds2::PrelGHC.Intzh)
		{%_ ->
		   ParCore.happyFail @ a @ LexCore.Token
		   @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		   @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char;
		 (89::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu362 @ a);
		 (91::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu681 @ a);
		 (97::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (ParCore.actionzu32 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ PrelNum.Integer
		    @ PrelFloat.Double @ PrelBase.Char @ a);
		 (34::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu333 @ a);
		 (54::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu641 @ a);
		 (55::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (ParCore.actionzu167 @ PrelBase.Int @ LexCore.Token
		    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a);
		 (68::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu661 @ a);
		 (69::PrelGHC.Intzh) ->
		   ParCore.happyGoto
		   @ (ParCore.HappyState
		      LexCore.Token
		      (ParCore.HappyStk
		       (ParCore.HappyAbsSyn
			(PrelBase.ZMZN PrelBase.Char)
			(PrelBase.ZMZN PrelBase.Char)
			PrelNum.Integer
			PrelFloat.Double
			PrelBase.Char)
		       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
		   @ LexCore.Token
		   @ (ParCore.HappyStk
		      (ParCore.HappyAbsSyn
		       (PrelBase.ZMZN PrelBase.Char)
		       (PrelBase.ZMZN PrelBase.Char)
		       PrelNum.Integer
		       PrelFloat.Double
		       PrelBase.Char)
		      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
		   (%note "InlineMe"
		    actionzu671 @ a)}};
   actionzu641 :: %forall a . PrelBase.Int ->
			      PrelBase.Int ->
			      LexCore.Token ->
			      ParCore.HappyState
			      LexCore.Token
			      (ParCore.HappyStk
			       (ParCore.HappyAbsSyn
				(PrelBase.ZMZN PrelBase.Char)
				(PrelBase.ZMZN PrelBase.Char)
				PrelNum.Integer
				PrelFloat.Double
				PrelBase.Char)
			       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
			      ->
			      PrelBase.ZMZN
			      (ParCore.HappyState
			       LexCore.Token
			       (ParCore.HappyStk
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 (PrelBase.ZMZN PrelBase.Char)
				 PrelNum.Integer
				 PrelFloat.Double
				 PrelBase.Char)
				-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
			      ->
			      ParCore.HappyStk
			      (ParCore.HappyAbsSyn
			       (PrelBase.ZMZN PrelBase.Char)
			       (PrelBase.ZMZN PrelBase.Char)
			       PrelNum.Integer
			       PrelFloat.Double
			       PrelBase.Char)
			      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
     \ @ a (ds::PrelBase.Int) ->
	 %case ds %of (wild::PrelBase.Int)
	   {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	      %case ds1 %of (ds2::PrelGHC.Intzh)
		{%_ ->
		   ParCore.happyReducezu75 @ LexCore.Token @ a
		   @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
		   @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char;
		 (71::PrelGHC.Intzh) ->
		   happyShift6 @ a
		   (%note "InlineMe"
		    actionzu1461 @ a)}}};
  ParCore.actionzu215 :: %forall a . PrelBase.Int ->
				     PrelBase.Int ->
				     LexCore.Token ->
				     ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				     ->
				     PrelBase.ZMZN
				     (ParCore.HappyState
				      LexCore.Token
				      (ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					(PrelBase.ZMZN PrelBase.Char)
					PrelNum.Integer
					PrelFloat.Double
					PrelBase.Char)
				       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				     ->
				     ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	%note "InlineMe"
	actionzu2151 @ a;
  ParCore.actionzu208 :: %forall a . PrelBase.Int ->
				     PrelBase.Int ->
				     LexCore.Token ->
				     ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				     ->
				     PrelBase.ZMZN
				     (ParCore.HappyState
				      LexCore.Token
				      (ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					(PrelBase.ZMZN PrelBase.Char)
					PrelNum.Integer
					PrelFloat.Double
					PrelBase.Char)
				       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				     ->
				     ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	%note "InlineMe"
	actionzu2081 @ a;
  ParCore.actionzu205 :: %forall a . PrelBase.Int ->
				     PrelBase.Int ->
				     LexCore.Token ->
				     ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				     ->
				     PrelBase.ZMZN
				     (ParCore.HappyState
				      LexCore.Token
				      (ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					(PrelBase.ZMZN PrelBase.Char)
					PrelNum.Integer
					PrelFloat.Double
					PrelBase.Char)
				       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				     ->
				     ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	%note "InlineMe"
	actionzu2051 @ a;
  ParCore.actionzu200 :: %forall a . PrelBase.Int ->
				     PrelBase.Int ->
				     LexCore.Token ->
				     ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				     ->
				     PrelBase.ZMZN
				     (ParCore.HappyState
				      LexCore.Token
				      (ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					(PrelBase.ZMZN PrelBase.Char)
					PrelNum.Integer
					PrelFloat.Double
					PrelBase.Char)
				       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				     ->
				     ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	%note "InlineMe"
	actionzu2001 @ a;
  ParCore.actionzu199 :: %forall a . PrelBase.Int ->
				     PrelBase.Int ->
				     LexCore.Token ->
				     ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				     ->
				     PrelBase.ZMZN
				     (ParCore.HappyState
				      LexCore.Token
				      (ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					(PrelBase.ZMZN PrelBase.Char)
					PrelNum.Integer
					PrelFloat.Double
					PrelBase.Char)
				       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				     ->
				     ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	%note "InlineMe"
	actionzu1991 @ a;
  ParCore.actionzu186 :: %forall a . PrelBase.Int ->
				     PrelBase.Int ->
				     LexCore.Token ->
				     ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				     ->
				     PrelBase.ZMZN
				     (ParCore.HappyState
				      LexCore.Token
				      (ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					(PrelBase.ZMZN PrelBase.Char)
					PrelNum.Integer
					PrelFloat.Double
					PrelBase.Char)
				       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				     ->
				     ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	%note "InlineMe"
	actionzu1861 @ a;
  ParCore.actionzu184 :: %forall a . PrelBase.Int ->
				     PrelBase.Int ->
				     LexCore.Token ->
				     ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				     ->
				     PrelBase.ZMZN
				     (ParCore.HappyState
				      LexCore.Token
				      (ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					(PrelBase.ZMZN PrelBase.Char)
					PrelNum.Integer
					PrelFloat.Double
					PrelBase.Char)
				       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				     ->
				     ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	%note "InlineMe"
	actionzu1841 @ a;
  ParCore.actionzu173 :: %forall a . PrelBase.Int ->
				     PrelBase.Int ->
				     LexCore.Token ->
				     ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				     ->
				     PrelBase.ZMZN
				     (ParCore.HappyState
				      LexCore.Token
				      (ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					(PrelBase.ZMZN PrelBase.Char)
					PrelNum.Integer
					PrelFloat.Double
					PrelBase.Char)
				       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				     ->
				     ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	%note "InlineMe"
	actionzu1731 @ a;
  ParCore.actionzu172 :: %forall a . PrelBase.Int ->
				     PrelBase.Int ->
				     LexCore.Token ->
				     ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				     ->
				     PrelBase.ZMZN
				     (ParCore.HappyState
				      LexCore.Token
				      (ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					(PrelBase.ZMZN PrelBase.Char)
					PrelNum.Integer
					PrelFloat.Double
					PrelBase.Char)
				       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				     ->
				     ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	%note "InlineMe"
	actionzu1721 @ a;
  ParCore.actionzu171 :: %forall a . PrelBase.Int ->
				     PrelBase.Int ->
				     LexCore.Token ->
				     ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				     ->
				     PrelBase.ZMZN
				     (ParCore.HappyState
				      LexCore.Token
				      (ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					(PrelBase.ZMZN PrelBase.Char)
					PrelNum.Integer
					PrelFloat.Double
					PrelBase.Char)
				       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				     ->
				     ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	%note "InlineMe"
	actionzu1711 @ a;
  ParCore.actionzu169 :: %forall a . PrelBase.Int ->
				     PrelBase.Int ->
				     LexCore.Token ->
				     ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				     ->
				     PrelBase.ZMZN
				     (ParCore.HappyState
				      LexCore.Token
				      (ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					(PrelBase.ZMZN PrelBase.Char)
					PrelNum.Integer
					PrelFloat.Double
					PrelBase.Char)
				       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				     ->
				     ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	%note "InlineMe"
	actionzu1691 @ a;
  ParCore.actionzu146 :: %forall a . PrelBase.Int ->
				     PrelBase.Int ->
				     LexCore.Token ->
				     ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				     ->
				     PrelBase.ZMZN
				     (ParCore.HappyState
				      LexCore.Token
				      (ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					(PrelBase.ZMZN PrelBase.Char)
					PrelNum.Integer
					PrelFloat.Double
					PrelBase.Char)
				       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				     ->
				     ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	%note "InlineMe"
	actionzu1461 @ a;
  ParCore.actionzu145 :: %forall a . PrelBase.Int ->
				     PrelBase.Int ->
				     LexCore.Token ->
				     ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				     ->
				     PrelBase.ZMZN
				     (ParCore.HappyState
				      LexCore.Token
				      (ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					(PrelBase.ZMZN PrelBase.Char)
					PrelNum.Integer
					PrelFloat.Double
					PrelBase.Char)
				       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				     ->
				     ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	%note "InlineMe"
	actionzu1451 @ a;
  ParCore.actionzu144 :: %forall a . PrelBase.Int ->
				     PrelBase.Int ->
				     LexCore.Token ->
				     ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				     ->
				     PrelBase.ZMZN
				     (ParCore.HappyState
				      LexCore.Token
				      (ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					(PrelBase.ZMZN PrelBase.Char)
					PrelNum.Integer
					PrelFloat.Double
					PrelBase.Char)
				       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				     ->
				     ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	%note "InlineMe"
	actionzu1441 @ a;
  ParCore.actionzu143 :: %forall a . PrelBase.Int ->
				     PrelBase.Int ->
				     LexCore.Token ->
				     ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				     ->
				     PrelBase.ZMZN
				     (ParCore.HappyState
				      LexCore.Token
				      (ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					(PrelBase.ZMZN PrelBase.Char)
					PrelNum.Integer
					PrelFloat.Double
					PrelBase.Char)
				       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				     ->
				     ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	%note "InlineMe"
	actionzu1431 @ a;
  ParCore.actionzu140 :: %forall a . PrelBase.Int ->
				     PrelBase.Int ->
				     LexCore.Token ->
				     ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				     ->
				     PrelBase.ZMZN
				     (ParCore.HappyState
				      LexCore.Token
				      (ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					(PrelBase.ZMZN PrelBase.Char)
					PrelNum.Integer
					PrelFloat.Double
					PrelBase.Char)
				       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				     ->
				     ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	%note "InlineMe"
	actionzu1401 @ a;
  ParCore.actionzu139 :: %forall a . PrelBase.Int ->
				     PrelBase.Int ->
				     LexCore.Token ->
				     ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				     ->
				     PrelBase.ZMZN
				     (ParCore.HappyState
				      LexCore.Token
				      (ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					(PrelBase.ZMZN PrelBase.Char)
					PrelNum.Integer
					PrelFloat.Double
					PrelBase.Char)
				       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				     ->
				     ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	%note "InlineMe"
	actionzu1391 @ a;
  ParCore.actionzu138 :: %forall a . PrelBase.Int ->
				     PrelBase.Int ->
				     LexCore.Token ->
				     ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				     ->
				     PrelBase.ZMZN
				     (ParCore.HappyState
				      LexCore.Token
				      (ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					(PrelBase.ZMZN PrelBase.Char)
					PrelNum.Integer
					PrelFloat.Double
					PrelBase.Char)
				       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				     ->
				     ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	%note "InlineMe"
	actionzu1381 @ a;
  ParCore.actionzu137 :: %forall a . PrelBase.Int ->
				     PrelBase.Int ->
				     LexCore.Token ->
				     ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				     ->
				     PrelBase.ZMZN
				     (ParCore.HappyState
				      LexCore.Token
				      (ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					(PrelBase.ZMZN PrelBase.Char)
					PrelNum.Integer
					PrelFloat.Double
					PrelBase.Char)
				       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				     ->
				     ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	%note "InlineMe"
	actionzu1371 @ a;
  ParCore.actionzu136 :: %forall a . PrelBase.Int ->
				     PrelBase.Int ->
				     LexCore.Token ->
				     ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				     ->
				     PrelBase.ZMZN
				     (ParCore.HappyState
				      LexCore.Token
				      (ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					(PrelBase.ZMZN PrelBase.Char)
					PrelNum.Integer
					PrelFloat.Double
					PrelBase.Char)
				       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				     ->
				     ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	%note "InlineMe"
	actionzu1361 @ a;
  ParCore.actionzu122 :: %forall a . PrelBase.Int ->
				     PrelBase.Int ->
				     LexCore.Token ->
				     ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				     ->
				     PrelBase.ZMZN
				     (ParCore.HappyState
				      LexCore.Token
				      (ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					(PrelBase.ZMZN PrelBase.Char)
					PrelNum.Integer
					PrelFloat.Double
					PrelBase.Char)
				       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				     ->
				     ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	%note "InlineMe"
	actionzu1221 @ a;
  ParCore.actionzu121 :: %forall a . PrelBase.Int ->
				     PrelBase.Int ->
				     LexCore.Token ->
				     ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				     ->
				     PrelBase.ZMZN
				     (ParCore.HappyState
				      LexCore.Token
				      (ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					(PrelBase.ZMZN PrelBase.Char)
					PrelNum.Integer
					PrelFloat.Double
					PrelBase.Char)
				       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				     ->
				     ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	%note "InlineMe"
	actionzu1211 @ a;
  ParCore.actionzu120 :: %forall a . PrelBase.Int ->
				     PrelBase.Int ->
				     LexCore.Token ->
				     ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				     ->
				     PrelBase.ZMZN
				     (ParCore.HappyState
				      LexCore.Token
				      (ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					(PrelBase.ZMZN PrelBase.Char)
					PrelNum.Integer
					PrelFloat.Double
					PrelBase.Char)
				       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				     ->
				     ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	%note "InlineMe"
	actionzu1201 @ a;
  ParCore.actionzu118 :: %forall a . PrelBase.Int ->
				     PrelBase.Int ->
				     LexCore.Token ->
				     ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				     ->
				     PrelBase.ZMZN
				     (ParCore.HappyState
				      LexCore.Token
				      (ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					(PrelBase.ZMZN PrelBase.Char)
					PrelNum.Integer
					PrelFloat.Double
					PrelBase.Char)
				       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				     ->
				     ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	%note "InlineMe"
	actionzu1181 @ a;
  ParCore.actionzu98 :: %forall a . PrelBase.Int ->
				    PrelBase.Int ->
				    LexCore.Token ->
				    ParCore.HappyState
				    LexCore.Token
				    (ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				    ->
				    PrelBase.ZMZN
				    (ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				    ->
				    ParCore.HappyStk
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     (PrelBase.ZMZN PrelBase.Char)
				     PrelNum.Integer
				     PrelFloat.Double
				     PrelBase.Char)
				    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	%note "InlineMe"
	actionzu981 @ a;
  ParCore.actionzu93 :: %forall a . PrelBase.Int ->
				    PrelBase.Int ->
				    LexCore.Token ->
				    ParCore.HappyState
				    LexCore.Token
				    (ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				    ->
				    PrelBase.ZMZN
				    (ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				    ->
				    ParCore.HappyStk
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     (PrelBase.ZMZN PrelBase.Char)
				     PrelNum.Integer
				     PrelFloat.Double
				     PrelBase.Char)
				    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	%note "InlineMe"
	actionzu931 @ a;
  ParCore.actionzu91 :: %forall a . PrelBase.Int ->
				    PrelBase.Int ->
				    LexCore.Token ->
				    ParCore.HappyState
				    LexCore.Token
				    (ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				    ->
				    PrelBase.ZMZN
				    (ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				    ->
				    ParCore.HappyStk
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     (PrelBase.ZMZN PrelBase.Char)
				     PrelNum.Integer
				     PrelFloat.Double
				     PrelBase.Char)
				    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	%note "InlineMe"
	actionzu911 @ a;
  ParCore.actionzu90 :: %forall a . PrelBase.Int ->
				    PrelBase.Int ->
				    LexCore.Token ->
				    ParCore.HappyState
				    LexCore.Token
				    (ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				    ->
				    PrelBase.ZMZN
				    (ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				    ->
				    ParCore.HappyStk
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     (PrelBase.ZMZN PrelBase.Char)
				     PrelNum.Integer
				     PrelFloat.Double
				     PrelBase.Char)
				    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	%note "InlineMe"
	actionzu901 @ a;
  ParCore.actionzu87 :: %forall a . PrelBase.Int ->
				    PrelBase.Int ->
				    LexCore.Token ->
				    ParCore.HappyState
				    LexCore.Token
				    (ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				    ->
				    PrelBase.ZMZN
				    (ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				    ->
				    ParCore.HappyStk
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     (PrelBase.ZMZN PrelBase.Char)
				     PrelNum.Integer
				     PrelFloat.Double
				     PrelBase.Char)
				    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	%note "InlineMe"
	actionzu871 @ a;
  ParCore.actionzu85 :: %forall a . PrelBase.Int ->
				    PrelBase.Int ->
				    LexCore.Token ->
				    ParCore.HappyState
				    LexCore.Token
				    (ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				    ->
				    PrelBase.ZMZN
				    (ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				    ->
				    ParCore.HappyStk
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     (PrelBase.ZMZN PrelBase.Char)
				     PrelNum.Integer
				     PrelFloat.Double
				     PrelBase.Char)
				    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	%note "InlineMe"
	actionzu851 @ a;
  ParCore.actionzu84 :: %forall a . PrelBase.Int ->
				    PrelBase.Int ->
				    LexCore.Token ->
				    ParCore.HappyState
				    LexCore.Token
				    (ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				    ->
				    PrelBase.ZMZN
				    (ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				    ->
				    ParCore.HappyStk
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     (PrelBase.ZMZN PrelBase.Char)
				     PrelNum.Integer
				     PrelFloat.Double
				     PrelBase.Char)
				    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	%note "InlineMe"
	actionzu841 @ a;
  ParCore.actionzu83 :: %forall a . PrelBase.Int ->
				    PrelBase.Int ->
				    LexCore.Token ->
				    ParCore.HappyState
				    LexCore.Token
				    (ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				    ->
				    PrelBase.ZMZN
				    (ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				    ->
				    ParCore.HappyStk
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     (PrelBase.ZMZN PrelBase.Char)
				     PrelNum.Integer
				     PrelFloat.Double
				     PrelBase.Char)
				    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	%note "InlineMe"
	actionzu831 @ a;
  ParCore.actionzu82 :: %forall a . PrelBase.Int ->
				    PrelBase.Int ->
				    LexCore.Token ->
				    ParCore.HappyState
				    LexCore.Token
				    (ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				    ->
				    PrelBase.ZMZN
				    (ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				    ->
				    ParCore.HappyStk
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     (PrelBase.ZMZN PrelBase.Char)
				     PrelNum.Integer
				     PrelFloat.Double
				     PrelBase.Char)
				    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	%note "InlineMe"
	actionzu821 @ a;
  ParCore.actionzu81 :: %forall a . PrelBase.Int ->
				    PrelBase.Int ->
				    LexCore.Token ->
				    ParCore.HappyState
				    LexCore.Token
				    (ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				    ->
				    PrelBase.ZMZN
				    (ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				    ->
				    ParCore.HappyStk
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     (PrelBase.ZMZN PrelBase.Char)
				     PrelNum.Integer
				     PrelFloat.Double
				     PrelBase.Char)
				    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	%note "InlineMe"
	actionzu811 @ a;
  ParCore.actionzu77 :: %forall a . PrelBase.Int ->
				    PrelBase.Int ->
				    LexCore.Token ->
				    ParCore.HappyState
				    LexCore.Token
				    (ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				    ->
				    PrelBase.ZMZN
				    (ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				    ->
				    ParCore.HappyStk
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     (PrelBase.ZMZN PrelBase.Char)
				     PrelNum.Integer
				     PrelFloat.Double
				     PrelBase.Char)
				    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	%note "InlineMe"
	actionzu771 @ a;
  ParCore.actionzu68 :: %forall a . PrelBase.Int ->
				    PrelBase.Int ->
				    LexCore.Token ->
				    ParCore.HappyState
				    LexCore.Token
				    (ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				    ->
				    PrelBase.ZMZN
				    (ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				    ->
				    ParCore.HappyStk
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     (PrelBase.ZMZN PrelBase.Char)
				     PrelNum.Integer
				     PrelFloat.Double
				     PrelBase.Char)
				    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	%note "InlineMe"
	actionzu681 @ a;
  ParCore.actionzu67 :: %forall a . PrelBase.Int ->
				    PrelBase.Int ->
				    LexCore.Token ->
				    ParCore.HappyState
				    LexCore.Token
				    (ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				    ->
				    PrelBase.ZMZN
				    (ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				    ->
				    ParCore.HappyStk
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     (PrelBase.ZMZN PrelBase.Char)
				     PrelNum.Integer
				     PrelFloat.Double
				     PrelBase.Char)
				    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	%note "InlineMe"
	actionzu671 @ a;
  ParCore.actionzu66 :: %forall a . PrelBase.Int ->
				    PrelBase.Int ->
				    LexCore.Token ->
				    ParCore.HappyState
				    LexCore.Token
				    (ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				    ->
				    PrelBase.ZMZN
				    (ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				    ->
				    ParCore.HappyStk
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     (PrelBase.ZMZN PrelBase.Char)
				     PrelNum.Integer
				     PrelFloat.Double
				     PrelBase.Char)
				    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	%note "InlineMe"
	actionzu661 @ a;
  ParCore.actionzu64 :: %forall a . PrelBase.Int ->
				    PrelBase.Int ->
				    LexCore.Token ->
				    ParCore.HappyState
				    LexCore.Token
				    (ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				    ->
				    PrelBase.ZMZN
				    (ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				    ->
				    ParCore.HappyStk
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     (PrelBase.ZMZN PrelBase.Char)
				     PrelNum.Integer
				     PrelFloat.Double
				     PrelBase.Char)
				    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ a ->
	%note "InlineMe"
	actionzu641 @ a;
  ParCore.happyReducezu40 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReduce @ a @ b @ t34 @ t35 @ t36 @ t37 @ t38
	(PrelBase.ZdwIzh (4::PrelGHC.Intzh))
	(PrelBase.ZdwIzh (41::PrelGHC.Intzh))
	(ParCore.happyReductionzu40 @ t34 @ t35 @ t36 @ t37 @ t38) eta eta1
	eta2 eta3 eta4;
  ParCore.actionzu196 :: %forall t b t34 t35 t36 t37 t38 a . t ->
							     PrelBase.Int ->
							     b ->
							     ParCore.HappyState
							     b
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a)
							     ->
							     PrelBase.ZMZN
							     (ParCore.HappyState
							      b
							      (ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a))
							     ->
							     ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReducezu40 @ b @ a @ t34 @ t35 @ t36 @ t37 @ t38 eta1
	eta2 eta3 eta4 eta5;
  ParCore.actionzu192 :: %forall t t35 t36 t37 t38 a . PrelNum.ZCTNum
						       t
						       ->
						       t ->
						       PrelBase.Int ->
						       LexCore.Token ->
						       ParCore.HappyState
						       LexCore.Token
						       (ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38)
							->
							PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						       ->
						       PrelBase.ZMZN
						       (ParCore.HappyState
							LexCore.Token
							(ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						       ->
						       ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)
						       ->
						       PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t @ t35 @ t36 @ t37 @ t38 @ a (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (42::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (34::PrelGHC.Intzh))}
	    %in %let lit3 :: t =
		       %case zddNum %of (tpl::PrelNum.ZCTNum t)
			 {PrelNum.ZdwZCDNum
			  (tpl1::PrelBase.ZCTEq t)
			  (tpl2::PrelShow.ZCTShow t)
			  (tpl3::t -> t -> t)
			  (tpl4::t -> t -> t)
			  (tpl5::t -> t -> t)
			  (tpl6::t -> t)
			  (tpl7::t -> t)
			  (tpl8::t -> t)
			  (tpl9::PrelNum.Integer -> t) ->
			    tpl9 (PrelNum.ZdwSzh (97::PrelGHC.Intzh))}
		%in %let lit4 :: t =
			   %case zddNum %of (tpl::PrelNum.ZCTNum t)
			     {PrelNum.ZdwZCDNum
			      (tpl1::PrelBase.ZCTEq t)
			      (tpl2::PrelShow.ZCTShow t)
			      (tpl3::t -> t -> t)
			      (tpl4::t -> t -> t)
			      (tpl5::t -> t -> t)
			      (tpl6::t -> t)
			      (tpl7::t -> t)
			      (tpl8::t -> t)
			      (tpl9::PrelNum.Integer -> t) ->
				tpl9 (PrelNum.ZdwSzh (89::PrelGHC.Intzh))}
		    %in %let lit5 :: t =
			       %case zddNum %of (tpl::PrelNum.ZCTNum t)
				 {PrelNum.ZdwZCDNum
				  (tpl1::PrelBase.ZCTEq t)
				  (tpl2::PrelShow.ZCTShow t)
				  (tpl3::t -> t -> t)
				  (tpl4::t -> t -> t)
				  (tpl5::t -> t -> t)
				  (tpl6::t -> t)
				  (tpl7::t -> t)
				  (tpl8::t -> t)
				  (tpl9::PrelNum.Integer -> t) ->
				    tpl9 (PrelNum.ZdwSzh (73::PrelGHC.Intzh))}
			%in %let lit6 :: t =
				   %case zddNum %of (tpl::PrelNum.ZCTNum t)
				     {PrelNum.ZdwZCDNum
				      (tpl1::PrelBase.ZCTEq t)
				      (tpl2::PrelShow.ZCTShow t)
				      (tpl3::t -> t -> t)
				      (tpl4::t -> t -> t)
				      (tpl5::t -> t -> t)
				      (tpl6::t -> t)
				      (tpl7::t -> t)
				      (tpl8::t -> t)
				      (tpl9::PrelNum.Integer -> t) ->
					tpl9 (PrelNum.ZdwSzh (58::PrelGHC.Intzh))}
			    %in %let actionzu602 :: PrelBase.Int ->
						    PrelBase.Int ->
						    LexCore.Token ->
						    ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						    ->
						    PrelBase.ZMZN
						    (ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						    ->
						    ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38)
						    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
				       ParCore.actionzu60 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38 @ a
				       PrelNum.zdfNumInt
				%in %let actionzu1041 :: PrelBase.Int ->
							 PrelBase.Int ->
							 LexCore.Token ->
							 ParCore.HappyState
							 LexCore.Token
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   t38)
							  ->
							  PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
							 ->
							 PrelBase.ZMZN
							 (ParCore.HappyState
							  LexCore.Token
							  (ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    (PrelBase.ZMZN PrelBase.Char)
							    t35
							    t36
							    t37
							    t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err a))
							 ->
							 ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
					   ParCore.actionzu104 @ PrelBase.Int @ t35 @ t36 @ t37
					   @ t38 @ a PrelNum.zdfNumInt
				    %in %let happyShift7 :: (PrelBase.Int ->
							     PrelBase.Int ->
							     LexCore.Token ->
							     ParCore.HappyState
							     LexCore.Token
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       (PrelBase.ZMZN PrelBase.Char)
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a)
							     ->
							     PrelBase.ZMZN
							     (ParCore.HappyState
							      LexCore.Token
							      (ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								(PrelBase.ZMZN PrelBase.Char)
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a))
							     ->
							     ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      (PrelBase.ZMZN PrelBase.Char)
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a)
							    ->
							    PrelBase.Int ->
							    LexCore.Token ->
							    ParCore.HappyState
							    LexCore.Token
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      (PrelBase.ZMZN PrelBase.Char)
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a)
							    ->
							    PrelBase.ZMZN
							    (ParCore.HappyState
							     LexCore.Token
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       (PrelBase.ZMZN PrelBase.Char)
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a))
							    ->
							    ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     (PrelBase.ZMZN PrelBase.Char)
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err a =
					       ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a)
					       @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37
					       @ t38 PrelNum.zdfNumInt
					%in \ (ds::t) ->
						%case zddNum %of (tpl::PrelNum.ZCTNum t)
						  {PrelNum.ZdwZCDNum
						   (tpl1::PrelBase.ZCTEq t)
						   (tpl2::PrelShow.ZCTShow t)
						   (tpl3::t -> t -> t)
						   (tpl4::t -> t -> t)
						   (tpl5::t -> t -> t)
						   (tpl6::t -> t)
						   (tpl7::t -> t)
						   (tpl8::t -> t)
						   (tpl9::PrelNum.Integer -> t) ->
						     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
						       {PrelBase.ZdwZCDEq
							(tpl11::t -> t -> PrelBase.Bool)
							(tpl12::t -> t -> PrelBase.Bool) ->
							  %case (tpl12 lit5 ds)
							  %of (wild::PrelBase.Bool)
							    {PrelBase.ZdwTrue ->
							       happyShift7 actionzu1041;
							     PrelBase.ZdwFalse ->
							       %case (tpl12 lit4 ds)
							       %of (wild1::PrelBase.Bool)
								 {PrelBase.ZdwTrue ->
								    happyShift7 actionzu602;
								  PrelBase.ZdwFalse ->
								    %case (tpl12 lit3 ds)
								    %of (wild2::PrelBase.Bool)
								      {PrelBase.ZdwTrue ->
									 happyShift7
									 (ParCore.actionzu32
									  @ PrelBase.Int
									  @ LexCore.Token @ t35
									  @ t36 @ t37 @ t38 @ a);
								       PrelBase.ZdwFalse ->
									 %case (tpl12 lit2 ds)
									 %of (wild3::PrelBase.Bool)
									   {PrelBase.ZdwTrue ->
									      ParCore.happyGoto
									      @ (ParCore.HappyState
										 LexCore.Token
										 (ParCore.HappyStk
										  (ParCore.HappyAbsSyn
										   (PrelBase.ZMZN
										    PrelBase.Char)
										   t35
										   t36
										   t37
										   t38)
										  ->
										  PrelBase.ZMZN
										  LexCore.Token
										  -> ErrM.Err a))
									      @ LexCore.Token
									      @ (ParCore.HappyStk
										 (ParCore.HappyAbsSyn
										  (PrelBase.ZMZN
										   PrelBase.Char)
										  t35
										  t36
										  t37
										  t38)
										 ->
										 PrelBase.ZMZN
										 LexCore.Token
										 -> ErrM.Err a)
									      (ParCore.actionzu58
									       @ PrelBase.Int
									       @ LexCore.Token @ t35
									       @ t36 @ t37 @ t38
									       @ a);
									    PrelBase.ZdwFalse ->
									      %case (tpl12 lit1 ds)
									      %of (wild4::PrelBase.Bool)
										{PrelBase.ZdwTrue ->
										   ParCore.happyGoto
										   @ (ParCore.HappyState
										      LexCore.Token
										      (ParCore.HappyStk
										       (ParCore.HappyAbsSyn
											(PrelBase.ZMZN
											 PrelBase.Char)
											t35
											t36
											t37
											t38)
										       ->
										       PrelBase.ZMZN
										       LexCore.Token
										       ->
										       ErrM.Err a))
										   @ LexCore.Token
										   @ (ParCore.HappyStk
										      (ParCore.HappyAbsSyn
										       (PrelBase.ZMZN
											PrelBase.Char)
										       t35
										       t36
										       t37
										       t38)
										      ->
										      PrelBase.ZMZN
										      LexCore.Token
										      -> ErrM.Err a)
										   (ParCore.actionzu196
										    @ PrelBase.Int
										    @ LexCore.Token
										    @ (PrelBase.ZMZN
										       PrelBase.Char)
										    @ t35 @ t36
										    @ t37 @ t38
										    @ a);
										 PrelBase.ZdwFalse
										 ->
										   %case (tpl12 lit6
											  ds)
										   %of (wild5::PrelBase.Bool)
										     {PrelBase.ZdwTrue
										      ->
											ParCore.happyGoto
											@ (ParCore.HappyState
											   LexCore.Token
											   (ParCore.HappyStk
											    (ParCore.HappyAbsSyn
											     (PrelBase.ZMZN
											      PrelBase.Char)
											     t35
											     t36
											     t37
											     t38)
											    ->
											    PrelBase.ZMZN
											    LexCore.Token
											    ->
											    ErrM.Err
											    a))
											@ LexCore.Token
											@ (ParCore.HappyStk
											   (ParCore.HappyAbsSyn
											    (PrelBase.ZMZN
											     PrelBase.Char)
											    t35
											    t36
											    t37
											    t38)
											   ->
											   PrelBase.ZMZN
											   LexCore.Token
											   ->
											   ErrM.Err
											   a)
											(ParCore.actionzu150
											 @ PrelBase.Int
											 @ LexCore.Token
											 @ (PrelBase.ZMZN
											    PrelBase.Char)
											 @ t35 @ t36
											 @ t37 @ t38
											 @ a);
										      PrelBase.ZdwFalse
										      ->
											ParCore.happyReducezu42
											@ LexCore.Token
											@ a
											@ (PrelBase.ZMZN
											   PrelBase.Char)
											@ t35 @ t36
											@ t37
											@ t38}}}}}}}};
  ParCore.actionzu113 :: %forall t t35 t36 t37 t38 a . PrelNum.ZCTNum
						       t
						       ->
						       t ->
						       PrelBase.Int ->
						       LexCore.Token ->
						       ParCore.HappyState
						       LexCore.Token
						       (ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38)
							->
							PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						       ->
						       PrelBase.ZMZN
						       (ParCore.HappyState
							LexCore.Token
							(ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						       ->
						       ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)
						       ->
						       PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t @ t35 @ t36 @ t37 @ t38 @ a (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (59::PrelGHC.Intzh))}
	%in %let actionzu1921 :: PrelBase.Int ->
				 PrelBase.Int ->
				 LexCore.Token ->
				 ParCore.HappyState
				 LexCore.Token
				 (ParCore.HappyStk
				  (ParCore.HappyAbsSyn
				   (PrelBase.ZMZN PrelBase.Char)
				   t35
				   t36
				   t37
				   t38)
				  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				 ->
				 PrelBase.ZMZN
				 (ParCore.HappyState
				  LexCore.Token
				  (ParCore.HappyStk
				   (ParCore.HappyAbsSyn
				    (PrelBase.ZMZN PrelBase.Char)
				    t35
				    t36
				    t37
				    t38)
				   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				 ->
				 ParCore.HappyStk
				 (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
		   ParCore.actionzu192 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38 @ a
		   PrelNum.zdfNumInt
	    %in \ (ds::t) ->
		    %case zddNum %of (tpl::PrelNum.ZCTNum t)
		      {PrelNum.ZdwZCDNum
		       (tpl1::PrelBase.ZCTEq t)
		       (tpl2::PrelShow.ZCTShow t)
		       (tpl3::t -> t -> t)
		       (tpl4::t -> t -> t)
		       (tpl5::t -> t -> t)
		       (tpl6::t -> t)
		       (tpl7::t -> t)
		       (tpl8::t -> t)
		       (tpl9::PrelNum.Integer -> t) ->
			 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
			   {PrelBase.ZdwZCDEq
			    (tpl11::t -> t -> PrelBase.Bool)
			    (tpl12::t -> t -> PrelBase.Bool) ->
			      %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
				{PrelBase.ZdwTrue ->
				   ParCore.happyGoto
				   @ (ParCore.HappyState
				      LexCore.Token
				      (ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					t35
					t36
					t37
					t38)
				       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				   @ LexCore.Token
				   @ (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       t35
				       t36
				       t37
				       t38)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				   actionzu1921;
				 PrelBase.ZdwFalse ->
				   ParCore.happyReducezu82 @ LexCore.Token @ a
				   @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38}}};
  ParCore.actionzu107 :: %forall t t35 t36 t37 t38 a . PrelNum.ZCTNum
						       t
						       ->
						       t ->
						       PrelBase.Int ->
						       LexCore.Token ->
						       ParCore.HappyState
						       LexCore.Token
						       (ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38)
							->
							PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						       ->
						       PrelBase.ZMZN
						       (ParCore.HappyState
							LexCore.Token
							(ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						       ->
						       ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)
						       ->
						       PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t @ t35 @ t36 @ t37 @ t38 @ a (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (34::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (97::PrelGHC.Intzh))}
	    %in %let lit3 :: t =
		       %case zddNum %of (tpl::PrelNum.ZCTNum t)
			 {PrelNum.ZdwZCDNum
			  (tpl1::PrelBase.ZCTEq t)
			  (tpl2::PrelShow.ZCTShow t)
			  (tpl3::t -> t -> t)
			  (tpl4::t -> t -> t)
			  (tpl5::t -> t -> t)
			  (tpl6::t -> t)
			  (tpl7::t -> t)
			  (tpl8::t -> t)
			  (tpl9::PrelNum.Integer -> t) ->
			    tpl9 (PrelNum.ZdwSzh (69::PrelGHC.Intzh))}
		%in %let actionzu1131 :: PrelBase.Int ->
					 PrelBase.Int ->
					 LexCore.Token ->
					 ParCore.HappyState
					 LexCore.Token
					 (ParCore.HappyStk
					  (ParCore.HappyAbsSyn
					   (PrelBase.ZMZN PrelBase.Char)
					   t35
					   t36
					   t37
					   t38)
					  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
					 ->
					 PrelBase.ZMZN
					 (ParCore.HappyState
					  LexCore.Token
					  (ParCore.HappyStk
					   (ParCore.HappyAbsSyn
					    (PrelBase.ZMZN PrelBase.Char)
					    t35
					    t36
					    t37
					    t38)
					   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
					 ->
					 ParCore.HappyStk
					 (ParCore.HappyAbsSyn
					  (PrelBase.ZMZN PrelBase.Char)
					  t35
					  t36
					  t37
					  t38)
					 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
			   ParCore.actionzu113 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38 @ a
			   PrelNum.zdfNumInt
		    %in %let actionzu334 :: PrelBase.Int ->
					    PrelBase.Int ->
					    LexCore.Token ->
					    ParCore.HappyState
					    LexCore.Token
					    (ParCore.HappyStk
					     (ParCore.HappyAbsSyn
					      (PrelBase.ZMZN PrelBase.Char)
					      t35
					      t36
					      t37
					      t38)
					     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
					    ->
					    PrelBase.ZMZN
					    (ParCore.HappyState
					     LexCore.Token
					     (ParCore.HappyStk
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38)
					      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
					    ->
					    ParCore.HappyStk
					    (ParCore.HappyAbsSyn
					     (PrelBase.ZMZN PrelBase.Char)
					     t35
					     t36
					     t37
					     t38)
					    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
			       ParCore.actionzu33 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38 @ a
			       PrelNum.zdfNumInt
			%in %let happyShift7 :: (PrelBase.Int ->
						 PrelBase.Int ->
						 LexCore.Token ->
						 ParCore.HappyState
						 LexCore.Token
						 (ParCore.HappyStk
						  (ParCore.HappyAbsSyn
						   (PrelBase.ZMZN PrelBase.Char)
						   t35
						   t36
						   t37
						   t38)
						  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						 ->
						 PrelBase.ZMZN
						 (ParCore.HappyState
						  LexCore.Token
						  (ParCore.HappyStk
						   (ParCore.HappyAbsSyn
						    (PrelBase.ZMZN PrelBase.Char)
						    t35
						    t36
						    t37
						    t38)
						   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						 ->
						 ParCore.HappyStk
						 (ParCore.HappyAbsSyn
						  (PrelBase.ZMZN PrelBase.Char)
						  t35
						  t36
						  t37
						  t38)
						 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						->
						PrelBase.Int ->
						LexCore.Token ->
						ParCore.HappyState
						LexCore.Token
						(ParCore.HappyStk
						 (ParCore.HappyAbsSyn
						  (PrelBase.ZMZN PrelBase.Char)
						  t35
						  t36
						  t37
						  t38)
						 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						->
						PrelBase.ZMZN
						(ParCore.HappyState
						 LexCore.Token
						 (ParCore.HappyStk
						  (ParCore.HappyAbsSyn
						   (PrelBase.ZMZN PrelBase.Char)
						   t35
						   t36
						   t37
						   t38)
						  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						->
						ParCore.HappyStk
						(ParCore.HappyAbsSyn
						 (PrelBase.ZMZN PrelBase.Char)
						 t35
						 t36
						 t37
						 t38)
						-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
				   ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a)
				   @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38
				   PrelNum.zdfNumInt
			    %in \ (ds::t) ->
				    %case zddNum %of (tpl::PrelNum.ZCTNum t)
				      {PrelNum.ZdwZCDNum
				       (tpl1::PrelBase.ZCTEq t)
				       (tpl2::PrelShow.ZCTShow t)
				       (tpl3::t -> t -> t)
				       (tpl4::t -> t -> t)
				       (tpl5::t -> t -> t)
				       (tpl6::t -> t)
				       (tpl7::t -> t)
				       (tpl8::t -> t)
				       (tpl9::PrelNum.Integer -> t) ->
					 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
					   {PrelBase.ZdwZCDEq
					    (tpl11::t -> t -> PrelBase.Bool)
					    (tpl12::t -> t -> PrelBase.Bool) ->
					      %case (tpl12 lit2 ds) %of (wild::PrelBase.Bool)
						{PrelBase.ZdwTrue ->
						   happyShift7
						   (ParCore.actionzu32 @ PrelBase.Int
						    @ LexCore.Token @ t35 @ t36 @ t37 @ t38 @ a);
						 PrelBase.ZdwFalse ->
						   %case (tpl12 lit1 ds) %of (wild1::PrelBase.Bool)
						     {PrelBase.ZdwTrue ->
							ParCore.happyGoto
							@ (ParCore.HappyState
							   LexCore.Token
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     (PrelBase.ZMZN PrelBase.Char)
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err a))
							@ LexCore.Token
							@ (ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    (PrelBase.ZMZN PrelBase.Char)
							    t35
							    t36
							    t37
							    t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err a)
							actionzu334;
						      PrelBase.ZdwFalse ->
							%case (tpl12 lit3 ds)
							%of (wild2::PrelBase.Bool)
							  {PrelBase.ZdwTrue ->
							     ParCore.happyGoto
							     @ (ParCore.HappyState
								LexCore.Token
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  (PrelBase.ZMZN PrelBase.Char)
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							     @ LexCore.Token
							     @ (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 (PrelBase.ZMZN PrelBase.Char)
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							     actionzu1131;
							   PrelBase.ZdwFalse ->
							     ParCore.happyFail @ a @ LexCore.Token
							     @ (PrelBase.ZMZN PrelBase.Char) @ t35
							     @ t36 @ t37 @ t38}}}}};
  ParCore.happyReducezu39 :: %forall b a t34 t35 t36 t37 t38 . PrelBase.Int
							       ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a =
    \ @ b
      @ a
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReduce @ a @ b @ t34 @ t35 @ t36 @ t37 @ t38
	(PrelBase.ZdwIzh (7::PrelGHC.Intzh))
	(PrelBase.ZdwIzh (41::PrelGHC.Intzh))
	(ParCore.happyReductionzu39 @ t34 @ t35 @ t36 @ t37 @ t38) eta eta1
	eta2 eta3 eta4;
  ParCore.actionzu226 :: %forall t b t34 t35 t36 t37 t38 a . t ->
							     PrelBase.Int ->
							     b ->
							     ParCore.HappyState
							     b
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a)
							     ->
							     PrelBase.ZMZN
							     (ParCore.HappyState
							      b
							      (ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a))
							     ->
							     ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (eta::t)
      (eta1::PrelBase.Int)
      (eta2::b)
      (eta3::ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta4::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	       PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta5::ParCore.HappyStk
	     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	ParCore.happyReducezu39 @ b @ a @ t34 @ t35 @ t36 @ t37 @ t38 eta1
	eta2 eta3 eta4 eta5;
  ParCore.actionzu223 :: %forall t t34 t35 t36 t37 t38 a . PrelNum.ZCTNum
							   t
							   ->
							   t ->
							   PrelBase.Int ->
							   LexCore.Token ->
							   ParCore.HappyState
							   LexCore.Token
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err a)
							   ->
							   PrelBase.ZMZN
							   (ParCore.HappyState
							    LexCore.Token
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a))
							   ->
							   ParCore.HappyStk
							   (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err a =
    \ @ t
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ a
      (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (75::PrelGHC.Intzh))}
	%in %let happyShift7 :: (PrelBase.Int ->
				 PrelBase.Int ->
				 LexCore.Token ->
				 ParCore.HappyState
				 LexCore.Token
				 (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				  PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				 ->
				 PrelBase.ZMZN
				 (ParCore.HappyState
				  LexCore.Token
				  (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				   PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				 ->
				 ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				 PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				->
				PrelBase.Int ->
				LexCore.Token ->
				ParCore.HappyState
				LexCore.Token
				(ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				 PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				->
				PrelBase.ZMZN
				(ParCore.HappyState
				 LexCore.Token
				 (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				  PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				->
				ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
		   ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a) @ t34 @ t35 @ t36
		   @ t37 @ t38 PrelNum.zdfNumInt
	    %in \ (ds::t) ->
		    %case zddNum %of (tpl::PrelNum.ZCTNum t)
		      {PrelNum.ZdwZCDNum
		       (tpl1::PrelBase.ZCTEq t)
		       (tpl2::PrelShow.ZCTShow t)
		       (tpl3::t -> t -> t)
		       (tpl4::t -> t -> t)
		       (tpl5::t -> t -> t)
		       (tpl6::t -> t)
		       (tpl7::t -> t)
		       (tpl8::t -> t)
		       (tpl9::PrelNum.Integer -> t) ->
			 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
			   {PrelBase.ZdwZCDEq
			    (tpl11::t -> t -> PrelBase.Bool)
			    (tpl12::t -> t -> PrelBase.Bool) ->
			      %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
				{PrelBase.ZdwTrue ->
				   happyShift7
				   (ParCore.actionzu226 @ PrelBase.Int @ LexCore.Token @ t34 @ t35
				    @ t36 @ t37 @ t38 @ a);
				 PrelBase.ZdwFalse ->
				   ParCore.happyFail @ a @ LexCore.Token @ t34 @ t35 @ t36 @ t37
				   @ t38}}};
  ParCore.actionzu222 :: %forall t t35 t36 t37 t38 a . PrelNum.ZCTNum
						       t
						       ->
						       t ->
						       PrelBase.Int ->
						       LexCore.Token ->
						       ParCore.HappyState
						       LexCore.Token
						       (ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38)
							->
							PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						       ->
						       PrelBase.ZMZN
						       (ParCore.HappyState
							LexCore.Token
							(ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						       ->
						       ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)
						       ->
						       PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t @ t35 @ t36 @ t37 @ t38 @ a (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (44::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (43::PrelGHC.Intzh))}
	    %in %let lit3 :: t =
		       %case zddNum %of (tpl::PrelNum.ZCTNum t)
			 {PrelNum.ZdwZCDNum
			  (tpl1::PrelBase.ZCTEq t)
			  (tpl2::PrelShow.ZCTShow t)
			  (tpl3::t -> t -> t)
			  (tpl4::t -> t -> t)
			  (tpl5::t -> t -> t)
			  (tpl6::t -> t)
			  (tpl7::t -> t)
			  (tpl8::t -> t)
			  (tpl9::PrelNum.Integer -> t) ->
			    tpl9 (PrelNum.ZdwSzh (34::PrelGHC.Intzh))}
		%in %let lit4 :: t =
			   %case zddNum %of (tpl::PrelNum.ZCTNum t)
			     {PrelNum.ZdwZCDNum
			      (tpl1::PrelBase.ZCTEq t)
			      (tpl2::PrelShow.ZCTShow t)
			      (tpl3::t -> t -> t)
			      (tpl4::t -> t -> t)
			      (tpl5::t -> t -> t)
			      (tpl6::t -> t)
			      (tpl7::t -> t)
			      (tpl8::t -> t)
			      (tpl9::PrelNum.Integer -> t) ->
				tpl9 (PrelNum.ZdwSzh (97::PrelGHC.Intzh))}
		    %in %let lit5 :: t =
			       %case zddNum %of (tpl::PrelNum.ZCTNum t)
				 {PrelNum.ZdwZCDNum
				  (tpl1::PrelBase.ZCTEq t)
				  (tpl2::PrelShow.ZCTShow t)
				  (tpl3::t -> t -> t)
				  (tpl4::t -> t -> t)
				  (tpl5::t -> t -> t)
				  (tpl6::t -> t)
				  (tpl7::t -> t)
				  (tpl8::t -> t)
				  (tpl9::PrelNum.Integer -> t) ->
				    tpl9 (PrelNum.ZdwSzh (69::PrelGHC.Intzh))}
			%in %let actionzu1012 :: PrelBase.Int ->
						 PrelBase.Int ->
						 LexCore.Token ->
						 ParCore.HappyState
						 LexCore.Token
						 (ParCore.HappyStk
						  (ParCore.HappyAbsSyn
						   (PrelBase.ZMZN PrelBase.Char)
						   t35
						   t36
						   t37
						   t38)
						  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						 ->
						 PrelBase.ZMZN
						 (ParCore.HappyState
						  LexCore.Token
						  (ParCore.HappyStk
						   (ParCore.HappyAbsSyn
						    (PrelBase.ZMZN PrelBase.Char)
						    t35
						    t36
						    t37
						    t38)
						   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						 ->
						 ParCore.HappyStk
						 (ParCore.HappyAbsSyn
						  (PrelBase.ZMZN PrelBase.Char)
						  t35
						  t36
						  t37
						  t38)
						 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
				   ParCore.actionzu101 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38 @ a
				   PrelNum.zdfNumInt
			    %in %let actionzu2231 :: PrelBase.Int ->
						     PrelBase.Int ->
						     LexCore.Token ->
						     ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						     ->
						     PrelBase.ZMZN
						     (ParCore.HappyState
						      LexCore.Token
						      (ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)
						       ->
						       PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						     ->
						     ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
				       ParCore.actionzu223 @ PrelBase.Int
				       @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38 @ a
				       PrelNum.zdfNumInt
				%in %let actionzu334 :: PrelBase.Int ->
							PrelBase.Int ->
							LexCore.Token ->
							ParCore.HappyState
							LexCore.Token
							(ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
							->
							PrelBase.ZMZN
							(ParCore.HappyState
							 LexCore.Token
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   t38)
							  ->
							  PrelBase.ZMZN LexCore.Token ->
							  ErrM.Err a))
							->
							ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38)
							->
							PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
					   ParCore.actionzu33 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38
					   @ a PrelNum.zdfNumInt
				    %in %let happyShift7 :: (PrelBase.Int ->
							     PrelBase.Int ->
							     LexCore.Token ->
							     ParCore.HappyState
							     LexCore.Token
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       (PrelBase.ZMZN PrelBase.Char)
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a)
							     ->
							     PrelBase.ZMZN
							     (ParCore.HappyState
							      LexCore.Token
							      (ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								(PrelBase.ZMZN PrelBase.Char)
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a))
							     ->
							     ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      (PrelBase.ZMZN PrelBase.Char)
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a)
							    ->
							    PrelBase.Int ->
							    LexCore.Token ->
							    ParCore.HappyState
							    LexCore.Token
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      (PrelBase.ZMZN PrelBase.Char)
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a)
							    ->
							    PrelBase.ZMZN
							    (ParCore.HappyState
							     LexCore.Token
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       (PrelBase.ZMZN PrelBase.Char)
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a))
							    ->
							    ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     (PrelBase.ZMZN PrelBase.Char)
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err a =
					       ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a)
					       @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37
					       @ t38 PrelNum.zdfNumInt
					%in \ (ds::t) ->
						%case zddNum %of (tpl::PrelNum.ZCTNum t)
						  {PrelNum.ZdwZCDNum
						   (tpl1::PrelBase.ZCTEq t)
						   (tpl2::PrelShow.ZCTShow t)
						   (tpl3::t -> t -> t)
						   (tpl4::t -> t -> t)
						   (tpl5::t -> t -> t)
						   (tpl6::t -> t)
						   (tpl7::t -> t)
						   (tpl8::t -> t)
						   (tpl9::PrelNum.Integer -> t) ->
						     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
						       {PrelBase.ZdwZCDEq
							(tpl11::t -> t -> PrelBase.Bool)
							(tpl12::t -> t -> PrelBase.Bool) ->
							  %case (tpl12 lit4 ds)
							  %of (wild::PrelBase.Bool)
							    {PrelBase.ZdwTrue ->
							       happyShift7
							       (ParCore.actionzu32 @ PrelBase.Int
								@ LexCore.Token @ t35 @ t36 @ t37
								@ t38 @ a);
							     PrelBase.ZdwFalse ->
							       %case (tpl12 lit3 ds)
							       %of (wild1::PrelBase.Bool)
								 {PrelBase.ZdwTrue ->
								    ParCore.happyGoto
								    @ (ParCore.HappyState
								       LexCore.Token
								       (ParCore.HappyStk
									(ParCore.HappyAbsSyn
									 (PrelBase.ZMZN
									  PrelBase.Char)
									 t35
									 t36
									 t37
									 t38)
									->
									PrelBase.ZMZN LexCore.Token
									-> ErrM.Err a))
								    @ LexCore.Token
								    @ (ParCore.HappyStk
								       (ParCore.HappyAbsSyn
									(PrelBase.ZMZN
									 PrelBase.Char)
									t35
									t36
									t37
									t38)
								       ->
								       PrelBase.ZMZN LexCore.Token
								       -> ErrM.Err a)
								    actionzu334;
								  PrelBase.ZdwFalse ->
								    %case (tpl12 lit2 ds)
								    %of (wild2::PrelBase.Bool)
								      {PrelBase.ZdwTrue ->
									 ParCore.happyGoto
									 @ (ParCore.HappyState
									    LexCore.Token
									    (ParCore.HappyStk
									     (ParCore.HappyAbsSyn
									      (PrelBase.ZMZN
									       PrelBase.Char)
									      t35
									      t36
									      t37
									      t38)
									     ->
									     PrelBase.ZMZN
									     LexCore.Token
									     -> ErrM.Err a))
									 @ LexCore.Token
									 @ (ParCore.HappyStk
									    (ParCore.HappyAbsSyn
									     (PrelBase.ZMZN
									      PrelBase.Char)
									     t35
									     t36
									     t37
									     t38)
									    ->
									    PrelBase.ZMZN
									    LexCore.Token
									    -> ErrM.Err a)
									 (%note "InlineMe"
									  actionzu991 @ t35 @ t36
									  @ t37 @ t38 @ a);
								       PrelBase.ZdwFalse ->
									 %case (tpl12 lit1 ds)
									 %of (wild3::PrelBase.Bool)
									   {PrelBase.ZdwTrue ->
									      ParCore.happyGoto
									      @ (ParCore.HappyState
										 LexCore.Token
										 (ParCore.HappyStk
										  (ParCore.HappyAbsSyn
										   (PrelBase.ZMZN
										    PrelBase.Char)
										   t35
										   t36
										   t37
										   t38)
										  ->
										  PrelBase.ZMZN
										  LexCore.Token
										  -> ErrM.Err a))
									      @ LexCore.Token
									      @ (ParCore.HappyStk
										 (ParCore.HappyAbsSyn
										  (PrelBase.ZMZN
										   PrelBase.Char)
										  t35
										  t36
										  t37
										  t38)
										 ->
										 PrelBase.ZMZN
										 LexCore.Token
										 -> ErrM.Err a)
									      actionzu2231;
									    PrelBase.ZdwFalse ->
									      %case (tpl12 lit5 ds)
									      %of (wild4::PrelBase.Bool)
										{PrelBase.ZdwTrue ->
										   ParCore.happyGoto
										   @ (ParCore.HappyState
										      LexCore.Token
										      (ParCore.HappyStk
										       (ParCore.HappyAbsSyn
											(PrelBase.ZMZN
											 PrelBase.Char)
											t35
											t36
											t37
											t38)
										       ->
										       PrelBase.ZMZN
										       LexCore.Token
										       ->
										       ErrM.Err a))
										   @ LexCore.Token
										   @ (ParCore.HappyStk
										      (ParCore.HappyAbsSyn
										       (PrelBase.ZMZN
											PrelBase.Char)
										       t35
										       t36
										       t37
										       t38)
										      ->
										      PrelBase.ZMZN
										      LexCore.Token
										      -> ErrM.Err a)
										   actionzu1012;
										 PrelBase.ZdwFalse
										 ->
										   ParCore.happyFail
										   @ a
										   @ LexCore.Token
										   @ (PrelBase.ZMZN
										      PrelBase.Char)
										   @ t35 @ t36 @ t37
										   @ t38}}}}}}};
  ParCore.actionzu197 :: %forall t t35 t36 t37 t38 a . PrelNum.ZCTNum
						       t
						       ->
						       t ->
						       PrelBase.Int ->
						       LexCore.Token ->
						       ParCore.HappyState
						       LexCore.Token
						       (ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38)
							->
							PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						       ->
						       PrelBase.ZMZN
						       (ParCore.HappyState
							LexCore.Token
							(ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						       ->
						       ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)
						       ->
						       PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t @ t35 @ t36 @ t37 @ t38 @ a (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (74::PrelGHC.Intzh))}
	%in %let actionzu2221 :: PrelBase.Int ->
				 PrelBase.Int ->
				 LexCore.Token ->
				 ParCore.HappyState
				 LexCore.Token
				 (ParCore.HappyStk
				  (ParCore.HappyAbsSyn
				   (PrelBase.ZMZN PrelBase.Char)
				   t35
				   t36
				   t37
				   t38)
				  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				 ->
				 PrelBase.ZMZN
				 (ParCore.HappyState
				  LexCore.Token
				  (ParCore.HappyStk
				   (ParCore.HappyAbsSyn
				    (PrelBase.ZMZN PrelBase.Char)
				    t35
				    t36
				    t37
				    t38)
				   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				 ->
				 ParCore.HappyStk
				 (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
		   ParCore.actionzu222 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38 @ a
		   PrelNum.zdfNumInt
	    %in %let happyShift7 :: (PrelBase.Int ->
				     PrelBase.Int ->
				     LexCore.Token ->
				     ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       t35
				       t36
				       t37
				       t38)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				     ->
				     PrelBase.ZMZN
				     (ParCore.HappyState
				      LexCore.Token
				      (ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					t35
					t36
					t37
					t38)
				       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				     ->
				     ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      t35
				      t36
				      t37
				      t38)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				    ->
				    PrelBase.Int ->
				    LexCore.Token ->
				    ParCore.HappyState
				    LexCore.Token
				    (ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      t35
				      t36
				      t37
				      t38)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				    ->
				    PrelBase.ZMZN
				    (ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       t35
				       t36
				       t37
				       t38)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				    ->
				    ParCore.HappyStk
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     t35
				     t36
				     t37
				     t38)
				    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
		       ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a)
		       @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38
		       PrelNum.zdfNumInt
		%in \ (ds::t) ->
			%case zddNum %of (tpl::PrelNum.ZCTNum t)
			  {PrelNum.ZdwZCDNum
			   (tpl1::PrelBase.ZCTEq t)
			   (tpl2::PrelShow.ZCTShow t)
			   (tpl3::t -> t -> t)
			   (tpl4::t -> t -> t)
			   (tpl5::t -> t -> t)
			   (tpl6::t -> t)
			   (tpl7::t -> t)
			   (tpl8::t -> t)
			   (tpl9::PrelNum.Integer -> t) ->
			     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
			       {PrelBase.ZdwZCDEq
				(tpl11::t -> t -> PrelBase.Bool)
				(tpl12::t -> t -> PrelBase.Bool) ->
				  %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
				    {PrelBase.ZdwTrue ->
				       happyShift7 actionzu2221;
				     PrelBase.ZdwFalse ->
				       ParCore.happyFail @ a @ LexCore.Token
				       @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38}}};
  ParCore.actionzu191 :: %forall t t35 t36 t37 t38 a . PrelNum.ZCTNum
						       t
						       ->
						       t ->
						       PrelBase.Int ->
						       LexCore.Token ->
						       ParCore.HappyState
						       LexCore.Token
						       (ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38)
							->
							PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						       ->
						       PrelBase.ZMZN
						       (ParCore.HappyState
							LexCore.Token
							(ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						       ->
						       ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)
						       ->
						       PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t @ t35 @ t36 @ t37 @ t38 @ a (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (34::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (97::PrelGHC.Intzh))}
	    %in %let lit3 :: t =
		       %case zddNum %of (tpl::PrelNum.ZCTNum t)
			 {PrelNum.ZdwZCDNum
			  (tpl1::PrelBase.ZCTEq t)
			  (tpl2::PrelShow.ZCTShow t)
			  (tpl3::t -> t -> t)
			  (tpl4::t -> t -> t)
			  (tpl5::t -> t -> t)
			  (tpl6::t -> t)
			  (tpl7::t -> t)
			  (tpl8::t -> t)
			  (tpl9::PrelNum.Integer -> t) ->
			    tpl9 (PrelNum.ZdwSzh (89::PrelGHC.Intzh))}
		%in %let lit4 :: t =
			   %case zddNum %of (tpl::PrelNum.ZCTNum t)
			     {PrelNum.ZdwZCDNum
			      (tpl1::PrelBase.ZCTEq t)
			      (tpl2::PrelShow.ZCTShow t)
			      (tpl3::t -> t -> t)
			      (tpl4::t -> t -> t)
			      (tpl5::t -> t -> t)
			      (tpl6::t -> t)
			      (tpl7::t -> t)
			      (tpl8::t -> t)
			      (tpl9::PrelNum.Integer -> t) ->
				tpl9 (PrelNum.ZdwSzh (73::PrelGHC.Intzh))}
		    %in %let lit5 :: t =
			       %case zddNum %of (tpl::PrelNum.ZCTNum t)
				 {PrelNum.ZdwZCDNum
				  (tpl1::PrelBase.ZCTEq t)
				  (tpl2::PrelShow.ZCTShow t)
				  (tpl3::t -> t -> t)
				  (tpl4::t -> t -> t)
				  (tpl5::t -> t -> t)
				  (tpl6::t -> t)
				  (tpl7::t -> t)
				  (tpl8::t -> t)
				  (tpl9::PrelNum.Integer -> t) ->
				    tpl9 (PrelNum.ZdwSzh (58::PrelGHC.Intzh))}
			%in %let actionzu602 :: PrelBase.Int ->
						PrelBase.Int ->
						LexCore.Token ->
						ParCore.HappyState
						LexCore.Token
						(ParCore.HappyStk
						 (ParCore.HappyAbsSyn
						  (PrelBase.ZMZN PrelBase.Char)
						  t35
						  t36
						  t37
						  t38)
						 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						->
						PrelBase.ZMZN
						(ParCore.HappyState
						 LexCore.Token
						 (ParCore.HappyStk
						  (ParCore.HappyAbsSyn
						   (PrelBase.ZMZN PrelBase.Char)
						   t35
						   t36
						   t37
						   t38)
						  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						->
						ParCore.HappyStk
						(ParCore.HappyAbsSyn
						 (PrelBase.ZMZN PrelBase.Char)
						 t35
						 t36
						 t37
						 t38)
						-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
				   ParCore.actionzu60 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38 @ a
				   PrelNum.zdfNumInt
			    %in %let actionzu1971 :: PrelBase.Int ->
						     PrelBase.Int ->
						     LexCore.Token ->
						     ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						     ->
						     PrelBase.ZMZN
						     (ParCore.HappyState
						      LexCore.Token
						      (ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)
						       ->
						       PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						     ->
						     ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
				       ParCore.actionzu197 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38
				       @ a PrelNum.zdfNumInt
				%in %let happyShift7 :: (PrelBase.Int ->
							 PrelBase.Int ->
							 LexCore.Token ->
							 ParCore.HappyState
							 LexCore.Token
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   t38)
							  ->
							  PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
							 ->
							 PrelBase.ZMZN
							 (ParCore.HappyState
							  LexCore.Token
							  (ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    (PrelBase.ZMZN PrelBase.Char)
							    t35
							    t36
							    t37
							    t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err a))
							 ->
							 ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
							->
							PrelBase.Int ->
							LexCore.Token ->
							ParCore.HappyState
							LexCore.Token
							(ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
							->
							PrelBase.ZMZN
							(ParCore.HappyState
							 LexCore.Token
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   t38)
							  ->
							  PrelBase.ZMZN LexCore.Token ->
							  ErrM.Err a))
							->
							ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38)
							->
							PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
					   ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a)
					   @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38
					   PrelNum.zdfNumInt
				    %in \ (ds::t) ->
					    %case zddNum %of (tpl::PrelNum.ZCTNum t)
					      {PrelNum.ZdwZCDNum
					       (tpl1::PrelBase.ZCTEq t)
					       (tpl2::PrelShow.ZCTShow t)
					       (tpl3::t -> t -> t)
					       (tpl4::t -> t -> t)
					       (tpl5::t -> t -> t)
					       (tpl6::t -> t)
					       (tpl7::t -> t)
					       (tpl8::t -> t)
					       (tpl9::PrelNum.Integer -> t) ->
						 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
						   {PrelBase.ZdwZCDEq
						    (tpl11::t -> t -> PrelBase.Bool)
						    (tpl12::t -> t -> PrelBase.Bool) ->
						      %case (tpl12 lit4 ds)
						      %of (wild::PrelBase.Bool)
							{PrelBase.ZdwTrue ->
							   happyShift7 actionzu1971;
							 PrelBase.ZdwFalse ->
							   %case (tpl12 lit3 ds)
							   %of (wild1::PrelBase.Bool)
							     {PrelBase.ZdwTrue ->
								happyShift7 actionzu602;
							      PrelBase.ZdwFalse ->
								%case (tpl12 lit2 ds)
								%of (wild2::PrelBase.Bool)
								  {PrelBase.ZdwTrue ->
								     happyShift7
								     (ParCore.actionzu32
								      @ PrelBase.Int @ LexCore.Token
								      @ t35 @ t36 @ t37 @ t38 @ a);
								   PrelBase.ZdwFalse ->
								     %case (tpl12 lit1 ds)
								     %of (wild3::PrelBase.Bool)
								       {PrelBase.ZdwTrue ->
									  ParCore.happyGoto
									  @ (ParCore.HappyState
									     LexCore.Token
									     (ParCore.HappyStk
									      (ParCore.HappyAbsSyn
									       (PrelBase.ZMZN
										PrelBase.Char)
									       t35
									       t36
									       t37
									       t38)
									      ->
									      PrelBase.ZMZN
									      LexCore.Token
									      -> ErrM.Err a))
									  @ LexCore.Token
									  @ (ParCore.HappyStk
									     (ParCore.HappyAbsSyn
									      (PrelBase.ZMZN
									       PrelBase.Char)
									      t35
									      t36
									      t37
									      t38)
									     ->
									     PrelBase.ZMZN
									     LexCore.Token
									     -> ErrM.Err a)
									  (ParCore.actionzu58
									   @ PrelBase.Int
									   @ LexCore.Token @ t35
									   @ t36 @ t37 @ t38 @ a);
									PrelBase.ZdwFalse ->
									  %case (tpl12 lit5 ds)
									  %of (wild4::PrelBase.Bool)
									    {PrelBase.ZdwTrue ->
									       ParCore.happyGoto
									       @ (ParCore.HappyState
										  LexCore.Token
										  (ParCore.HappyStk
										   (ParCore.HappyAbsSyn
										    (PrelBase.ZMZN
										     PrelBase.Char)
										    t35
										    t36
										    t37
										    t38)
										   ->
										   PrelBase.ZMZN
										   LexCore.Token
										   -> ErrM.Err a))
									       @ LexCore.Token
									       @ (ParCore.HappyStk
										  (ParCore.HappyAbsSyn
										   (PrelBase.ZMZN
										    PrelBase.Char)
										   t35
										   t36
										   t37
										   t38)
										  ->
										  PrelBase.ZMZN
										  LexCore.Token
										  -> ErrM.Err a)
									       (ParCore.actionzu150
										@ PrelBase.Int
										@ LexCore.Token
										@ (PrelBase.ZMZN
										   PrelBase.Char)
										@ t35 @ t36 @ t37
										@ t38 @ a);
									     PrelBase.ZdwFalse ->
									       ParCore.happyFail @ a
									       @ LexCore.Token
									       @ (PrelBase.ZMZN
										  PrelBase.Char)
									       @ t35 @ t36 @ t37
									       @ t38}}}}}}};
  ParCore.actionzu114 :: %forall t t35 t36 t37 t38 a . PrelNum.ZCTNum
						       t
						       ->
						       t ->
						       PrelBase.Int ->
						       LexCore.Token ->
						       ParCore.HappyState
						       LexCore.Token
						       (ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38)
							->
							PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						       ->
						       PrelBase.ZMZN
						       (ParCore.HappyState
							LexCore.Token
							(ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						       ->
						       ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)
						       ->
						       PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t @ t35 @ t36 @ t37 @ t38 @ a (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (59::PrelGHC.Intzh))}
	%in %let actionzu1911 :: PrelBase.Int ->
				 PrelBase.Int ->
				 LexCore.Token ->
				 ParCore.HappyState
				 LexCore.Token
				 (ParCore.HappyStk
				  (ParCore.HappyAbsSyn
				   (PrelBase.ZMZN PrelBase.Char)
				   t35
				   t36
				   t37
				   t38)
				  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				 ->
				 PrelBase.ZMZN
				 (ParCore.HappyState
				  LexCore.Token
				  (ParCore.HappyStk
				   (ParCore.HappyAbsSyn
				    (PrelBase.ZMZN PrelBase.Char)
				    t35
				    t36
				    t37
				    t38)
				   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				 ->
				 ParCore.HappyStk
				 (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
		   ParCore.actionzu191 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38 @ a
		   PrelNum.zdfNumInt
	    %in \ (ds::t) ->
		    %case zddNum %of (tpl::PrelNum.ZCTNum t)
		      {PrelNum.ZdwZCDNum
		       (tpl1::PrelBase.ZCTEq t)
		       (tpl2::PrelShow.ZCTShow t)
		       (tpl3::t -> t -> t)
		       (tpl4::t -> t -> t)
		       (tpl5::t -> t -> t)
		       (tpl6::t -> t)
		       (tpl7::t -> t)
		       (tpl8::t -> t)
		       (tpl9::PrelNum.Integer -> t) ->
			 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
			   {PrelBase.ZdwZCDEq
			    (tpl11::t -> t -> PrelBase.Bool)
			    (tpl12::t -> t -> PrelBase.Bool) ->
			      %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
				{PrelBase.ZdwTrue ->
				   ParCore.happyGoto
				   @ (ParCore.HappyState
				      LexCore.Token
				      (ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					t35
					t36
					t37
					t38)
				       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				   @ LexCore.Token
				   @ (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       t35
				       t36
				       t37
				       t38)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				   actionzu1911;
				 PrelBase.ZdwFalse ->
				   ParCore.happyReducezu82 @ LexCore.Token @ a
				   @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38}}};
  ParCore.actionzu106 :: %forall t t35 t36 t37 t38 a . PrelNum.ZCTNum
						       t
						       ->
						       t ->
						       PrelBase.Int ->
						       LexCore.Token ->
						       ParCore.HappyState
						       LexCore.Token
						       (ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38)
							->
							PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						       ->
						       PrelBase.ZMZN
						       (ParCore.HappyState
							LexCore.Token
							(ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						       ->
						       ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)
						       ->
						       PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t @ t35 @ t36 @ t37 @ t38 @ a (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (34::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (97::PrelGHC.Intzh))}
	    %in %let lit3 :: t =
		       %case zddNum %of (tpl::PrelNum.ZCTNum t)
			 {PrelNum.ZdwZCDNum
			  (tpl1::PrelBase.ZCTEq t)
			  (tpl2::PrelShow.ZCTShow t)
			  (tpl3::t -> t -> t)
			  (tpl4::t -> t -> t)
			  (tpl5::t -> t -> t)
			  (tpl6::t -> t)
			  (tpl7::t -> t)
			  (tpl8::t -> t)
			  (tpl9::PrelNum.Integer -> t) ->
			    tpl9 (PrelNum.ZdwSzh (69::PrelGHC.Intzh))}
		%in %let actionzu1141 :: PrelBase.Int ->
					 PrelBase.Int ->
					 LexCore.Token ->
					 ParCore.HappyState
					 LexCore.Token
					 (ParCore.HappyStk
					  (ParCore.HappyAbsSyn
					   (PrelBase.ZMZN PrelBase.Char)
					   t35
					   t36
					   t37
					   t38)
					  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
					 ->
					 PrelBase.ZMZN
					 (ParCore.HappyState
					  LexCore.Token
					  (ParCore.HappyStk
					   (ParCore.HappyAbsSyn
					    (PrelBase.ZMZN PrelBase.Char)
					    t35
					    t36
					    t37
					    t38)
					   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
					 ->
					 ParCore.HappyStk
					 (ParCore.HappyAbsSyn
					  (PrelBase.ZMZN PrelBase.Char)
					  t35
					  t36
					  t37
					  t38)
					 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
			   ParCore.actionzu114 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38 @ a
			   PrelNum.zdfNumInt
		    %in %let actionzu334 :: PrelBase.Int ->
					    PrelBase.Int ->
					    LexCore.Token ->
					    ParCore.HappyState
					    LexCore.Token
					    (ParCore.HappyStk
					     (ParCore.HappyAbsSyn
					      (PrelBase.ZMZN PrelBase.Char)
					      t35
					      t36
					      t37
					      t38)
					     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
					    ->
					    PrelBase.ZMZN
					    (ParCore.HappyState
					     LexCore.Token
					     (ParCore.HappyStk
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38)
					      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
					    ->
					    ParCore.HappyStk
					    (ParCore.HappyAbsSyn
					     (PrelBase.ZMZN PrelBase.Char)
					     t35
					     t36
					     t37
					     t38)
					    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
			       ParCore.actionzu33 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38 @ a
			       PrelNum.zdfNumInt
			%in %let happyShift7 :: (PrelBase.Int ->
						 PrelBase.Int ->
						 LexCore.Token ->
						 ParCore.HappyState
						 LexCore.Token
						 (ParCore.HappyStk
						  (ParCore.HappyAbsSyn
						   (PrelBase.ZMZN PrelBase.Char)
						   t35
						   t36
						   t37
						   t38)
						  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						 ->
						 PrelBase.ZMZN
						 (ParCore.HappyState
						  LexCore.Token
						  (ParCore.HappyStk
						   (ParCore.HappyAbsSyn
						    (PrelBase.ZMZN PrelBase.Char)
						    t35
						    t36
						    t37
						    t38)
						   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						 ->
						 ParCore.HappyStk
						 (ParCore.HappyAbsSyn
						  (PrelBase.ZMZN PrelBase.Char)
						  t35
						  t36
						  t37
						  t38)
						 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						->
						PrelBase.Int ->
						LexCore.Token ->
						ParCore.HappyState
						LexCore.Token
						(ParCore.HappyStk
						 (ParCore.HappyAbsSyn
						  (PrelBase.ZMZN PrelBase.Char)
						  t35
						  t36
						  t37
						  t38)
						 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						->
						PrelBase.ZMZN
						(ParCore.HappyState
						 LexCore.Token
						 (ParCore.HappyStk
						  (ParCore.HappyAbsSyn
						   (PrelBase.ZMZN PrelBase.Char)
						   t35
						   t36
						   t37
						   t38)
						  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						->
						ParCore.HappyStk
						(ParCore.HappyAbsSyn
						 (PrelBase.ZMZN PrelBase.Char)
						 t35
						 t36
						 t37
						 t38)
						-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
				   ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a)
				   @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38
				   PrelNum.zdfNumInt
			    %in \ (ds::t) ->
				    %case zddNum %of (tpl::PrelNum.ZCTNum t)
				      {PrelNum.ZdwZCDNum
				       (tpl1::PrelBase.ZCTEq t)
				       (tpl2::PrelShow.ZCTShow t)
				       (tpl3::t -> t -> t)
				       (tpl4::t -> t -> t)
				       (tpl5::t -> t -> t)
				       (tpl6::t -> t)
				       (tpl7::t -> t)
				       (tpl8::t -> t)
				       (tpl9::PrelNum.Integer -> t) ->
					 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
					   {PrelBase.ZdwZCDEq
					    (tpl11::t -> t -> PrelBase.Bool)
					    (tpl12::t -> t -> PrelBase.Bool) ->
					      %case (tpl12 lit2 ds) %of (wild::PrelBase.Bool)
						{PrelBase.ZdwTrue ->
						   happyShift7
						   (ParCore.actionzu32 @ PrelBase.Int
						    @ LexCore.Token @ t35 @ t36 @ t37 @ t38 @ a);
						 PrelBase.ZdwFalse ->
						   %case (tpl12 lit1 ds) %of (wild1::PrelBase.Bool)
						     {PrelBase.ZdwTrue ->
							ParCore.happyGoto
							@ (ParCore.HappyState
							   LexCore.Token
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     (PrelBase.ZMZN PrelBase.Char)
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err a))
							@ LexCore.Token
							@ (ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    (PrelBase.ZMZN PrelBase.Char)
							    t35
							    t36
							    t37
							    t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err a)
							actionzu334;
						      PrelBase.ZdwFalse ->
							%case (tpl12 lit3 ds)
							%of (wild2::PrelBase.Bool)
							  {PrelBase.ZdwTrue ->
							     ParCore.happyGoto
							     @ (ParCore.HappyState
								LexCore.Token
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  (PrelBase.ZMZN PrelBase.Char)
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err a))
							     @ LexCore.Token
							     @ (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 (PrelBase.ZMZN PrelBase.Char)
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err a)
							     actionzu1141;
							   PrelBase.ZdwFalse ->
							     ParCore.happyFail @ a @ LexCore.Token
							     @ (PrelBase.ZMZN PrelBase.Char) @ t35
							     @ t36 @ t37 @ t38}}}}};
  ParCore.happyReducezu36 :: %forall b a t35 t36 t37 t38 . PrelBase.Int
							   ->
							   b ->
							   ParCore.HappyState
							   b
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     (PrelBase.ZMZN PrelBase.Char)
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err a)
							   ->
							   PrelBase.ZMZN
							   (ParCore.HappyState
							    b
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      (PrelBase.ZMZN PrelBase.Char)
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a))
							   ->
							   ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    (PrelBase.ZMZN PrelBase.Char)
							    t35
							    t36
							    t37
							    t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err a =
    \ @ b
      @ a
      @ t35
      @ t36
      @ t37
      @ t38
      (eta::PrelBase.Int)
      (eta1::b)
      (eta2::ParCore.HappyState
	     b
	     (ParCore.HappyStk
	      (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
	      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
      (eta3::PrelBase.ZMZN
	     (ParCore.HappyState
	      b
	      (ParCore.HappyStk
	       (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
	       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)))
      (eta4::ParCore.HappyStk
	     (ParCore.HappyAbsSyn
	      (PrelBase.ZMZN PrelBase.Char)
	      t35
	      t36
	      t37
	      t38)) ->
	ParCore.happyReduce @ a @ b @ (PrelBase.ZMZN PrelBase.Char) @ t35
	@ t36 @ t37 @ t38 (PrelBase.ZdwIzh (4::PrelGHC.Intzh))
	(PrelBase.ZdwIzh (39::PrelGHC.Intzh))
	(ParCore.happyReductionzu36 @ t35 @ t36 @ t37 @ t38) eta eta1 eta2
	eta3 eta4;
  ParCore.actionzu195 :: %forall t a . PrelNum.ZCTNum t ->
				       t ->
				       PrelBase.Int ->
				       LexCore.Token ->
				       ParCore.HappyState
				       LexCore.Token
				       (ParCore.HappyStk
					(ParCore.HappyAbsSyn
					 (PrelBase.ZMZN PrelBase.Char)
					 (PrelBase.ZMZN PrelBase.Char)
					 PrelNum.Integer
					 PrelFloat.Double
					 PrelBase.Char)
					-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				       ->
				       PrelBase.ZMZN
				       (ParCore.HappyState
					LexCore.Token
					(ParCore.HappyStk
					 (ParCore.HappyAbsSyn
					  (PrelBase.ZMZN PrelBase.Char)
					  (PrelBase.ZMZN PrelBase.Char)
					  PrelNum.Integer
					  PrelFloat.Double
					  PrelBase.Char)
					 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				       ->
				       ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					(PrelBase.ZMZN PrelBase.Char)
					PrelNum.Integer
					PrelFloat.Double
					PrelBase.Char)
				       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t @ a (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (47::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (45::PrelGHC.Intzh))}
	    %in %let lit3 :: t =
		       %case zddNum %of (tpl::PrelNum.ZCTNum t)
			 {PrelNum.ZdwZCDNum
			  (tpl1::PrelBase.ZCTEq t)
			  (tpl2::PrelShow.ZCTShow t)
			  (tpl3::t -> t -> t)
			  (tpl4::t -> t -> t)
			  (tpl5::t -> t -> t)
			  (tpl6::t -> t)
			  (tpl7::t -> t)
			  (tpl8::t -> t)
			  (tpl9::PrelNum.Integer -> t) ->
			    tpl9 (PrelNum.ZdwSzh (34::PrelGHC.Intzh))}
		%in %let lit4 :: t =
			   %case zddNum %of (tpl::PrelNum.ZCTNum t)
			     {PrelNum.ZdwZCDNum
			      (tpl1::PrelBase.ZCTEq t)
			      (tpl2::PrelShow.ZCTShow t)
			      (tpl3::t -> t -> t)
			      (tpl4::t -> t -> t)
			      (tpl5::t -> t -> t)
			      (tpl6::t -> t)
			      (tpl7::t -> t)
			      (tpl8::t -> t)
			      (tpl9::PrelNum.Integer -> t) ->
				tpl9 (PrelNum.ZdwSzh (97::PrelGHC.Intzh))}
		    %in %let lit5 :: t =
			       %case zddNum %of (tpl::PrelNum.ZCTNum t)
				 {PrelNum.ZdwZCDNum
				  (tpl1::PrelBase.ZCTEq t)
				  (tpl2::PrelShow.ZCTShow t)
				  (tpl3::t -> t -> t)
				  (tpl4::t -> t -> t)
				  (tpl5::t -> t -> t)
				  (tpl6::t -> t)
				  (tpl7::t -> t)
				  (tpl8::t -> t)
				  (tpl9::PrelNum.Integer -> t) ->
				    tpl9 (PrelNum.ZdwSzh (77::PrelGHC.Intzh))}
			%in %let lit6 :: t =
				   %case zddNum %of (tpl::PrelNum.ZCTNum t)
				     {PrelNum.ZdwZCDNum
				      (tpl1::PrelBase.ZCTEq t)
				      (tpl2::PrelShow.ZCTShow t)
				      (tpl3::t -> t -> t)
				      (tpl4::t -> t -> t)
				      (tpl5::t -> t -> t)
				      (tpl6::t -> t)
				      (tpl7::t -> t)
				      (tpl8::t -> t)
				      (tpl9::PrelNum.Integer -> t) ->
					tpl9 (PrelNum.ZdwSzh (69::PrelGHC.Intzh))}
			    %in %let actionzu1192 :: PrelBase.Int ->
						     PrelBase.Int ->
						     LexCore.Token ->
						     ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       (PrelBase.ZMZN PrelBase.Char)
						       PrelNum.Integer
						       PrelFloat.Double
						       PrelBase.Char)
						      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						     ->
						     PrelBase.ZMZN
						     (ParCore.HappyState
						      LexCore.Token
						      (ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							(PrelBase.ZMZN PrelBase.Char)
							PrelNum.Integer
							PrelFloat.Double
							PrelBase.Char)
						       ->
						       PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						     ->
						     ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      (PrelBase.ZMZN PrelBase.Char)
						      PrelNum.Integer
						      PrelFloat.Double
						      PrelBase.Char)
						     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
				       ParCore.actionzu119 @ PrelBase.Int
				       @ (PrelBase.ZMZN PrelBase.Char)
				       @ (PrelBase.ZMZN PrelBase.Char) @ PrelNum.Integer
				       @ PrelFloat.Double @ PrelBase.Char @ a PrelNum.zdfNumInt
				%in %let happyShift7 :: (PrelBase.Int ->
							 PrelBase.Int ->
							 LexCore.Token ->
							 ParCore.HappyState
							 LexCore.Token
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   (PrelBase.ZMZN PrelBase.Char)
							   PrelNum.Integer
							   PrelFloat.Double
							   PrelBase.Char)
							  ->
							  PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
							 ->
							 PrelBase.ZMZN
							 (ParCore.HappyState
							  LexCore.Token
							  (ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    (PrelBase.ZMZN PrelBase.Char)
							    (PrelBase.ZMZN PrelBase.Char)
							    PrelNum.Integer
							    PrelFloat.Double
							    PrelBase.Char)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err a))
							 ->
							 ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  (PrelBase.ZMZN PrelBase.Char)
							  PrelNum.Integer
							  PrelFloat.Double
							  PrelBase.Char)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
							->
							PrelBase.Int ->
							LexCore.Token ->
							ParCore.HappyState
							LexCore.Token
							(ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  (PrelBase.ZMZN PrelBase.Char)
							  PrelNum.Integer
							  PrelFloat.Double
							  PrelBase.Char)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
							->
							PrelBase.ZMZN
							(ParCore.HappyState
							 LexCore.Token
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   (PrelBase.ZMZN PrelBase.Char)
							   PrelNum.Integer
							   PrelFloat.Double
							   PrelBase.Char)
							  ->
							  PrelBase.ZMZN LexCore.Token ->
							  ErrM.Err a))
							->
							ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 (PrelBase.ZMZN PrelBase.Char)
							 PrelNum.Integer
							 PrelFloat.Double
							 PrelBase.Char)
							->
							PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
					   ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a)
					   @ (PrelBase.ZMZN PrelBase.Char)
					   @ (PrelBase.ZMZN PrelBase.Char) @ PrelNum.Integer
					   @ PrelFloat.Double @ PrelBase.Char PrelNum.zdfNumInt
				    %in \ (ds::t) ->
					    %case zddNum %of (tpl::PrelNum.ZCTNum t)
					      {PrelNum.ZdwZCDNum
					       (tpl1::PrelBase.ZCTEq t)
					       (tpl2::PrelShow.ZCTShow t)
					       (tpl3::t -> t -> t)
					       (tpl4::t -> t -> t)
					       (tpl5::t -> t -> t)
					       (tpl6::t -> t)
					       (tpl7::t -> t)
					       (tpl8::t -> t)
					       (tpl9::PrelNum.Integer -> t) ->
						 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
						   {PrelBase.ZdwZCDEq
						    (tpl11::t -> t -> PrelBase.Bool)
						    (tpl12::t -> t -> PrelBase.Bool) ->
						      %case (tpl12 lit5 ds)
						      %of (wild::PrelBase.Bool)
							{PrelBase.ZdwTrue ->
							   happyShift7
							   (%note "InlineMe"
							    actionzu981 @ a);
							 PrelBase.ZdwFalse ->
							   %case (tpl12 lit4 ds)
							   %of (wild1::PrelBase.Bool)
							     {PrelBase.ZdwTrue ->
								happyShift7
								(ParCore.actionzu32 @ PrelBase.Int
								 @ LexCore.Token
								 @ (PrelBase.ZMZN PrelBase.Char)
								 @ PrelNum.Integer
								 @ PrelFloat.Double @ PrelBase.Char
								 @ a);
							      PrelBase.ZdwFalse ->
								%case (tpl12 lit3 ds)
								%of (wild2::PrelBase.Bool)
								  {PrelBase.ZdwTrue ->
								     ParCore.happyGoto
								     @ (ParCore.HappyState
									LexCore.Token
									(ParCore.HappyStk
									 (ParCore.HappyAbsSyn
									  (PrelBase.ZMZN
									   PrelBase.Char)
									  (PrelBase.ZMZN
									   PrelBase.Char)
									  PrelNum.Integer
									  PrelFloat.Double
									  PrelBase.Char)
									 ->
									 PrelBase.ZMZN LexCore.Token
									 -> ErrM.Err a))
								     @ LexCore.Token
								     @ (ParCore.HappyStk
									(ParCore.HappyAbsSyn
									 (PrelBase.ZMZN
									  PrelBase.Char)
									 (PrelBase.ZMZN
									  PrelBase.Char)
									 PrelNum.Integer
									 PrelFloat.Double
									 PrelBase.Char)
									->
									PrelBase.ZMZN LexCore.Token
									-> ErrM.Err a)
								     (%note "InlineMe"
								      actionzu901 @ a);
								   PrelBase.ZdwFalse ->
								     %case (tpl12 lit2 ds)
								     %of (wild3::PrelBase.Bool)
								       {PrelBase.ZdwTrue ->
									  ParCore.happyGoto
									  @ (ParCore.HappyState
									     LexCore.Token
									     (ParCore.HappyStk
									      (ParCore.HappyAbsSyn
									       (PrelBase.ZMZN
										PrelBase.Char)
									       (PrelBase.ZMZN
										PrelBase.Char)
									       PrelNum.Integer
									       PrelFloat.Double
									       PrelBase.Char)
									      ->
									      PrelBase.ZMZN
									      LexCore.Token
									      -> ErrM.Err a))
									  @ LexCore.Token
									  @ (ParCore.HappyStk
									     (ParCore.HappyAbsSyn
									      (PrelBase.ZMZN
									       PrelBase.Char)
									      (PrelBase.ZMZN
									       PrelBase.Char)
									      PrelNum.Integer
									      PrelFloat.Double
									      PrelBase.Char)
									     ->
									     PrelBase.ZMZN
									     LexCore.Token
									     -> ErrM.Err a)
									  actionzu1192;
									PrelBase.ZdwFalse ->
									  %case (tpl12 lit1 ds)
									  %of (wild4::PrelBase.Bool)
									    {PrelBase.ZdwTrue ->
									       ParCore.happyGoto
									       @ (ParCore.HappyState
										  LexCore.Token
										  (ParCore.HappyStk
										   (ParCore.HappyAbsSyn
										    (PrelBase.ZMZN
										     PrelBase.Char)
										    (PrelBase.ZMZN
										     PrelBase.Char)
										    PrelNum.Integer
										    PrelFloat.Double
										    PrelBase.Char)
										   ->
										   PrelBase.ZMZN
										   LexCore.Token
										   -> ErrM.Err a))
									       @ LexCore.Token
									       @ (ParCore.HappyStk
										  (ParCore.HappyAbsSyn
										   (PrelBase.ZMZN
										    PrelBase.Char)
										   (PrelBase.ZMZN
										    PrelBase.Char)
										   PrelNum.Integer
										   PrelFloat.Double
										   PrelBase.Char)
										  ->
										  PrelBase.ZMZN
										  LexCore.Token
										  -> ErrM.Err a)
									       (ParCore.actionzu97
										@ PrelBase.Int
										@ LexCore.Token
										@ (PrelBase.ZMZN
										   PrelBase.Char)
										@ (PrelBase.ZMZN
										   PrelBase.Char)
										@ PrelNum.Integer
										@ PrelFloat.Double
										@ PrelBase.Char
										@ a);
									     PrelBase.ZdwFalse ->
									       %case (tpl12 lit6 ds)
									       %of (wild5::PrelBase.Bool)
										 {PrelBase.ZdwTrue
										  ->
										    ParCore.happyGoto
										    @ (ParCore.HappyState
										       LexCore.Token
										       (ParCore.HappyStk
											(ParCore.HappyAbsSyn
											 (PrelBase.ZMZN
											  PrelBase.Char)
											 (PrelBase.ZMZN
											  PrelBase.Char)
											 PrelNum.Integer
											 PrelFloat.Double
											 PrelBase.Char)
											->
											PrelBase.ZMZN
											LexCore.Token
											->
											ErrM.Err a))
										    @ LexCore.Token
										    @ (ParCore.HappyStk
										       (ParCore.HappyAbsSyn
											(PrelBase.ZMZN
											 PrelBase.Char)
											(PrelBase.ZMZN
											 PrelBase.Char)
											PrelNum.Integer
											PrelFloat.Double
											PrelBase.Char)
										       ->
										       PrelBase.ZMZN
										       LexCore.Token
										       ->
										       ErrM.Err a)
										    (%note "InlineMe"
										     actionzu931
										     @ a);
										  PrelBase.ZdwFalse
										  ->
										    ParCore.happyReducezu36
										    @ LexCore.Token
										    @ a
										    @ (PrelBase.ZMZN
										       PrelBase.Char)
										    @ PrelNum.Integer
										    @ PrelFloat.Double
										    @ PrelBase.Char}}}}}}}};
  ParCore.actionzu194 :: %forall t a . PrelNum.ZCTNum t ->
				       t ->
				       PrelBase.Int ->
				       LexCore.Token ->
				       ParCore.HappyState
				       LexCore.Token
				       (ParCore.HappyStk
					(ParCore.HappyAbsSyn
					 (PrelBase.ZMZN PrelBase.Char)
					 (PrelBase.ZMZN PrelBase.Char)
					 PrelNum.Integer
					 PrelFloat.Double
					 PrelBase.Char)
					-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				       ->
				       PrelBase.ZMZN
				       (ParCore.HappyState
					LexCore.Token
					(ParCore.HappyStk
					 (ParCore.HappyAbsSyn
					  (PrelBase.ZMZN PrelBase.Char)
					  (PrelBase.ZMZN PrelBase.Char)
					  PrelNum.Integer
					  PrelFloat.Double
					  PrelBase.Char)
					 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				       ->
				       ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					(PrelBase.ZMZN PrelBase.Char)
					PrelNum.Integer
					PrelFloat.Double
					PrelBase.Char)
				       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t @ a (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (41::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (76::PrelGHC.Intzh))}
	    %in %let lit3 :: t =
		       %case zddNum %of (tpl::PrelNum.ZCTNum t)
			 {PrelNum.ZdwZCDNum
			  (tpl1::PrelBase.ZCTEq t)
			  (tpl2::PrelShow.ZCTShow t)
			  (tpl3::t -> t -> t)
			  (tpl4::t -> t -> t)
			  (tpl5::t -> t -> t)
			  (tpl6::t -> t)
			  (tpl7::t -> t)
			  (tpl8::t -> t)
			  (tpl9::PrelNum.Integer -> t) ->
			    tpl9 (PrelNum.ZdwSzh (72::PrelGHC.Intzh))}
		%in %let lit4 :: t =
			   %case zddNum %of (tpl::PrelNum.ZCTNum t)
			     {PrelNum.ZdwZCDNum
			      (tpl1::PrelBase.ZCTEq t)
			      (tpl2::PrelShow.ZCTShow t)
			      (tpl3::t -> t -> t)
			      (tpl4::t -> t -> t)
			      (tpl5::t -> t -> t)
			      (tpl6::t -> t)
			      (tpl7::t -> t)
			      (tpl8::t -> t)
			      (tpl9::PrelNum.Integer -> t) ->
				tpl9 (PrelNum.ZdwSzh (46::PrelGHC.Intzh))}
		    %in %let actionzu1951 :: PrelBase.Int ->
					     PrelBase.Int ->
					     LexCore.Token ->
					     ParCore.HappyState
					     LexCore.Token
					     (ParCore.HappyStk
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       (PrelBase.ZMZN PrelBase.Char)
					       PrelNum.Integer
					       PrelFloat.Double
					       PrelBase.Char)
					      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
					     ->
					     PrelBase.ZMZN
					     (ParCore.HappyState
					      LexCore.Token
					      (ParCore.HappyStk
					       (ParCore.HappyAbsSyn
						(PrelBase.ZMZN PrelBase.Char)
						(PrelBase.ZMZN PrelBase.Char)
						PrelNum.Integer
						PrelFloat.Double
						PrelBase.Char)
					       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
					     ->
					     ParCore.HappyStk
					     (ParCore.HappyAbsSyn
					      (PrelBase.ZMZN PrelBase.Char)
					      (PrelBase.ZMZN PrelBase.Char)
					      PrelNum.Integer
					      PrelFloat.Double
					      PrelBase.Char)
					     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
			       ParCore.actionzu195 @ PrelBase.Int @ a PrelNum.zdfNumInt
			%in %let actionzu1121 :: PrelBase.Int ->
						 PrelBase.Int ->
						 LexCore.Token ->
						 ParCore.HappyState
						 LexCore.Token
						 (ParCore.HappyStk
						  (ParCore.HappyAbsSyn
						   (PrelBase.ZMZN PrelBase.Char)
						   (PrelBase.ZMZN PrelBase.Char)
						   PrelNum.Integer
						   PrelFloat.Double
						   PrelBase.Char)
						  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						 ->
						 PrelBase.ZMZN
						 (ParCore.HappyState
						  LexCore.Token
						  (ParCore.HappyStk
						   (ParCore.HappyAbsSyn
						    (PrelBase.ZMZN PrelBase.Char)
						    (PrelBase.ZMZN PrelBase.Char)
						    PrelNum.Integer
						    PrelFloat.Double
						    PrelBase.Char)
						   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						 ->
						 ParCore.HappyStk
						 (ParCore.HappyAbsSyn
						  (PrelBase.ZMZN PrelBase.Char)
						  (PrelBase.ZMZN PrelBase.Char)
						  PrelNum.Integer
						  PrelFloat.Double
						  PrelBase.Char)
						 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
				   ParCore.actionzu112 @ PrelBase.Int
				   @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
				   @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char @ a
				   PrelNum.zdfNumInt
			    %in %let actionzu1071 :: PrelBase.Int ->
						     PrelBase.Int ->
						     LexCore.Token ->
						     ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       (PrelBase.ZMZN PrelBase.Char)
						       PrelNum.Integer
						       PrelFloat.Double
						       PrelBase.Char)
						      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						     ->
						     PrelBase.ZMZN
						     (ParCore.HappyState
						      LexCore.Token
						      (ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							(PrelBase.ZMZN PrelBase.Char)
							PrelNum.Integer
							PrelFloat.Double
							PrelBase.Char)
						       ->
						       PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						     ->
						     ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      (PrelBase.ZMZN PrelBase.Char)
						      PrelNum.Integer
						      PrelFloat.Double
						      PrelBase.Char)
						     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
				       ParCore.actionzu107 @ PrelBase.Int
				       @ (PrelBase.ZMZN PrelBase.Char) @ PrelNum.Integer
				       @ PrelFloat.Double @ PrelBase.Char @ a PrelNum.zdfNumInt
				%in %let actionzu1061 :: PrelBase.Int ->
							 PrelBase.Int ->
							 LexCore.Token ->
							 ParCore.HappyState
							 LexCore.Token
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   (PrelBase.ZMZN PrelBase.Char)
							   PrelNum.Integer
							   PrelFloat.Double
							   PrelBase.Char)
							  ->
							  PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
							 ->
							 PrelBase.ZMZN
							 (ParCore.HappyState
							  LexCore.Token
							  (ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    (PrelBase.ZMZN PrelBase.Char)
							    (PrelBase.ZMZN PrelBase.Char)
							    PrelNum.Integer
							    PrelFloat.Double
							    PrelBase.Char)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err a))
							 ->
							 ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  (PrelBase.ZMZN PrelBase.Char)
							  PrelNum.Integer
							  PrelFloat.Double
							  PrelBase.Char)
							 ->
							 PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
					   ParCore.actionzu106 @ PrelBase.Int
					   @ (PrelBase.ZMZN PrelBase.Char) @ PrelNum.Integer
					   @ PrelFloat.Double @ PrelBase.Char @ a PrelNum.zdfNumInt
				    %in %let happyShift7 :: (PrelBase.Int ->
							     PrelBase.Int ->
							     LexCore.Token ->
							     ParCore.HappyState
							     LexCore.Token
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       (PrelBase.ZMZN PrelBase.Char)
							       (PrelBase.ZMZN PrelBase.Char)
							       PrelNum.Integer
							       PrelFloat.Double
							       PrelBase.Char)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a)
							     ->
							     PrelBase.ZMZN
							     (ParCore.HappyState
							      LexCore.Token
							      (ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								(PrelBase.ZMZN PrelBase.Char)
								(PrelBase.ZMZN PrelBase.Char)
								PrelNum.Integer
								PrelFloat.Double
								PrelBase.Char)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err a))
							     ->
							     ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      (PrelBase.ZMZN PrelBase.Char)
							      (PrelBase.ZMZN PrelBase.Char)
							      PrelNum.Integer
							      PrelFloat.Double
							      PrelBase.Char)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a)
							    ->
							    PrelBase.Int ->
							    LexCore.Token ->
							    ParCore.HappyState
							    LexCore.Token
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      (PrelBase.ZMZN PrelBase.Char)
							      (PrelBase.ZMZN PrelBase.Char)
							      PrelNum.Integer
							      PrelFloat.Double
							      PrelBase.Char)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err a)
							    ->
							    PrelBase.ZMZN
							    (ParCore.HappyState
							     LexCore.Token
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       (PrelBase.ZMZN PrelBase.Char)
							       (PrelBase.ZMZN PrelBase.Char)
							       PrelNum.Integer
							       PrelFloat.Double
							       PrelBase.Char)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err a))
							    ->
							    ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     (PrelBase.ZMZN PrelBase.Char)
							     (PrelBase.ZMZN PrelBase.Char)
							     PrelNum.Integer
							     PrelFloat.Double
							     PrelBase.Char)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err a =
					       ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a)
					       @ (PrelBase.ZMZN PrelBase.Char)
					       @ (PrelBase.ZMZN PrelBase.Char) @ PrelNum.Integer
					       @ PrelFloat.Double @ PrelBase.Char PrelNum.zdfNumInt
					%in \ (ds::t) ->
						%case zddNum %of (tpl::PrelNum.ZCTNum t)
						  {PrelNum.ZdwZCDNum
						   (tpl1::PrelBase.ZCTEq t)
						   (tpl2::PrelShow.ZCTShow t)
						   (tpl3::t -> t -> t)
						   (tpl4::t -> t -> t)
						   (tpl5::t -> t -> t)
						   (tpl6::t -> t)
						   (tpl7::t -> t)
						   (tpl8::t -> t)
						   (tpl9::PrelNum.Integer -> t) ->
						     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
						       {PrelBase.ZdwZCDEq
							(tpl11::t -> t -> PrelBase.Bool)
							(tpl12::t -> t -> PrelBase.Bool) ->
							  %case (tpl12 lit3 ds)
							  %of (wild::PrelBase.Bool)
							    {PrelBase.ZdwTrue ->
							       happyShift7 actionzu1061;
							     PrelBase.ZdwFalse ->
							       %case (tpl12 lit2 ds)
							       %of (wild1::PrelBase.Bool)
								 {PrelBase.ZdwTrue ->
								    happyShift7 actionzu1071;
								  PrelBase.ZdwFalse ->
								    %case (tpl12 lit1 ds)
								    %of (wild2::PrelBase.Bool)
								      {PrelBase.ZdwTrue ->
									 ParCore.happyGoto
									 @ (ParCore.HappyState
									    LexCore.Token
									    (ParCore.HappyStk
									     (ParCore.HappyAbsSyn
									      (PrelBase.ZMZN
									       PrelBase.Char)
									      (PrelBase.ZMZN
									       PrelBase.Char)
									      PrelNum.Integer
									      PrelFloat.Double
									      PrelBase.Char)
									     ->
									     PrelBase.ZMZN
									     LexCore.Token
									     -> ErrM.Err a))
									 @ LexCore.Token
									 @ (ParCore.HappyStk
									    (ParCore.HappyAbsSyn
									     (PrelBase.ZMZN
									      PrelBase.Char)
									     (PrelBase.ZMZN
									      PrelBase.Char)
									     PrelNum.Integer
									     PrelFloat.Double
									     PrelBase.Char)
									    ->
									    PrelBase.ZMZN
									    LexCore.Token
									    -> ErrM.Err a)
									 actionzu1121;
								       PrelBase.ZdwFalse ->
									 %case (tpl12 lit4 ds)
									 %of (wild3::PrelBase.Bool)
									   {PrelBase.ZdwTrue ->
									      ParCore.happyGoto
									      @ (ParCore.HappyState
										 LexCore.Token
										 (ParCore.HappyStk
										  (ParCore.HappyAbsSyn
										   (PrelBase.ZMZN
										    PrelBase.Char)
										   (PrelBase.ZMZN
										    PrelBase.Char)
										   PrelNum.Integer
										   PrelFloat.Double
										   PrelBase.Char)
										  ->
										  PrelBase.ZMZN
										  LexCore.Token
										  -> ErrM.Err a))
									      @ LexCore.Token
									      @ (ParCore.HappyStk
										 (ParCore.HappyAbsSyn
										  (PrelBase.ZMZN
										   PrelBase.Char)
										  (PrelBase.ZMZN
										   PrelBase.Char)
										  PrelNum.Integer
										  PrelFloat.Double
										  PrelBase.Char)
										 ->
										 PrelBase.ZMZN
										 LexCore.Token
										 -> ErrM.Err a)
									      actionzu1951;
									    PrelBase.ZdwFalse ->
									      ParCore.happyReducezu48
									      @ LexCore.Token @ a
									      @ (PrelBase.ZMZN
										 PrelBase.Char)
									      @ (PrelBase.ZMZN
										 PrelBase.Char)
									      @ PrelNum.Integer
									      @ PrelFloat.Double
									      @ PrelBase.Char}}}}}};
  ParCore.actionzu111 :: %forall t a . PrelNum.ZCTNum t ->
				       t ->
				       PrelBase.Int ->
				       LexCore.Token ->
				       ParCore.HappyState
				       LexCore.Token
				       (ParCore.HappyStk
					(ParCore.HappyAbsSyn
					 (PrelBase.ZMZN PrelBase.Char)
					 (PrelBase.ZMZN PrelBase.Char)
					 PrelNum.Integer
					 PrelFloat.Double
					 PrelBase.Char)
					-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				       ->
				       PrelBase.ZMZN
				       (ParCore.HappyState
					LexCore.Token
					(ParCore.HappyStk
					 (ParCore.HappyAbsSyn
					  (PrelBase.ZMZN PrelBase.Char)
					  (PrelBase.ZMZN PrelBase.Char)
					  PrelNum.Integer
					  PrelFloat.Double
					  PrelBase.Char)
					 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				       ->
				       ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					(PrelBase.ZMZN PrelBase.Char)
					PrelNum.Integer
					PrelFloat.Double
					PrelBase.Char)
				       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t @ a (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (40::PrelGHC.Intzh))}
	%in %let actionzu1941 :: PrelBase.Int ->
				 PrelBase.Int ->
				 LexCore.Token ->
				 ParCore.HappyState
				 LexCore.Token
				 (ParCore.HappyStk
				  (ParCore.HappyAbsSyn
				   (PrelBase.ZMZN PrelBase.Char)
				   (PrelBase.ZMZN PrelBase.Char)
				   PrelNum.Integer
				   PrelFloat.Double
				   PrelBase.Char)
				  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				 ->
				 PrelBase.ZMZN
				 (ParCore.HappyState
				  LexCore.Token
				  (ParCore.HappyStk
				   (ParCore.HappyAbsSyn
				    (PrelBase.ZMZN PrelBase.Char)
				    (PrelBase.ZMZN PrelBase.Char)
				    PrelNum.Integer
				    PrelFloat.Double
				    PrelBase.Char)
				   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				 ->
				 ParCore.HappyStk
				 (ParCore.HappyAbsSyn
				  (PrelBase.ZMZN PrelBase.Char)
				  (PrelBase.ZMZN PrelBase.Char)
				  PrelNum.Integer
				  PrelFloat.Double
				  PrelBase.Char)
				 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
		   ParCore.actionzu194 @ PrelBase.Int @ a PrelNum.zdfNumInt
	    %in \ (ds::t) ->
		    %case zddNum %of (tpl::PrelNum.ZCTNum t)
		      {PrelNum.ZdwZCDNum
		       (tpl1::PrelBase.ZCTEq t)
		       (tpl2::PrelShow.ZCTShow t)
		       (tpl3::t -> t -> t)
		       (tpl4::t -> t -> t)
		       (tpl5::t -> t -> t)
		       (tpl6::t -> t)
		       (tpl7::t -> t)
		       (tpl8::t -> t)
		       (tpl9::PrelNum.Integer -> t) ->
			 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
			   {PrelBase.ZdwZCDEq
			    (tpl11::t -> t -> PrelBase.Bool)
			    (tpl12::t -> t -> PrelBase.Bool) ->
			      %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
				{PrelBase.ZdwTrue ->
				   ParCore.happyGoto
				   @ (ParCore.HappyState
				      LexCore.Token
				      (ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					(PrelBase.ZMZN PrelBase.Char)
					PrelNum.Integer
					PrelFloat.Double
					PrelBase.Char)
				       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				   @ LexCore.Token
				   @ (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				   actionzu1941;
				 PrelBase.ZdwFalse ->
				   ParCore.happyReducezu37 @ LexCore.Token @ a
				   @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
				   @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char}}};
  ParCore.actionzu110 :: %forall t a . PrelNum.ZCTNum t ->
				       t ->
				       PrelBase.Int ->
				       LexCore.Token ->
				       ParCore.HappyState
				       LexCore.Token
				       (ParCore.HappyStk
					(ParCore.HappyAbsSyn
					 (PrelBase.ZMZN PrelBase.Char)
					 (PrelBase.ZMZN PrelBase.Char)
					 PrelNum.Integer
					 PrelFloat.Double
					 PrelBase.Char)
					-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				       ->
				       PrelBase.ZMZN
				       (ParCore.HappyState
					LexCore.Token
					(ParCore.HappyStk
					 (ParCore.HappyAbsSyn
					  (PrelBase.ZMZN PrelBase.Char)
					  (PrelBase.ZMZN PrelBase.Char)
					  PrelNum.Integer
					  PrelFloat.Double
					  PrelBase.Char)
					 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				       ->
				       ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					(PrelBase.ZMZN PrelBase.Char)
					PrelNum.Integer
					PrelFloat.Double
					PrelBase.Char)
				       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
    \ @ t @ a (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (97::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (34::PrelGHC.Intzh))}
	    %in %let actionzu1111 :: PrelBase.Int ->
				     PrelBase.Int ->
				     LexCore.Token ->
				     ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)
				      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
				     ->
				     PrelBase.ZMZN
				     (ParCore.HappyState
				      LexCore.Token
				      (ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					(PrelBase.ZMZN PrelBase.Char)
					PrelNum.Integer
					PrelFloat.Double
					PrelBase.Char)
				       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
				     ->
				     ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
		       ParCore.actionzu111 @ PrelBase.Int @ a PrelNum.zdfNumInt
		%in %let happyShift7 :: (PrelBase.Int ->
					 PrelBase.Int ->
					 LexCore.Token ->
					 ParCore.HappyState
					 LexCore.Token
					 (ParCore.HappyStk
					  (ParCore.HappyAbsSyn
					   (PrelBase.ZMZN PrelBase.Char)
					   (PrelBase.ZMZN PrelBase.Char)
					   PrelNum.Integer
					   PrelFloat.Double
					   PrelBase.Char)
					  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
					 ->
					 PrelBase.ZMZN
					 (ParCore.HappyState
					  LexCore.Token
					  (ParCore.HappyStk
					   (ParCore.HappyAbsSyn
					    (PrelBase.ZMZN PrelBase.Char)
					    (PrelBase.ZMZN PrelBase.Char)
					    PrelNum.Integer
					    PrelFloat.Double
					    PrelBase.Char)
					   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
					 ->
					 ParCore.HappyStk
					 (ParCore.HappyAbsSyn
					  (PrelBase.ZMZN PrelBase.Char)
					  (PrelBase.ZMZN PrelBase.Char)
					  PrelNum.Integer
					  PrelFloat.Double
					  PrelBase.Char)
					 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
					->
					PrelBase.Int ->
					LexCore.Token ->
					ParCore.HappyState
					LexCore.Token
					(ParCore.HappyStk
					 (ParCore.HappyAbsSyn
					  (PrelBase.ZMZN PrelBase.Char)
					  (PrelBase.ZMZN PrelBase.Char)
					  PrelNum.Integer
					  PrelFloat.Double
					  PrelBase.Char)
					 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
					->
					PrelBase.ZMZN
					(ParCore.HappyState
					 LexCore.Token
					 (ParCore.HappyStk
					  (ParCore.HappyAbsSyn
					   (PrelBase.ZMZN PrelBase.Char)
					   (PrelBase.ZMZN PrelBase.Char)
					   PrelNum.Integer
					   PrelFloat.Double
					   PrelBase.Char)
					  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
					->
					ParCore.HappyStk
					(ParCore.HappyAbsSyn
					 (PrelBase.ZMZN PrelBase.Char)
					 (PrelBase.ZMZN PrelBase.Char)
					 PrelNum.Integer
					 PrelFloat.Double
					 PrelBase.Char)
					-> PrelBase.ZMZN LexCore.Token -> ErrM.Err a =
			   ParCore.happyShift @ PrelBase.Int @ (ErrM.Err a)
			   @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
			   @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char
			   PrelNum.zdfNumInt
		    %in \ (ds::t) ->
			    %case zddNum %of (tpl::PrelNum.ZCTNum t)
			      {PrelNum.ZdwZCDNum
			       (tpl1::PrelBase.ZCTEq t)
			       (tpl2::PrelShow.ZCTShow t)
			       (tpl3::t -> t -> t)
			       (tpl4::t -> t -> t)
			       (tpl5::t -> t -> t)
			       (tpl6::t -> t)
			       (tpl7::t -> t)
			       (tpl8::t -> t)
			       (tpl9::PrelNum.Integer -> t) ->
				 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
				   {PrelBase.ZdwZCDEq
				    (tpl11::t -> t -> PrelBase.Bool)
				    (tpl12::t -> t -> PrelBase.Bool) ->
				      %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
					{PrelBase.ZdwTrue ->
					   happyShift7
					   (ParCore.actionzu32 @ PrelBase.Int @ LexCore.Token
					    @ (PrelBase.ZMZN PrelBase.Char) @ PrelNum.Integer
					    @ PrelFloat.Double @ PrelBase.Char @ a);
					 PrelBase.ZdwFalse ->
					   %case (tpl12 lit2 ds) %of (wild1::PrelBase.Bool)
					     {PrelBase.ZdwTrue ->
						ParCore.happyGoto
						@ (ParCore.HappyState
						   LexCore.Token
						   (ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     (PrelBase.ZMZN PrelBase.Char)
						     PrelNum.Integer
						     PrelFloat.Double
						     PrelBase.Char)
						    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a))
						@ LexCore.Token
						@ (ParCore.HappyStk
						   (ParCore.HappyAbsSyn
						    (PrelBase.ZMZN PrelBase.Char)
						    (PrelBase.ZMZN PrelBase.Char)
						    PrelNum.Integer
						    PrelFloat.Double
						    PrelBase.Char)
						   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err a)
						actionzu1111;
					      PrelBase.ZdwFalse ->
						ParCore.happyFail @ a @ LexCore.Token
						@ (PrelBase.ZMZN PrelBase.Char)
						@ (PrelBase.ZMZN PrelBase.Char) @ PrelNum.Integer
						@ PrelFloat.Double @ PrelBase.Char}}}};
  actionzu1101 :: PrelBase.Int ->
		  PrelBase.Int ->
		  LexCore.Token ->
		  ParCore.HappyState
		  LexCore.Token
		  (ParCore.HappyStk
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char)
		   ->
		   PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char))
		  ->
		  PrelBase.ZMZN
		  (ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelNum.Integer
		     PrelFloat.Double
		     PrelBase.Char)
		    ->
		    PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelNum.Integer
		     PrelFloat.Double
		     PrelBase.Char)))
		  ->
		  ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char)
		  ->
		  PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char) =
    ParCore.actionzu110 @ PrelBase.Int
    @ (ParCore.HappyAbsSyn
       (PrelBase.ZMZN PrelBase.Char)
       (PrelBase.ZMZN PrelBase.Char)
       PrelNum.Integer
       PrelFloat.Double
       PrelBase.Char)
    PrelNum.zdfNumInt;
  ParCore.myLexer :: PrelBase.ZMZN PrelBase.Char ->
		     PrelBase.ZMZN LexCore.Token =
    LexCore.tokens;
  ParCore.thenM :: %forall a b . ErrM.Err a ->
				 (a -> ErrM.Err b) -> ErrM.Err b =
    \ @ a @ b ->
	%case ErrM.zdfMonadErr %of (tpl::PrelBase.ZCTMonad ErrM.Err)
	  {PrelBase.ZdwZCDMonad
	   (tpl1::%forall a1 b1 . ErrM.Err a1 ->
				  (a1 -> ErrM.Err b1) -> ErrM.Err b1)
	   (tpl2::%forall a1 b1 . ErrM.Err a1 -> ErrM.Err b1 -> ErrM.Err b1)
	   (tpl3::%forall a1 . a1 -> ErrM.Err a1)
	   (tpl4::%forall a1 . PrelBase.ZMZN PrelBase.Char -> ErrM.Err a1) ->
	     tpl1 @ a @ b};
  ParCore.happyThen1 :: %forall a b t . ErrM.Err a ->
					(a -> t -> ErrM.Err b) -> t -> ErrM.Err b =
    \ @ a @ b @ t (m::ErrM.Err a) (k::a -> t -> ErrM.Err b) (tks::t) ->
	%case ErrM.zdfMonadErr %of (tpl::PrelBase.ZCTMonad ErrM.Err)
	  {PrelBase.ZdwZCDMonad
	   (tpl1::%forall a1 b1 . ErrM.Err a1 ->
				  (a1 -> ErrM.Err b1) -> ErrM.Err b1)
	   (tpl2::%forall a1 b1 . ErrM.Err a1 -> ErrM.Err b1 -> ErrM.Err b1)
	   (tpl3::%forall a1 . a1 -> ErrM.Err a1)
	   (tpl4::%forall a1 . PrelBase.ZMZN PrelBase.Char -> ErrM.Err a1) ->
	     tpl1 @ a @ b m (\ (a1::a) -> k a1 tks)};
  ParCore.happyMonadReduce :: %forall b t34 t35 t36 t37 t38 b1 . PrelBase.Int
								 ->
								 PrelBase.Int ->
								 (ParCore.HappyStk
								  (ParCore.HappyAbsSyn
								   t34
								   t35
								   t36
								   t37
								   t38)
								  ->
								  ErrM.Err
								  (ParCore.HappyAbsSyn
								   t34
								   t35
								   t36
								   t37
								   t38))
								 ->
								 PrelBase.Int ->
								 b ->
								 ParCore.HappyState
								 b
								 (ParCore.HappyStk
								  (ParCore.HappyAbsSyn
								   t34
								   t35
								   t36
								   t37
								   t38)
								  ->
								  PrelBase.ZMZN LexCore.Token ->
								  ErrM.Err b1)
								 ->
								 PrelBase.ZMZN
								 (ParCore.HappyState
								  b
								  (ParCore.HappyStk
								   (ParCore.HappyAbsSyn
								    t34
								    t35
								    t36
								    t37
								    t38)
								   ->
								   PrelBase.ZMZN LexCore.Token ->
								   ErrM.Err b1))
								 ->
								 ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err b1 =
    \ @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      @ b1
      (k::PrelBase.Int)
      (nt::PrelBase.Int)
      (fn::ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	   ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
      (ds::PrelBase.Int)
      (tk::b)
      (st::ParCore.HappyState
	   b
	   (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	    PrelBase.ZMZN LexCore.Token -> ErrM.Err b1))
      (sts::PrelBase.ZMZN
	    (ParCore.HappyState
	     b
	     (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
	      PrelBase.ZMZN LexCore.Token -> ErrM.Err b1)))
      (stk::ParCore.HappyStk
	    (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) ->
	%case ds %of (wild::PrelBase.Int)
	  {PrelBase.ZdwIzh (ds1::PrelGHC.Intzh) ->
	     %case ds1 %of (ds2::PrelGHC.Intzh)
	       {%_ ->
		  %let ds3 :: PrelTup.Z3T
			      (PrelBase.ZMZN
			       (ParCore.HappyState
				b
				(ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				 PrelBase.ZMZN LexCore.Token -> ErrM.Err b1)))
			      (ParCore.HappyState
			       b
			       (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				PrelBase.ZMZN LexCore.Token -> ErrM.Err b1))
			      (PrelBase.Int ->
			       PrelBase.Int ->
			       b ->
			       ParCore.HappyState
			       b
			       (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				PrelBase.ZMZN LexCore.Token -> ErrM.Err b1)
			       ->
			       PrelBase.ZMZN
			       (ParCore.HappyState
				b
				(ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				 PrelBase.ZMZN LexCore.Token -> ErrM.Err b1))
			       ->
			       ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
			       PrelBase.ZMZN LexCore.Token -> ErrM.Err b1) =
			 %case (happyDrop1
				@ (ParCore.HappyState
				   b
				   (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				    PrelBase.ZMZN LexCore.Token -> ErrM.Err b1))
				k
				(PrelBase.ZdwZC
				 @ (ParCore.HappyState
				    b
				    (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				     PrelBase.ZMZN LexCore.Token -> ErrM.Err b1))
				 st sts))
			 %of (wild1::PrelBase.ZMZN
				     (ParCore.HappyState
				      b
				      (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				       PrelBase.ZMZN LexCore.Token -> ErrM.Err b1)))
			   {PrelBase.ZdwZMZN ->
			      PrelErr.irrefutPatError
			      @ (PrelTup.Z3T
				 (PrelBase.ZMZN
				  (ParCore.HappyState
				   b
				   (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				    PrelBase.ZMZN LexCore.Token -> ErrM.Err b1)))
				 (ParCore.HappyState
				  b
				  (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				   PrelBase.ZMZN LexCore.Token -> ErrM.Err b1))
				 (PrelBase.Int ->
				  PrelBase.Int ->
				  b ->
				  ParCore.HappyState
				  b
				  (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				   PrelBase.ZMZN LexCore.Token -> ErrM.Err b1)
				  ->
				  PrelBase.ZMZN
				  (ParCore.HappyState
				   b
				   (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				    PrelBase.ZMZN LexCore.Token -> ErrM.Err b1))
				  ->
				  ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				  PrelBase.ZMZN LexCore.Token -> ErrM.Err b1))
			      (PrelBase.unpackCStringzh
			       ("GenericTemplate.hs:197|(sts1@((st1@(ParCore.HappyState action)) PrelBase.: _))"::PrelGHC.Addrzh));
			    PrelBase.ZdwZC
			    (st1::ParCore.HappyState
				  b
				  (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				   PrelBase.ZMZN LexCore.Token -> ErrM.Err b1))
			    (ds4::PrelBase.ZMZN
				  (ParCore.HappyState
				   b
				   (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				    PrelBase.ZMZN LexCore.Token -> ErrM.Err b1))) ->
			      PrelTup.ZdwZ3T
			      @ (PrelBase.ZMZN
				 (ParCore.HappyState
				  b
				  (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				   PrelBase.ZMZN LexCore.Token -> ErrM.Err b1)))
			      @ (ParCore.HappyState
				 b
				 (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				  PrelBase.ZMZN LexCore.Token -> ErrM.Err b1))
			      @ (PrelBase.Int ->
				 PrelBase.Int ->
				 b ->
				 ParCore.HappyState
				 b
				 (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				  PrelBase.ZMZN LexCore.Token -> ErrM.Err b1)
				 ->
				 PrelBase.ZMZN
				 (ParCore.HappyState
				  b
				  (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				   PrelBase.ZMZN LexCore.Token -> ErrM.Err b1))
				 ->
				 ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				 PrelBase.ZMZN LexCore.Token -> ErrM.Err b1)
			      wild1 st1
			      (%coerce (PrelBase.Int ->
					PrelBase.Int ->
					b ->
					ParCore.HappyState
					b
					(ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
					 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err b1)
					->
					PrelBase.ZMZN
					(ParCore.HappyState
					 b
					 (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
					  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err b1))
					->
					ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
					-> PrelBase.ZMZN LexCore.Token -> ErrM.Err b1)
			       st1)}
		  %in %let st1 :: ParCore.HappyState
				  b
				  (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				   PrelBase.ZMZN LexCore.Token -> ErrM.Err b1) =
			     %case ds3
			     %of (ds4::PrelTup.Z3T
				       (PrelBase.ZMZN
					(ParCore.HappyState
					 b
					 (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
					  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err b1)))
				       (ParCore.HappyState
					b
					(ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
					 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err b1))
				       (PrelBase.Int ->
					PrelBase.Int ->
					b ->
					ParCore.HappyState
					b
					(ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
					 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err b1)
					->
					PrelBase.ZMZN
					(ParCore.HappyState
					 b
					 (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
					  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err b1))
					->
					ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
					-> PrelBase.ZMZN LexCore.Token -> ErrM.Err b1))
			       {PrelTup.ZdwZ3T
				(sts1::PrelBase.ZMZN
				       (ParCore.HappyState
					b
					(ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
					 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err b1)))
				(st11::ParCore.HappyState
				       b
				       (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
					-> PrelBase.ZMZN LexCore.Token -> ErrM.Err b1))
				(action::PrelBase.Int ->
					 PrelBase.Int ->
					 b ->
					 ParCore.HappyState
					 b
					 (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
					  -> PrelBase.ZMZN LexCore.Token -> ErrM.Err b1)
					 ->
					 PrelBase.ZMZN
					 (ParCore.HappyState
					  b
					  (ParCore.HappyStk
					   (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
					   -> PrelBase.ZMZN LexCore.Token -> ErrM.Err b1))
					 ->
					 ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
					 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err b1) ->
				  st11}
		      %in %let sts1 :: PrelBase.ZMZN
				       (ParCore.HappyState
					b
					(ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
					 -> PrelBase.ZMZN LexCore.Token -> ErrM.Err b1)) =
				 %case ds3
				 %of (ds4::PrelTup.Z3T
					   (PrelBase.ZMZN
					    (ParCore.HappyState
					     b
					     (ParCore.HappyStk
					      (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
					      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err b1)))
					   (ParCore.HappyState
					    b
					    (ParCore.HappyStk
					     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
					     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err b1))
					   (PrelBase.Int ->
					    PrelBase.Int ->
					    b ->
					    ParCore.HappyState
					    b
					    (ParCore.HappyStk
					     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
					     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err b1)
					    ->
					    PrelBase.ZMZN
					    (ParCore.HappyState
					     b
					     (ParCore.HappyStk
					      (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
					      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err b1))
					    ->
					    ParCore.HappyStk
					    (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
					    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err b1))
				   {PrelTup.ZdwZ3T
				    (sts11::PrelBase.ZMZN
					    (ParCore.HappyState
					     b
					     (ParCore.HappyStk
					      (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
					      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err b1)))
				    (st11::ParCore.HappyState
					   b
					   (ParCore.HappyStk
					    (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
					    -> PrelBase.ZMZN LexCore.Token -> ErrM.Err b1))
				    (action::PrelBase.Int ->
					     PrelBase.Int ->
					     b ->
					     ParCore.HappyState
					     b
					     (ParCore.HappyStk
					      (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
					      -> PrelBase.ZMZN LexCore.Token -> ErrM.Err b1)
					     ->
					     PrelBase.ZMZN
					     (ParCore.HappyState
					      b
					      (ParCore.HappyStk
					       (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
					       -> PrelBase.ZMZN LexCore.Token -> ErrM.Err b1))
					     ->
					     ParCore.HappyStk
					     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
					     -> PrelBase.ZMZN LexCore.Token -> ErrM.Err b1) ->
				      sts11}
			  %in %let dropzustk :: ParCore.HappyStk
						(ParCore.HappyAbsSyn t34 t35 t36 t37 t38) =
				     happyDropStk1 @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) k stk
			      %in %let m :: ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) =
					 fn stk
				  %in \ (tks::PrelBase.ZMZN LexCore.Token) ->
					  %case ErrM.zdfMonadErr
					  %of (tpl::PrelBase.ZCTMonad ErrM.Err)
					    {PrelBase.ZdwZCDMonad
					     (tpl1::%forall a b2 . ErrM.Err a ->
								   (a -> ErrM.Err b2) ->
								   ErrM.Err b2)
					     (tpl2::%forall a b2 . ErrM.Err a ->
								   ErrM.Err b2 -> ErrM.Err b2)
					     (tpl3::%forall a . a -> ErrM.Err a)
					     (tpl4::%forall a . PrelBase.ZMZN PrelBase.Char ->
								ErrM.Err a) ->
					       tpl1 @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) @ b1
					       m
					       (\ (a::ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
						    %case ds3
						    %of (ds4::PrelTup.Z3T
							      (PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err b1)))
							      (ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err b1))
							      (PrelBase.Int ->
							       PrelBase.Int ->
							       b ->
							       ParCore.HappyState
							       b
							       (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err b1)
							       ->
							       PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err b1))
							       ->
							       ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err b1))
						      {PrelTup.ZdwZ3T
						       (sts11::PrelBase.ZMZN
							       (ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err b1)))
						       (st11::ParCore.HappyState
							      b
							      (ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err b1))
						       (action::PrelBase.Int ->
								PrelBase.Int ->
								b ->
								ParCore.HappyState
								b
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  t34
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err b1)
								->
								PrelBase.ZMZN
								(ParCore.HappyState
								 b
								 (ParCore.HappyStk
								  (ParCore.HappyAbsSyn
								   t34
								   t35
								   t36
								   t37
								   t38)
								  ->
								  PrelBase.ZMZN LexCore.Token ->
								  ErrM.Err b1))
								->
								ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 t34
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err b1) ->
							 action nt wild tk st1 sts1
							 (ParCore.ZdwHappyStk
							  @ (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)
							  a dropzustk)
							 tks})};
		(1::PrelGHC.Intzh) ->
		  ParCore.happyFail @ b1 @ b @ t34 @ t35 @ t36 @ t37 @ t38
		  (PrelBase.ZdwIzh (1::PrelGHC.Intzh)) tk st sts stk}};
  ParCore.happyThen :: %forall a b . ErrM.Err a ->
				     (a -> ErrM.Err b) -> ErrM.Err b =
    \ @ a @ b -> ParCore.thenM @ a @ b;
  ParCore.returnM :: %forall a . a -> ErrM.Err a =
    \ @ a ->
	%case ErrM.zdfMonadErr %of (tpl::PrelBase.ZCTMonad ErrM.Err)
	  {PrelBase.ZdwZCDMonad
	   (tpl1::%forall a1 b . ErrM.Err a1 ->
				 (a1 -> ErrM.Err b) -> ErrM.Err b)
	   (tpl2::%forall a1 b . ErrM.Err a1 -> ErrM.Err b -> ErrM.Err b)
	   (tpl3::%forall a1 . a1 -> ErrM.Err a1)
	   (tpl4::%forall a1 . PrelBase.ZMZN PrelBase.Char -> ErrM.Err a1) ->
	     tpl3 @ a};
  ParCore.happyReturn1 :: %forall t a . a -> t -> ErrM.Err a =
    \ @ t @ a (a1::a) (tks::t) ->
	%case ErrM.zdfMonadErr %of (tpl::PrelBase.ZCTMonad ErrM.Err)
	  {PrelBase.ZdwZCDMonad
	   (tpl1::%forall a2 b . ErrM.Err a2 ->
				 (a2 -> ErrM.Err b) -> ErrM.Err b)
	   (tpl2::%forall a2 b . ErrM.Err a2 -> ErrM.Err b -> ErrM.Err b)
	   (tpl3::%forall a2 . a2 -> ErrM.Err a2)
	   (tpl4::%forall a2 . PrelBase.ZMZN PrelBase.Char -> ErrM.Err a2) ->
	     tpl3 @ a a1};
  ParCore.happyAccept :: %forall t t1 t2 t3 a t4 . t ->
						   t1 ->
						   t2 ->
						   t3 -> ParCore.HappyStk a -> t4 -> ErrM.Err a =
    \ @ t
      @ t1
      @ t2
      @ t3
      @ a
      @ t4
      (eta::t)
      (eta1::t1)
      (eta2::t2)
      (eta3::t3)
      (eta4::ParCore.HappyStk a)
      (eta5::t4) ->
	%case eta4 %of (wild::ParCore.HappyStk a)
	  {ParCore.ZdwHappyStk (ans::a) (ds::ParCore.HappyStk a) ->
	     %case ErrM.zdfMonadErr %of (tpl::PrelBase.ZCTMonad ErrM.Err)
	       {PrelBase.ZdwZCDMonad
		(tpl1::%forall a1 b . ErrM.Err a1 ->
				      (a1 -> ErrM.Err b) -> ErrM.Err b)
		(tpl2::%forall a1 b . ErrM.Err a1 -> ErrM.Err b -> ErrM.Err b)
		(tpl3::%forall a1 . a1 -> ErrM.Err a1)
		(tpl4::%forall a1 . PrelBase.ZMZN PrelBase.Char -> ErrM.Err a1) ->
		  tpl3 @ a ans}};
  ParCore.actionzu109 :: %forall t b t34 t35 t36 t37 t38 . PrelNum.ZCTNum
							   t
							   ->
							   t ->
							   PrelBase.Int ->
							   b ->
							   ParCore.HappyState
							   b
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38))
							   ->
							   PrelBase.ZMZN
							   (ParCore.HappyState
							    b
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)))
							   ->
							   ParCore.HappyStk
							   (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err
							   (ParCore.HappyAbsSyn
							    t34
							    t35
							    t36
							    t37
							    t38) =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (103::PrelGHC.Intzh))}
	%in \ (ds::t) ->
		%case zddNum %of (tpl::PrelNum.ZCTNum t)
		  {PrelNum.ZdwZCDNum
		   (tpl1::PrelBase.ZCTEq t)
		   (tpl2::PrelShow.ZCTShow t)
		   (tpl3::t -> t -> t)
		   (tpl4::t -> t -> t)
		   (tpl5::t -> t -> t)
		   (tpl6::t -> t)
		   (tpl7::t -> t)
		   (tpl8::t -> t)
		   (tpl9::PrelNum.Integer -> t) ->
		     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
		       {PrelBase.ZdwZCDEq
			(tpl11::t -> t -> PrelBase.Bool)
			(tpl12::t -> t -> PrelBase.Bool) ->
			  %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
			    {PrelBase.ZdwTrue ->
			       ParCore.happyAccept @ PrelBase.Int @ b
			       @ (ParCore.HappyState
				  b
				  (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				   PrelBase.ZMZN LexCore.Token ->
				   ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)))
			       @ (PrelBase.ZMZN
				  (ParCore.HappyState
				   b
				   (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				    PrelBase.ZMZN LexCore.Token ->
				    ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))))
			       @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
			       @ (PrelBase.ZMZN LexCore.Token);
			     PrelBase.ZdwFalse ->
			       ParCore.happyFail @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) @ b
			       @ t34 @ t35 @ t36 @ t37 @ t38}}};
  actionzu1091 :: PrelBase.Int ->
		  PrelBase.Int ->
		  LexCore.Token ->
		  ParCore.HappyState
		  LexCore.Token
		  (ParCore.HappyStk
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char)
		   ->
		   PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char))
		  ->
		  PrelBase.ZMZN
		  (ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelNum.Integer
		     PrelFloat.Double
		     PrelBase.Char)
		    ->
		    PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelNum.Integer
		     PrelFloat.Double
		     PrelBase.Char)))
		  ->
		  ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char)
		  ->
		  PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char) =
    ParCore.actionzu109 @ PrelBase.Int @ LexCore.Token
    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char
    PrelNum.zdfNumInt;
  ParCore.actionzu0 :: %forall t . PrelNum.ZCTNum t ->
				   t ->
				   PrelBase.Int ->
				   LexCore.Token ->
				   ParCore.HappyState
				   LexCore.Token
				   (ParCore.HappyStk
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     (PrelBase.ZMZN PrelBase.Char)
				     PrelNum.Integer
				     PrelFloat.Double
				     PrelBase.Char)
				    ->
				    PrelBase.ZMZN LexCore.Token ->
				    ErrM.Err
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     (PrelBase.ZMZN PrelBase.Char)
				     PrelNum.Integer
				     PrelFloat.Double
				     PrelBase.Char))
				   ->
				   PrelBase.ZMZN
				   (ParCore.HappyState
				    LexCore.Token
				    (ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     ->
				     PrelBase.ZMZN LexCore.Token ->
				     ErrM.Err
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)))
				   ->
				   ParCore.HappyStk
				   (ParCore.HappyAbsSyn
				    (PrelBase.ZMZN PrelBase.Char)
				    (PrelBase.ZMZN PrelBase.Char)
				    PrelNum.Integer
				    PrelFloat.Double
				    PrelBase.Char)
				   ->
				   PrelBase.ZMZN LexCore.Token ->
				   ErrM.Err
				   (ParCore.HappyAbsSyn
				    (PrelBase.ZMZN PrelBase.Char)
				    (PrelBase.ZMZN PrelBase.Char)
				    PrelNum.Integer
				    PrelFloat.Double
				    PrelBase.Char) =
    \ @ t (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (70::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (39::PrelGHC.Intzh))}
	    %in \ (ds::t) ->
		    %case zddNum %of (tpl::PrelNum.ZCTNum t)
		      {PrelNum.ZdwZCDNum
		       (tpl1::PrelBase.ZCTEq t)
		       (tpl2::PrelShow.ZCTShow t)
		       (tpl3::t -> t -> t)
		       (tpl4::t -> t -> t)
		       (tpl5::t -> t -> t)
		       (tpl6::t -> t)
		       (tpl7::t -> t)
		       (tpl8::t -> t)
		       (tpl9::PrelNum.Integer -> t) ->
			 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
			   {PrelBase.ZdwZCDEq
			    (tpl11::t -> t -> PrelBase.Bool)
			    (tpl12::t -> t -> PrelBase.Bool) ->
			      %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
				{PrelBase.ZdwTrue ->
				   happyShift2 actionzu1101;
				 PrelBase.ZdwFalse ->
				   %case (tpl12 lit2 ds) %of (wild1::PrelBase.Bool)
				     {PrelBase.ZdwTrue ->
					ParCore.happyGoto
					@ (ParCore.HappyState
					   LexCore.Token
					   (ParCore.HappyStk
					    (ParCore.HappyAbsSyn
					     (PrelBase.ZMZN PrelBase.Char)
					     (PrelBase.ZMZN PrelBase.Char)
					     PrelNum.Integer
					     PrelFloat.Double
					     PrelBase.Char)
					    ->
					    PrelBase.ZMZN LexCore.Token ->
					    ErrM.Err
					    (ParCore.HappyAbsSyn
					     (PrelBase.ZMZN PrelBase.Char)
					     (PrelBase.ZMZN PrelBase.Char)
					     PrelNum.Integer
					     PrelFloat.Double
					     PrelBase.Char)))
					@ LexCore.Token
					@ (ParCore.HappyStk
					   (ParCore.HappyAbsSyn
					    (PrelBase.ZMZN PrelBase.Char)
					    (PrelBase.ZMZN PrelBase.Char)
					    PrelNum.Integer
					    PrelFloat.Double
					    PrelBase.Char)
					   ->
					   PrelBase.ZMZN LexCore.Token ->
					   ErrM.Err
					   (ParCore.HappyAbsSyn
					    (PrelBase.ZMZN PrelBase.Char)
					    (PrelBase.ZMZN PrelBase.Char)
					    PrelNum.Integer
					    PrelFloat.Double
					    PrelBase.Char))
					actionzu1091;
				      PrelBase.ZdwFalse ->
					ParCore.happyFail
					@ (ParCore.HappyAbsSyn
					   (PrelBase.ZMZN PrelBase.Char)
					   (PrelBase.ZMZN PrelBase.Char)
					   PrelNum.Integer
					   PrelFloat.Double
					   PrelBase.Char)
					@ LexCore.Token @ (PrelBase.ZMZN PrelBase.Char)
					@ (PrelBase.ZMZN PrelBase.Char) @ PrelNum.Integer
					@ PrelFloat.Double @ PrelBase.Char}}}};
  actionzu01 :: PrelBase.Int ->
		PrelBase.Int ->
		LexCore.Token ->
		ParCore.HappyState
		LexCore.Token
		(ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char)
		 ->
		 PrelBase.ZMZN LexCore.Token ->
		 ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char))
		->
		PrelBase.ZMZN
		(ParCore.HappyState
		 LexCore.Token
		 (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char)
		  ->
		  PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char)))
		->
		ParCore.HappyStk
		(ParCore.HappyAbsSyn
		 (PrelBase.ZMZN PrelBase.Char)
		 (PrelBase.ZMZN PrelBase.Char)
		 PrelNum.Integer
		 PrelFloat.Double
		 PrelBase.Char)
		->
		PrelBase.ZMZN LexCore.Token ->
		ErrM.Err
		(ParCore.HappyAbsSyn
		 (PrelBase.ZMZN PrelBase.Char)
		 (PrelBase.ZMZN PrelBase.Char)
		 PrelNum.Integer
		 PrelFloat.Double
		 PrelBase.Char) =
    ParCore.actionzu0 @ PrelBase.Int PrelNum.zdfNumInt;
  ParCore.actionzu108 :: %forall t t35 t36 t37 t38 . PrelNum.ZCTNum t
						     ->
						     t ->
						     PrelBase.Int ->
						     LexCore.Token ->
						     ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      ->
						      PrelBase.ZMZN LexCore.Token ->
						      ErrM.Err
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38))
						     ->
						     PrelBase.ZMZN
						     (ParCore.HappyState
						      LexCore.Token
						      (ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)
						       ->
						       PrelBase.ZMZN LexCore.Token ->
						       ErrM.Err
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)))
						     ->
						     ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     ->
						     PrelBase.ZMZN LexCore.Token ->
						     ErrM.Err
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38) =
    \ @ t @ t35 @ t36 @ t37 @ t38 (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (103::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (76::PrelGHC.Intzh))}
	    %in %let lit3 :: t =
		       %case zddNum %of (tpl::PrelNum.ZCTNum t)
			 {PrelNum.ZdwZCDNum
			  (tpl1::PrelBase.ZCTEq t)
			  (tpl2::PrelShow.ZCTShow t)
			  (tpl3::t -> t -> t)
			  (tpl4::t -> t -> t)
			  (tpl5::t -> t -> t)
			  (tpl6::t -> t)
			  (tpl7::t -> t)
			  (tpl8::t -> t)
			  (tpl9::PrelNum.Integer -> t) ->
			    tpl9 (PrelNum.ZdwSzh (72::PrelGHC.Intzh))}
		%in %let lit4 :: t =
			   %case zddNum %of (tpl::PrelNum.ZCTNum t)
			     {PrelNum.ZdwZCDNum
			      (tpl1::PrelBase.ZCTEq t)
			      (tpl2::PrelShow.ZCTShow t)
			      (tpl3::t -> t -> t)
			      (tpl4::t -> t -> t)
			      (tpl5::t -> t -> t)
			      (tpl6::t -> t)
			      (tpl7::t -> t)
			      (tpl8::t -> t)
			      (tpl9::PrelNum.Integer -> t) ->
				tpl9 (PrelNum.ZdwSzh (41::PrelGHC.Intzh))}
		    %in %let actionzu1121 :: PrelBase.Int ->
					     PrelBase.Int ->
					     LexCore.Token ->
					     ParCore.HappyState
					     LexCore.Token
					     (ParCore.HappyStk
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38)
					      ->
					      PrelBase.ZMZN LexCore.Token ->
					      ErrM.Err
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38))
					     ->
					     PrelBase.ZMZN
					     (ParCore.HappyState
					      LexCore.Token
					      (ParCore.HappyStk
					       (ParCore.HappyAbsSyn
						(PrelBase.ZMZN PrelBase.Char)
						t35
						t36
						t37
						t38)
					       ->
					       PrelBase.ZMZN LexCore.Token ->
					       ErrM.Err
					       (ParCore.HappyAbsSyn
						(PrelBase.ZMZN PrelBase.Char)
						t35
						t36
						t37
						t38)))
					     ->
					     ParCore.HappyStk
					     (ParCore.HappyAbsSyn
					      (PrelBase.ZMZN PrelBase.Char)
					      t35
					      t36
					      t37
					      t38)
					     ->
					     PrelBase.ZMZN LexCore.Token ->
					     ErrM.Err
					     (ParCore.HappyAbsSyn
					      (PrelBase.ZMZN PrelBase.Char)
					      t35
					      t36
					      t37
					      t38) =
			       ParCore.actionzu112 @ PrelBase.Int @ (PrelBase.ZMZN PrelBase.Char)
			       @ t35 @ t36 @ t37 @ t38
			       @ (ParCore.HappyAbsSyn
				  (PrelBase.ZMZN PrelBase.Char)
				  t35
				  t36
				  t37
				  t38)
			       PrelNum.zdfNumInt
			%in %let actionzu1071 :: PrelBase.Int ->
						 PrelBase.Int ->
						 LexCore.Token ->
						 ParCore.HappyState
						 LexCore.Token
						 (ParCore.HappyStk
						  (ParCore.HappyAbsSyn
						   (PrelBase.ZMZN PrelBase.Char)
						   t35
						   t36
						   t37
						   t38)
						  ->
						  PrelBase.ZMZN LexCore.Token ->
						  ErrM.Err
						  (ParCore.HappyAbsSyn
						   (PrelBase.ZMZN PrelBase.Char)
						   t35
						   t36
						   t37
						   t38))
						 ->
						 PrelBase.ZMZN
						 (ParCore.HappyState
						  LexCore.Token
						  (ParCore.HappyStk
						   (ParCore.HappyAbsSyn
						    (PrelBase.ZMZN PrelBase.Char)
						    t35
						    t36
						    t37
						    t38)
						   ->
						   PrelBase.ZMZN LexCore.Token ->
						   ErrM.Err
						   (ParCore.HappyAbsSyn
						    (PrelBase.ZMZN PrelBase.Char)
						    t35
						    t36
						    t37
						    t38)))
						 ->
						 ParCore.HappyStk
						 (ParCore.HappyAbsSyn
						  (PrelBase.ZMZN PrelBase.Char)
						  t35
						  t36
						  t37
						  t38)
						 ->
						 PrelBase.ZMZN LexCore.Token ->
						 ErrM.Err
						 (ParCore.HappyAbsSyn
						  (PrelBase.ZMZN PrelBase.Char)
						  t35
						  t36
						  t37
						  t38) =
				   ParCore.actionzu107 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38
				   @ (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      t35
				      t36
				      t37
				      t38)
				   PrelNum.zdfNumInt
			    %in %let actionzu1061 :: PrelBase.Int ->
						     PrelBase.Int ->
						     LexCore.Token ->
						     ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      ->
						      PrelBase.ZMZN LexCore.Token ->
						      ErrM.Err
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38))
						     ->
						     PrelBase.ZMZN
						     (ParCore.HappyState
						      LexCore.Token
						      (ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)
						       ->
						       PrelBase.ZMZN LexCore.Token ->
						       ErrM.Err
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)))
						     ->
						     ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     ->
						     PrelBase.ZMZN LexCore.Token ->
						     ErrM.Err
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38) =
				       ParCore.actionzu106 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38
				       @ (ParCore.HappyAbsSyn
					  (PrelBase.ZMZN PrelBase.Char)
					  t35
					  t36
					  t37
					  t38)
				       PrelNum.zdfNumInt
				%in %let happyShift7 :: (PrelBase.Int ->
							 PrelBase.Int ->
							 LexCore.Token ->
							 ParCore.HappyState
							 LexCore.Token
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   t38)
							  ->
							  PrelBase.ZMZN LexCore.Token ->
							  ErrM.Err
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   t38))
							 ->
							 PrelBase.ZMZN
							 (ParCore.HappyState
							  LexCore.Token
							  (ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    (PrelBase.ZMZN PrelBase.Char)
							    t35
							    t36
							    t37
							    t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err
							   (ParCore.HappyAbsSyn
							    (PrelBase.ZMZN PrelBase.Char)
							    t35
							    t36
							    t37
							    t38)))
							 ->
							 ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token ->
							 ErrM.Err
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38))
							->
							PrelBase.Int ->
							LexCore.Token ->
							ParCore.HappyState
							LexCore.Token
							(ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token ->
							 ErrM.Err
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38))
							->
							PrelBase.ZMZN
							(ParCore.HappyState
							 LexCore.Token
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   t38)
							  ->
							  PrelBase.ZMZN LexCore.Token ->
							  ErrM.Err
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   t38)))
							->
							ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38)
							->
							PrelBase.ZMZN LexCore.Token ->
							ErrM.Err
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38) =
					   ParCore.happyShift @ PrelBase.Int
					   @ (ErrM.Err
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38))
					   @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38
					   PrelNum.zdfNumInt
				    %in \ (ds::t) ->
					    %case zddNum %of (tpl::PrelNum.ZCTNum t)
					      {PrelNum.ZdwZCDNum
					       (tpl1::PrelBase.ZCTEq t)
					       (tpl2::PrelShow.ZCTShow t)
					       (tpl3::t -> t -> t)
					       (tpl4::t -> t -> t)
					       (tpl5::t -> t -> t)
					       (tpl6::t -> t)
					       (tpl7::t -> t)
					       (tpl8::t -> t)
					       (tpl9::PrelNum.Integer -> t) ->
						 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
						   {PrelBase.ZdwZCDEq
						    (tpl11::t -> t -> PrelBase.Bool)
						    (tpl12::t -> t -> PrelBase.Bool) ->
						      %case (tpl12 lit3 ds)
						      %of (wild::PrelBase.Bool)
							{PrelBase.ZdwTrue ->
							   happyShift7 actionzu1061;
							 PrelBase.ZdwFalse ->
							   %case (tpl12 lit2 ds)
							   %of (wild1::PrelBase.Bool)
							     {PrelBase.ZdwTrue ->
								happyShift7 actionzu1071;
							      PrelBase.ZdwFalse ->
								%case (tpl12 lit1 ds)
								%of (wild2::PrelBase.Bool)
								  {PrelBase.ZdwTrue ->
								     ParCore.happyAccept
								     @ PrelBase.Int @ LexCore.Token
								     @ (ParCore.HappyState
									LexCore.Token
									(ParCore.HappyStk
									 (ParCore.HappyAbsSyn
									  (PrelBase.ZMZN
									   PrelBase.Char)
									  t35
									  t36
									  t37
									  t38)
									 ->
									 PrelBase.ZMZN LexCore.Token
									 ->
									 ErrM.Err
									 (ParCore.HappyAbsSyn
									  (PrelBase.ZMZN
									   PrelBase.Char)
									  t35
									  t36
									  t37
									  t38)))
								     @ (PrelBase.ZMZN
									(ParCore.HappyState
									 LexCore.Token
									 (ParCore.HappyStk
									  (ParCore.HappyAbsSyn
									   (PrelBase.ZMZN
									    PrelBase.Char)
									   t35
									   t36
									   t37
									   t38)
									  ->
									  PrelBase.ZMZN
									  LexCore.Token
									  ->
									  ErrM.Err
									  (ParCore.HappyAbsSyn
									   (PrelBase.ZMZN
									    PrelBase.Char)
									   t35
									   t36
									   t37
									   t38))))
								     @ (ParCore.HappyAbsSyn
									(PrelBase.ZMZN
									 PrelBase.Char)
									t35
									t36
									t37
									t38)
								     @ (PrelBase.ZMZN
									LexCore.Token);
								   PrelBase.ZdwFalse ->
								     %case (tpl12 lit4 ds)
								     %of (wild3::PrelBase.Bool)
								       {PrelBase.ZdwTrue ->
									  ParCore.happyGoto
									  @ (ParCore.HappyState
									     LexCore.Token
									     (ParCore.HappyStk
									      (ParCore.HappyAbsSyn
									       (PrelBase.ZMZN
										PrelBase.Char)
									       t35
									       t36
									       t37
									       t38)
									      ->
									      PrelBase.ZMZN
									      LexCore.Token
									      ->
									      ErrM.Err
									      (ParCore.HappyAbsSyn
									       (PrelBase.ZMZN
										PrelBase.Char)
									       t35
									       t36
									       t37
									       t38)))
									  @ LexCore.Token
									  @ (ParCore.HappyStk
									     (ParCore.HappyAbsSyn
									      (PrelBase.ZMZN
									       PrelBase.Char)
									      t35
									      t36
									      t37
									      t38)
									     ->
									     PrelBase.ZMZN
									     LexCore.Token
									     ->
									     ErrM.Err
									     (ParCore.HappyAbsSyn
									      (PrelBase.ZMZN
									       PrelBase.Char)
									      t35
									      t36
									      t37
									      t38))
									  actionzu1121;
									PrelBase.ZdwFalse ->
									  ParCore.happyFail
									  @ (ParCore.HappyAbsSyn
									     (PrelBase.ZMZN
									      PrelBase.Char)
									     t35
									     t36
									     t37
									     t38)
									  @ LexCore.Token
									  @ (PrelBase.ZMZN
									     PrelBase.Char)
									  @ t35 @ t36 @ t37
									  @ t38}}}}}};
  ParCore.actionzu1 :: %forall t t35 t36 t37 t38 . PrelNum.ZCTNum t
						   ->
						   t ->
						   PrelBase.Int ->
						   LexCore.Token ->
						   ParCore.HappyState
						   LexCore.Token
						   (ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38)
						    ->
						    PrelBase.ZMZN LexCore.Token ->
						    ErrM.Err
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38))
						   ->
						   PrelBase.ZMZN
						   (ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     ->
						     PrelBase.ZMZN LexCore.Token ->
						     ErrM.Err
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)))
						   ->
						   ParCore.HappyStk
						   (ParCore.HappyAbsSyn
						    (PrelBase.ZMZN PrelBase.Char)
						    t35
						    t36
						    t37
						    t38)
						   ->
						   PrelBase.ZMZN LexCore.Token ->
						   ErrM.Err
						   (ParCore.HappyAbsSyn
						    (PrelBase.ZMZN PrelBase.Char)
						    t35
						    t36
						    t37
						    t38) =
    \ @ t @ t35 @ t36 @ t37 @ t38 (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (40::PrelGHC.Intzh))}
	%in %let actionzu1081 :: PrelBase.Int ->
				 PrelBase.Int ->
				 LexCore.Token ->
				 ParCore.HappyState
				 LexCore.Token
				 (ParCore.HappyStk
				  (ParCore.HappyAbsSyn
				   (PrelBase.ZMZN PrelBase.Char)
				   t35
				   t36
				   t37
				   t38)
				  ->
				  PrelBase.ZMZN LexCore.Token ->
				  ErrM.Err
				  (ParCore.HappyAbsSyn
				   (PrelBase.ZMZN PrelBase.Char)
				   t35
				   t36
				   t37
				   t38))
				 ->
				 PrelBase.ZMZN
				 (ParCore.HappyState
				  LexCore.Token
				  (ParCore.HappyStk
				   (ParCore.HappyAbsSyn
				    (PrelBase.ZMZN PrelBase.Char)
				    t35
				    t36
				    t37
				    t38)
				   ->
				   PrelBase.ZMZN LexCore.Token ->
				   ErrM.Err
				   (ParCore.HappyAbsSyn
				    (PrelBase.ZMZN PrelBase.Char)
				    t35
				    t36
				    t37
				    t38)))
				 ->
				 ParCore.HappyStk
				 (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
				 ->
				 PrelBase.ZMZN LexCore.Token ->
				 ErrM.Err
				 (ParCore.HappyAbsSyn
				  (PrelBase.ZMZN PrelBase.Char)
				  t35
				  t36
				  t37
				  t38) =
		   ParCore.actionzu108 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38
		   PrelNum.zdfNumInt
	    %in \ (ds::t) ->
		    %case zddNum %of (tpl::PrelNum.ZCTNum t)
		      {PrelNum.ZdwZCDNum
		       (tpl1::PrelBase.ZCTEq t)
		       (tpl2::PrelShow.ZCTShow t)
		       (tpl3::t -> t -> t)
		       (tpl4::t -> t -> t)
		       (tpl5::t -> t -> t)
		       (tpl6::t -> t)
		       (tpl7::t -> t)
		       (tpl8::t -> t)
		       (tpl9::PrelNum.Integer -> t) ->
			 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
			   {PrelBase.ZdwZCDEq
			    (tpl11::t -> t -> PrelBase.Bool)
			    (tpl12::t -> t -> PrelBase.Bool) ->
			      %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
				{PrelBase.ZdwTrue ->
				   ParCore.happyGoto
				   @ (ParCore.HappyState
				      LexCore.Token
				      (ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					t35
					t36
					t37
					t38)
				       ->
				       PrelBase.ZMZN LexCore.Token ->
				       ErrM.Err
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					t35
					t36
					t37
					t38)))
				   @ LexCore.Token
				   @ (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       t35
				       t36
				       t37
				       t38)
				      ->
				      PrelBase.ZMZN LexCore.Token ->
				      ErrM.Err
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       t35
				       t36
				       t37
				       t38))
				   actionzu1081;
				 PrelBase.ZdwFalse ->
				   ParCore.happyReducezu37 @ LexCore.Token
				   @ (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      t35
				      t36
				      t37
				      t38)
				   @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38}}};
  actionzu1111 :: PrelBase.Int ->
		  PrelBase.Int ->
		  LexCore.Token ->
		  ParCore.HappyState
		  LexCore.Token
		  (ParCore.HappyStk
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T)
		   ->
		   PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T))
		  ->
		  PrelBase.ZMZN
		  (ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)
		    ->
		    PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)))
		  ->
		  ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T)
		  ->
		  PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T) =
    ParCore.actionzu1 @ PrelBase.Int @ PrelBase.Z0T @ PrelBase.Z0T
    @ PrelBase.Z0T @ PrelBase.Z0T PrelNum.zdfNumInt;
  ParCore.actionzu105 :: %forall t b t34 t35 t36 t37 t38 . PrelNum.ZCTNum
							   t
							   ->
							   t ->
							   PrelBase.Int ->
							   b ->
							   ParCore.HappyState
							   b
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38))
							   ->
							   PrelBase.ZMZN
							   (ParCore.HappyState
							    b
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)))
							   ->
							   ParCore.HappyStk
							   (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err
							   (ParCore.HappyAbsSyn
							    t34
							    t35
							    t36
							    t37
							    t38) =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (103::PrelGHC.Intzh))}
	%in \ (ds::t) ->
		%case zddNum %of (tpl::PrelNum.ZCTNum t)
		  {PrelNum.ZdwZCDNum
		   (tpl1::PrelBase.ZCTEq t)
		   (tpl2::PrelShow.ZCTShow t)
		   (tpl3::t -> t -> t)
		   (tpl4::t -> t -> t)
		   (tpl5::t -> t -> t)
		   (tpl6::t -> t)
		   (tpl7::t -> t)
		   (tpl8::t -> t)
		   (tpl9::PrelNum.Integer -> t) ->
		     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
		       {PrelBase.ZdwZCDEq
			(tpl11::t -> t -> PrelBase.Bool)
			(tpl12::t -> t -> PrelBase.Bool) ->
			  %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
			    {PrelBase.ZdwTrue ->
			       ParCore.happyAccept @ PrelBase.Int @ b
			       @ (ParCore.HappyState
				  b
				  (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				   PrelBase.ZMZN LexCore.Token ->
				   ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)))
			       @ (PrelBase.ZMZN
				  (ParCore.HappyState
				   b
				   (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				    PrelBase.ZMZN LexCore.Token ->
				    ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))))
			       @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
			       @ (PrelBase.ZMZN LexCore.Token);
			     PrelBase.ZdwFalse ->
			       ParCore.happyFail @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) @ b
			       @ t34 @ t35 @ t36 @ t37 @ t38}}};
  ParCore.actionzu2 :: %forall t t35 t36 t37 t38 . PrelNum.ZCTNum t
						   ->
						   t ->
						   PrelBase.Int ->
						   LexCore.Token ->
						   ParCore.HappyState
						   LexCore.Token
						   (ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38)
						    ->
						    PrelBase.ZMZN LexCore.Token ->
						    ErrM.Err
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38))
						   ->
						   PrelBase.ZMZN
						   (ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     ->
						     PrelBase.ZMZN LexCore.Token ->
						     ErrM.Err
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)))
						   ->
						   ParCore.HappyStk
						   (ParCore.HappyAbsSyn
						    (PrelBase.ZMZN PrelBase.Char)
						    t35
						    t36
						    t37
						    t38)
						   ->
						   PrelBase.ZMZN LexCore.Token ->
						   ErrM.Err
						   (ParCore.HappyAbsSyn
						    (PrelBase.ZMZN PrelBase.Char)
						    t35
						    t36
						    t37
						    t38) =
    \ @ t @ t35 @ t36 @ t37 @ t38 (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (76::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (72::PrelGHC.Intzh))}
	    %in %let lit3 :: t =
		       %case zddNum %of (tpl::PrelNum.ZCTNum t)
			 {PrelNum.ZdwZCDNum
			  (tpl1::PrelBase.ZCTEq t)
			  (tpl2::PrelShow.ZCTShow t)
			  (tpl3::t -> t -> t)
			  (tpl4::t -> t -> t)
			  (tpl5::t -> t -> t)
			  (tpl6::t -> t)
			  (tpl7::t -> t)
			  (tpl8::t -> t)
			  (tpl9::PrelNum.Integer -> t) ->
			    tpl9 (PrelNum.ZdwSzh (41::PrelGHC.Intzh))}
		%in %let actionzu1051 :: PrelBase.Int ->
					 PrelBase.Int ->
					 LexCore.Token ->
					 ParCore.HappyState
					 LexCore.Token
					 (ParCore.HappyStk
					  (ParCore.HappyAbsSyn
					   (PrelBase.ZMZN PrelBase.Char)
					   t35
					   t36
					   t37
					   t38)
					  ->
					  PrelBase.ZMZN LexCore.Token ->
					  ErrM.Err
					  (ParCore.HappyAbsSyn
					   (PrelBase.ZMZN PrelBase.Char)
					   t35
					   t36
					   t37
					   t38))
					 ->
					 PrelBase.ZMZN
					 (ParCore.HappyState
					  LexCore.Token
					  (ParCore.HappyStk
					   (ParCore.HappyAbsSyn
					    (PrelBase.ZMZN PrelBase.Char)
					    t35
					    t36
					    t37
					    t38)
					   ->
					   PrelBase.ZMZN LexCore.Token ->
					   ErrM.Err
					   (ParCore.HappyAbsSyn
					    (PrelBase.ZMZN PrelBase.Char)
					    t35
					    t36
					    t37
					    t38)))
					 ->
					 ParCore.HappyStk
					 (ParCore.HappyAbsSyn
					  (PrelBase.ZMZN PrelBase.Char)
					  t35
					  t36
					  t37
					  t38)
					 ->
					 PrelBase.ZMZN LexCore.Token ->
					 ErrM.Err
					 (ParCore.HappyAbsSyn
					  (PrelBase.ZMZN PrelBase.Char)
					  t35
					  t36
					  t37
					  t38) =
			   ParCore.actionzu105 @ PrelBase.Int @ LexCore.Token
			   @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38
			   PrelNum.zdfNumInt
		    %in %let actionzu1071 :: PrelBase.Int ->
					     PrelBase.Int ->
					     LexCore.Token ->
					     ParCore.HappyState
					     LexCore.Token
					     (ParCore.HappyStk
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38)
					      ->
					      PrelBase.ZMZN LexCore.Token ->
					      ErrM.Err
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38))
					     ->
					     PrelBase.ZMZN
					     (ParCore.HappyState
					      LexCore.Token
					      (ParCore.HappyStk
					       (ParCore.HappyAbsSyn
						(PrelBase.ZMZN PrelBase.Char)
						t35
						t36
						t37
						t38)
					       ->
					       PrelBase.ZMZN LexCore.Token ->
					       ErrM.Err
					       (ParCore.HappyAbsSyn
						(PrelBase.ZMZN PrelBase.Char)
						t35
						t36
						t37
						t38)))
					     ->
					     ParCore.HappyStk
					     (ParCore.HappyAbsSyn
					      (PrelBase.ZMZN PrelBase.Char)
					      t35
					      t36
					      t37
					      t38)
					     ->
					     PrelBase.ZMZN LexCore.Token ->
					     ErrM.Err
					     (ParCore.HappyAbsSyn
					      (PrelBase.ZMZN PrelBase.Char)
					      t35
					      t36
					      t37
					      t38) =
			       ParCore.actionzu107 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38
			       @ (ParCore.HappyAbsSyn
				  (PrelBase.ZMZN PrelBase.Char)
				  t35
				  t36
				  t37
				  t38)
			       PrelNum.zdfNumInt
			%in %let actionzu1061 :: PrelBase.Int ->
						 PrelBase.Int ->
						 LexCore.Token ->
						 ParCore.HappyState
						 LexCore.Token
						 (ParCore.HappyStk
						  (ParCore.HappyAbsSyn
						   (PrelBase.ZMZN PrelBase.Char)
						   t35
						   t36
						   t37
						   t38)
						  ->
						  PrelBase.ZMZN LexCore.Token ->
						  ErrM.Err
						  (ParCore.HappyAbsSyn
						   (PrelBase.ZMZN PrelBase.Char)
						   t35
						   t36
						   t37
						   t38))
						 ->
						 PrelBase.ZMZN
						 (ParCore.HappyState
						  LexCore.Token
						  (ParCore.HappyStk
						   (ParCore.HappyAbsSyn
						    (PrelBase.ZMZN PrelBase.Char)
						    t35
						    t36
						    t37
						    t38)
						   ->
						   PrelBase.ZMZN LexCore.Token ->
						   ErrM.Err
						   (ParCore.HappyAbsSyn
						    (PrelBase.ZMZN PrelBase.Char)
						    t35
						    t36
						    t37
						    t38)))
						 ->
						 ParCore.HappyStk
						 (ParCore.HappyAbsSyn
						  (PrelBase.ZMZN PrelBase.Char)
						  t35
						  t36
						  t37
						  t38)
						 ->
						 PrelBase.ZMZN LexCore.Token ->
						 ErrM.Err
						 (ParCore.HappyAbsSyn
						  (PrelBase.ZMZN PrelBase.Char)
						  t35
						  t36
						  t37
						  t38) =
				   ParCore.actionzu106 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38
				   @ (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      t35
				      t36
				      t37
				      t38)
				   PrelNum.zdfNumInt
			    %in %let happyShift7 :: (PrelBase.Int ->
						     PrelBase.Int ->
						     LexCore.Token ->
						     ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      ->
						      PrelBase.ZMZN LexCore.Token ->
						      ErrM.Err
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38))
						     ->
						     PrelBase.ZMZN
						     (ParCore.HappyState
						      LexCore.Token
						      (ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)
						       ->
						       PrelBase.ZMZN LexCore.Token ->
						       ErrM.Err
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)))
						     ->
						     ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     ->
						     PrelBase.ZMZN LexCore.Token ->
						     ErrM.Err
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38))
						    ->
						    PrelBase.Int ->
						    LexCore.Token ->
						    ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     ->
						     PrelBase.ZMZN LexCore.Token ->
						     ErrM.Err
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38))
						    ->
						    PrelBase.ZMZN
						    (ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      ->
						      PrelBase.ZMZN LexCore.Token ->
						      ErrM.Err
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)))
						    ->
						    ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38)
						    ->
						    PrelBase.ZMZN LexCore.Token ->
						    ErrM.Err
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38) =
				       ParCore.happyShift @ PrelBase.Int
				       @ (ErrM.Err
					  (ParCore.HappyAbsSyn
					   (PrelBase.ZMZN PrelBase.Char)
					   t35
					   t36
					   t37
					   t38))
				       @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38
				       PrelNum.zdfNumInt
				%in \ (ds::t) ->
					%case zddNum %of (tpl::PrelNum.ZCTNum t)
					  {PrelNum.ZdwZCDNum
					   (tpl1::PrelBase.ZCTEq t)
					   (tpl2::PrelShow.ZCTShow t)
					   (tpl3::t -> t -> t)
					   (tpl4::t -> t -> t)
					   (tpl5::t -> t -> t)
					   (tpl6::t -> t)
					   (tpl7::t -> t)
					   (tpl8::t -> t)
					   (tpl9::PrelNum.Integer -> t) ->
					     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
					       {PrelBase.ZdwZCDEq
						(tpl11::t -> t -> PrelBase.Bool)
						(tpl12::t -> t -> PrelBase.Bool) ->
						  %case (tpl12 lit2 ds) %of (wild::PrelBase.Bool)
						    {PrelBase.ZdwTrue ->
						       happyShift7 actionzu1061;
						     PrelBase.ZdwFalse ->
						       %case (tpl12 lit1 ds)
						       %of (wild1::PrelBase.Bool)
							 {PrelBase.ZdwTrue ->
							    happyShift7 actionzu1071;
							  PrelBase.ZdwFalse ->
							    %case (tpl12 lit3 ds)
							    %of (wild2::PrelBase.Bool)
							      {PrelBase.ZdwTrue ->
								 ParCore.happyGoto
								 @ (ParCore.HappyState
								    LexCore.Token
								    (ParCore.HappyStk
								     (ParCore.HappyAbsSyn
								      (PrelBase.ZMZN PrelBase.Char)
								      t35
								      t36
								      t37
								      t38)
								     ->
								     PrelBase.ZMZN LexCore.Token ->
								     ErrM.Err
								     (ParCore.HappyAbsSyn
								      (PrelBase.ZMZN PrelBase.Char)
								      t35
								      t36
								      t37
								      t38)))
								 @ LexCore.Token
								 @ (ParCore.HappyStk
								    (ParCore.HappyAbsSyn
								     (PrelBase.ZMZN PrelBase.Char)
								     t35
								     t36
								     t37
								     t38)
								    ->
								    PrelBase.ZMZN LexCore.Token ->
								    ErrM.Err
								    (ParCore.HappyAbsSyn
								     (PrelBase.ZMZN PrelBase.Char)
								     t35
								     t36
								     t37
								     t38))
								 actionzu1051;
							       PrelBase.ZdwFalse ->
								 ParCore.happyFail
								 @ (ParCore.HappyAbsSyn
								    (PrelBase.ZMZN PrelBase.Char)
								    t35
								    t36
								    t37
								    t38)
								 @ LexCore.Token
								 @ (PrelBase.ZMZN PrelBase.Char)
								 @ t35 @ t36 @ t37 @ t38}}}}};
  actionzu2111 :: PrelBase.Int ->
		  PrelBase.Int ->
		  LexCore.Token ->
		  ParCore.HappyState
		  LexCore.Token
		  (ParCore.HappyStk
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T)
		   ->
		   PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T))
		  ->
		  PrelBase.ZMZN
		  (ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)
		    ->
		    PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)))
		  ->
		  ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T)
		  ->
		  PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T) =
    ParCore.actionzu2 @ PrelBase.Int @ PrelBase.Z0T @ PrelBase.Z0T
    @ PrelBase.Z0T @ PrelBase.Z0T PrelNum.zdfNumInt;
  ParCore.actionzu103 :: %forall t b t34 t35 t36 t37 t38 . PrelNum.ZCTNum
							   t
							   ->
							   t ->
							   PrelBase.Int ->
							   b ->
							   ParCore.HappyState
							   b
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38))
							   ->
							   PrelBase.ZMZN
							   (ParCore.HappyState
							    b
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)))
							   ->
							   ParCore.HappyStk
							   (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err
							   (ParCore.HappyAbsSyn
							    t34
							    t35
							    t36
							    t37
							    t38) =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (103::PrelGHC.Intzh))}
	%in \ (ds::t) ->
		%case zddNum %of (tpl::PrelNum.ZCTNum t)
		  {PrelNum.ZdwZCDNum
		   (tpl1::PrelBase.ZCTEq t)
		   (tpl2::PrelShow.ZCTShow t)
		   (tpl3::t -> t -> t)
		   (tpl4::t -> t -> t)
		   (tpl5::t -> t -> t)
		   (tpl6::t -> t)
		   (tpl7::t -> t)
		   (tpl8::t -> t)
		   (tpl9::PrelNum.Integer -> t) ->
		     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
		       {PrelBase.ZdwZCDEq
			(tpl11::t -> t -> PrelBase.Bool)
			(tpl12::t -> t -> PrelBase.Bool) ->
			  %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
			    {PrelBase.ZdwTrue ->
			       ParCore.happyAccept @ PrelBase.Int @ b
			       @ (ParCore.HappyState
				  b
				  (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				   PrelBase.ZMZN LexCore.Token ->
				   ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)))
			       @ (PrelBase.ZMZN
				  (ParCore.HappyState
				   b
				   (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				    PrelBase.ZMZN LexCore.Token ->
				    ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))))
			       @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
			       @ (PrelBase.ZMZN LexCore.Token);
			     PrelBase.ZdwFalse ->
			       ParCore.happyFail @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) @ b
			       @ t34 @ t35 @ t36 @ t37 @ t38}}};
  ParCore.actionzu3 :: %forall t t35 t36 t37 t38 . PrelNum.ZCTNum t
						   ->
						   t ->
						   PrelBase.Int ->
						   LexCore.Token ->
						   ParCore.HappyState
						   LexCore.Token
						   (ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38)
						    ->
						    PrelBase.ZMZN LexCore.Token ->
						    ErrM.Err
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38))
						   ->
						   PrelBase.ZMZN
						   (ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     ->
						     PrelBase.ZMZN LexCore.Token ->
						     ErrM.Err
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)))
						   ->
						   ParCore.HappyStk
						   (ParCore.HappyAbsSyn
						    (PrelBase.ZMZN PrelBase.Char)
						    t35
						    t36
						    t37
						    t38)
						   ->
						   PrelBase.ZMZN LexCore.Token ->
						   ErrM.Err
						   (ParCore.HappyAbsSyn
						    (PrelBase.ZMZN PrelBase.Char)
						    t35
						    t36
						    t37
						    t38) =
    \ @ t @ t35 @ t36 @ t37 @ t38 (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (73::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (42::PrelGHC.Intzh))}
	    %in %let actionzu1031 :: PrelBase.Int ->
				     PrelBase.Int ->
				     LexCore.Token ->
				     ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       t35
				       t36
				       t37
				       t38)
				      ->
				      PrelBase.ZMZN LexCore.Token ->
				      ErrM.Err
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       t35
				       t36
				       t37
				       t38))
				     ->
				     PrelBase.ZMZN
				     (ParCore.HappyState
				      LexCore.Token
				      (ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					t35
					t36
					t37
					t38)
				       ->
				       PrelBase.ZMZN LexCore.Token ->
				       ErrM.Err
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					t35
					t36
					t37
					t38)))
				     ->
				     ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      t35
				      t36
				      t37
				      t38)
				     ->
				     PrelBase.ZMZN LexCore.Token ->
				     ErrM.Err
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      t35
				      t36
				      t37
				      t38) =
		       ParCore.actionzu103 @ PrelBase.Int @ LexCore.Token
		       @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38
		       PrelNum.zdfNumInt
		%in %let actionzu1041 :: PrelBase.Int ->
					 PrelBase.Int ->
					 LexCore.Token ->
					 ParCore.HappyState
					 LexCore.Token
					 (ParCore.HappyStk
					  (ParCore.HappyAbsSyn
					   (PrelBase.ZMZN PrelBase.Char)
					   t35
					   t36
					   t37
					   t38)
					  ->
					  PrelBase.ZMZN LexCore.Token ->
					  ErrM.Err
					  (ParCore.HappyAbsSyn
					   (PrelBase.ZMZN PrelBase.Char)
					   t35
					   t36
					   t37
					   t38))
					 ->
					 PrelBase.ZMZN
					 (ParCore.HappyState
					  LexCore.Token
					  (ParCore.HappyStk
					   (ParCore.HappyAbsSyn
					    (PrelBase.ZMZN PrelBase.Char)
					    t35
					    t36
					    t37
					    t38)
					   ->
					   PrelBase.ZMZN LexCore.Token ->
					   ErrM.Err
					   (ParCore.HappyAbsSyn
					    (PrelBase.ZMZN PrelBase.Char)
					    t35
					    t36
					    t37
					    t38)))
					 ->
					 ParCore.HappyStk
					 (ParCore.HappyAbsSyn
					  (PrelBase.ZMZN PrelBase.Char)
					  t35
					  t36
					  t37
					  t38)
					 ->
					 PrelBase.ZMZN LexCore.Token ->
					 ErrM.Err
					 (ParCore.HappyAbsSyn
					  (PrelBase.ZMZN PrelBase.Char)
					  t35
					  t36
					  t37
					  t38) =
			   ParCore.actionzu104 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38
			   @ (ParCore.HappyAbsSyn
			      (PrelBase.ZMZN PrelBase.Char)
			      t35
			      t36
			      t37
			      t38)
			   PrelNum.zdfNumInt
		    %in %let happyShift7 :: (PrelBase.Int ->
					     PrelBase.Int ->
					     LexCore.Token ->
					     ParCore.HappyState
					     LexCore.Token
					     (ParCore.HappyStk
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38)
					      ->
					      PrelBase.ZMZN LexCore.Token ->
					      ErrM.Err
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38))
					     ->
					     PrelBase.ZMZN
					     (ParCore.HappyState
					      LexCore.Token
					      (ParCore.HappyStk
					       (ParCore.HappyAbsSyn
						(PrelBase.ZMZN PrelBase.Char)
						t35
						t36
						t37
						t38)
					       ->
					       PrelBase.ZMZN LexCore.Token ->
					       ErrM.Err
					       (ParCore.HappyAbsSyn
						(PrelBase.ZMZN PrelBase.Char)
						t35
						t36
						t37
						t38)))
					     ->
					     ParCore.HappyStk
					     (ParCore.HappyAbsSyn
					      (PrelBase.ZMZN PrelBase.Char)
					      t35
					      t36
					      t37
					      t38)
					     ->
					     PrelBase.ZMZN LexCore.Token ->
					     ErrM.Err
					     (ParCore.HappyAbsSyn
					      (PrelBase.ZMZN PrelBase.Char)
					      t35
					      t36
					      t37
					      t38))
					    ->
					    PrelBase.Int ->
					    LexCore.Token ->
					    ParCore.HappyState
					    LexCore.Token
					    (ParCore.HappyStk
					     (ParCore.HappyAbsSyn
					      (PrelBase.ZMZN PrelBase.Char)
					      t35
					      t36
					      t37
					      t38)
					     ->
					     PrelBase.ZMZN LexCore.Token ->
					     ErrM.Err
					     (ParCore.HappyAbsSyn
					      (PrelBase.ZMZN PrelBase.Char)
					      t35
					      t36
					      t37
					      t38))
					    ->
					    PrelBase.ZMZN
					    (ParCore.HappyState
					     LexCore.Token
					     (ParCore.HappyStk
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38)
					      ->
					      PrelBase.ZMZN LexCore.Token ->
					      ErrM.Err
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38)))
					    ->
					    ParCore.HappyStk
					    (ParCore.HappyAbsSyn
					     (PrelBase.ZMZN PrelBase.Char)
					     t35
					     t36
					     t37
					     t38)
					    ->
					    PrelBase.ZMZN LexCore.Token ->
					    ErrM.Err
					    (ParCore.HappyAbsSyn
					     (PrelBase.ZMZN PrelBase.Char)
					     t35
					     t36
					     t37
					     t38) =
			       ParCore.happyShift @ PrelBase.Int
			       @ (ErrM.Err
				  (ParCore.HappyAbsSyn
				   (PrelBase.ZMZN PrelBase.Char)
				   t35
				   t36
				   t37
				   t38))
			       @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38
			       PrelNum.zdfNumInt
			%in \ (ds::t) ->
				%case zddNum %of (tpl::PrelNum.ZCTNum t)
				  {PrelNum.ZdwZCDNum
				   (tpl1::PrelBase.ZCTEq t)
				   (tpl2::PrelShow.ZCTShow t)
				   (tpl3::t -> t -> t)
				   (tpl4::t -> t -> t)
				   (tpl5::t -> t -> t)
				   (tpl6::t -> t)
				   (tpl7::t -> t)
				   (tpl8::t -> t)
				   (tpl9::PrelNum.Integer -> t) ->
				     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
				       {PrelBase.ZdwZCDEq
					(tpl11::t -> t -> PrelBase.Bool)
					(tpl12::t -> t -> PrelBase.Bool) ->
					  %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
					    {PrelBase.ZdwTrue ->
					       happyShift7 actionzu1041;
					     PrelBase.ZdwFalse ->
					       %case (tpl12 lit2 ds) %of (wild1::PrelBase.Bool)
						 {PrelBase.ZdwTrue ->
						    ParCore.happyGoto
						    @ (ParCore.HappyState
						       LexCore.Token
						       (ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38)
							->
							PrelBase.ZMZN LexCore.Token ->
							ErrM.Err
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38)))
						    @ LexCore.Token
						    @ (ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)
						       ->
						       PrelBase.ZMZN LexCore.Token ->
						       ErrM.Err
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38))
						    actionzu1031;
						  PrelBase.ZdwFalse ->
						    ParCore.happyReducezu42 @ LexCore.Token
						    @ (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						    @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36
						    @ t37 @ t38}}}};
  actionzu311 :: PrelBase.Int ->
		 PrelBase.Int ->
		 LexCore.Token ->
		 ParCore.HappyState
		 LexCore.Token
		 (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T)
		  ->
		  PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T))
		 ->
		 PrelBase.ZMZN
		 (ParCore.HappyState
		  LexCore.Token
		  (ParCore.HappyStk
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T)
		   ->
		   PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T)))
		 ->
		 ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T)
		 ->
		 PrelBase.ZMZN LexCore.Token ->
		 ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T) =
    ParCore.actionzu3 @ PrelBase.Int @ PrelBase.Z0T @ PrelBase.Z0T
    @ PrelBase.Z0T @ PrelBase.Z0T PrelNum.zdfNumInt;
  ParCore.actionzu102 :: %forall t b t34 t35 t36 t37 t38 . PrelNum.ZCTNum
							   t
							   ->
							   t ->
							   PrelBase.Int ->
							   b ->
							   ParCore.HappyState
							   b
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38))
							   ->
							   PrelBase.ZMZN
							   (ParCore.HappyState
							    b
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)))
							   ->
							   ParCore.HappyStk
							   (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err
							   (ParCore.HappyAbsSyn
							    t34
							    t35
							    t36
							    t37
							    t38) =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (103::PrelGHC.Intzh))}
	%in \ (ds::t) ->
		%case zddNum %of (tpl::PrelNum.ZCTNum t)
		  {PrelNum.ZdwZCDNum
		   (tpl1::PrelBase.ZCTEq t)
		   (tpl2::PrelShow.ZCTShow t)
		   (tpl3::t -> t -> t)
		   (tpl4::t -> t -> t)
		   (tpl5::t -> t -> t)
		   (tpl6::t -> t)
		   (tpl7::t -> t)
		   (tpl8::t -> t)
		   (tpl9::PrelNum.Integer -> t) ->
		     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
		       {PrelBase.ZdwZCDEq
			(tpl11::t -> t -> PrelBase.Bool)
			(tpl12::t -> t -> PrelBase.Bool) ->
			  %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
			    {PrelBase.ZdwTrue ->
			       ParCore.happyAccept @ PrelBase.Int @ b
			       @ (ParCore.HappyState
				  b
				  (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				   PrelBase.ZMZN LexCore.Token ->
				   ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)))
			       @ (PrelBase.ZMZN
				  (ParCore.HappyState
				   b
				   (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				    PrelBase.ZMZN LexCore.Token ->
				    ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))))
			       @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
			       @ (PrelBase.ZMZN LexCore.Token);
			     PrelBase.ZdwFalse ->
			       ParCore.happyFail @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) @ b
			       @ t34 @ t35 @ t36 @ t37 @ t38}}};
  ParCore.actionzu4 :: %forall t t35 t36 t37 t38 . PrelNum.ZCTNum t
						   ->
						   t ->
						   PrelBase.Int ->
						   LexCore.Token ->
						   ParCore.HappyState
						   LexCore.Token
						   (ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38)
						    ->
						    PrelBase.ZMZN LexCore.Token ->
						    ErrM.Err
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38))
						   ->
						   PrelBase.ZMZN
						   (ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     ->
						     PrelBase.ZMZN LexCore.Token ->
						     ErrM.Err
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)))
						   ->
						   ParCore.HappyStk
						   (ParCore.HappyAbsSyn
						    (PrelBase.ZMZN PrelBase.Char)
						    t35
						    t36
						    t37
						    t38)
						   ->
						   PrelBase.ZMZN LexCore.Token ->
						   ErrM.Err
						   (ParCore.HappyAbsSyn
						    (PrelBase.ZMZN PrelBase.Char)
						    t35
						    t36
						    t37
						    t38) =
    \ @ t @ t35 @ t36 @ t37 @ t38 (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (43::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (34::PrelGHC.Intzh))}
	    %in %let lit3 :: t =
		       %case zddNum %of (tpl::PrelNum.ZCTNum t)
			 {PrelNum.ZdwZCDNum
			  (tpl1::PrelBase.ZCTEq t)
			  (tpl2::PrelShow.ZCTShow t)
			  (tpl3::t -> t -> t)
			  (tpl4::t -> t -> t)
			  (tpl5::t -> t -> t)
			  (tpl6::t -> t)
			  (tpl7::t -> t)
			  (tpl8::t -> t)
			  (tpl9::PrelNum.Integer -> t) ->
			    tpl9 (PrelNum.ZdwSzh (97::PrelGHC.Intzh))}
		%in %let lit4 :: t =
			   %case zddNum %of (tpl::PrelNum.ZCTNum t)
			     {PrelNum.ZdwZCDNum
			      (tpl1::PrelBase.ZCTEq t)
			      (tpl2::PrelShow.ZCTShow t)
			      (tpl3::t -> t -> t)
			      (tpl4::t -> t -> t)
			      (tpl5::t -> t -> t)
			      (tpl6::t -> t)
			      (tpl7::t -> t)
			      (tpl8::t -> t)
			      (tpl9::PrelNum.Integer -> t) ->
				tpl9 (PrelNum.ZdwSzh (69::PrelGHC.Intzh))}
		    %in %let actionzu1012 :: PrelBase.Int ->
					     PrelBase.Int ->
					     LexCore.Token ->
					     ParCore.HappyState
					     LexCore.Token
					     (ParCore.HappyStk
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38)
					      ->
					      PrelBase.ZMZN LexCore.Token ->
					      ErrM.Err
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38))
					     ->
					     PrelBase.ZMZN
					     (ParCore.HappyState
					      LexCore.Token
					      (ParCore.HappyStk
					       (ParCore.HappyAbsSyn
						(PrelBase.ZMZN PrelBase.Char)
						t35
						t36
						t37
						t38)
					       ->
					       PrelBase.ZMZN LexCore.Token ->
					       ErrM.Err
					       (ParCore.HappyAbsSyn
						(PrelBase.ZMZN PrelBase.Char)
						t35
						t36
						t37
						t38)))
					     ->
					     ParCore.HappyStk
					     (ParCore.HappyAbsSyn
					      (PrelBase.ZMZN PrelBase.Char)
					      t35
					      t36
					      t37
					      t38)
					     ->
					     PrelBase.ZMZN LexCore.Token ->
					     ErrM.Err
					     (ParCore.HappyAbsSyn
					      (PrelBase.ZMZN PrelBase.Char)
					      t35
					      t36
					      t37
					      t38) =
			       ParCore.actionzu101 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38
			       @ (ParCore.HappyAbsSyn
				  (PrelBase.ZMZN PrelBase.Char)
				  t35
				  t36
				  t37
				  t38)
			       PrelNum.zdfNumInt
			%in %let actionzu1021 :: PrelBase.Int ->
						 PrelBase.Int ->
						 LexCore.Token ->
						 ParCore.HappyState
						 LexCore.Token
						 (ParCore.HappyStk
						  (ParCore.HappyAbsSyn
						   (PrelBase.ZMZN PrelBase.Char)
						   t35
						   t36
						   t37
						   t38)
						  ->
						  PrelBase.ZMZN LexCore.Token ->
						  ErrM.Err
						  (ParCore.HappyAbsSyn
						   (PrelBase.ZMZN PrelBase.Char)
						   t35
						   t36
						   t37
						   t38))
						 ->
						 PrelBase.ZMZN
						 (ParCore.HappyState
						  LexCore.Token
						  (ParCore.HappyStk
						   (ParCore.HappyAbsSyn
						    (PrelBase.ZMZN PrelBase.Char)
						    t35
						    t36
						    t37
						    t38)
						   ->
						   PrelBase.ZMZN LexCore.Token ->
						   ErrM.Err
						   (ParCore.HappyAbsSyn
						    (PrelBase.ZMZN PrelBase.Char)
						    t35
						    t36
						    t37
						    t38)))
						 ->
						 ParCore.HappyStk
						 (ParCore.HappyAbsSyn
						  (PrelBase.ZMZN PrelBase.Char)
						  t35
						  t36
						  t37
						  t38)
						 ->
						 PrelBase.ZMZN LexCore.Token ->
						 ErrM.Err
						 (ParCore.HappyAbsSyn
						  (PrelBase.ZMZN PrelBase.Char)
						  t35
						  t36
						  t37
						  t38) =
				   ParCore.actionzu102 @ PrelBase.Int @ LexCore.Token
				   @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38
				   PrelNum.zdfNumInt
			    %in %let actionzu334 :: PrelBase.Int ->
						    PrelBase.Int ->
						    LexCore.Token ->
						    ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     ->
						     PrelBase.ZMZN LexCore.Token ->
						     ErrM.Err
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38))
						    ->
						    PrelBase.ZMZN
						    (ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      ->
						      PrelBase.ZMZN LexCore.Token ->
						      ErrM.Err
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)))
						    ->
						    ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38)
						    ->
						    PrelBase.ZMZN LexCore.Token ->
						    ErrM.Err
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38) =
				       ParCore.actionzu33 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38
				       @ (ParCore.HappyAbsSyn
					  (PrelBase.ZMZN PrelBase.Char)
					  t35
					  t36
					  t37
					  t38)
				       PrelNum.zdfNumInt
				%in %let happyShift7 :: (PrelBase.Int ->
							 PrelBase.Int ->
							 LexCore.Token ->
							 ParCore.HappyState
							 LexCore.Token
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   t38)
							  ->
							  PrelBase.ZMZN LexCore.Token ->
							  ErrM.Err
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   t38))
							 ->
							 PrelBase.ZMZN
							 (ParCore.HappyState
							  LexCore.Token
							  (ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    (PrelBase.ZMZN PrelBase.Char)
							    t35
							    t36
							    t37
							    t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err
							   (ParCore.HappyAbsSyn
							    (PrelBase.ZMZN PrelBase.Char)
							    t35
							    t36
							    t37
							    t38)))
							 ->
							 ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token ->
							 ErrM.Err
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38))
							->
							PrelBase.Int ->
							LexCore.Token ->
							ParCore.HappyState
							LexCore.Token
							(ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token ->
							 ErrM.Err
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38))
							->
							PrelBase.ZMZN
							(ParCore.HappyState
							 LexCore.Token
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   t38)
							  ->
							  PrelBase.ZMZN LexCore.Token ->
							  ErrM.Err
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   t38)))
							->
							ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38)
							->
							PrelBase.ZMZN LexCore.Token ->
							ErrM.Err
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38) =
					   ParCore.happyShift @ PrelBase.Int
					   @ (ErrM.Err
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38))
					   @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38
					   PrelNum.zdfNumInt
				    %in \ (ds::t) ->
					    %case zddNum %of (tpl::PrelNum.ZCTNum t)
					      {PrelNum.ZdwZCDNum
					       (tpl1::PrelBase.ZCTEq t)
					       (tpl2::PrelShow.ZCTShow t)
					       (tpl3::t -> t -> t)
					       (tpl4::t -> t -> t)
					       (tpl5::t -> t -> t)
					       (tpl6::t -> t)
					       (tpl7::t -> t)
					       (tpl8::t -> t)
					       (tpl9::PrelNum.Integer -> t) ->
						 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
						   {PrelBase.ZdwZCDEq
						    (tpl11::t -> t -> PrelBase.Bool)
						    (tpl12::t -> t -> PrelBase.Bool) ->
						      %case (tpl12 lit3 ds)
						      %of (wild::PrelBase.Bool)
							{PrelBase.ZdwTrue ->
							   happyShift7
							   (ParCore.actionzu32 @ PrelBase.Int
							    @ LexCore.Token @ t35 @ t36 @ t37 @ t38
							    @ (ParCore.HappyAbsSyn
							       (PrelBase.ZMZN PrelBase.Char)
							       t35
							       t36
							       t37
							       t38));
							 PrelBase.ZdwFalse ->
							   %case (tpl12 lit2 ds)
							   %of (wild1::PrelBase.Bool)
							     {PrelBase.ZdwTrue ->
								ParCore.happyGoto
								@ (ParCore.HappyState
								   LexCore.Token
								   (ParCore.HappyStk
								    (ParCore.HappyAbsSyn
								     (PrelBase.ZMZN PrelBase.Char)
								     t35
								     t36
								     t37
								     t38)
								    ->
								    PrelBase.ZMZN LexCore.Token ->
								    ErrM.Err
								    (ParCore.HappyAbsSyn
								     (PrelBase.ZMZN PrelBase.Char)
								     t35
								     t36
								     t37
								     t38)))
								@ LexCore.Token
								@ (ParCore.HappyStk
								   (ParCore.HappyAbsSyn
								    (PrelBase.ZMZN PrelBase.Char)
								    t35
								    t36
								    t37
								    t38)
								   ->
								   PrelBase.ZMZN LexCore.Token ->
								   ErrM.Err
								   (ParCore.HappyAbsSyn
								    (PrelBase.ZMZN PrelBase.Char)
								    t35
								    t36
								    t37
								    t38))
								actionzu334;
							      PrelBase.ZdwFalse ->
								%case (tpl12 lit1 ds)
								%of (wild2::PrelBase.Bool)
								  {PrelBase.ZdwTrue ->
								     ParCore.happyGoto
								     @ (ParCore.HappyState
									LexCore.Token
									(ParCore.HappyStk
									 (ParCore.HappyAbsSyn
									  (PrelBase.ZMZN
									   PrelBase.Char)
									  t35
									  t36
									  t37
									  t38)
									 ->
									 PrelBase.ZMZN LexCore.Token
									 ->
									 ErrM.Err
									 (ParCore.HappyAbsSyn
									  (PrelBase.ZMZN
									   PrelBase.Char)
									  t35
									  t36
									  t37
									  t38)))
								     @ LexCore.Token
								     @ (ParCore.HappyStk
									(ParCore.HappyAbsSyn
									 (PrelBase.ZMZN
									  PrelBase.Char)
									 t35
									 t36
									 t37
									 t38)
									->
									PrelBase.ZMZN LexCore.Token
									->
									ErrM.Err
									(ParCore.HappyAbsSyn
									 (PrelBase.ZMZN
									  PrelBase.Char)
									 t35
									 t36
									 t37
									 t38))
								     actionzu1021;
								   PrelBase.ZdwFalse ->
								     %case (tpl12 lit4 ds)
								     %of (wild3::PrelBase.Bool)
								       {PrelBase.ZdwTrue ->
									  ParCore.happyGoto
									  @ (ParCore.HappyState
									     LexCore.Token
									     (ParCore.HappyStk
									      (ParCore.HappyAbsSyn
									       (PrelBase.ZMZN
										PrelBase.Char)
									       t35
									       t36
									       t37
									       t38)
									      ->
									      PrelBase.ZMZN
									      LexCore.Token
									      ->
									      ErrM.Err
									      (ParCore.HappyAbsSyn
									       (PrelBase.ZMZN
										PrelBase.Char)
									       t35
									       t36
									       t37
									       t38)))
									  @ LexCore.Token
									  @ (ParCore.HappyStk
									     (ParCore.HappyAbsSyn
									      (PrelBase.ZMZN
									       PrelBase.Char)
									      t35
									      t36
									      t37
									      t38)
									     ->
									     PrelBase.ZMZN
									     LexCore.Token
									     ->
									     ErrM.Err
									     (ParCore.HappyAbsSyn
									      (PrelBase.ZMZN
									       PrelBase.Char)
									      t35
									      t36
									      t37
									      t38))
									  actionzu1012;
									PrelBase.ZdwFalse ->
									  ParCore.happyFail
									  @ (ParCore.HappyAbsSyn
									     (PrelBase.ZMZN
									      PrelBase.Char)
									     t35
									     t36
									     t37
									     t38)
									  @ LexCore.Token
									  @ (PrelBase.ZMZN
									     PrelBase.Char)
									  @ t35 @ t36 @ t37
									  @ t38}}}}}};
  actionzu411 :: PrelBase.Int ->
		 PrelBase.Int ->
		 LexCore.Token ->
		 ParCore.HappyState
		 LexCore.Token
		 (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T)
		  ->
		  PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T))
		 ->
		 PrelBase.ZMZN
		 (ParCore.HappyState
		  LexCore.Token
		  (ParCore.HappyStk
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T)
		   ->
		   PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T)))
		 ->
		 ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T)
		 ->
		 PrelBase.ZMZN LexCore.Token ->
		 ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T) =
    ParCore.actionzu4 @ PrelBase.Int @ PrelBase.Z0T @ PrelBase.Z0T
    @ PrelBase.Z0T @ PrelBase.Z0T PrelNum.zdfNumInt;
  ParCore.actionzu100 :: %forall t b t34 t35 t36 t37 t38 . PrelNum.ZCTNum
							   t
							   ->
							   t ->
							   PrelBase.Int ->
							   b ->
							   ParCore.HappyState
							   b
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38))
							   ->
							   PrelBase.ZMZN
							   (ParCore.HappyState
							    b
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err
							     (ParCore.HappyAbsSyn
							      t34
							      t35
							      t36
							      t37
							      t38)))
							   ->
							   ParCore.HappyStk
							   (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err
							   (ParCore.HappyAbsSyn
							    t34
							    t35
							    t36
							    t37
							    t38) =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (103::PrelGHC.Intzh))}
	%in \ (ds::t) ->
		%case zddNum %of (tpl::PrelNum.ZCTNum t)
		  {PrelNum.ZdwZCDNum
		   (tpl1::PrelBase.ZCTEq t)
		   (tpl2::PrelShow.ZCTShow t)
		   (tpl3::t -> t -> t)
		   (tpl4::t -> t -> t)
		   (tpl5::t -> t -> t)
		   (tpl6::t -> t)
		   (tpl7::t -> t)
		   (tpl8::t -> t)
		   (tpl9::PrelNum.Integer -> t) ->
		     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
		       {PrelBase.ZdwZCDEq
			(tpl11::t -> t -> PrelBase.Bool)
			(tpl12::t -> t -> PrelBase.Bool) ->
			  %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
			    {PrelBase.ZdwTrue ->
			       ParCore.happyAccept @ PrelBase.Int @ b
			       @ (ParCore.HappyState
				  b
				  (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				   PrelBase.ZMZN LexCore.Token ->
				   ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)))
			       @ (PrelBase.ZMZN
				  (ParCore.HappyState
				   b
				   (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				    PrelBase.ZMZN LexCore.Token ->
				    ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))))
			       @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
			       @ (PrelBase.ZMZN LexCore.Token);
			     PrelBase.ZdwFalse ->
			       ParCore.happyFail @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) @ b
			       @ t34 @ t35 @ t36 @ t37 @ t38}}};
  ParCore.actionzu5 :: %forall t t35 t36 t37 t38 . PrelNum.ZCTNum t
						   ->
						   t ->
						   PrelBase.Int ->
						   LexCore.Token ->
						   ParCore.HappyState
						   LexCore.Token
						   (ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38)
						    ->
						    PrelBase.ZMZN LexCore.Token ->
						    ErrM.Err
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38))
						   ->
						   PrelBase.ZMZN
						   (ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     ->
						     PrelBase.ZMZN LexCore.Token ->
						     ErrM.Err
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)))
						   ->
						   ParCore.HappyStk
						   (ParCore.HappyAbsSyn
						    (PrelBase.ZMZN PrelBase.Char)
						    t35
						    t36
						    t37
						    t38)
						   ->
						   PrelBase.ZMZN LexCore.Token ->
						   ErrM.Err
						   (ParCore.HappyAbsSyn
						    (PrelBase.ZMZN PrelBase.Char)
						    t35
						    t36
						    t37
						    t38) =
    \ @ t @ t35 @ t36 @ t37 @ t38 (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (44::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (43::PrelGHC.Intzh))}
	    %in %let lit3 :: t =
		       %case zddNum %of (tpl::PrelNum.ZCTNum t)
			 {PrelNum.ZdwZCDNum
			  (tpl1::PrelBase.ZCTEq t)
			  (tpl2::PrelShow.ZCTShow t)
			  (tpl3::t -> t -> t)
			  (tpl4::t -> t -> t)
			  (tpl5::t -> t -> t)
			  (tpl6::t -> t)
			  (tpl7::t -> t)
			  (tpl8::t -> t)
			  (tpl9::PrelNum.Integer -> t) ->
			    tpl9 (PrelNum.ZdwSzh (34::PrelGHC.Intzh))}
		%in %let lit4 :: t =
			   %case zddNum %of (tpl::PrelNum.ZCTNum t)
			     {PrelNum.ZdwZCDNum
			      (tpl1::PrelBase.ZCTEq t)
			      (tpl2::PrelShow.ZCTShow t)
			      (tpl3::t -> t -> t)
			      (tpl4::t -> t -> t)
			      (tpl5::t -> t -> t)
			      (tpl6::t -> t)
			      (tpl7::t -> t)
			      (tpl8::t -> t)
			      (tpl9::PrelNum.Integer -> t) ->
				tpl9 (PrelNum.ZdwSzh (97::PrelGHC.Intzh))}
		    %in %let lit5 :: t =
			       %case zddNum %of (tpl::PrelNum.ZCTNum t)
				 {PrelNum.ZdwZCDNum
				  (tpl1::PrelBase.ZCTEq t)
				  (tpl2::PrelShow.ZCTShow t)
				  (tpl3::t -> t -> t)
				  (tpl4::t -> t -> t)
				  (tpl5::t -> t -> t)
				  (tpl6::t -> t)
				  (tpl7::t -> t)
				  (tpl8::t -> t)
				  (tpl9::PrelNum.Integer -> t) ->
				    tpl9 (PrelNum.ZdwSzh (69::PrelGHC.Intzh))}
			%in %let actionzu1012 :: PrelBase.Int ->
						 PrelBase.Int ->
						 LexCore.Token ->
						 ParCore.HappyState
						 LexCore.Token
						 (ParCore.HappyStk
						  (ParCore.HappyAbsSyn
						   (PrelBase.ZMZN PrelBase.Char)
						   t35
						   t36
						   t37
						   t38)
						  ->
						  PrelBase.ZMZN LexCore.Token ->
						  ErrM.Err
						  (ParCore.HappyAbsSyn
						   (PrelBase.ZMZN PrelBase.Char)
						   t35
						   t36
						   t37
						   t38))
						 ->
						 PrelBase.ZMZN
						 (ParCore.HappyState
						  LexCore.Token
						  (ParCore.HappyStk
						   (ParCore.HappyAbsSyn
						    (PrelBase.ZMZN PrelBase.Char)
						    t35
						    t36
						    t37
						    t38)
						   ->
						   PrelBase.ZMZN LexCore.Token ->
						   ErrM.Err
						   (ParCore.HappyAbsSyn
						    (PrelBase.ZMZN PrelBase.Char)
						    t35
						    t36
						    t37
						    t38)))
						 ->
						 ParCore.HappyStk
						 (ParCore.HappyAbsSyn
						  (PrelBase.ZMZN PrelBase.Char)
						  t35
						  t36
						  t37
						  t38)
						 ->
						 PrelBase.ZMZN LexCore.Token ->
						 ErrM.Err
						 (ParCore.HappyAbsSyn
						  (PrelBase.ZMZN PrelBase.Char)
						  t35
						  t36
						  t37
						  t38) =
				   ParCore.actionzu101 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38
				   @ (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      t35
				      t36
				      t37
				      t38)
				   PrelNum.zdfNumInt
			    %in %let actionzu1001 :: PrelBase.Int ->
						     PrelBase.Int ->
						     LexCore.Token ->
						     ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      ->
						      PrelBase.ZMZN LexCore.Token ->
						      ErrM.Err
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38))
						     ->
						     PrelBase.ZMZN
						     (ParCore.HappyState
						      LexCore.Token
						      (ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)
						       ->
						       PrelBase.ZMZN LexCore.Token ->
						       ErrM.Err
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)))
						     ->
						     ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     ->
						     PrelBase.ZMZN LexCore.Token ->
						     ErrM.Err
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38) =
				       ParCore.actionzu100 @ PrelBase.Int @ LexCore.Token
				       @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38
				       PrelNum.zdfNumInt
				%in %let actionzu334 :: PrelBase.Int ->
							PrelBase.Int ->
							LexCore.Token ->
							ParCore.HappyState
							LexCore.Token
							(ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token ->
							 ErrM.Err
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38))
							->
							PrelBase.ZMZN
							(ParCore.HappyState
							 LexCore.Token
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   t38)
							  ->
							  PrelBase.ZMZN LexCore.Token ->
							  ErrM.Err
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   t38)))
							->
							ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38)
							->
							PrelBase.ZMZN LexCore.Token ->
							ErrM.Err
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38) =
					   ParCore.actionzu33 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38
					   @ (ParCore.HappyAbsSyn
					      (PrelBase.ZMZN PrelBase.Char)
					      t35
					      t36
					      t37
					      t38)
					   PrelNum.zdfNumInt
				    %in %let happyShift7 :: (PrelBase.Int ->
							     PrelBase.Int ->
							     LexCore.Token ->
							     ParCore.HappyState
							     LexCore.Token
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       (PrelBase.ZMZN PrelBase.Char)
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err
							      (ParCore.HappyAbsSyn
							       (PrelBase.ZMZN PrelBase.Char)
							       t35
							       t36
							       t37
							       t38))
							     ->
							     PrelBase.ZMZN
							     (ParCore.HappyState
							      LexCore.Token
							      (ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								(PrelBase.ZMZN PrelBase.Char)
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err
							       (ParCore.HappyAbsSyn
								(PrelBase.ZMZN PrelBase.Char)
								t35
								t36
								t37
								t38)))
							     ->
							     ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      (PrelBase.ZMZN PrelBase.Char)
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err
							     (ParCore.HappyAbsSyn
							      (PrelBase.ZMZN PrelBase.Char)
							      t35
							      t36
							      t37
							      t38))
							    ->
							    PrelBase.Int ->
							    LexCore.Token ->
							    ParCore.HappyState
							    LexCore.Token
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      (PrelBase.ZMZN PrelBase.Char)
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err
							     (ParCore.HappyAbsSyn
							      (PrelBase.ZMZN PrelBase.Char)
							      t35
							      t36
							      t37
							      t38))
							    ->
							    PrelBase.ZMZN
							    (ParCore.HappyState
							     LexCore.Token
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       (PrelBase.ZMZN PrelBase.Char)
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err
							      (ParCore.HappyAbsSyn
							       (PrelBase.ZMZN PrelBase.Char)
							       t35
							       t36
							       t37
							       t38)))
							    ->
							    ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     (PrelBase.ZMZN PrelBase.Char)
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err
							    (ParCore.HappyAbsSyn
							     (PrelBase.ZMZN PrelBase.Char)
							     t35
							     t36
							     t37
							     t38) =
					       ParCore.happyShift @ PrelBase.Int
					       @ (ErrM.Err
						  (ParCore.HappyAbsSyn
						   (PrelBase.ZMZN PrelBase.Char)
						   t35
						   t36
						   t37
						   t38))
					       @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37
					       @ t38 PrelNum.zdfNumInt
					%in \ (ds::t) ->
						%case zddNum %of (tpl::PrelNum.ZCTNum t)
						  {PrelNum.ZdwZCDNum
						   (tpl1::PrelBase.ZCTEq t)
						   (tpl2::PrelShow.ZCTShow t)
						   (tpl3::t -> t -> t)
						   (tpl4::t -> t -> t)
						   (tpl5::t -> t -> t)
						   (tpl6::t -> t)
						   (tpl7::t -> t)
						   (tpl8::t -> t)
						   (tpl9::PrelNum.Integer -> t) ->
						     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
						       {PrelBase.ZdwZCDEq
							(tpl11::t -> t -> PrelBase.Bool)
							(tpl12::t -> t -> PrelBase.Bool) ->
							  %case (tpl12 lit4 ds)
							  %of (wild::PrelBase.Bool)
							    {PrelBase.ZdwTrue ->
							       happyShift7
							       (ParCore.actionzu32 @ PrelBase.Int
								@ LexCore.Token @ t35 @ t36 @ t37
								@ t38
								@ (ParCore.HappyAbsSyn
								   (PrelBase.ZMZN PrelBase.Char)
								   t35
								   t36
								   t37
								   t38));
							     PrelBase.ZdwFalse ->
							       %case (tpl12 lit3 ds)
							       %of (wild1::PrelBase.Bool)
								 {PrelBase.ZdwTrue ->
								    ParCore.happyGoto
								    @ (ParCore.HappyState
								       LexCore.Token
								       (ParCore.HappyStk
									(ParCore.HappyAbsSyn
									 (PrelBase.ZMZN
									  PrelBase.Char)
									 t35
									 t36
									 t37
									 t38)
									->
									PrelBase.ZMZN LexCore.Token
									->
									ErrM.Err
									(ParCore.HappyAbsSyn
									 (PrelBase.ZMZN
									  PrelBase.Char)
									 t35
									 t36
									 t37
									 t38)))
								    @ LexCore.Token
								    @ (ParCore.HappyStk
								       (ParCore.HappyAbsSyn
									(PrelBase.ZMZN
									 PrelBase.Char)
									t35
									t36
									t37
									t38)
								       ->
								       PrelBase.ZMZN LexCore.Token
								       ->
								       ErrM.Err
								       (ParCore.HappyAbsSyn
									(PrelBase.ZMZN
									 PrelBase.Char)
									t35
									t36
									t37
									t38))
								    actionzu334;
								  PrelBase.ZdwFalse ->
								    %case (tpl12 lit2 ds)
								    %of (wild2::PrelBase.Bool)
								      {PrelBase.ZdwTrue ->
									 ParCore.happyGoto
									 @ (ParCore.HappyState
									    LexCore.Token
									    (ParCore.HappyStk
									     (ParCore.HappyAbsSyn
									      (PrelBase.ZMZN
									       PrelBase.Char)
									      t35
									      t36
									      t37
									      t38)
									     ->
									     PrelBase.ZMZN
									     LexCore.Token
									     ->
									     ErrM.Err
									     (ParCore.HappyAbsSyn
									      (PrelBase.ZMZN
									       PrelBase.Char)
									      t35
									      t36
									      t37
									      t38)))
									 @ LexCore.Token
									 @ (ParCore.HappyStk
									    (ParCore.HappyAbsSyn
									     (PrelBase.ZMZN
									      PrelBase.Char)
									     t35
									     t36
									     t37
									     t38)
									    ->
									    PrelBase.ZMZN
									    LexCore.Token
									    ->
									    ErrM.Err
									    (ParCore.HappyAbsSyn
									     (PrelBase.ZMZN
									      PrelBase.Char)
									     t35
									     t36
									     t37
									     t38))
									 (%note "InlineMe"
									  actionzu991 @ t35 @ t36
									  @ t37 @ t38
									  @ (ParCore.HappyAbsSyn
									     (PrelBase.ZMZN
									      PrelBase.Char)
									     t35
									     t36
									     t37
									     t38));
								       PrelBase.ZdwFalse ->
									 %case (tpl12 lit1 ds)
									 %of (wild3::PrelBase.Bool)
									   {PrelBase.ZdwTrue ->
									      ParCore.happyGoto
									      @ (ParCore.HappyState
										 LexCore.Token
										 (ParCore.HappyStk
										  (ParCore.HappyAbsSyn
										   (PrelBase.ZMZN
										    PrelBase.Char)
										   t35
										   t36
										   t37
										   t38)
										  ->
										  PrelBase.ZMZN
										  LexCore.Token
										  ->
										  ErrM.Err
										  (ParCore.HappyAbsSyn
										   (PrelBase.ZMZN
										    PrelBase.Char)
										   t35
										   t36
										   t37
										   t38)))
									      @ LexCore.Token
									      @ (ParCore.HappyStk
										 (ParCore.HappyAbsSyn
										  (PrelBase.ZMZN
										   PrelBase.Char)
										  t35
										  t36
										  t37
										  t38)
										 ->
										 PrelBase.ZMZN
										 LexCore.Token
										 ->
										 ErrM.Err
										 (ParCore.HappyAbsSyn
										  (PrelBase.ZMZN
										   PrelBase.Char)
										  t35
										  t36
										  t37
										  t38))
									      actionzu1001;
									    PrelBase.ZdwFalse ->
									      %case (tpl12 lit5 ds)
									      %of (wild4::PrelBase.Bool)
										{PrelBase.ZdwTrue ->
										   ParCore.happyGoto
										   @ (ParCore.HappyState
										      LexCore.Token
										      (ParCore.HappyStk
										       (ParCore.HappyAbsSyn
											(PrelBase.ZMZN
											 PrelBase.Char)
											t35
											t36
											t37
											t38)
										       ->
										       PrelBase.ZMZN
										       LexCore.Token
										       ->
										       ErrM.Err
										       (ParCore.HappyAbsSyn
											(PrelBase.ZMZN
											 PrelBase.Char)
											t35
											t36
											t37
											t38)))
										   @ LexCore.Token
										   @ (ParCore.HappyStk
										      (ParCore.HappyAbsSyn
										       (PrelBase.ZMZN
											PrelBase.Char)
										       t35
										       t36
										       t37
										       t38)
										      ->
										      PrelBase.ZMZN
										      LexCore.Token
										      ->
										      ErrM.Err
										      (ParCore.HappyAbsSyn
										       (PrelBase.ZMZN
											PrelBase.Char)
										       t35
										       t36
										       t37
										       t38))
										   actionzu1012;
										 PrelBase.ZdwFalse
										 ->
										   ParCore.happyFail
										   @ (ParCore.HappyAbsSyn
										      (PrelBase.ZMZN
										       PrelBase.Char)
										      t35
										      t36
										      t37
										      t38)
										   @ LexCore.Token
										   @ (PrelBase.ZMZN
										      PrelBase.Char)
										   @ t35 @ t36 @ t37
										   @ t38}}}}}}};
  actionzu512 :: PrelBase.Int ->
		 PrelBase.Int ->
		 LexCore.Token ->
		 ParCore.HappyState
		 LexCore.Token
		 (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T)
		  ->
		  PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T))
		 ->
		 PrelBase.ZMZN
		 (ParCore.HappyState
		  LexCore.Token
		  (ParCore.HappyStk
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T)
		   ->
		   PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T)))
		 ->
		 ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T)
		 ->
		 PrelBase.ZMZN LexCore.Token ->
		 ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T) =
    ParCore.actionzu5 @ PrelBase.Int @ PrelBase.Z0T @ PrelBase.Z0T
    @ PrelBase.Z0T @ PrelBase.Z0T PrelNum.zdfNumInt;
  ParCore.actionzu96 :: %forall t b t34 t35 t36 t37 t38 . PrelNum.ZCTNum
							  t
							  ->
							  t ->
							  PrelBase.Int ->
							  b ->
							  ParCore.HappyState
							  b
							  (ParCore.HappyStk
							   (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err
							   (ParCore.HappyAbsSyn
							    t34
							    t35
							    t36
							    t37
							    t38))
							  ->
							  PrelBase.ZMZN
							  (ParCore.HappyState
							   b
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)))
							  ->
							  ParCore.HappyStk
							  (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							  ->
							  PrelBase.ZMZN LexCore.Token ->
							  ErrM.Err
							  (ParCore.HappyAbsSyn
							   t34
							   t35
							   t36
							   t37
							   t38) =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (103::PrelGHC.Intzh))}
	%in \ (ds::t) ->
		%case zddNum %of (tpl::PrelNum.ZCTNum t)
		  {PrelNum.ZdwZCDNum
		   (tpl1::PrelBase.ZCTEq t)
		   (tpl2::PrelShow.ZCTShow t)
		   (tpl3::t -> t -> t)
		   (tpl4::t -> t -> t)
		   (tpl5::t -> t -> t)
		   (tpl6::t -> t)
		   (tpl7::t -> t)
		   (tpl8::t -> t)
		   (tpl9::PrelNum.Integer -> t) ->
		     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
		       {PrelBase.ZdwZCDEq
			(tpl11::t -> t -> PrelBase.Bool)
			(tpl12::t -> t -> PrelBase.Bool) ->
			  %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
			    {PrelBase.ZdwTrue ->
			       ParCore.happyAccept @ PrelBase.Int @ b
			       @ (ParCore.HappyState
				  b
				  (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				   PrelBase.ZMZN LexCore.Token ->
				   ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)))
			       @ (PrelBase.ZMZN
				  (ParCore.HappyState
				   b
				   (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				    PrelBase.ZMZN LexCore.Token ->
				    ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))))
			       @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
			       @ (PrelBase.ZMZN LexCore.Token);
			     PrelBase.ZdwFalse ->
			       ParCore.happyFail @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) @ b
			       @ t34 @ t35 @ t36 @ t37 @ t38}}};
  actionzu961 :: PrelBase.Int ->
		 PrelBase.Int ->
		 LexCore.Token ->
		 ParCore.HappyState
		 LexCore.Token
		 (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char)
		  ->
		  PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char))
		 ->
		 PrelBase.ZMZN
		 (ParCore.HappyState
		  LexCore.Token
		  (ParCore.HappyStk
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char)
		   ->
		   PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char)))
		 ->
		 ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char)
		 ->
		 PrelBase.ZMZN LexCore.Token ->
		 ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char) =
    ParCore.actionzu96 @ PrelBase.Int @ LexCore.Token
    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char
    PrelNum.zdfNumInt;
  ParCore.actionzu6 :: %forall t . PrelNum.ZCTNum t ->
				   t ->
				   PrelBase.Int ->
				   LexCore.Token ->
				   ParCore.HappyState
				   LexCore.Token
				   (ParCore.HappyStk
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     (PrelBase.ZMZN PrelBase.Char)
				     PrelNum.Integer
				     PrelFloat.Double
				     PrelBase.Char)
				    ->
				    PrelBase.ZMZN LexCore.Token ->
				    ErrM.Err
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     (PrelBase.ZMZN PrelBase.Char)
				     PrelNum.Integer
				     PrelFloat.Double
				     PrelBase.Char))
				   ->
				   PrelBase.ZMZN
				   (ParCore.HappyState
				    LexCore.Token
				    (ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     ->
				     PrelBase.ZMZN LexCore.Token ->
				     ErrM.Err
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)))
				   ->
				   ParCore.HappyStk
				   (ParCore.HappyAbsSyn
				    (PrelBase.ZMZN PrelBase.Char)
				    (PrelBase.ZMZN PrelBase.Char)
				    PrelNum.Integer
				    PrelFloat.Double
				    PrelBase.Char)
				   ->
				   PrelBase.ZMZN LexCore.Token ->
				   ErrM.Err
				   (ParCore.HappyAbsSyn
				    (PrelBase.ZMZN PrelBase.Char)
				    (PrelBase.ZMZN PrelBase.Char)
				    PrelNum.Integer
				    PrelFloat.Double
				    PrelBase.Char) =
    \ @ t (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (47::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (45::PrelGHC.Intzh))}
	    %in %let lit3 :: t =
		       %case zddNum %of (tpl::PrelNum.ZCTNum t)
			 {PrelNum.ZdwZCDNum
			  (tpl1::PrelBase.ZCTEq t)
			  (tpl2::PrelShow.ZCTShow t)
			  (tpl3::t -> t -> t)
			  (tpl4::t -> t -> t)
			  (tpl5::t -> t -> t)
			  (tpl6::t -> t)
			  (tpl7::t -> t)
			  (tpl8::t -> t)
			  (tpl9::PrelNum.Integer -> t) ->
			    tpl9 (PrelNum.ZdwSzh (34::PrelGHC.Intzh))}
		%in %let lit4 :: t =
			   %case zddNum %of (tpl::PrelNum.ZCTNum t)
			     {PrelNum.ZdwZCDNum
			      (tpl1::PrelBase.ZCTEq t)
			      (tpl2::PrelShow.ZCTShow t)
			      (tpl3::t -> t -> t)
			      (tpl4::t -> t -> t)
			      (tpl5::t -> t -> t)
			      (tpl6::t -> t)
			      (tpl7::t -> t)
			      (tpl8::t -> t)
			      (tpl9::PrelNum.Integer -> t) ->
				tpl9 (PrelNum.ZdwSzh (97::PrelGHC.Intzh))}
		    %in %let lit5 :: t =
			       %case zddNum %of (tpl::PrelNum.ZCTNum t)
				 {PrelNum.ZdwZCDNum
				  (tpl1::PrelBase.ZCTEq t)
				  (tpl2::PrelShow.ZCTShow t)
				  (tpl3::t -> t -> t)
				  (tpl4::t -> t -> t)
				  (tpl5::t -> t -> t)
				  (tpl6::t -> t)
				  (tpl7::t -> t)
				  (tpl8::t -> t)
				  (tpl9::PrelNum.Integer -> t) ->
				    tpl9 (PrelNum.ZdwSzh (77::PrelGHC.Intzh))}
			%in %let lit6 :: t =
				   %case zddNum %of (tpl::PrelNum.ZCTNum t)
				     {PrelNum.ZdwZCDNum
				      (tpl1::PrelBase.ZCTEq t)
				      (tpl2::PrelShow.ZCTShow t)
				      (tpl3::t -> t -> t)
				      (tpl4::t -> t -> t)
				      (tpl5::t -> t -> t)
				      (tpl6::t -> t)
				      (tpl7::t -> t)
				      (tpl8::t -> t)
				      (tpl9::PrelNum.Integer -> t) ->
					tpl9 (PrelNum.ZdwSzh (69::PrelGHC.Intzh))}
			    %in \ (ds::t) ->
				    %case zddNum %of (tpl::PrelNum.ZCTNum t)
				      {PrelNum.ZdwZCDNum
				       (tpl1::PrelBase.ZCTEq t)
				       (tpl2::PrelShow.ZCTShow t)
				       (tpl3::t -> t -> t)
				       (tpl4::t -> t -> t)
				       (tpl5::t -> t -> t)
				       (tpl6::t -> t)
				       (tpl7::t -> t)
				       (tpl8::t -> t)
				       (tpl9::PrelNum.Integer -> t) ->
					 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
					   {PrelBase.ZdwZCDEq
					    (tpl11::t -> t -> PrelBase.Bool)
					    (tpl12::t -> t -> PrelBase.Bool) ->
					      %case (tpl12 lit5 ds) %of (wild::PrelBase.Bool)
						{PrelBase.ZdwTrue ->
						   happyShift2
						   (%note "InlineMe"
						    actionzu981
						    @ (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       (PrelBase.ZMZN PrelBase.Char)
						       PrelNum.Integer
						       PrelFloat.Double
						       PrelBase.Char));
						 PrelBase.ZdwFalse ->
						   %case (tpl12 lit4 ds) %of (wild1::PrelBase.Bool)
						     {PrelBase.ZdwTrue ->
							happyShift2
							(ParCore.actionzu32 @ PrelBase.Int
							 @ LexCore.Token
							 @ (PrelBase.ZMZN PrelBase.Char)
							 @ PrelNum.Integer @ PrelFloat.Double
							 @ PrelBase.Char
							 @ (ParCore.HappyAbsSyn
							    (PrelBase.ZMZN PrelBase.Char)
							    (PrelBase.ZMZN PrelBase.Char)
							    PrelNum.Integer
							    PrelFloat.Double
							    PrelBase.Char));
						      PrelBase.ZdwFalse ->
							%case (tpl12 lit3 ds)
							%of (wild2::PrelBase.Bool)
							  {PrelBase.ZdwTrue ->
							     ParCore.happyGoto
							     @ (ParCore.HappyState
								LexCore.Token
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  (PrelBase.ZMZN PrelBase.Char)
								  (PrelBase.ZMZN PrelBase.Char)
								  PrelNum.Integer
								  PrelFloat.Double
								  PrelBase.Char)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err
								 (ParCore.HappyAbsSyn
								  (PrelBase.ZMZN PrelBase.Char)
								  (PrelBase.ZMZN PrelBase.Char)
								  PrelNum.Integer
								  PrelFloat.Double
								  PrelBase.Char)))
							     @ LexCore.Token
							     @ (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 (PrelBase.ZMZN PrelBase.Char)
								 (PrelBase.ZMZN PrelBase.Char)
								 PrelNum.Integer
								 PrelFloat.Double
								 PrelBase.Char)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err
								(ParCore.HappyAbsSyn
								 (PrelBase.ZMZN PrelBase.Char)
								 (PrelBase.ZMZN PrelBase.Char)
								 PrelNum.Integer
								 PrelFloat.Double
								 PrelBase.Char))
							     (%note "InlineMe"
							      actionzu901
							      @ (ParCore.HappyAbsSyn
								 (PrelBase.ZMZN PrelBase.Char)
								 (PrelBase.ZMZN PrelBase.Char)
								 PrelNum.Integer
								 PrelFloat.Double
								 PrelBase.Char));
							   PrelBase.ZdwFalse ->
							     %case (tpl12 lit2 ds)
							     %of (wild3::PrelBase.Bool)
							       {PrelBase.ZdwTrue ->
								  ParCore.happyGoto
								  @ (ParCore.HappyState
								     LexCore.Token
								     (ParCore.HappyStk
								      (ParCore.HappyAbsSyn
								       (PrelBase.ZMZN PrelBase.Char)
								       (PrelBase.ZMZN PrelBase.Char)
								       PrelNum.Integer
								       PrelFloat.Double
								       PrelBase.Char)
								      ->
								      PrelBase.ZMZN LexCore.Token ->
								      ErrM.Err
								      (ParCore.HappyAbsSyn
								       (PrelBase.ZMZN PrelBase.Char)
								       (PrelBase.ZMZN PrelBase.Char)
								       PrelNum.Integer
								       PrelFloat.Double
								       PrelBase.Char)))
								  @ LexCore.Token
								  @ (ParCore.HappyStk
								     (ParCore.HappyAbsSyn
								      (PrelBase.ZMZN PrelBase.Char)
								      (PrelBase.ZMZN PrelBase.Char)
								      PrelNum.Integer
								      PrelFloat.Double
								      PrelBase.Char)
								     ->
								     PrelBase.ZMZN LexCore.Token ->
								     ErrM.Err
								     (ParCore.HappyAbsSyn
								      (PrelBase.ZMZN PrelBase.Char)
								      (PrelBase.ZMZN PrelBase.Char)
								      PrelNum.Integer
								      PrelFloat.Double
								      PrelBase.Char))
								  actionzu961;
								PrelBase.ZdwFalse ->
								  %case (tpl12 lit1 ds)
								  %of (wild4::PrelBase.Bool)
								    {PrelBase.ZdwTrue ->
								       ParCore.happyGoto
								       @ (ParCore.HappyState
									  LexCore.Token
									  (ParCore.HappyStk
									   (ParCore.HappyAbsSyn
									    (PrelBase.ZMZN
									     PrelBase.Char)
									    (PrelBase.ZMZN
									     PrelBase.Char)
									    PrelNum.Integer
									    PrelFloat.Double
									    PrelBase.Char)
									   ->
									   PrelBase.ZMZN
									   LexCore.Token
									   ->
									   ErrM.Err
									   (ParCore.HappyAbsSyn
									    (PrelBase.ZMZN
									     PrelBase.Char)
									    (PrelBase.ZMZN
									     PrelBase.Char)
									    PrelNum.Integer
									    PrelFloat.Double
									    PrelBase.Char)))
								       @ LexCore.Token
								       @ (ParCore.HappyStk
									  (ParCore.HappyAbsSyn
									   (PrelBase.ZMZN
									    PrelBase.Char)
									   (PrelBase.ZMZN
									    PrelBase.Char)
									   PrelNum.Integer
									   PrelFloat.Double
									   PrelBase.Char)
									  ->
									  PrelBase.ZMZN
									  LexCore.Token
									  ->
									  ErrM.Err
									  (ParCore.HappyAbsSyn
									   (PrelBase.ZMZN
									    PrelBase.Char)
									   (PrelBase.ZMZN
									    PrelBase.Char)
									   PrelNum.Integer
									   PrelFloat.Double
									   PrelBase.Char))
								       (ParCore.actionzu97
									@ PrelBase.Int
									@ LexCore.Token
									@ (PrelBase.ZMZN
									   PrelBase.Char)
									@ (PrelBase.ZMZN
									   PrelBase.Char)
									@ PrelNum.Integer
									@ PrelFloat.Double
									@ PrelBase.Char
									@ (ParCore.HappyAbsSyn
									   (PrelBase.ZMZN
									    PrelBase.Char)
									   (PrelBase.ZMZN
									    PrelBase.Char)
									   PrelNum.Integer
									   PrelFloat.Double
									   PrelBase.Char));
								     PrelBase.ZdwFalse ->
								       %case (tpl12 lit6 ds)
								       %of (wild5::PrelBase.Bool)
									 {PrelBase.ZdwTrue ->
									    ParCore.happyGoto
									    @ (ParCore.HappyState
									       LexCore.Token
									       (ParCore.HappyStk
										(ParCore.HappyAbsSyn
										 (PrelBase.ZMZN
										  PrelBase.Char)
										 (PrelBase.ZMZN
										  PrelBase.Char)
										 PrelNum.Integer
										 PrelFloat.Double
										 PrelBase.Char)
										->
										PrelBase.ZMZN
										LexCore.Token
										->
										ErrM.Err
										(ParCore.HappyAbsSyn
										 (PrelBase.ZMZN
										  PrelBase.Char)
										 (PrelBase.ZMZN
										  PrelBase.Char)
										 PrelNum.Integer
										 PrelFloat.Double
										 PrelBase.Char)))
									    @ LexCore.Token
									    @ (ParCore.HappyStk
									       (ParCore.HappyAbsSyn
										(PrelBase.ZMZN
										 PrelBase.Char)
										(PrelBase.ZMZN
										 PrelBase.Char)
										PrelNum.Integer
										PrelFloat.Double
										PrelBase.Char)
									       ->
									       PrelBase.ZMZN
									       LexCore.Token
									       ->
									       ErrM.Err
									       (ParCore.HappyAbsSyn
										(PrelBase.ZMZN
										 PrelBase.Char)
										(PrelBase.ZMZN
										 PrelBase.Char)
										PrelNum.Integer
										PrelFloat.Double
										PrelBase.Char))
									    (%note "InlineMe"
									     actionzu931
									     @ (ParCore.HappyAbsSyn
										(PrelBase.ZMZN
										 PrelBase.Char)
										(PrelBase.ZMZN
										 PrelBase.Char)
										PrelNum.Integer
										PrelFloat.Double
										PrelBase.Char));
									  PrelBase.ZdwFalse ->
									    ParCore.happyFail
									    @ (ParCore.HappyAbsSyn
									       (PrelBase.ZMZN
										PrelBase.Char)
									       (PrelBase.ZMZN
										PrelBase.Char)
									       PrelNum.Integer
									       PrelFloat.Double
									       PrelBase.Char)
									    @ LexCore.Token
									    @ (PrelBase.ZMZN
									       PrelBase.Char)
									    @ (PrelBase.ZMZN
									       PrelBase.Char)
									    @ PrelNum.Integer
									    @ PrelFloat.Double
									    @ PrelBase.Char}}}}}}}};
  actionzu611 :: PrelBase.Int ->
		 PrelBase.Int ->
		 LexCore.Token ->
		 ParCore.HappyState
		 LexCore.Token
		 (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char)
		  ->
		  PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char))
		 ->
		 PrelBase.ZMZN
		 (ParCore.HappyState
		  LexCore.Token
		  (ParCore.HappyStk
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char)
		   ->
		   PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char)))
		 ->
		 ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char)
		 ->
		 PrelBase.ZMZN LexCore.Token ->
		 ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char) =
    ParCore.actionzu6 @ PrelBase.Int PrelNum.zdfNumInt;
  ParCore.actionzu95 :: %forall t . PrelNum.ZCTNum t ->
				    t ->
				    PrelBase.Int ->
				    LexCore.Token ->
				    ParCore.HappyState
				    LexCore.Token
				    (ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     ->
				     PrelBase.ZMZN LexCore.Token ->
				     ErrM.Err
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char))
				    ->
				    PrelBase.ZMZN
				    (ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)
				      ->
				      PrelBase.ZMZN LexCore.Token ->
				      ErrM.Err
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)))
				    ->
				    ParCore.HappyStk
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     (PrelBase.ZMZN PrelBase.Char)
				     PrelNum.Integer
				     PrelFloat.Double
				     PrelBase.Char)
				    ->
				    PrelBase.ZMZN LexCore.Token ->
				    ErrM.Err
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     (PrelBase.ZMZN PrelBase.Char)
				     PrelNum.Integer
				     PrelFloat.Double
				     PrelBase.Char) =
    \ @ t (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (47::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (45::PrelGHC.Intzh))}
	    %in %let lit3 :: t =
		       %case zddNum %of (tpl::PrelNum.ZCTNum t)
			 {PrelNum.ZdwZCDNum
			  (tpl1::PrelBase.ZCTEq t)
			  (tpl2::PrelShow.ZCTShow t)
			  (tpl3::t -> t -> t)
			  (tpl4::t -> t -> t)
			  (tpl5::t -> t -> t)
			  (tpl6::t -> t)
			  (tpl7::t -> t)
			  (tpl8::t -> t)
			  (tpl9::PrelNum.Integer -> t) ->
			    tpl9 (PrelNum.ZdwSzh (34::PrelGHC.Intzh))}
		%in %let lit4 :: t =
			   %case zddNum %of (tpl::PrelNum.ZCTNum t)
			     {PrelNum.ZdwZCDNum
			      (tpl1::PrelBase.ZCTEq t)
			      (tpl2::PrelShow.ZCTShow t)
			      (tpl3::t -> t -> t)
			      (tpl4::t -> t -> t)
			      (tpl5::t -> t -> t)
			      (tpl6::t -> t)
			      (tpl7::t -> t)
			      (tpl8::t -> t)
			      (tpl9::PrelNum.Integer -> t) ->
				tpl9 (PrelNum.ZdwSzh (103::PrelGHC.Intzh))}
		    %in %let lit5 :: t =
			       %case zddNum %of (tpl::PrelNum.ZCTNum t)
				 {PrelNum.ZdwZCDNum
				  (tpl1::PrelBase.ZCTEq t)
				  (tpl2::PrelShow.ZCTShow t)
				  (tpl3::t -> t -> t)
				  (tpl4::t -> t -> t)
				  (tpl5::t -> t -> t)
				  (tpl6::t -> t)
				  (tpl7::t -> t)
				  (tpl8::t -> t)
				  (tpl9::PrelNum.Integer -> t) ->
				    tpl9 (PrelNum.ZdwSzh (97::PrelGHC.Intzh))}
			%in %let lit6 :: t =
				   %case zddNum %of (tpl::PrelNum.ZCTNum t)
				     {PrelNum.ZdwZCDNum
				      (tpl1::PrelBase.ZCTEq t)
				      (tpl2::PrelShow.ZCTShow t)
				      (tpl3::t -> t -> t)
				      (tpl4::t -> t -> t)
				      (tpl5::t -> t -> t)
				      (tpl6::t -> t)
				      (tpl7::t -> t)
				      (tpl8::t -> t)
				      (tpl9::PrelNum.Integer -> t) ->
					tpl9 (PrelNum.ZdwSzh (77::PrelGHC.Intzh))}
			    %in %let lit7 :: t =
				       %case zddNum %of (tpl::PrelNum.ZCTNum t)
					 {PrelNum.ZdwZCDNum
					  (tpl1::PrelBase.ZCTEq t)
					  (tpl2::PrelShow.ZCTShow t)
					  (tpl3::t -> t -> t)
					  (tpl4::t -> t -> t)
					  (tpl5::t -> t -> t)
					  (tpl6::t -> t)
					  (tpl7::t -> t)
					  (tpl8::t -> t)
					  (tpl9::PrelNum.Integer -> t) ->
					    tpl9 (PrelNum.ZdwSzh (69::PrelGHC.Intzh))}
				%in \ (ds::t) ->
					%case zddNum %of (tpl::PrelNum.ZCTNum t)
					  {PrelNum.ZdwZCDNum
					   (tpl1::PrelBase.ZCTEq t)
					   (tpl2::PrelShow.ZCTShow t)
					   (tpl3::t -> t -> t)
					   (tpl4::t -> t -> t)
					   (tpl5::t -> t -> t)
					   (tpl6::t -> t)
					   (tpl7::t -> t)
					   (tpl8::t -> t)
					   (tpl9::PrelNum.Integer -> t) ->
					     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
					       {PrelBase.ZdwZCDEq
						(tpl11::t -> t -> PrelBase.Bool)
						(tpl12::t -> t -> PrelBase.Bool) ->
						  %case (tpl12 lit6 ds) %of (wild::PrelBase.Bool)
						    {PrelBase.ZdwTrue ->
						       happyShift2
						       (%note "InlineMe"
							actionzu981
							@ (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   (PrelBase.ZMZN PrelBase.Char)
							   PrelNum.Integer
							   PrelFloat.Double
							   PrelBase.Char));
						     PrelBase.ZdwFalse ->
						       %case (tpl12 lit5 ds)
						       %of (wild1::PrelBase.Bool)
							 {PrelBase.ZdwTrue ->
							    happyShift2
							    (ParCore.actionzu32 @ PrelBase.Int
							     @ LexCore.Token
							     @ (PrelBase.ZMZN PrelBase.Char)
							     @ PrelNum.Integer @ PrelFloat.Double
							     @ PrelBase.Char
							     @ (ParCore.HappyAbsSyn
								(PrelBase.ZMZN PrelBase.Char)
								(PrelBase.ZMZN PrelBase.Char)
								PrelNum.Integer
								PrelFloat.Double
								PrelBase.Char));
							  PrelBase.ZdwFalse ->
							    %case (tpl12 lit4 ds)
							    %of (wild2::PrelBase.Bool)
							      {PrelBase.ZdwTrue ->
								 ParCore.happyAccept @ PrelBase.Int
								 @ LexCore.Token
								 @ (ParCore.HappyState
								    LexCore.Token
								    (ParCore.HappyStk
								     (ParCore.HappyAbsSyn
								      (PrelBase.ZMZN PrelBase.Char)
								      (PrelBase.ZMZN PrelBase.Char)
								      PrelNum.Integer
								      PrelFloat.Double
								      PrelBase.Char)
								     ->
								     PrelBase.ZMZN LexCore.Token ->
								     ErrM.Err
								     (ParCore.HappyAbsSyn
								      (PrelBase.ZMZN PrelBase.Char)
								      (PrelBase.ZMZN PrelBase.Char)
								      PrelNum.Integer
								      PrelFloat.Double
								      PrelBase.Char)))
								 @ (PrelBase.ZMZN
								    (ParCore.HappyState
								     LexCore.Token
								     (ParCore.HappyStk
								      (ParCore.HappyAbsSyn
								       (PrelBase.ZMZN PrelBase.Char)
								       (PrelBase.ZMZN PrelBase.Char)
								       PrelNum.Integer
								       PrelFloat.Double
								       PrelBase.Char)
								      ->
								      PrelBase.ZMZN LexCore.Token ->
								      ErrM.Err
								      (ParCore.HappyAbsSyn
								       (PrelBase.ZMZN PrelBase.Char)
								       (PrelBase.ZMZN PrelBase.Char)
								       PrelNum.Integer
								       PrelFloat.Double
								       PrelBase.Char))))
								 @ (ParCore.HappyAbsSyn
								    (PrelBase.ZMZN PrelBase.Char)
								    (PrelBase.ZMZN PrelBase.Char)
								    PrelNum.Integer
								    PrelFloat.Double
								    PrelBase.Char)
								 @ (PrelBase.ZMZN LexCore.Token);
							       PrelBase.ZdwFalse ->
								 %case (tpl12 lit3 ds)
								 %of (wild3::PrelBase.Bool)
								   {PrelBase.ZdwTrue ->
								      ParCore.happyGoto
								      @ (ParCore.HappyState
									 LexCore.Token
									 (ParCore.HappyStk
									  (ParCore.HappyAbsSyn
									   (PrelBase.ZMZN
									    PrelBase.Char)
									   (PrelBase.ZMZN
									    PrelBase.Char)
									   PrelNum.Integer
									   PrelFloat.Double
									   PrelBase.Char)
									  ->
									  PrelBase.ZMZN
									  LexCore.Token
									  ->
									  ErrM.Err
									  (ParCore.HappyAbsSyn
									   (PrelBase.ZMZN
									    PrelBase.Char)
									   (PrelBase.ZMZN
									    PrelBase.Char)
									   PrelNum.Integer
									   PrelFloat.Double
									   PrelBase.Char)))
								      @ LexCore.Token
								      @ (ParCore.HappyStk
									 (ParCore.HappyAbsSyn
									  (PrelBase.ZMZN
									   PrelBase.Char)
									  (PrelBase.ZMZN
									   PrelBase.Char)
									  PrelNum.Integer
									  PrelFloat.Double
									  PrelBase.Char)
									 ->
									 PrelBase.ZMZN LexCore.Token
									 ->
									 ErrM.Err
									 (ParCore.HappyAbsSyn
									  (PrelBase.ZMZN
									   PrelBase.Char)
									  (PrelBase.ZMZN
									   PrelBase.Char)
									  PrelNum.Integer
									  PrelFloat.Double
									  PrelBase.Char))
								      (%note "InlineMe"
								       actionzu901
								       @ (ParCore.HappyAbsSyn
									  (PrelBase.ZMZN
									   PrelBase.Char)
									  (PrelBase.ZMZN
									   PrelBase.Char)
									  PrelNum.Integer
									  PrelFloat.Double
									  PrelBase.Char));
								    PrelBase.ZdwFalse ->
								      %case (tpl12 lit2 ds)
								      %of (wild4::PrelBase.Bool)
									{PrelBase.ZdwTrue ->
									   ParCore.happyGoto
									   @ (ParCore.HappyState
									      LexCore.Token
									      (ParCore.HappyStk
									       (ParCore.HappyAbsSyn
										(PrelBase.ZMZN
										 PrelBase.Char)
										(PrelBase.ZMZN
										 PrelBase.Char)
										PrelNum.Integer
										PrelFloat.Double
										PrelBase.Char)
									       ->
									       PrelBase.ZMZN
									       LexCore.Token
									       ->
									       ErrM.Err
									       (ParCore.HappyAbsSyn
										(PrelBase.ZMZN
										 PrelBase.Char)
										(PrelBase.ZMZN
										 PrelBase.Char)
										PrelNum.Integer
										PrelFloat.Double
										PrelBase.Char)))
									   @ LexCore.Token
									   @ (ParCore.HappyStk
									      (ParCore.HappyAbsSyn
									       (PrelBase.ZMZN
										PrelBase.Char)
									       (PrelBase.ZMZN
										PrelBase.Char)
									       PrelNum.Integer
									       PrelFloat.Double
									       PrelBase.Char)
									      ->
									      PrelBase.ZMZN
									      LexCore.Token
									      ->
									      ErrM.Err
									      (ParCore.HappyAbsSyn
									       (PrelBase.ZMZN
										PrelBase.Char)
									       (PrelBase.ZMZN
										PrelBase.Char)
									       PrelNum.Integer
									       PrelFloat.Double
									       PrelBase.Char))
									   actionzu1191;
									 PrelBase.ZdwFalse ->
									   %case (tpl12 lit1 ds)
									   %of (wild5::PrelBase.Bool)
									     {PrelBase.ZdwTrue ->
										ParCore.happyGoto
										@ (ParCore.HappyState
										   LexCore.Token
										   (ParCore.HappyStk
										    (ParCore.HappyAbsSyn
										     (PrelBase.ZMZN
										      PrelBase.Char)
										     (PrelBase.ZMZN
										      PrelBase.Char)
										     PrelNum.Integer
										     PrelFloat.Double
										     PrelBase.Char)
										    ->
										    PrelBase.ZMZN
										    LexCore.Token
										    ->
										    ErrM.Err
										    (ParCore.HappyAbsSyn
										     (PrelBase.ZMZN
										      PrelBase.Char)
										     (PrelBase.ZMZN
										      PrelBase.Char)
										     PrelNum.Integer
										     PrelFloat.Double
										     PrelBase.Char)))
										@ LexCore.Token
										@ (ParCore.HappyStk
										   (ParCore.HappyAbsSyn
										    (PrelBase.ZMZN
										     PrelBase.Char)
										    (PrelBase.ZMZN
										     PrelBase.Char)
										    PrelNum.Integer
										    PrelFloat.Double
										    PrelBase.Char)
										   ->
										   PrelBase.ZMZN
										   LexCore.Token
										   ->
										   ErrM.Err
										   (ParCore.HappyAbsSyn
										    (PrelBase.ZMZN
										     PrelBase.Char)
										    (PrelBase.ZMZN
										     PrelBase.Char)
										    PrelNum.Integer
										    PrelFloat.Double
										    PrelBase.Char))
										(ParCore.actionzu97
										 @ PrelBase.Int
										 @ LexCore.Token
										 @ (PrelBase.ZMZN
										    PrelBase.Char)
										 @ (PrelBase.ZMZN
										    PrelBase.Char)
										 @ PrelNum.Integer
										 @ PrelFloat.Double
										 @ PrelBase.Char
										 @ (ParCore.HappyAbsSyn
										    (PrelBase.ZMZN
										     PrelBase.Char)
										    (PrelBase.ZMZN
										     PrelBase.Char)
										    PrelNum.Integer
										    PrelFloat.Double
										    PrelBase.Char));
									      PrelBase.ZdwFalse ->
										%case (tpl12 lit7
										       ds)
										%of (wild6::PrelBase.Bool)
										  {PrelBase.ZdwTrue
										   ->
										     ParCore.happyGoto
										     @ (ParCore.HappyState
											LexCore.Token
											(ParCore.HappyStk
											 (ParCore.HappyAbsSyn
											  (PrelBase.ZMZN
											   PrelBase.Char)
											  (PrelBase.ZMZN
											   PrelBase.Char)
											  PrelNum.Integer
											  PrelFloat.Double
											  PrelBase.Char)
											 ->
											 PrelBase.ZMZN
											 LexCore.Token
											 ->
											 ErrM.Err
											 (ParCore.HappyAbsSyn
											  (PrelBase.ZMZN
											   PrelBase.Char)
											  (PrelBase.ZMZN
											   PrelBase.Char)
											  PrelNum.Integer
											  PrelFloat.Double
											  PrelBase.Char)))
										     @ LexCore.Token
										     @ (ParCore.HappyStk
											(ParCore.HappyAbsSyn
											 (PrelBase.ZMZN
											  PrelBase.Char)
											 (PrelBase.ZMZN
											  PrelBase.Char)
											 PrelNum.Integer
											 PrelFloat.Double
											 PrelBase.Char)
											->
											PrelBase.ZMZN
											LexCore.Token
											->
											ErrM.Err
											(ParCore.HappyAbsSyn
											 (PrelBase.ZMZN
											  PrelBase.Char)
											 (PrelBase.ZMZN
											  PrelBase.Char)
											 PrelNum.Integer
											 PrelFloat.Double
											 PrelBase.Char))
										     (%note "InlineMe"
										      actionzu931
										      @ (ParCore.HappyAbsSyn
											 (PrelBase.ZMZN
											  PrelBase.Char)
											 (PrelBase.ZMZN
											  PrelBase.Char)
											 PrelNum.Integer
											 PrelFloat.Double
											 PrelBase.Char));
										   PrelBase.ZdwFalse
										   ->
										     ParCore.happyFail
										     @ (ParCore.HappyAbsSyn
											(PrelBase.ZMZN
											 PrelBase.Char)
											(PrelBase.ZMZN
											 PrelBase.Char)
											PrelNum.Integer
											PrelFloat.Double
											PrelBase.Char)
										     @ LexCore.Token
										     @ (PrelBase.ZMZN
											PrelBase.Char)
										     @ (PrelBase.ZMZN
											PrelBase.Char)
										     @ PrelNum.Integer
										     @ PrelFloat.Double
										     @ PrelBase.Char}}}}}}}}};
  actionzu951 :: PrelBase.Int ->
		 PrelBase.Int ->
		 LexCore.Token ->
		 ParCore.HappyState
		 LexCore.Token
		 (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char)
		  ->
		  PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char))
		 ->
		 PrelBase.ZMZN
		 (ParCore.HappyState
		  LexCore.Token
		  (ParCore.HappyStk
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char)
		   ->
		   PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char)))
		 ->
		 ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char)
		 ->
		 PrelBase.ZMZN LexCore.Token ->
		 ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char) =
    ParCore.actionzu95 @ PrelBase.Int PrelNum.zdfNumInt;
  ParCore.actionzu7 :: %forall t . PrelNum.ZCTNum t ->
				   t ->
				   PrelBase.Int ->
				   LexCore.Token ->
				   ParCore.HappyState
				   LexCore.Token
				   (ParCore.HappyStk
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     (PrelBase.ZMZN PrelBase.Char)
				     PrelNum.Integer
				     PrelFloat.Double
				     PrelBase.Char)
				    ->
				    PrelBase.ZMZN LexCore.Token ->
				    ErrM.Err
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     (PrelBase.ZMZN PrelBase.Char)
				     PrelNum.Integer
				     PrelFloat.Double
				     PrelBase.Char))
				   ->
				   PrelBase.ZMZN
				   (ParCore.HappyState
				    LexCore.Token
				    (ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     ->
				     PrelBase.ZMZN LexCore.Token ->
				     ErrM.Err
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)))
				   ->
				   ParCore.HappyStk
				   (ParCore.HappyAbsSyn
				    (PrelBase.ZMZN PrelBase.Char)
				    (PrelBase.ZMZN PrelBase.Char)
				    PrelNum.Integer
				    PrelFloat.Double
				    PrelBase.Char)
				   ->
				   PrelBase.ZMZN LexCore.Token ->
				   ErrM.Err
				   (ParCore.HappyAbsSyn
				    (PrelBase.ZMZN PrelBase.Char)
				    (PrelBase.ZMZN PrelBase.Char)
				    PrelNum.Integer
				    PrelFloat.Double
				    PrelBase.Char) =
    \ @ t (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (46::PrelGHC.Intzh))}
	%in \ (ds::t) ->
		%case zddNum %of (tpl::PrelNum.ZCTNum t)
		  {PrelNum.ZdwZCDNum
		   (tpl1::PrelBase.ZCTEq t)
		   (tpl2::PrelShow.ZCTShow t)
		   (tpl3::t -> t -> t)
		   (tpl4::t -> t -> t)
		   (tpl5::t -> t -> t)
		   (tpl6::t -> t)
		   (tpl7::t -> t)
		   (tpl8::t -> t)
		   (tpl9::PrelNum.Integer -> t) ->
		     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
		       {PrelBase.ZdwZCDEq
			(tpl11::t -> t -> PrelBase.Bool)
			(tpl12::t -> t -> PrelBase.Bool) ->
			  %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
			    {PrelBase.ZdwTrue ->
			       ParCore.happyGoto
			       @ (ParCore.HappyState
				  LexCore.Token
				  (ParCore.HappyStk
				   (ParCore.HappyAbsSyn
				    (PrelBase.ZMZN PrelBase.Char)
				    (PrelBase.ZMZN PrelBase.Char)
				    PrelNum.Integer
				    PrelFloat.Double
				    PrelBase.Char)
				   ->
				   PrelBase.ZMZN LexCore.Token ->
				   ErrM.Err
				   (ParCore.HappyAbsSyn
				    (PrelBase.ZMZN PrelBase.Char)
				    (PrelBase.ZMZN PrelBase.Char)
				    PrelNum.Integer
				    PrelFloat.Double
				    PrelBase.Char)))
			       @ LexCore.Token
			       @ (ParCore.HappyStk
				  (ParCore.HappyAbsSyn
				   (PrelBase.ZMZN PrelBase.Char)
				   (PrelBase.ZMZN PrelBase.Char)
				   PrelNum.Integer
				   PrelFloat.Double
				   PrelBase.Char)
				  ->
				  PrelBase.ZMZN LexCore.Token ->
				  ErrM.Err
				  (ParCore.HappyAbsSyn
				   (PrelBase.ZMZN PrelBase.Char)
				   (PrelBase.ZMZN PrelBase.Char)
				   PrelNum.Integer
				   PrelFloat.Double
				   PrelBase.Char))
			       actionzu951;
			     PrelBase.ZdwFalse ->
			       ParCore.happyReducezu48 @ LexCore.Token
			       @ (ParCore.HappyAbsSyn
				  (PrelBase.ZMZN PrelBase.Char)
				  (PrelBase.ZMZN PrelBase.Char)
				  PrelNum.Integer
				  PrelFloat.Double
				  PrelBase.Char)
			       @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
			       @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char}}};
  actionzu711 :: PrelBase.Int ->
		 PrelBase.Int ->
		 LexCore.Token ->
		 ParCore.HappyState
		 LexCore.Token
		 (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char)
		  ->
		  PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char))
		 ->
		 PrelBase.ZMZN
		 (ParCore.HappyState
		  LexCore.Token
		  (ParCore.HappyStk
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char)
		   ->
		   PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char)))
		 ->
		 ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char)
		 ->
		 PrelBase.ZMZN LexCore.Token ->
		 ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char) =
    ParCore.actionzu7 @ PrelBase.Int PrelNum.zdfNumInt;
  ParCore.actionzu94 :: %forall t b t34 t35 t36 t37 t38 . PrelNum.ZCTNum
							  t
							  ->
							  t ->
							  PrelBase.Int ->
							  b ->
							  ParCore.HappyState
							  b
							  (ParCore.HappyStk
							   (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err
							   (ParCore.HappyAbsSyn
							    t34
							    t35
							    t36
							    t37
							    t38))
							  ->
							  PrelBase.ZMZN
							  (ParCore.HappyState
							   b
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)))
							  ->
							  ParCore.HappyStk
							  (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							  ->
							  PrelBase.ZMZN LexCore.Token ->
							  ErrM.Err
							  (ParCore.HappyAbsSyn
							   t34
							   t35
							   t36
							   t37
							   t38) =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (103::PrelGHC.Intzh))}
	%in \ (ds::t) ->
		%case zddNum %of (tpl::PrelNum.ZCTNum t)
		  {PrelNum.ZdwZCDNum
		   (tpl1::PrelBase.ZCTEq t)
		   (tpl2::PrelShow.ZCTShow t)
		   (tpl3::t -> t -> t)
		   (tpl4::t -> t -> t)
		   (tpl5::t -> t -> t)
		   (tpl6::t -> t)
		   (tpl7::t -> t)
		   (tpl8::t -> t)
		   (tpl9::PrelNum.Integer -> t) ->
		     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
		       {PrelBase.ZdwZCDEq
			(tpl11::t -> t -> PrelBase.Bool)
			(tpl12::t -> t -> PrelBase.Bool) ->
			  %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
			    {PrelBase.ZdwTrue ->
			       ParCore.happyAccept @ PrelBase.Int @ b
			       @ (ParCore.HappyState
				  b
				  (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				   PrelBase.ZMZN LexCore.Token ->
				   ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)))
			       @ (PrelBase.ZMZN
				  (ParCore.HappyState
				   b
				   (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				    PrelBase.ZMZN LexCore.Token ->
				    ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))))
			       @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
			       @ (PrelBase.ZMZN LexCore.Token);
			     PrelBase.ZdwFalse ->
			       ParCore.happyFail @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) @ b
			       @ t34 @ t35 @ t36 @ t37 @ t38}}};
  actionzu941 :: PrelBase.Int ->
		 PrelBase.Int ->
		 LexCore.Token ->
		 ParCore.HappyState
		 LexCore.Token
		 (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char)
		  ->
		  PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char))
		 ->
		 PrelBase.ZMZN
		 (ParCore.HappyState
		  LexCore.Token
		  (ParCore.HappyStk
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char)
		   ->
		   PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char)))
		 ->
		 ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char)
		 ->
		 PrelBase.ZMZN LexCore.Token ->
		 ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char) =
    ParCore.actionzu94 @ PrelBase.Int @ LexCore.Token
    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char
    PrelNum.zdfNumInt;
  ParCore.actionzu8 :: %forall t . PrelNum.ZCTNum t ->
				   t ->
				   PrelBase.Int ->
				   LexCore.Token ->
				   ParCore.HappyState
				   LexCore.Token
				   (ParCore.HappyStk
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     (PrelBase.ZMZN PrelBase.Char)
				     PrelNum.Integer
				     PrelFloat.Double
				     PrelBase.Char)
				    ->
				    PrelBase.ZMZN LexCore.Token ->
				    ErrM.Err
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     (PrelBase.ZMZN PrelBase.Char)
				     PrelNum.Integer
				     PrelFloat.Double
				     PrelBase.Char))
				   ->
				   PrelBase.ZMZN
				   (ParCore.HappyState
				    LexCore.Token
				    (ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     ->
				     PrelBase.ZMZN LexCore.Token ->
				     ErrM.Err
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)))
				   ->
				   ParCore.HappyStk
				   (ParCore.HappyAbsSyn
				    (PrelBase.ZMZN PrelBase.Char)
				    (PrelBase.ZMZN PrelBase.Char)
				    PrelNum.Integer
				    PrelFloat.Double
				    PrelBase.Char)
				   ->
				   PrelBase.ZMZN LexCore.Token ->
				   ErrM.Err
				   (ParCore.HappyAbsSyn
				    (PrelBase.ZMZN PrelBase.Char)
				    (PrelBase.ZMZN PrelBase.Char)
				    PrelNum.Integer
				    PrelFloat.Double
				    PrelBase.Char) =
    \ @ t (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (47::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (34::PrelGHC.Intzh))}
	    %in %let lit3 :: t =
		       %case zddNum %of (tpl::PrelNum.ZCTNum t)
			 {PrelNum.ZdwZCDNum
			  (tpl1::PrelBase.ZCTEq t)
			  (tpl2::PrelShow.ZCTShow t)
			  (tpl3::t -> t -> t)
			  (tpl4::t -> t -> t)
			  (tpl5::t -> t -> t)
			  (tpl6::t -> t)
			  (tpl7::t -> t)
			  (tpl8::t -> t)
			  (tpl9::PrelNum.Integer -> t) ->
			    tpl9 (PrelNum.ZdwSzh (97::PrelGHC.Intzh))}
		%in %let lit4 :: t =
			   %case zddNum %of (tpl::PrelNum.ZCTNum t)
			     {PrelNum.ZdwZCDNum
			      (tpl1::PrelBase.ZCTEq t)
			      (tpl2::PrelShow.ZCTShow t)
			      (tpl3::t -> t -> t)
			      (tpl4::t -> t -> t)
			      (tpl5::t -> t -> t)
			      (tpl6::t -> t)
			      (tpl7::t -> t)
			      (tpl8::t -> t)
			      (tpl9::PrelNum.Integer -> t) ->
				tpl9 (PrelNum.ZdwSzh (69::PrelGHC.Intzh))}
		    %in \ (ds::t) ->
			    %case zddNum %of (tpl::PrelNum.ZCTNum t)
			      {PrelNum.ZdwZCDNum
			       (tpl1::PrelBase.ZCTEq t)
			       (tpl2::PrelShow.ZCTShow t)
			       (tpl3::t -> t -> t)
			       (tpl4::t -> t -> t)
			       (tpl5::t -> t -> t)
			       (tpl6::t -> t)
			       (tpl7::t -> t)
			       (tpl8::t -> t)
			       (tpl9::PrelNum.Integer -> t) ->
				 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
				   {PrelBase.ZdwZCDEq
				    (tpl11::t -> t -> PrelBase.Bool)
				    (tpl12::t -> t -> PrelBase.Bool) ->
				      %case (tpl12 lit3 ds) %of (wild::PrelBase.Bool)
					{PrelBase.ZdwTrue ->
					   happyShift2
					   (ParCore.actionzu32 @ PrelBase.Int @ LexCore.Token
					    @ (PrelBase.ZMZN PrelBase.Char) @ PrelNum.Integer
					    @ PrelFloat.Double @ PrelBase.Char
					    @ (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       (PrelBase.ZMZN PrelBase.Char)
					       PrelNum.Integer
					       PrelFloat.Double
					       PrelBase.Char));
					 PrelBase.ZdwFalse ->
					   %case (tpl12 lit2 ds) %of (wild1::PrelBase.Bool)
					     {PrelBase.ZdwTrue ->
						ParCore.happyGoto
						@ (ParCore.HappyState
						   LexCore.Token
						   (ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     (PrelBase.ZMZN PrelBase.Char)
						     PrelNum.Integer
						     PrelFloat.Double
						     PrelBase.Char)
						    ->
						    PrelBase.ZMZN LexCore.Token ->
						    ErrM.Err
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     (PrelBase.ZMZN PrelBase.Char)
						     PrelNum.Integer
						     PrelFloat.Double
						     PrelBase.Char)))
						@ LexCore.Token
						@ (ParCore.HappyStk
						   (ParCore.HappyAbsSyn
						    (PrelBase.ZMZN PrelBase.Char)
						    (PrelBase.ZMZN PrelBase.Char)
						    PrelNum.Integer
						    PrelFloat.Double
						    PrelBase.Char)
						   ->
						   PrelBase.ZMZN LexCore.Token ->
						   ErrM.Err
						   (ParCore.HappyAbsSyn
						    (PrelBase.ZMZN PrelBase.Char)
						    (PrelBase.ZMZN PrelBase.Char)
						    PrelNum.Integer
						    PrelFloat.Double
						    PrelBase.Char))
						(%note "InlineMe"
						 actionzu901
						 @ (ParCore.HappyAbsSyn
						    (PrelBase.ZMZN PrelBase.Char)
						    (PrelBase.ZMZN PrelBase.Char)
						    PrelNum.Integer
						    PrelFloat.Double
						    PrelBase.Char));
					      PrelBase.ZdwFalse ->
						%case (tpl12 lit1 ds) %of (wild2::PrelBase.Bool)
						  {PrelBase.ZdwTrue ->
						     ParCore.happyGoto
						     @ (ParCore.HappyState
							LexCore.Token
							(ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  (PrelBase.ZMZN PrelBase.Char)
							  PrelNum.Integer
							  PrelFloat.Double
							  PrelBase.Char)
							 ->
							 PrelBase.ZMZN LexCore.Token ->
							 ErrM.Err
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  (PrelBase.ZMZN PrelBase.Char)
							  PrelNum.Integer
							  PrelFloat.Double
							  PrelBase.Char)))
						     @ LexCore.Token
						     @ (ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 (PrelBase.ZMZN PrelBase.Char)
							 PrelNum.Integer
							 PrelFloat.Double
							 PrelBase.Char)
							->
							PrelBase.ZMZN LexCore.Token ->
							ErrM.Err
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 (PrelBase.ZMZN PrelBase.Char)
							 PrelNum.Integer
							 PrelFloat.Double
							 PrelBase.Char))
						     actionzu941;
						   PrelBase.ZdwFalse ->
						     %case (tpl12 lit4 ds)
						     %of (wild3::PrelBase.Bool)
						       {PrelBase.ZdwTrue ->
							  ParCore.happyGoto
							  @ (ParCore.HappyState
							     LexCore.Token
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       (PrelBase.ZMZN PrelBase.Char)
							       (PrelBase.ZMZN PrelBase.Char)
							       PrelNum.Integer
							       PrelFloat.Double
							       PrelBase.Char)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err
							      (ParCore.HappyAbsSyn
							       (PrelBase.ZMZN PrelBase.Char)
							       (PrelBase.ZMZN PrelBase.Char)
							       PrelNum.Integer
							       PrelFloat.Double
							       PrelBase.Char)))
							  @ LexCore.Token
							  @ (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      (PrelBase.ZMZN PrelBase.Char)
							      (PrelBase.ZMZN PrelBase.Char)
							      PrelNum.Integer
							      PrelFloat.Double
							      PrelBase.Char)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err
							     (ParCore.HappyAbsSyn
							      (PrelBase.ZMZN PrelBase.Char)
							      (PrelBase.ZMZN PrelBase.Char)
							      PrelNum.Integer
							      PrelFloat.Double
							      PrelBase.Char))
							  (%note "InlineMe"
							   actionzu931
							   @ (ParCore.HappyAbsSyn
							      (PrelBase.ZMZN PrelBase.Char)
							      (PrelBase.ZMZN PrelBase.Char)
							      PrelNum.Integer
							      PrelFloat.Double
							      PrelBase.Char));
							PrelBase.ZdwFalse ->
							  ParCore.happyFail
							  @ (ParCore.HappyAbsSyn
							     (PrelBase.ZMZN PrelBase.Char)
							     (PrelBase.ZMZN PrelBase.Char)
							     PrelNum.Integer
							     PrelFloat.Double
							     PrelBase.Char)
							  @ LexCore.Token
							  @ (PrelBase.ZMZN PrelBase.Char)
							  @ (PrelBase.ZMZN PrelBase.Char)
							  @ PrelNum.Integer @ PrelFloat.Double
							  @ PrelBase.Char}}}}}};
  actionzu812 :: PrelBase.Int ->
		 PrelBase.Int ->
		 LexCore.Token ->
		 ParCore.HappyState
		 LexCore.Token
		 (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char)
		  ->
		  PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char))
		 ->
		 PrelBase.ZMZN
		 (ParCore.HappyState
		  LexCore.Token
		  (ParCore.HappyStk
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char)
		   ->
		   PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char)))
		 ->
		 ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char)
		 ->
		 PrelBase.ZMZN LexCore.Token ->
		 ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char) =
    ParCore.actionzu8 @ PrelBase.Int PrelNum.zdfNumInt;
  ParCore.actionzu92 :: %forall t b t34 t35 t36 t37 t38 . PrelNum.ZCTNum
							  t
							  ->
							  t ->
							  PrelBase.Int ->
							  b ->
							  ParCore.HappyState
							  b
							  (ParCore.HappyStk
							   (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err
							   (ParCore.HappyAbsSyn
							    t34
							    t35
							    t36
							    t37
							    t38))
							  ->
							  PrelBase.ZMZN
							  (ParCore.HappyState
							   b
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)))
							  ->
							  ParCore.HappyStk
							  (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							  ->
							  PrelBase.ZMZN LexCore.Token ->
							  ErrM.Err
							  (ParCore.HappyAbsSyn
							   t34
							   t35
							   t36
							   t37
							   t38) =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (103::PrelGHC.Intzh))}
	%in \ (ds::t) ->
		%case zddNum %of (tpl::PrelNum.ZCTNum t)
		  {PrelNum.ZdwZCDNum
		   (tpl1::PrelBase.ZCTEq t)
		   (tpl2::PrelShow.ZCTShow t)
		   (tpl3::t -> t -> t)
		   (tpl4::t -> t -> t)
		   (tpl5::t -> t -> t)
		   (tpl6::t -> t)
		   (tpl7::t -> t)
		   (tpl8::t -> t)
		   (tpl9::PrelNum.Integer -> t) ->
		     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
		       {PrelBase.ZdwZCDEq
			(tpl11::t -> t -> PrelBase.Bool)
			(tpl12::t -> t -> PrelBase.Bool) ->
			  %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
			    {PrelBase.ZdwTrue ->
			       ParCore.happyAccept @ PrelBase.Int @ b
			       @ (ParCore.HappyState
				  b
				  (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				   PrelBase.ZMZN LexCore.Token ->
				   ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)))
			       @ (PrelBase.ZMZN
				  (ParCore.HappyState
				   b
				   (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				    PrelBase.ZMZN LexCore.Token ->
				    ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))))
			       @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
			       @ (PrelBase.ZMZN LexCore.Token);
			     PrelBase.ZdwFalse ->
			       ParCore.happyFail @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) @ b
			       @ t34 @ t35 @ t36 @ t37 @ t38}}};
  actionzu921 :: PrelBase.Int ->
		 PrelBase.Int ->
		 LexCore.Token ->
		 ParCore.HappyState
		 LexCore.Token
		 (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char)
		  ->
		  PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char))
		 ->
		 PrelBase.ZMZN
		 (ParCore.HappyState
		  LexCore.Token
		  (ParCore.HappyStk
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char)
		   ->
		   PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char)))
		 ->
		 ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char)
		 ->
		 PrelBase.ZMZN LexCore.Token ->
		 ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char) =
    ParCore.actionzu92 @ PrelBase.Int @ LexCore.Token
    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char
    PrelNum.zdfNumInt;
  ParCore.actionzu9 :: %forall t . PrelNum.ZCTNum t ->
				   t ->
				   PrelBase.Int ->
				   LexCore.Token ->
				   ParCore.HappyState
				   LexCore.Token
				   (ParCore.HappyStk
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     (PrelBase.ZMZN PrelBase.Char)
				     PrelNum.Integer
				     PrelFloat.Double
				     PrelBase.Char)
				    ->
				    PrelBase.ZMZN LexCore.Token ->
				    ErrM.Err
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     (PrelBase.ZMZN PrelBase.Char)
				     PrelNum.Integer
				     PrelFloat.Double
				     PrelBase.Char))
				   ->
				   PrelBase.ZMZN
				   (ParCore.HappyState
				    LexCore.Token
				    (ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     ->
				     PrelBase.ZMZN LexCore.Token ->
				     ErrM.Err
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)))
				   ->
				   ParCore.HappyStk
				   (ParCore.HappyAbsSyn
				    (PrelBase.ZMZN PrelBase.Char)
				    (PrelBase.ZMZN PrelBase.Char)
				    PrelNum.Integer
				    PrelFloat.Double
				    PrelBase.Char)
				   ->
				   PrelBase.ZMZN LexCore.Token ->
				   ErrM.Err
				   (ParCore.HappyAbsSyn
				    (PrelBase.ZMZN PrelBase.Char)
				    (PrelBase.ZMZN PrelBase.Char)
				    PrelNum.Integer
				    PrelFloat.Double
				    PrelBase.Char) =
    \ @ t (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (48::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (47::PrelGHC.Intzh))}
	    %in %let lit3 :: t =
		       %case zddNum %of (tpl::PrelNum.ZCTNum t)
			 {PrelNum.ZdwZCDNum
			  (tpl1::PrelBase.ZCTEq t)
			  (tpl2::PrelShow.ZCTShow t)
			  (tpl3::t -> t -> t)
			  (tpl4::t -> t -> t)
			  (tpl5::t -> t -> t)
			  (tpl6::t -> t)
			  (tpl7::t -> t)
			  (tpl8::t -> t)
			  (tpl9::PrelNum.Integer -> t) ->
			    tpl9 (PrelNum.ZdwSzh (34::PrelGHC.Intzh))}
		%in %let lit4 :: t =
			   %case zddNum %of (tpl::PrelNum.ZCTNum t)
			     {PrelNum.ZdwZCDNum
			      (tpl1::PrelBase.ZCTEq t)
			      (tpl2::PrelShow.ZCTShow t)
			      (tpl3::t -> t -> t)
			      (tpl4::t -> t -> t)
			      (tpl5::t -> t -> t)
			      (tpl6::t -> t)
			      (tpl7::t -> t)
			      (tpl8::t -> t)
			      (tpl9::PrelNum.Integer -> t) ->
				tpl9 (PrelNum.ZdwSzh (97::PrelGHC.Intzh))}
		    %in %let lit5 :: t =
			       %case zddNum %of (tpl::PrelNum.ZCTNum t)
				 {PrelNum.ZdwZCDNum
				  (tpl1::PrelBase.ZCTEq t)
				  (tpl2::PrelShow.ZCTShow t)
				  (tpl3::t -> t -> t)
				  (tpl4::t -> t -> t)
				  (tpl5::t -> t -> t)
				  (tpl6::t -> t)
				  (tpl7::t -> t)
				  (tpl8::t -> t)
				  (tpl9::PrelNum.Integer -> t) ->
				    tpl9 (PrelNum.ZdwSzh (69::PrelGHC.Intzh))}
			%in \ (ds::t) ->
				%case zddNum %of (tpl::PrelNum.ZCTNum t)
				  {PrelNum.ZdwZCDNum
				   (tpl1::PrelBase.ZCTEq t)
				   (tpl2::PrelShow.ZCTShow t)
				   (tpl3::t -> t -> t)
				   (tpl4::t -> t -> t)
				   (tpl5::t -> t -> t)
				   (tpl6::t -> t)
				   (tpl7::t -> t)
				   (tpl8::t -> t)
				   (tpl9::PrelNum.Integer -> t) ->
				     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
				       {PrelBase.ZdwZCDEq
					(tpl11::t -> t -> PrelBase.Bool)
					(tpl12::t -> t -> PrelBase.Bool) ->
					  %case (tpl12 lit4 ds) %of (wild::PrelBase.Bool)
					    {PrelBase.ZdwTrue ->
					       happyShift2
					       (ParCore.actionzu32 @ PrelBase.Int @ LexCore.Token
						@ (PrelBase.ZMZN PrelBase.Char) @ PrelNum.Integer
						@ PrelFloat.Double @ PrelBase.Char
						@ (ParCore.HappyAbsSyn
						   (PrelBase.ZMZN PrelBase.Char)
						   (PrelBase.ZMZN PrelBase.Char)
						   PrelNum.Integer
						   PrelFloat.Double
						   PrelBase.Char));
					     PrelBase.ZdwFalse ->
					       %case (tpl12 lit3 ds) %of (wild1::PrelBase.Bool)
						 {PrelBase.ZdwTrue ->
						    ParCore.happyGoto
						    @ (ParCore.HappyState
						       LexCore.Token
						       (ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 (PrelBase.ZMZN PrelBase.Char)
							 PrelNum.Integer
							 PrelFloat.Double
							 PrelBase.Char)
							->
							PrelBase.ZMZN LexCore.Token ->
							ErrM.Err
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 (PrelBase.ZMZN PrelBase.Char)
							 PrelNum.Integer
							 PrelFloat.Double
							 PrelBase.Char)))
						    @ LexCore.Token
						    @ (ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							(PrelBase.ZMZN PrelBase.Char)
							PrelNum.Integer
							PrelFloat.Double
							PrelBase.Char)
						       ->
						       PrelBase.ZMZN LexCore.Token ->
						       ErrM.Err
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							(PrelBase.ZMZN PrelBase.Char)
							PrelNum.Integer
							PrelFloat.Double
							PrelBase.Char))
						    (%note "InlineMe"
						     actionzu901
						     @ (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							(PrelBase.ZMZN PrelBase.Char)
							PrelNum.Integer
							PrelFloat.Double
							PrelBase.Char));
						  PrelBase.ZdwFalse ->
						    %case (tpl12 lit2 ds) %of (wild2::PrelBase.Bool)
						      {PrelBase.ZdwTrue ->
							 ParCore.happyGoto
							 @ (ParCore.HappyState
							    LexCore.Token
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      (PrelBase.ZMZN PrelBase.Char)
							      (PrelBase.ZMZN PrelBase.Char)
							      PrelNum.Integer
							      PrelFloat.Double
							      PrelBase.Char)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err
							     (ParCore.HappyAbsSyn
							      (PrelBase.ZMZN PrelBase.Char)
							      (PrelBase.ZMZN PrelBase.Char)
							      PrelNum.Integer
							      PrelFloat.Double
							      PrelBase.Char)))
							 @ LexCore.Token
							 @ (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     (PrelBase.ZMZN PrelBase.Char)
							     (PrelBase.ZMZN PrelBase.Char)
							     PrelNum.Integer
							     PrelFloat.Double
							     PrelBase.Char)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err
							    (ParCore.HappyAbsSyn
							     (PrelBase.ZMZN PrelBase.Char)
							     (PrelBase.ZMZN PrelBase.Char)
							     PrelNum.Integer
							     PrelFloat.Double
							     PrelBase.Char))
							 (%note "InlineMe"
							  actionzu911
							  @ (ParCore.HappyAbsSyn
							     (PrelBase.ZMZN PrelBase.Char)
							     (PrelBase.ZMZN PrelBase.Char)
							     PrelNum.Integer
							     PrelFloat.Double
							     PrelBase.Char));
						       PrelBase.ZdwFalse ->
							 %case (tpl12 lit1 ds)
							 %of (wild3::PrelBase.Bool)
							   {PrelBase.ZdwTrue ->
							      ParCore.happyGoto
							      @ (ParCore.HappyState
								 LexCore.Token
								 (ParCore.HappyStk
								  (ParCore.HappyAbsSyn
								   (PrelBase.ZMZN PrelBase.Char)
								   (PrelBase.ZMZN PrelBase.Char)
								   PrelNum.Integer
								   PrelFloat.Double
								   PrelBase.Char)
								  ->
								  PrelBase.ZMZN LexCore.Token ->
								  ErrM.Err
								  (ParCore.HappyAbsSyn
								   (PrelBase.ZMZN PrelBase.Char)
								   (PrelBase.ZMZN PrelBase.Char)
								   PrelNum.Integer
								   PrelFloat.Double
								   PrelBase.Char)))
							      @ LexCore.Token
							      @ (ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  (PrelBase.ZMZN PrelBase.Char)
								  (PrelBase.ZMZN PrelBase.Char)
								  PrelNum.Integer
								  PrelFloat.Double
								  PrelBase.Char)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err
								 (ParCore.HappyAbsSyn
								  (PrelBase.ZMZN PrelBase.Char)
								  (PrelBase.ZMZN PrelBase.Char)
								  PrelNum.Integer
								  PrelFloat.Double
								  PrelBase.Char))
							      actionzu921;
							    PrelBase.ZdwFalse ->
							      %case (tpl12 lit5 ds)
							      %of (wild4::PrelBase.Bool)
								{PrelBase.ZdwTrue ->
								   ParCore.happyGoto
								   @ (ParCore.HappyState
								      LexCore.Token
								      (ParCore.HappyStk
								       (ParCore.HappyAbsSyn
									(PrelBase.ZMZN
									 PrelBase.Char)
									(PrelBase.ZMZN
									 PrelBase.Char)
									PrelNum.Integer
									PrelFloat.Double
									PrelBase.Char)
								       ->
								       PrelBase.ZMZN LexCore.Token
								       ->
								       ErrM.Err
								       (ParCore.HappyAbsSyn
									(PrelBase.ZMZN
									 PrelBase.Char)
									(PrelBase.ZMZN
									 PrelBase.Char)
									PrelNum.Integer
									PrelFloat.Double
									PrelBase.Char)))
								   @ LexCore.Token
								   @ (ParCore.HappyStk
								      (ParCore.HappyAbsSyn
								       (PrelBase.ZMZN PrelBase.Char)
								       (PrelBase.ZMZN PrelBase.Char)
								       PrelNum.Integer
								       PrelFloat.Double
								       PrelBase.Char)
								      ->
								      PrelBase.ZMZN LexCore.Token ->
								      ErrM.Err
								      (ParCore.HappyAbsSyn
								       (PrelBase.ZMZN PrelBase.Char)
								       (PrelBase.ZMZN PrelBase.Char)
								       PrelNum.Integer
								       PrelFloat.Double
								       PrelBase.Char))
								   (%note "InlineMe"
								    actionzu931
								    @ (ParCore.HappyAbsSyn
								       (PrelBase.ZMZN PrelBase.Char)
								       (PrelBase.ZMZN PrelBase.Char)
								       PrelNum.Integer
								       PrelFloat.Double
								       PrelBase.Char));
								 PrelBase.ZdwFalse ->
								   ParCore.happyFail
								   @ (ParCore.HappyAbsSyn
								      (PrelBase.ZMZN PrelBase.Char)
								      (PrelBase.ZMZN PrelBase.Char)
								      PrelNum.Integer
								      PrelFloat.Double
								      PrelBase.Char)
								   @ LexCore.Token
								   @ (PrelBase.ZMZN PrelBase.Char)
								   @ (PrelBase.ZMZN PrelBase.Char)
								   @ PrelNum.Integer
								   @ PrelFloat.Double
								   @ PrelBase.Char}}}}}}};
  actionzu912 :: PrelBase.Int ->
		 PrelBase.Int ->
		 LexCore.Token ->
		 ParCore.HappyState
		 LexCore.Token
		 (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char)
		  ->
		  PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char))
		 ->
		 PrelBase.ZMZN
		 (ParCore.HappyState
		  LexCore.Token
		  (ParCore.HappyStk
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char)
		   ->
		   PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char)))
		 ->
		 ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char)
		 ->
		 PrelBase.ZMZN LexCore.Token ->
		 ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char) =
    ParCore.actionzu9 @ PrelBase.Int PrelNum.zdfNumInt;
  ParCore.actionzu89 :: %forall t b t34 t35 t36 t37 t38 . PrelNum.ZCTNum
							  t
							  ->
							  t ->
							  PrelBase.Int ->
							  b ->
							  ParCore.HappyState
							  b
							  (ParCore.HappyStk
							   (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err
							   (ParCore.HappyAbsSyn
							    t34
							    t35
							    t36
							    t37
							    t38))
							  ->
							  PrelBase.ZMZN
							  (ParCore.HappyState
							   b
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)))
							  ->
							  ParCore.HappyStk
							  (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							  ->
							  PrelBase.ZMZN LexCore.Token ->
							  ErrM.Err
							  (ParCore.HappyAbsSyn
							   t34
							   t35
							   t36
							   t37
							   t38) =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (103::PrelGHC.Intzh))}
	%in \ (ds::t) ->
		%case zddNum %of (tpl::PrelNum.ZCTNum t)
		  {PrelNum.ZdwZCDNum
		   (tpl1::PrelBase.ZCTEq t)
		   (tpl2::PrelShow.ZCTShow t)
		   (tpl3::t -> t -> t)
		   (tpl4::t -> t -> t)
		   (tpl5::t -> t -> t)
		   (tpl6::t -> t)
		   (tpl7::t -> t)
		   (tpl8::t -> t)
		   (tpl9::PrelNum.Integer -> t) ->
		     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
		       {PrelBase.ZdwZCDEq
			(tpl11::t -> t -> PrelBase.Bool)
			(tpl12::t -> t -> PrelBase.Bool) ->
			  %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
			    {PrelBase.ZdwTrue ->
			       ParCore.happyAccept @ PrelBase.Int @ b
			       @ (ParCore.HappyState
				  b
				  (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				   PrelBase.ZMZN LexCore.Token ->
				   ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)))
			       @ (PrelBase.ZMZN
				  (ParCore.HappyState
				   b
				   (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				    PrelBase.ZMZN LexCore.Token ->
				    ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))))
			       @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
			       @ (PrelBase.ZMZN LexCore.Token);
			     PrelBase.ZdwFalse ->
			       ParCore.happyFail @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) @ b
			       @ t34 @ t35 @ t36 @ t37 @ t38}}};
  actionzu891 :: PrelBase.Int ->
		 PrelBase.Int ->
		 LexCore.Token ->
		 ParCore.HappyState
		 LexCore.Token
		 (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char)
		  ->
		  PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char))
		 ->
		 PrelBase.ZMZN
		 (ParCore.HappyState
		  LexCore.Token
		  (ParCore.HappyStk
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char)
		   ->
		   PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char)))
		 ->
		 ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char)
		 ->
		 PrelBase.ZMZN LexCore.Token ->
		 ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char) =
    ParCore.actionzu89 @ PrelBase.Int @ LexCore.Token
    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char
    PrelNum.zdfNumInt;
  ParCore.actionzu10 :: %forall t . PrelNum.ZCTNum t ->
				    t ->
				    PrelBase.Int ->
				    LexCore.Token ->
				    ParCore.HappyState
				    LexCore.Token
				    (ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     ->
				     PrelBase.ZMZN LexCore.Token ->
				     ErrM.Err
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char))
				    ->
				    PrelBase.ZMZN
				    (ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)
				      ->
				      PrelBase.ZMZN LexCore.Token ->
				      ErrM.Err
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)))
				    ->
				    ParCore.HappyStk
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     (PrelBase.ZMZN PrelBase.Char)
				     PrelNum.Integer
				     PrelFloat.Double
				     PrelBase.Char)
				    ->
				    PrelBase.ZMZN LexCore.Token ->
				    ErrM.Err
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     (PrelBase.ZMZN PrelBase.Char)
				     PrelNum.Integer
				     PrelFloat.Double
				     PrelBase.Char) =
    \ @ t (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (68::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (49::PrelGHC.Intzh))}
	    %in %let lit3 :: t =
		       %case zddNum %of (tpl::PrelNum.ZCTNum t)
			 {PrelNum.ZdwZCDNum
			  (tpl1::PrelBase.ZCTEq t)
			  (tpl2::PrelShow.ZCTShow t)
			  (tpl3::t -> t -> t)
			  (tpl4::t -> t -> t)
			  (tpl5::t -> t -> t)
			  (tpl6::t -> t)
			  (tpl7::t -> t)
			  (tpl8::t -> t)
			  (tpl9::PrelNum.Integer -> t) ->
			    tpl9 (PrelNum.ZdwSzh (34::PrelGHC.Intzh))}
		%in %let lit4 :: t =
			   %case zddNum %of (tpl::PrelNum.ZCTNum t)
			     {PrelNum.ZdwZCDNum
			      (tpl1::PrelBase.ZCTEq t)
			      (tpl2::PrelShow.ZCTShow t)
			      (tpl3::t -> t -> t)
			      (tpl4::t -> t -> t)
			      (tpl5::t -> t -> t)
			      (tpl6::t -> t)
			      (tpl7::t -> t)
			      (tpl8::t -> t)
			      (tpl9::PrelNum.Integer -> t) ->
				tpl9 (PrelNum.ZdwSzh (97::PrelGHC.Intzh))}
		    %in %let lit5 :: t =
			       %case zddNum %of (tpl::PrelNum.ZCTNum t)
				 {PrelNum.ZdwZCDNum
				  (tpl1::PrelBase.ZCTEq t)
				  (tpl2::PrelShow.ZCTShow t)
				  (tpl3::t -> t -> t)
				  (tpl4::t -> t -> t)
				  (tpl5::t -> t -> t)
				  (tpl6::t -> t)
				  (tpl7::t -> t)
				  (tpl8::t -> t)
				  (tpl9::PrelNum.Integer -> t) ->
				    tpl9 (PrelNum.ZdwSzh (89::PrelGHC.Intzh))}
			%in %let lit6 :: t =
				   %case zddNum %of (tpl::PrelNum.ZCTNum t)
				     {PrelNum.ZdwZCDNum
				      (tpl1::PrelBase.ZCTEq t)
				      (tpl2::PrelShow.ZCTShow t)
				      (tpl3::t -> t -> t)
				      (tpl4::t -> t -> t)
				      (tpl5::t -> t -> t)
				      (tpl6::t -> t)
				      (tpl7::t -> t)
				      (tpl8::t -> t)
				      (tpl9::PrelNum.Integer -> t) ->
					tpl9 (PrelNum.ZdwSzh (69::PrelGHC.Intzh))}
			    %in \ (ds::t) ->
				    %case zddNum %of (tpl::PrelNum.ZCTNum t)
				      {PrelNum.ZdwZCDNum
				       (tpl1::PrelBase.ZCTEq t)
				       (tpl2::PrelShow.ZCTShow t)
				       (tpl3::t -> t -> t)
				       (tpl4::t -> t -> t)
				       (tpl5::t -> t -> t)
				       (tpl6::t -> t)
				       (tpl7::t -> t)
				       (tpl8::t -> t)
				       (tpl9::PrelNum.Integer -> t) ->
					 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
					   {PrelBase.ZdwZCDEq
					    (tpl11::t -> t -> PrelBase.Bool)
					    (tpl12::t -> t -> PrelBase.Bool) ->
					      %case (tpl12 lit5 ds) %of (wild::PrelBase.Bool)
						{PrelBase.ZdwTrue ->
						   happyShift2
						   (%note "InlineMe"
						    actionzu871
						    @ (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       (PrelBase.ZMZN PrelBase.Char)
						       PrelNum.Integer
						       PrelFloat.Double
						       PrelBase.Char));
						 PrelBase.ZdwFalse ->
						   %case (tpl12 lit4 ds) %of (wild1::PrelBase.Bool)
						     {PrelBase.ZdwTrue ->
							happyShift2
							(ParCore.actionzu32 @ PrelBase.Int
							 @ LexCore.Token
							 @ (PrelBase.ZMZN PrelBase.Char)
							 @ PrelNum.Integer @ PrelFloat.Double
							 @ PrelBase.Char
							 @ (ParCore.HappyAbsSyn
							    (PrelBase.ZMZN PrelBase.Char)
							    (PrelBase.ZMZN PrelBase.Char)
							    PrelNum.Integer
							    PrelFloat.Double
							    PrelBase.Char));
						      PrelBase.ZdwFalse ->
							%case (tpl12 lit3 ds)
							%of (wild2::PrelBase.Bool)
							  {PrelBase.ZdwTrue ->
							     ParCore.happyGoto
							     @ (ParCore.HappyState
								LexCore.Token
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  (PrelBase.ZMZN PrelBase.Char)
								  (PrelBase.ZMZN PrelBase.Char)
								  PrelNum.Integer
								  PrelFloat.Double
								  PrelBase.Char)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err
								 (ParCore.HappyAbsSyn
								  (PrelBase.ZMZN PrelBase.Char)
								  (PrelBase.ZMZN PrelBase.Char)
								  PrelNum.Integer
								  PrelFloat.Double
								  PrelBase.Char)))
							     @ LexCore.Token
							     @ (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 (PrelBase.ZMZN PrelBase.Char)
								 (PrelBase.ZMZN PrelBase.Char)
								 PrelNum.Integer
								 PrelFloat.Double
								 PrelBase.Char)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err
								(ParCore.HappyAbsSyn
								 (PrelBase.ZMZN PrelBase.Char)
								 (PrelBase.ZMZN PrelBase.Char)
								 PrelNum.Integer
								 PrelFloat.Double
								 PrelBase.Char))
							     actionzu751;
							   PrelBase.ZdwFalse ->
							     %case (tpl12 lit2 ds)
							     %of (wild3::PrelBase.Bool)
							       {PrelBase.ZdwTrue ->
								  ParCore.happyGoto
								  @ (ParCore.HappyState
								     LexCore.Token
								     (ParCore.HappyStk
								      (ParCore.HappyAbsSyn
								       (PrelBase.ZMZN PrelBase.Char)
								       (PrelBase.ZMZN PrelBase.Char)
								       PrelNum.Integer
								       PrelFloat.Double
								       PrelBase.Char)
								      ->
								      PrelBase.ZMZN LexCore.Token ->
								      ErrM.Err
								      (ParCore.HappyAbsSyn
								       (PrelBase.ZMZN PrelBase.Char)
								       (PrelBase.ZMZN PrelBase.Char)
								       PrelNum.Integer
								       PrelFloat.Double
								       PrelBase.Char)))
								  @ LexCore.Token
								  @ (ParCore.HappyStk
								     (ParCore.HappyAbsSyn
								      (PrelBase.ZMZN PrelBase.Char)
								      (PrelBase.ZMZN PrelBase.Char)
								      PrelNum.Integer
								      PrelFloat.Double
								      PrelBase.Char)
								     ->
								     PrelBase.ZMZN LexCore.Token ->
								     ErrM.Err
								     (ParCore.HappyAbsSyn
								      (PrelBase.ZMZN PrelBase.Char)
								      (PrelBase.ZMZN PrelBase.Char)
								      PrelNum.Integer
								      PrelFloat.Double
								      PrelBase.Char))
								  actionzu891;
								PrelBase.ZdwFalse ->
								  %case (tpl12 lit1 ds)
								  %of (wild4::PrelBase.Bool)
								    {PrelBase.ZdwTrue ->
								       ParCore.happyGoto
								       @ (ParCore.HappyState
									  LexCore.Token
									  (ParCore.HappyStk
									   (ParCore.HappyAbsSyn
									    (PrelBase.ZMZN
									     PrelBase.Char)
									    (PrelBase.ZMZN
									     PrelBase.Char)
									    PrelNum.Integer
									    PrelFloat.Double
									    PrelBase.Char)
									   ->
									   PrelBase.ZMZN
									   LexCore.Token
									   ->
									   ErrM.Err
									   (ParCore.HappyAbsSyn
									    (PrelBase.ZMZN
									     PrelBase.Char)
									    (PrelBase.ZMZN
									     PrelBase.Char)
									    PrelNum.Integer
									    PrelFloat.Double
									    PrelBase.Char)))
								       @ LexCore.Token
								       @ (ParCore.HappyStk
									  (ParCore.HappyAbsSyn
									   (PrelBase.ZMZN
									    PrelBase.Char)
									   (PrelBase.ZMZN
									    PrelBase.Char)
									   PrelNum.Integer
									   PrelFloat.Double
									   PrelBase.Char)
									  ->
									  PrelBase.ZMZN
									  LexCore.Token
									  ->
									  ErrM.Err
									  (ParCore.HappyAbsSyn
									   (PrelBase.ZMZN
									    PrelBase.Char)
									   (PrelBase.ZMZN
									    PrelBase.Char)
									   PrelNum.Integer
									   PrelFloat.Double
									   PrelBase.Char))
								       (ParCore.actionzu79
									@ PrelBase.Int
									@ LexCore.Token
									@ (PrelBase.ZMZN
									   PrelBase.Char)
									@ (PrelBase.ZMZN
									   PrelBase.Char)
									@ PrelNum.Integer
									@ PrelFloat.Double
									@ PrelBase.Char
									@ (ParCore.HappyAbsSyn
									   (PrelBase.ZMZN
									    PrelBase.Char)
									   (PrelBase.ZMZN
									    PrelBase.Char)
									   PrelNum.Integer
									   PrelFloat.Double
									   PrelBase.Char));
								     PrelBase.ZdwFalse ->
								       %case (tpl12 lit6 ds)
								       %of (wild5::PrelBase.Bool)
									 {PrelBase.ZdwTrue ->
									    ParCore.happyGoto
									    @ (ParCore.HappyState
									       LexCore.Token
									       (ParCore.HappyStk
										(ParCore.HappyAbsSyn
										 (PrelBase.ZMZN
										  PrelBase.Char)
										 (PrelBase.ZMZN
										  PrelBase.Char)
										 PrelNum.Integer
										 PrelFloat.Double
										 PrelBase.Char)
										->
										PrelBase.ZMZN
										LexCore.Token
										->
										ErrM.Err
										(ParCore.HappyAbsSyn
										 (PrelBase.ZMZN
										  PrelBase.Char)
										 (PrelBase.ZMZN
										  PrelBase.Char)
										 PrelNum.Integer
										 PrelFloat.Double
										 PrelBase.Char)))
									    @ LexCore.Token
									    @ (ParCore.HappyStk
									       (ParCore.HappyAbsSyn
										(PrelBase.ZMZN
										 PrelBase.Char)
										(PrelBase.ZMZN
										 PrelBase.Char)
										PrelNum.Integer
										PrelFloat.Double
										PrelBase.Char)
									       ->
									       PrelBase.ZMZN
									       LexCore.Token
									       ->
									       ErrM.Err
									       (ParCore.HappyAbsSyn
										(PrelBase.ZMZN
										 PrelBase.Char)
										(PrelBase.ZMZN
										 PrelBase.Char)
										PrelNum.Integer
										PrelFloat.Double
										PrelBase.Char))
									    (ParCore.actionzu80
									     @ PrelBase.Int
									     @ LexCore.Token
									     @ (PrelBase.ZMZN
										PrelBase.Char)
									     @ (PrelBase.ZMZN
										PrelBase.Char)
									     @ PrelNum.Integer
									     @ PrelFloat.Double
									     @ PrelBase.Char
									     @ (ParCore.HappyAbsSyn
										(PrelBase.ZMZN
										 PrelBase.Char)
										(PrelBase.ZMZN
										 PrelBase.Char)
										PrelNum.Integer
										PrelFloat.Double
										PrelBase.Char));
									  PrelBase.ZdwFalse ->
									    ParCore.happyFail
									    @ (ParCore.HappyAbsSyn
									       (PrelBase.ZMZN
										PrelBase.Char)
									       (PrelBase.ZMZN
										PrelBase.Char)
									       PrelNum.Integer
									       PrelFloat.Double
									       PrelBase.Char)
									    @ LexCore.Token
									    @ (PrelBase.ZMZN
									       PrelBase.Char)
									    @ (PrelBase.ZMZN
									       PrelBase.Char)
									    @ PrelNum.Integer
									    @ PrelFloat.Double
									    @ PrelBase.Char}}}}}}}};
  actionzu1012 :: PrelBase.Int ->
		  PrelBase.Int ->
		  LexCore.Token ->
		  ParCore.HappyState
		  LexCore.Token
		  (ParCore.HappyStk
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char)
		   ->
		   PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char))
		  ->
		  PrelBase.ZMZN
		  (ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelNum.Integer
		     PrelFloat.Double
		     PrelBase.Char)
		    ->
		    PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelNum.Integer
		     PrelFloat.Double
		     PrelBase.Char)))
		  ->
		  ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char)
		  ->
		  PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char) =
    ParCore.actionzu10 @ PrelBase.Int PrelNum.zdfNumInt;
  ParCore.actionzu88 :: %forall t . PrelNum.ZCTNum t ->
				    t ->
				    PrelBase.Int ->
				    LexCore.Token ->
				    ParCore.HappyState
				    LexCore.Token
				    (ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     ->
				     PrelBase.ZMZN LexCore.Token ->
				     ErrM.Err
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char))
				    ->
				    PrelBase.ZMZN
				    (ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)
				      ->
				      PrelBase.ZMZN LexCore.Token ->
				      ErrM.Err
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)))
				    ->
				    ParCore.HappyStk
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     (PrelBase.ZMZN PrelBase.Char)
				     PrelNum.Integer
				     PrelFloat.Double
				     PrelBase.Char)
				    ->
				    PrelBase.ZMZN LexCore.Token ->
				    ErrM.Err
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     (PrelBase.ZMZN PrelBase.Char)
				     PrelNum.Integer
				     PrelFloat.Double
				     PrelBase.Char) =
    \ @ t (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (68::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (49::PrelGHC.Intzh))}
	    %in %let lit3 :: t =
		       %case zddNum %of (tpl::PrelNum.ZCTNum t)
			 {PrelNum.ZdwZCDNum
			  (tpl1::PrelBase.ZCTEq t)
			  (tpl2::PrelShow.ZCTShow t)
			  (tpl3::t -> t -> t)
			  (tpl4::t -> t -> t)
			  (tpl5::t -> t -> t)
			  (tpl6::t -> t)
			  (tpl7::t -> t)
			  (tpl8::t -> t)
			  (tpl9::PrelNum.Integer -> t) ->
			    tpl9 (PrelNum.ZdwSzh (34::PrelGHC.Intzh))}
		%in %let lit4 :: t =
			   %case zddNum %of (tpl::PrelNum.ZCTNum t)
			     {PrelNum.ZdwZCDNum
			      (tpl1::PrelBase.ZCTEq t)
			      (tpl2::PrelShow.ZCTShow t)
			      (tpl3::t -> t -> t)
			      (tpl4::t -> t -> t)
			      (tpl5::t -> t -> t)
			      (tpl6::t -> t)
			      (tpl7::t -> t)
			      (tpl8::t -> t)
			      (tpl9::PrelNum.Integer -> t) ->
				tpl9 (PrelNum.ZdwSzh (103::PrelGHC.Intzh))}
		    %in %let lit5 :: t =
			       %case zddNum %of (tpl::PrelNum.ZCTNum t)
				 {PrelNum.ZdwZCDNum
				  (tpl1::PrelBase.ZCTEq t)
				  (tpl2::PrelShow.ZCTShow t)
				  (tpl3::t -> t -> t)
				  (tpl4::t -> t -> t)
				  (tpl5::t -> t -> t)
				  (tpl6::t -> t)
				  (tpl7::t -> t)
				  (tpl8::t -> t)
				  (tpl9::PrelNum.Integer -> t) ->
				    tpl9 (PrelNum.ZdwSzh (97::PrelGHC.Intzh))}
			%in %let lit6 :: t =
				   %case zddNum %of (tpl::PrelNum.ZCTNum t)
				     {PrelNum.ZdwZCDNum
				      (tpl1::PrelBase.ZCTEq t)
				      (tpl2::PrelShow.ZCTShow t)
				      (tpl3::t -> t -> t)
				      (tpl4::t -> t -> t)
				      (tpl5::t -> t -> t)
				      (tpl6::t -> t)
				      (tpl7::t -> t)
				      (tpl8::t -> t)
				      (tpl9::PrelNum.Integer -> t) ->
					tpl9 (PrelNum.ZdwSzh (89::PrelGHC.Intzh))}
			    %in %let lit7 :: t =
				       %case zddNum %of (tpl::PrelNum.ZCTNum t)
					 {PrelNum.ZdwZCDNum
					  (tpl1::PrelBase.ZCTEq t)
					  (tpl2::PrelShow.ZCTShow t)
					  (tpl3::t -> t -> t)
					  (tpl4::t -> t -> t)
					  (tpl5::t -> t -> t)
					  (tpl6::t -> t)
					  (tpl7::t -> t)
					  (tpl8::t -> t)
					  (tpl9::PrelNum.Integer -> t) ->
					    tpl9 (PrelNum.ZdwSzh (79::PrelGHC.Intzh))}
				%in %let lit8 :: t =
					   %case zddNum %of (tpl::PrelNum.ZCTNum t)
					     {PrelNum.ZdwZCDNum
					      (tpl1::PrelBase.ZCTEq t)
					      (tpl2::PrelShow.ZCTShow t)
					      (tpl3::t -> t -> t)
					      (tpl4::t -> t -> t)
					      (tpl5::t -> t -> t)
					      (tpl6::t -> t)
					      (tpl7::t -> t)
					      (tpl8::t -> t)
					      (tpl9::PrelNum.Integer -> t) ->
						tpl9 (PrelNum.ZdwSzh (69::PrelGHC.Intzh))}
				    %in \ (ds::t) ->
					    %case zddNum %of (tpl::PrelNum.ZCTNum t)
					      {PrelNum.ZdwZCDNum
					       (tpl1::PrelBase.ZCTEq t)
					       (tpl2::PrelShow.ZCTShow t)
					       (tpl3::t -> t -> t)
					       (tpl4::t -> t -> t)
					       (tpl5::t -> t -> t)
					       (tpl6::t -> t)
					       (tpl7::t -> t)
					       (tpl8::t -> t)
					       (tpl9::PrelNum.Integer -> t) ->
						 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
						   {PrelBase.ZdwZCDEq
						    (tpl11::t -> t -> PrelBase.Bool)
						    (tpl12::t -> t -> PrelBase.Bool) ->
						      %case (tpl12 lit7 ds)
						      %of (wild::PrelBase.Bool)
							{PrelBase.ZdwTrue ->
							   happyShift2 actionzu1251;
							 PrelBase.ZdwFalse ->
							   %case (tpl12 lit6 ds)
							   %of (wild1::PrelBase.Bool)
							     {PrelBase.ZdwTrue ->
								happyShift2
								(%note "InlineMe"
								 actionzu871
								 @ (ParCore.HappyAbsSyn
								    (PrelBase.ZMZN PrelBase.Char)
								    (PrelBase.ZMZN PrelBase.Char)
								    PrelNum.Integer
								    PrelFloat.Double
								    PrelBase.Char));
							      PrelBase.ZdwFalse ->
								%case (tpl12 lit5 ds)
								%of (wild2::PrelBase.Bool)
								  {PrelBase.ZdwTrue ->
								     happyShift2
								     (ParCore.actionzu32
								      @ PrelBase.Int @ LexCore.Token
								      @ (PrelBase.ZMZN
									 PrelBase.Char)
								      @ PrelNum.Integer
								      @ PrelFloat.Double
								      @ PrelBase.Char
								      @ (ParCore.HappyAbsSyn
									 (PrelBase.ZMZN
									  PrelBase.Char)
									 (PrelBase.ZMZN
									  PrelBase.Char)
									 PrelNum.Integer
									 PrelFloat.Double
									 PrelBase.Char));
								   PrelBase.ZdwFalse ->
								     %case (tpl12 lit4 ds)
								     %of (wild3::PrelBase.Bool)
								       {PrelBase.ZdwTrue ->
									  ParCore.happyAccept
									  @ PrelBase.Int
									  @ LexCore.Token
									  @ (ParCore.HappyState
									     LexCore.Token
									     (ParCore.HappyStk
									      (ParCore.HappyAbsSyn
									       (PrelBase.ZMZN
										PrelBase.Char)
									       (PrelBase.ZMZN
										PrelBase.Char)
									       PrelNum.Integer
									       PrelFloat.Double
									       PrelBase.Char)
									      ->
									      PrelBase.ZMZN
									      LexCore.Token
									      ->
									      ErrM.Err
									      (ParCore.HappyAbsSyn
									       (PrelBase.ZMZN
										PrelBase.Char)
									       (PrelBase.ZMZN
										PrelBase.Char)
									       PrelNum.Integer
									       PrelFloat.Double
									       PrelBase.Char)))
									  @ (PrelBase.ZMZN
									     (ParCore.HappyState
									      LexCore.Token
									      (ParCore.HappyStk
									       (ParCore.HappyAbsSyn
										(PrelBase.ZMZN
										 PrelBase.Char)
										(PrelBase.ZMZN
										 PrelBase.Char)
										PrelNum.Integer
										PrelFloat.Double
										PrelBase.Char)
									       ->
									       PrelBase.ZMZN
									       LexCore.Token
									       ->
									       ErrM.Err
									       (ParCore.HappyAbsSyn
										(PrelBase.ZMZN
										 PrelBase.Char)
										(PrelBase.ZMZN
										 PrelBase.Char)
										PrelNum.Integer
										PrelFloat.Double
										PrelBase.Char))))
									  @ (ParCore.HappyAbsSyn
									     (PrelBase.ZMZN
									      PrelBase.Char)
									     (PrelBase.ZMZN
									      PrelBase.Char)
									     PrelNum.Integer
									     PrelFloat.Double
									     PrelBase.Char)
									  @ (PrelBase.ZMZN
									     LexCore.Token);
									PrelBase.ZdwFalse ->
									  %case (tpl12 lit3 ds)
									  %of (wild4::PrelBase.Bool)
									    {PrelBase.ZdwTrue ->
									       ParCore.happyGoto
									       @ (ParCore.HappyState
										  LexCore.Token
										  (ParCore.HappyStk
										   (ParCore.HappyAbsSyn
										    (PrelBase.ZMZN
										     PrelBase.Char)
										    (PrelBase.ZMZN
										     PrelBase.Char)
										    PrelNum.Integer
										    PrelFloat.Double
										    PrelBase.Char)
										   ->
										   PrelBase.ZMZN
										   LexCore.Token
										   ->
										   ErrM.Err
										   (ParCore.HappyAbsSyn
										    (PrelBase.ZMZN
										     PrelBase.Char)
										    (PrelBase.ZMZN
										     PrelBase.Char)
										    PrelNum.Integer
										    PrelFloat.Double
										    PrelBase.Char)))
									       @ LexCore.Token
									       @ (ParCore.HappyStk
										  (ParCore.HappyAbsSyn
										   (PrelBase.ZMZN
										    PrelBase.Char)
										   (PrelBase.ZMZN
										    PrelBase.Char)
										   PrelNum.Integer
										   PrelFloat.Double
										   PrelBase.Char)
										  ->
										  PrelBase.ZMZN
										  LexCore.Token
										  ->
										  ErrM.Err
										  (ParCore.HappyAbsSyn
										   (PrelBase.ZMZN
										    PrelBase.Char)
										   (PrelBase.ZMZN
										    PrelBase.Char)
										   PrelNum.Integer
										   PrelFloat.Double
										   PrelBase.Char))
									       actionzu751;
									     PrelBase.ZdwFalse ->
									       %case (tpl12 lit2 ds)
									       %of (wild5::PrelBase.Bool)
										 {PrelBase.ZdwTrue
										  ->
										    ParCore.happyGoto
										    @ (ParCore.HappyState
										       LexCore.Token
										       (ParCore.HappyStk
											(ParCore.HappyAbsSyn
											 (PrelBase.ZMZN
											  PrelBase.Char)
											 (PrelBase.ZMZN
											  PrelBase.Char)
											 PrelNum.Integer
											 PrelFloat.Double
											 PrelBase.Char)
											->
											PrelBase.ZMZN
											LexCore.Token
											->
											ErrM.Err
											(ParCore.HappyAbsSyn
											 (PrelBase.ZMZN
											  PrelBase.Char)
											 (PrelBase.ZMZN
											  PrelBase.Char)
											 PrelNum.Integer
											 PrelFloat.Double
											 PrelBase.Char)))
										    @ LexCore.Token
										    @ (ParCore.HappyStk
										       (ParCore.HappyAbsSyn
											(PrelBase.ZMZN
											 PrelBase.Char)
											(PrelBase.ZMZN
											 PrelBase.Char)
											PrelNum.Integer
											PrelFloat.Double
											PrelBase.Char)
										       ->
										       PrelBase.ZMZN
										       LexCore.Token
										       ->
										       ErrM.Err
										       (ParCore.HappyAbsSyn
											(PrelBase.ZMZN
											 PrelBase.Char)
											(PrelBase.ZMZN
											 PrelBase.Char)
											PrelNum.Integer
											PrelFloat.Double
											PrelBase.Char))
										    (ParCore.actionzu124
										     @ PrelBase.Int
										     @ LexCore.Token
										     @ (PrelBase.ZMZN
											PrelBase.Char)
										     @ (PrelBase.ZMZN
											PrelBase.Char)
										     @ PrelNum.Integer
										     @ PrelFloat.Double
										     @ PrelBase.Char
										     @ (ParCore.HappyAbsSyn
											(PrelBase.ZMZN
											 PrelBase.Char)
											(PrelBase.ZMZN
											 PrelBase.Char)
											PrelNum.Integer
											PrelFloat.Double
											PrelBase.Char));
										  PrelBase.ZdwFalse
										  ->
										    %case (tpl12
											   lit1 ds)
										    %of (wild6::PrelBase.Bool)
										      {PrelBase.ZdwTrue
										       ->
											 ParCore.happyGoto
											 @ (ParCore.HappyState
											    LexCore.Token
											    (ParCore.HappyStk
											     (ParCore.HappyAbsSyn
											      (PrelBase.ZMZN
											       PrelBase.Char)
											      (PrelBase.ZMZN
											       PrelBase.Char)
											      PrelNum.Integer
											      PrelFloat.Double
											      PrelBase.Char)
											     ->
											     PrelBase.ZMZN
											     LexCore.Token
											     ->
											     ErrM.Err
											     (ParCore.HappyAbsSyn
											      (PrelBase.ZMZN
											       PrelBase.Char)
											      (PrelBase.ZMZN
											       PrelBase.Char)
											      PrelNum.Integer
											      PrelFloat.Double
											      PrelBase.Char)))
											 @ LexCore.Token
											 @ (ParCore.HappyStk
											    (ParCore.HappyAbsSyn
											     (PrelBase.ZMZN
											      PrelBase.Char)
											     (PrelBase.ZMZN
											      PrelBase.Char)
											     PrelNum.Integer
											     PrelFloat.Double
											     PrelBase.Char)
											    ->
											    PrelBase.ZMZN
											    LexCore.Token
											    ->
											    ErrM.Err
											    (ParCore.HappyAbsSyn
											     (PrelBase.ZMZN
											      PrelBase.Char)
											     (PrelBase.ZMZN
											      PrelBase.Char)
											     PrelNum.Integer
											     PrelFloat.Double
											     PrelBase.Char))
											 (ParCore.actionzu79
											  @ PrelBase.Int
											  @ LexCore.Token
											  @ (PrelBase.ZMZN
											     PrelBase.Char)
											  @ (PrelBase.ZMZN
											     PrelBase.Char)
											  @ PrelNum.Integer
											  @ PrelFloat.Double
											  @ PrelBase.Char
											  @ (ParCore.HappyAbsSyn
											     (PrelBase.ZMZN
											      PrelBase.Char)
											     (PrelBase.ZMZN
											      PrelBase.Char)
											     PrelNum.Integer
											     PrelFloat.Double
											     PrelBase.Char));
										       PrelBase.ZdwFalse
										       ->
											 %case (tpl12
												lit8
												ds)
											 %of (wild7::PrelBase.Bool)
											   {PrelBase.ZdwTrue
											    ->
											      ParCore.happyGoto
											      @ (ParCore.HappyState
												 LexCore.Token
												 (ParCore.HappyStk
												  (ParCore.HappyAbsSyn
												   (PrelBase.ZMZN
												    PrelBase.Char)
												   (PrelBase.ZMZN
												    PrelBase.Char)
												   PrelNum.Integer
												   PrelFloat.Double
												   PrelBase.Char)
												  ->
												  PrelBase.ZMZN
												  LexCore.Token
												  ->
												  ErrM.Err
												  (ParCore.HappyAbsSyn
												   (PrelBase.ZMZN
												    PrelBase.Char)
												   (PrelBase.ZMZN
												    PrelBase.Char)
												   PrelNum.Integer
												   PrelFloat.Double
												   PrelBase.Char)))
											      @ LexCore.Token
											      @ (ParCore.HappyStk
												 (ParCore.HappyAbsSyn
												  (PrelBase.ZMZN
												   PrelBase.Char)
												  (PrelBase.ZMZN
												   PrelBase.Char)
												  PrelNum.Integer
												  PrelFloat.Double
												  PrelBase.Char)
												 ->
												 PrelBase.ZMZN
												 LexCore.Token
												 ->
												 ErrM.Err
												 (ParCore.HappyAbsSyn
												  (PrelBase.ZMZN
												   PrelBase.Char)
												  (PrelBase.ZMZN
												   PrelBase.Char)
												  PrelNum.Integer
												  PrelFloat.Double
												  PrelBase.Char))
											      (ParCore.actionzu80
											       @ PrelBase.Int
											       @ LexCore.Token
											       @ (PrelBase.ZMZN
												  PrelBase.Char)
											       @ (PrelBase.ZMZN
												  PrelBase.Char)
											       @ PrelNum.Integer
											       @ PrelFloat.Double
											       @ PrelBase.Char
											       @ (ParCore.HappyAbsSyn
												  (PrelBase.ZMZN
												   PrelBase.Char)
												  (PrelBase.ZMZN
												   PrelBase.Char)
												  PrelNum.Integer
												  PrelFloat.Double
												  PrelBase.Char));
											    PrelBase.ZdwFalse
											    ->
											      ParCore.happyFail
											      @ (ParCore.HappyAbsSyn
												 (PrelBase.ZMZN
												  PrelBase.Char)
												 (PrelBase.ZMZN
												  PrelBase.Char)
												 PrelNum.Integer
												 PrelFloat.Double
												 PrelBase.Char)
											      @ LexCore.Token
											      @ (PrelBase.ZMZN
												 PrelBase.Char)
											      @ (PrelBase.ZMZN
												 PrelBase.Char)
											      @ PrelNum.Integer
											      @ PrelFloat.Double
											      @ PrelBase.Char}}}}}}}}}};
  actionzu881 :: PrelBase.Int ->
		 PrelBase.Int ->
		 LexCore.Token ->
		 ParCore.HappyState
		 LexCore.Token
		 (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char)
		  ->
		  PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char))
		 ->
		 PrelBase.ZMZN
		 (ParCore.HappyState
		  LexCore.Token
		  (ParCore.HappyStk
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char)
		   ->
		   PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char)))
		 ->
		 ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char)
		 ->
		 PrelBase.ZMZN LexCore.Token ->
		 ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char) =
    ParCore.actionzu88 @ PrelBase.Int PrelNum.zdfNumInt;
  ParCore.actionzu11 :: %forall t . PrelNum.ZCTNum t ->
				    t ->
				    PrelBase.Int ->
				    LexCore.Token ->
				    ParCore.HappyState
				    LexCore.Token
				    (ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     ->
				     PrelBase.ZMZN LexCore.Token ->
				     ErrM.Err
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char))
				    ->
				    PrelBase.ZMZN
				    (ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)
				      ->
				      PrelBase.ZMZN LexCore.Token ->
				      ErrM.Err
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)))
				    ->
				    ParCore.HappyStk
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     (PrelBase.ZMZN PrelBase.Char)
				     PrelNum.Integer
				     PrelFloat.Double
				     PrelBase.Char)
				    ->
				    PrelBase.ZMZN LexCore.Token ->
				    ErrM.Err
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     (PrelBase.ZMZN PrelBase.Char)
				     PrelNum.Integer
				     PrelFloat.Double
				     PrelBase.Char) =
    \ @ t (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (68::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (50::PrelGHC.Intzh))}
	    %in %let lit3 :: t =
		       %case zddNum %of (tpl::PrelNum.ZCTNum t)
			 {PrelNum.ZdwZCDNum
			  (tpl1::PrelBase.ZCTEq t)
			  (tpl2::PrelShow.ZCTShow t)
			  (tpl3::t -> t -> t)
			  (tpl4::t -> t -> t)
			  (tpl5::t -> t -> t)
			  (tpl6::t -> t)
			  (tpl7::t -> t)
			  (tpl8::t -> t)
			  (tpl9::PrelNum.Integer -> t) ->
			    tpl9 (PrelNum.ZdwSzh (49::PrelGHC.Intzh))}
		%in %let lit4 :: t =
			   %case zddNum %of (tpl::PrelNum.ZCTNum t)
			     {PrelNum.ZdwZCDNum
			      (tpl1::PrelBase.ZCTEq t)
			      (tpl2::PrelShow.ZCTShow t)
			      (tpl3::t -> t -> t)
			      (tpl4::t -> t -> t)
			      (tpl5::t -> t -> t)
			      (tpl6::t -> t)
			      (tpl7::t -> t)
			      (tpl8::t -> t)
			      (tpl9::PrelNum.Integer -> t) ->
				tpl9 (PrelNum.ZdwSzh (34::PrelGHC.Intzh))}
		    %in %let lit5 :: t =
			       %case zddNum %of (tpl::PrelNum.ZCTNum t)
				 {PrelNum.ZdwZCDNum
				  (tpl1::PrelBase.ZCTEq t)
				  (tpl2::PrelShow.ZCTShow t)
				  (tpl3::t -> t -> t)
				  (tpl4::t -> t -> t)
				  (tpl5::t -> t -> t)
				  (tpl6::t -> t)
				  (tpl7::t -> t)
				  (tpl8::t -> t)
				  (tpl9::PrelNum.Integer -> t) ->
				    tpl9 (PrelNum.ZdwSzh (97::PrelGHC.Intzh))}
			%in %let lit6 :: t =
				   %case zddNum %of (tpl::PrelNum.ZCTNum t)
				     {PrelNum.ZdwZCDNum
				      (tpl1::PrelBase.ZCTEq t)
				      (tpl2::PrelShow.ZCTShow t)
				      (tpl3::t -> t -> t)
				      (tpl4::t -> t -> t)
				      (tpl5::t -> t -> t)
				      (tpl6::t -> t)
				      (tpl7::t -> t)
				      (tpl8::t -> t)
				      (tpl9::PrelNum.Integer -> t) ->
					tpl9 (PrelNum.ZdwSzh (89::PrelGHC.Intzh))}
			    %in %let lit7 :: t =
				       %case zddNum %of (tpl::PrelNum.ZCTNum t)
					 {PrelNum.ZdwZCDNum
					  (tpl1::PrelBase.ZCTEq t)
					  (tpl2::PrelShow.ZCTShow t)
					  (tpl3::t -> t -> t)
					  (tpl4::t -> t -> t)
					  (tpl5::t -> t -> t)
					  (tpl6::t -> t)
					  (tpl7::t -> t)
					  (tpl8::t -> t)
					  (tpl9::PrelNum.Integer -> t) ->
					    tpl9 (PrelNum.ZdwSzh (69::PrelGHC.Intzh))}
				%in \ (ds::t) ->
					%case zddNum %of (tpl::PrelNum.ZCTNum t)
					  {PrelNum.ZdwZCDNum
					   (tpl1::PrelBase.ZCTEq t)
					   (tpl2::PrelShow.ZCTShow t)
					   (tpl3::t -> t -> t)
					   (tpl4::t -> t -> t)
					   (tpl5::t -> t -> t)
					   (tpl6::t -> t)
					   (tpl7::t -> t)
					   (tpl8::t -> t)
					   (tpl9::PrelNum.Integer -> t) ->
					     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
					       {PrelBase.ZdwZCDEq
						(tpl11::t -> t -> PrelBase.Bool)
						(tpl12::t -> t -> PrelBase.Bool) ->
						  %case (tpl12 lit6 ds) %of (wild::PrelBase.Bool)
						    {PrelBase.ZdwTrue ->
						       happyShift2
						       (%note "InlineMe"
							actionzu871
							@ (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   (PrelBase.ZMZN PrelBase.Char)
							   PrelNum.Integer
							   PrelFloat.Double
							   PrelBase.Char));
						     PrelBase.ZdwFalse ->
						       %case (tpl12 lit5 ds)
						       %of (wild1::PrelBase.Bool)
							 {PrelBase.ZdwTrue ->
							    happyShift2
							    (ParCore.actionzu32 @ PrelBase.Int
							     @ LexCore.Token
							     @ (PrelBase.ZMZN PrelBase.Char)
							     @ PrelNum.Integer @ PrelFloat.Double
							     @ PrelBase.Char
							     @ (ParCore.HappyAbsSyn
								(PrelBase.ZMZN PrelBase.Char)
								(PrelBase.ZMZN PrelBase.Char)
								PrelNum.Integer
								PrelFloat.Double
								PrelBase.Char));
							  PrelBase.ZdwFalse ->
							    %case (tpl12 lit4 ds)
							    %of (wild2::PrelBase.Bool)
							      {PrelBase.ZdwTrue ->
								 ParCore.happyGoto
								 @ (ParCore.HappyState
								    LexCore.Token
								    (ParCore.HappyStk
								     (ParCore.HappyAbsSyn
								      (PrelBase.ZMZN PrelBase.Char)
								      (PrelBase.ZMZN PrelBase.Char)
								      PrelNum.Integer
								      PrelFloat.Double
								      PrelBase.Char)
								     ->
								     PrelBase.ZMZN LexCore.Token ->
								     ErrM.Err
								     (ParCore.HappyAbsSyn
								      (PrelBase.ZMZN PrelBase.Char)
								      (PrelBase.ZMZN PrelBase.Char)
								      PrelNum.Integer
								      PrelFloat.Double
								      PrelBase.Char)))
								 @ LexCore.Token
								 @ (ParCore.HappyStk
								    (ParCore.HappyAbsSyn
								     (PrelBase.ZMZN PrelBase.Char)
								     (PrelBase.ZMZN PrelBase.Char)
								     PrelNum.Integer
								     PrelFloat.Double
								     PrelBase.Char)
								    ->
								    PrelBase.ZMZN LexCore.Token ->
								    ErrM.Err
								    (ParCore.HappyAbsSyn
								     (PrelBase.ZMZN PrelBase.Char)
								     (PrelBase.ZMZN PrelBase.Char)
								     PrelNum.Integer
								     PrelFloat.Double
								     PrelBase.Char))
								 actionzu751;
							       PrelBase.ZdwFalse ->
								 %case (tpl12 lit3 ds)
								 %of (wild3::PrelBase.Bool)
								   {PrelBase.ZdwTrue ->
								      ParCore.happyGoto
								      @ (ParCore.HappyState
									 LexCore.Token
									 (ParCore.HappyStk
									  (ParCore.HappyAbsSyn
									   (PrelBase.ZMZN
									    PrelBase.Char)
									   (PrelBase.ZMZN
									    PrelBase.Char)
									   PrelNum.Integer
									   PrelFloat.Double
									   PrelBase.Char)
									  ->
									  PrelBase.ZMZN
									  LexCore.Token
									  ->
									  ErrM.Err
									  (ParCore.HappyAbsSyn
									   (PrelBase.ZMZN
									    PrelBase.Char)
									   (PrelBase.ZMZN
									    PrelBase.Char)
									   PrelNum.Integer
									   PrelFloat.Double
									   PrelBase.Char)))
								      @ LexCore.Token
								      @ (ParCore.HappyStk
									 (ParCore.HappyAbsSyn
									  (PrelBase.ZMZN
									   PrelBase.Char)
									  (PrelBase.ZMZN
									   PrelBase.Char)
									  PrelNum.Integer
									  PrelFloat.Double
									  PrelBase.Char)
									 ->
									 PrelBase.ZMZN LexCore.Token
									 ->
									 ErrM.Err
									 (ParCore.HappyAbsSyn
									  (PrelBase.ZMZN
									   PrelBase.Char)
									  (PrelBase.ZMZN
									   PrelBase.Char)
									  PrelNum.Integer
									  PrelFloat.Double
									  PrelBase.Char))
								      (ParCore.actionzu76
								       @ PrelBase.Int
								       @ LexCore.Token
								       @ (PrelBase.ZMZN
									  PrelBase.Char)
								       @ (PrelBase.ZMZN
									  PrelBase.Char)
								       @ PrelNum.Integer
								       @ PrelFloat.Double
								       @ PrelBase.Char
								       @ (ParCore.HappyAbsSyn
									  (PrelBase.ZMZN
									   PrelBase.Char)
									  (PrelBase.ZMZN
									   PrelBase.Char)
									  PrelNum.Integer
									  PrelFloat.Double
									  PrelBase.Char));
								    PrelBase.ZdwFalse ->
								      %case (tpl12 lit2 ds)
								      %of (wild4::PrelBase.Bool)
									{PrelBase.ZdwTrue ->
									   ParCore.happyGoto
									   @ (ParCore.HappyState
									      LexCore.Token
									      (ParCore.HappyStk
									       (ParCore.HappyAbsSyn
										(PrelBase.ZMZN
										 PrelBase.Char)
										(PrelBase.ZMZN
										 PrelBase.Char)
										PrelNum.Integer
										PrelFloat.Double
										PrelBase.Char)
									       ->
									       PrelBase.ZMZN
									       LexCore.Token
									       ->
									       ErrM.Err
									       (ParCore.HappyAbsSyn
										(PrelBase.ZMZN
										 PrelBase.Char)
										(PrelBase.ZMZN
										 PrelBase.Char)
										PrelNum.Integer
										PrelFloat.Double
										PrelBase.Char)))
									   @ LexCore.Token
									   @ (ParCore.HappyStk
									      (ParCore.HappyAbsSyn
									       (PrelBase.ZMZN
										PrelBase.Char)
									       (PrelBase.ZMZN
										PrelBase.Char)
									       PrelNum.Integer
									       PrelFloat.Double
									       PrelBase.Char)
									      ->
									      PrelBase.ZMZN
									      LexCore.Token
									      ->
									      ErrM.Err
									      (ParCore.HappyAbsSyn
									       (PrelBase.ZMZN
										PrelBase.Char)
									       (PrelBase.ZMZN
										PrelBase.Char)
									       PrelNum.Integer
									       PrelFloat.Double
									       PrelBase.Char))
									   actionzu881;
									 PrelBase.ZdwFalse ->
									   %case (tpl12 lit1 ds)
									   %of (wild5::PrelBase.Bool)
									     {PrelBase.ZdwTrue ->
										ParCore.happyGoto
										@ (ParCore.HappyState
										   LexCore.Token
										   (ParCore.HappyStk
										    (ParCore.HappyAbsSyn
										     (PrelBase.ZMZN
										      PrelBase.Char)
										     (PrelBase.ZMZN
										      PrelBase.Char)
										     PrelNum.Integer
										     PrelFloat.Double
										     PrelBase.Char)
										    ->
										    PrelBase.ZMZN
										    LexCore.Token
										    ->
										    ErrM.Err
										    (ParCore.HappyAbsSyn
										     (PrelBase.ZMZN
										      PrelBase.Char)
										     (PrelBase.ZMZN
										      PrelBase.Char)
										     PrelNum.Integer
										     PrelFloat.Double
										     PrelBase.Char)))
										@ LexCore.Token
										@ (ParCore.HappyStk
										   (ParCore.HappyAbsSyn
										    (PrelBase.ZMZN
										     PrelBase.Char)
										    (PrelBase.ZMZN
										     PrelBase.Char)
										    PrelNum.Integer
										    PrelFloat.Double
										    PrelBase.Char)
										   ->
										   PrelBase.ZMZN
										   LexCore.Token
										   ->
										   ErrM.Err
										   (ParCore.HappyAbsSyn
										    (PrelBase.ZMZN
										     PrelBase.Char)
										    (PrelBase.ZMZN
										     PrelBase.Char)
										    PrelNum.Integer
										    PrelFloat.Double
										    PrelBase.Char))
										(ParCore.actionzu79
										 @ PrelBase.Int
										 @ LexCore.Token
										 @ (PrelBase.ZMZN
										    PrelBase.Char)
										 @ (PrelBase.ZMZN
										    PrelBase.Char)
										 @ PrelNum.Integer
										 @ PrelFloat.Double
										 @ PrelBase.Char
										 @ (ParCore.HappyAbsSyn
										    (PrelBase.ZMZN
										     PrelBase.Char)
										    (PrelBase.ZMZN
										     PrelBase.Char)
										    PrelNum.Integer
										    PrelFloat.Double
										    PrelBase.Char));
									      PrelBase.ZdwFalse ->
										%case (tpl12 lit7
										       ds)
										%of (wild6::PrelBase.Bool)
										  {PrelBase.ZdwTrue
										   ->
										     ParCore.happyGoto
										     @ (ParCore.HappyState
											LexCore.Token
											(ParCore.HappyStk
											 (ParCore.HappyAbsSyn
											  (PrelBase.ZMZN
											   PrelBase.Char)
											  (PrelBase.ZMZN
											   PrelBase.Char)
											  PrelNum.Integer
											  PrelFloat.Double
											  PrelBase.Char)
											 ->
											 PrelBase.ZMZN
											 LexCore.Token
											 ->
											 ErrM.Err
											 (ParCore.HappyAbsSyn
											  (PrelBase.ZMZN
											   PrelBase.Char)
											  (PrelBase.ZMZN
											   PrelBase.Char)
											  PrelNum.Integer
											  PrelFloat.Double
											  PrelBase.Char)))
										     @ LexCore.Token
										     @ (ParCore.HappyStk
											(ParCore.HappyAbsSyn
											 (PrelBase.ZMZN
											  PrelBase.Char)
											 (PrelBase.ZMZN
											  PrelBase.Char)
											 PrelNum.Integer
											 PrelFloat.Double
											 PrelBase.Char)
											->
											PrelBase.ZMZN
											LexCore.Token
											->
											ErrM.Err
											(ParCore.HappyAbsSyn
											 (PrelBase.ZMZN
											  PrelBase.Char)
											 (PrelBase.ZMZN
											  PrelBase.Char)
											 PrelNum.Integer
											 PrelFloat.Double
											 PrelBase.Char))
										     (ParCore.actionzu80
										      @ PrelBase.Int
										      @ LexCore.Token
										      @ (PrelBase.ZMZN
											 PrelBase.Char)
										      @ (PrelBase.ZMZN
											 PrelBase.Char)
										      @ PrelNum.Integer
										      @ PrelFloat.Double
										      @ PrelBase.Char
										      @ (ParCore.HappyAbsSyn
											 (PrelBase.ZMZN
											  PrelBase.Char)
											 (PrelBase.ZMZN
											  PrelBase.Char)
											 PrelNum.Integer
											 PrelFloat.Double
											 PrelBase.Char));
										   PrelBase.ZdwFalse
										   ->
										     ParCore.happyFail
										     @ (ParCore.HappyAbsSyn
											(PrelBase.ZMZN
											 PrelBase.Char)
											(PrelBase.ZMZN
											 PrelBase.Char)
											PrelNum.Integer
											PrelFloat.Double
											PrelBase.Char)
										     @ LexCore.Token
										     @ (PrelBase.ZMZN
											PrelBase.Char)
										     @ (PrelBase.ZMZN
											PrelBase.Char)
										     @ PrelNum.Integer
										     @ PrelFloat.Double
										     @ PrelBase.Char}}}}}}}}};
  actionzu1121 :: PrelBase.Int ->
		  PrelBase.Int ->
		  LexCore.Token ->
		  ParCore.HappyState
		  LexCore.Token
		  (ParCore.HappyStk
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char)
		   ->
		   PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char))
		  ->
		  PrelBase.ZMZN
		  (ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelNum.Integer
		     PrelFloat.Double
		     PrelBase.Char)
		    ->
		    PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelNum.Integer
		     PrelFloat.Double
		     PrelBase.Char)))
		  ->
		  ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char)
		  ->
		  PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char) =
    ParCore.actionzu11 @ PrelBase.Int PrelNum.zdfNumInt;
  ParCore.actionzu78 :: %forall t b t34 t35 t36 t37 t38 . PrelNum.ZCTNum
							  t
							  ->
							  t ->
							  PrelBase.Int ->
							  b ->
							  ParCore.HappyState
							  b
							  (ParCore.HappyStk
							   (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err
							   (ParCore.HappyAbsSyn
							    t34
							    t35
							    t36
							    t37
							    t38))
							  ->
							  PrelBase.ZMZN
							  (ParCore.HappyState
							   b
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)))
							  ->
							  ParCore.HappyStk
							  (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							  ->
							  PrelBase.ZMZN LexCore.Token ->
							  ErrM.Err
							  (ParCore.HappyAbsSyn
							   t34
							   t35
							   t36
							   t37
							   t38) =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (103::PrelGHC.Intzh))}
	%in \ (ds::t) ->
		%case zddNum %of (tpl::PrelNum.ZCTNum t)
		  {PrelNum.ZdwZCDNum
		   (tpl1::PrelBase.ZCTEq t)
		   (tpl2::PrelShow.ZCTShow t)
		   (tpl3::t -> t -> t)
		   (tpl4::t -> t -> t)
		   (tpl5::t -> t -> t)
		   (tpl6::t -> t)
		   (tpl7::t -> t)
		   (tpl8::t -> t)
		   (tpl9::PrelNum.Integer -> t) ->
		     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
		       {PrelBase.ZdwZCDEq
			(tpl11::t -> t -> PrelBase.Bool)
			(tpl12::t -> t -> PrelBase.Bool) ->
			  %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
			    {PrelBase.ZdwTrue ->
			       ParCore.happyAccept @ PrelBase.Int @ b
			       @ (ParCore.HappyState
				  b
				  (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				   PrelBase.ZMZN LexCore.Token ->
				   ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)))
			       @ (PrelBase.ZMZN
				  (ParCore.HappyState
				   b
				   (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				    PrelBase.ZMZN LexCore.Token ->
				    ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))))
			       @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
			       @ (PrelBase.ZMZN LexCore.Token);
			     PrelBase.ZdwFalse ->
			       ParCore.happyFail @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) @ b
			       @ t34 @ t35 @ t36 @ t37 @ t38}}};
  actionzu781 :: PrelBase.Int ->
		 PrelBase.Int ->
		 LexCore.Token ->
		 ParCore.HappyState
		 LexCore.Token
		 (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char)
		  ->
		  PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char))
		 ->
		 PrelBase.ZMZN
		 (ParCore.HappyState
		  LexCore.Token
		  (ParCore.HappyStk
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char)
		   ->
		   PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char)))
		 ->
		 ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char)
		 ->
		 PrelBase.ZMZN LexCore.Token ->
		 ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char) =
    ParCore.actionzu78 @ PrelBase.Int @ LexCore.Token
    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char
    PrelNum.zdfNumInt;
  ParCore.actionzu12 :: %forall t . PrelNum.ZCTNum t ->
				    t ->
				    PrelBase.Int ->
				    LexCore.Token ->
				    ParCore.HappyState
				    LexCore.Token
				    (ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     ->
				     PrelBase.ZMZN LexCore.Token ->
				     ErrM.Err
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char))
				    ->
				    PrelBase.ZMZN
				    (ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)
				      ->
				      PrelBase.ZMZN LexCore.Token ->
				      ErrM.Err
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)))
				    ->
				    ParCore.HappyStk
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     (PrelBase.ZMZN PrelBase.Char)
				     PrelNum.Integer
				     PrelFloat.Double
				     PrelBase.Char)
				    ->
				    PrelBase.ZMZN LexCore.Token ->
				    ErrM.Err
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     (PrelBase.ZMZN PrelBase.Char)
				     PrelNum.Integer
				     PrelFloat.Double
				     PrelBase.Char) =
    \ @ t (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (68::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (51::PrelGHC.Intzh))}
	    %in %let lit3 :: t =
		       %case zddNum %of (tpl::PrelNum.ZCTNum t)
			 {PrelNum.ZdwZCDNum
			  (tpl1::PrelBase.ZCTEq t)
			  (tpl2::PrelShow.ZCTShow t)
			  (tpl3::t -> t -> t)
			  (tpl4::t -> t -> t)
			  (tpl5::t -> t -> t)
			  (tpl6::t -> t)
			  (tpl7::t -> t)
			  (tpl8::t -> t)
			  (tpl9::PrelNum.Integer -> t) ->
			    tpl9 (PrelNum.ZdwSzh (50::PrelGHC.Intzh))}
		%in %let lit4 :: t =
			   %case zddNum %of (tpl::PrelNum.ZCTNum t)
			     {PrelNum.ZdwZCDNum
			      (tpl1::PrelBase.ZCTEq t)
			      (tpl2::PrelShow.ZCTShow t)
			      (tpl3::t -> t -> t)
			      (tpl4::t -> t -> t)
			      (tpl5::t -> t -> t)
			      (tpl6::t -> t)
			      (tpl7::t -> t)
			      (tpl8::t -> t)
			      (tpl9::PrelNum.Integer -> t) ->
				tpl9 (PrelNum.ZdwSzh (49::PrelGHC.Intzh))}
		    %in %let lit5 :: t =
			       %case zddNum %of (tpl::PrelNum.ZCTNum t)
				 {PrelNum.ZdwZCDNum
				  (tpl1::PrelBase.ZCTEq t)
				  (tpl2::PrelShow.ZCTShow t)
				  (tpl3::t -> t -> t)
				  (tpl4::t -> t -> t)
				  (tpl5::t -> t -> t)
				  (tpl6::t -> t)
				  (tpl7::t -> t)
				  (tpl8::t -> t)
				  (tpl9::PrelNum.Integer -> t) ->
				    tpl9 (PrelNum.ZdwSzh (34::PrelGHC.Intzh))}
			%in %let lit6 :: t =
				   %case zddNum %of (tpl::PrelNum.ZCTNum t)
				     {PrelNum.ZdwZCDNum
				      (tpl1::PrelBase.ZCTEq t)
				      (tpl2::PrelShow.ZCTShow t)
				      (tpl3::t -> t -> t)
				      (tpl4::t -> t -> t)
				      (tpl5::t -> t -> t)
				      (tpl6::t -> t)
				      (tpl7::t -> t)
				      (tpl8::t -> t)
				      (tpl9::PrelNum.Integer -> t) ->
					tpl9 (PrelNum.ZdwSzh (97::PrelGHC.Intzh))}
			    %in %let lit7 :: t =
				       %case zddNum %of (tpl::PrelNum.ZCTNum t)
					 {PrelNum.ZdwZCDNum
					  (tpl1::PrelBase.ZCTEq t)
					  (tpl2::PrelShow.ZCTShow t)
					  (tpl3::t -> t -> t)
					  (tpl4::t -> t -> t)
					  (tpl5::t -> t -> t)
					  (tpl6::t -> t)
					  (tpl7::t -> t)
					  (tpl8::t -> t)
					  (tpl9::PrelNum.Integer -> t) ->
					    tpl9 (PrelNum.ZdwSzh (89::PrelGHC.Intzh))}
				%in %let lit8 :: t =
					   %case zddNum %of (tpl::PrelNum.ZCTNum t)
					     {PrelNum.ZdwZCDNum
					      (tpl1::PrelBase.ZCTEq t)
					      (tpl2::PrelShow.ZCTShow t)
					      (tpl3::t -> t -> t)
					      (tpl4::t -> t -> t)
					      (tpl5::t -> t -> t)
					      (tpl6::t -> t)
					      (tpl7::t -> t)
					      (tpl8::t -> t)
					      (tpl9::PrelNum.Integer -> t) ->
						tpl9 (PrelNum.ZdwSzh (88::PrelGHC.Intzh))}
				    %in %let lit9 :: t =
					       %case zddNum %of (tpl::PrelNum.ZCTNum t)
						 {PrelNum.ZdwZCDNum
						  (tpl1::PrelBase.ZCTEq t)
						  (tpl2::PrelShow.ZCTShow t)
						  (tpl3::t -> t -> t)
						  (tpl4::t -> t -> t)
						  (tpl5::t -> t -> t)
						  (tpl6::t -> t)
						  (tpl7::t -> t)
						  (tpl8::t -> t)
						  (tpl9::PrelNum.Integer -> t) ->
						    tpl9 (PrelNum.ZdwSzh (87::PrelGHC.Intzh))}
					%in %let lit10 :: t =
						   %case zddNum %of (tpl::PrelNum.ZCTNum t)
						     {PrelNum.ZdwZCDNum
						      (tpl1::PrelBase.ZCTEq t)
						      (tpl2::PrelShow.ZCTShow t)
						      (tpl3::t -> t -> t)
						      (tpl4::t -> t -> t)
						      (tpl5::t -> t -> t)
						      (tpl6::t -> t)
						      (tpl7::t -> t)
						      (tpl8::t -> t)
						      (tpl9::PrelNum.Integer -> t) ->
							tpl9 (PrelNum.ZdwSzh (86::PrelGHC.Intzh))}
					    %in %let lit11 :: t =
						       %case zddNum %of (tpl::PrelNum.ZCTNum t)
							 {PrelNum.ZdwZCDNum
							  (tpl1::PrelBase.ZCTEq t)
							  (tpl2::PrelShow.ZCTShow t)
							  (tpl3::t -> t -> t)
							  (tpl4::t -> t -> t)
							  (tpl5::t -> t -> t)
							  (tpl6::t -> t)
							  (tpl7::t -> t)
							  (tpl8::t -> t)
							  (tpl9::PrelNum.Integer -> t) ->
							    tpl9
							    (PrelNum.ZdwSzh (84::PrelGHC.Intzh))}
						%in %let lit12 :: t =
							   %case zddNum %of (tpl::PrelNum.ZCTNum t)
							     {PrelNum.ZdwZCDNum
							      (tpl1::PrelBase.ZCTEq t)
							      (tpl2::PrelShow.ZCTShow t)
							      (tpl3::t -> t -> t)
							      (tpl4::t -> t -> t)
							      (tpl5::t -> t -> t)
							      (tpl6::t -> t)
							      (tpl7::t -> t)
							      (tpl8::t -> t)
							      (tpl9::PrelNum.Integer -> t) ->
								tpl9
								(PrelNum.ZdwSzh
								 (82::PrelGHC.Intzh))}
						    %in %let lit13 :: t =
							       %case zddNum
							       %of (tpl::PrelNum.ZCTNum t)
								 {PrelNum.ZdwZCDNum
								  (tpl1::PrelBase.ZCTEq t)
								  (tpl2::PrelShow.ZCTShow t)
								  (tpl3::t -> t -> t)
								  (tpl4::t -> t -> t)
								  (tpl5::t -> t -> t)
								  (tpl6::t -> t)
								  (tpl7::t -> t)
								  (tpl8::t -> t)
								  (tpl9::PrelNum.Integer -> t) ->
								    tpl9
								    (PrelNum.ZdwSzh
								     (80::PrelGHC.Intzh))}
							%in %let lit14 :: t =
								   %case zddNum
								   %of (tpl::PrelNum.ZCTNum t)
								     {PrelNum.ZdwZCDNum
								      (tpl1::PrelBase.ZCTEq t)
								      (tpl2::PrelShow.ZCTShow t)
								      (tpl3::t -> t -> t)
								      (tpl4::t -> t -> t)
								      (tpl5::t -> t -> t)
								      (tpl6::t -> t)
								      (tpl7::t -> t)
								      (tpl8::t -> t)
								      (tpl9::PrelNum.Integer ->
									     t) ->
									tpl9
									(PrelNum.ZdwSzh
									 (69::PrelGHC.Intzh))}
							    %in \ (ds::t) ->
								    %case zddNum
								    %of (tpl::PrelNum.ZCTNum t)
								      {PrelNum.ZdwZCDNum
								       (tpl1::PrelBase.ZCTEq t)
								       (tpl2::PrelShow.ZCTShow t)
								       (tpl3::t -> t -> t)
								       (tpl4::t -> t -> t)
								       (tpl5::t -> t -> t)
								       (tpl6::t -> t)
								       (tpl7::t -> t)
								       (tpl8::t -> t)
								       (tpl9::PrelNum.Integer ->
									      t) ->
									 %case tpl1
									 %of (tpl10::PrelBase.ZCTEq
										     t)
									   {PrelBase.ZdwZCDEq
									    (tpl11::t ->
										    t ->
										    PrelBase.Bool)
									    (tpl12::t ->
										    t ->
										    PrelBase.Bool) ->
									      %case (tpl12 lit13 ds)
									      %of (wild::PrelBase.Bool)
										{PrelBase.ZdwTrue ->
										   happyShift2
										   (%note "InlineMe"
										    actionzu811
										    @ (ParCore.HappyAbsSyn
										       (PrelBase.ZMZN
											PrelBase.Char)
										       (PrelBase.ZMZN
											PrelBase.Char)
										       PrelNum.Integer
										       PrelFloat.Double
										       PrelBase.Char));
										 PrelBase.ZdwFalse
										 ->
										   %case (tpl12
											  lit12 ds)
										   %of (wild1::PrelBase.Bool)
										     {PrelBase.ZdwTrue
										      ->
											happyShift2
											(%note "InlineMe"
											 actionzu821
											 @ (ParCore.HappyAbsSyn
											    (PrelBase.ZMZN
											     PrelBase.Char)
											    (PrelBase.ZMZN
											     PrelBase.Char)
											    PrelNum.Integer
											    PrelFloat.Double
											    PrelBase.Char));
										      PrelBase.ZdwFalse
										      ->
											%case (tpl12
											       lit11
											       ds)
											%of (wild2::PrelBase.Bool)
											  {PrelBase.ZdwTrue
											   ->
											     happyShift2
											     (%note "InlineMe"
											      actionzu831
											      @ (ParCore.HappyAbsSyn
												 (PrelBase.ZMZN
												  PrelBase.Char)
												 (PrelBase.ZMZN
												  PrelBase.Char)
												 PrelNum.Integer
												 PrelFloat.Double
												 PrelBase.Char));
											   PrelBase.ZdwFalse
											   ->
											     %case (tpl12
												    lit10
												    ds)
											     %of (wild3::PrelBase.Bool)
											       {PrelBase.ZdwTrue
												->
												  happyShift2
												  (%note "InlineMe"
												   actionzu841
												   @ (ParCore.HappyAbsSyn
												      (PrelBase.ZMZN
												       PrelBase.Char)
												      (PrelBase.ZMZN
												       PrelBase.Char)
												      PrelNum.Integer
												      PrelFloat.Double
												      PrelBase.Char));
												PrelBase.ZdwFalse
												->
												  %case (tpl12
													 lit9
													 ds)
												  %of (wild4::PrelBase.Bool)
												    {PrelBase.ZdwTrue
												     ->
												       happyShift2
												       (%note "InlineMe"
													actionzu851
													@ (ParCore.HappyAbsSyn
													   (PrelBase.ZMZN
													    PrelBase.Char)
													   (PrelBase.ZMZN
													    PrelBase.Char)
													   PrelNum.Integer
													   PrelFloat.Double
													   PrelBase.Char));
												     PrelBase.ZdwFalse
												     ->
												       %case (tpl12
													      lit8
													      ds)
												       %of (wild5::PrelBase.Bool)
													 {PrelBase.ZdwTrue
													  ->
													    happyShift2
													    actionzu861;
													  PrelBase.ZdwFalse
													  ->
													    %case (tpl12
														   lit7
														   ds)
													    %of (wild6::PrelBase.Bool)
													      {PrelBase.ZdwTrue
													       ->
														 happyShift2
														 (%note "InlineMe"
														  actionzu871
														  @ (ParCore.HappyAbsSyn
														     (PrelBase.ZMZN
														      PrelBase.Char)
														     (PrelBase.ZMZN
														      PrelBase.Char)
														     PrelNum.Integer
														     PrelFloat.Double
														     PrelBase.Char));
													       PrelBase.ZdwFalse
													       ->
														 %case (tpl12
															lit6
															ds)
														 %of (wild7::PrelBase.Bool)
														   {PrelBase.ZdwTrue
														    ->
														      happyShift2
														      (ParCore.actionzu32
														       @ PrelBase.Int
														       @ LexCore.Token
														       @ (PrelBase.ZMZN
															  PrelBase.Char)
														       @ PrelNum.Integer
														       @ PrelFloat.Double
														       @ PrelBase.Char
														       @ (ParCore.HappyAbsSyn
															  (PrelBase.ZMZN
															   PrelBase.Char)
															  (PrelBase.ZMZN
															   PrelBase.Char)
															  PrelNum.Integer
															  PrelFloat.Double
															  PrelBase.Char));
														    PrelBase.ZdwFalse
														    ->
														      %case (tpl12
															     lit5
															     ds)
														      %of (wild8::PrelBase.Bool)
															{PrelBase.ZdwTrue
															 ->
															   ParCore.happyGoto
															   @ (ParCore.HappyState
															      LexCore.Token
															      (ParCore.HappyStk
															       (ParCore.HappyAbsSyn
																(PrelBase.ZMZN
																 PrelBase.Char)
																(PrelBase.ZMZN
																 PrelBase.Char)
																PrelNum.Integer
																PrelFloat.Double
																PrelBase.Char)
															       ->
															       PrelBase.ZMZN
															       LexCore.Token
															       ->
															       ErrM.Err
															       (ParCore.HappyAbsSyn
																(PrelBase.ZMZN
																 PrelBase.Char)
																(PrelBase.ZMZN
																 PrelBase.Char)
																PrelNum.Integer
																PrelFloat.Double
																PrelBase.Char)))
															   @ LexCore.Token
															   @ (ParCore.HappyStk
															      (ParCore.HappyAbsSyn
															       (PrelBase.ZMZN
																PrelBase.Char)
															       (PrelBase.ZMZN
																PrelBase.Char)
															       PrelNum.Integer
															       PrelFloat.Double
															       PrelBase.Char)
															      ->
															      PrelBase.ZMZN
															      LexCore.Token
															      ->
															      ErrM.Err
															      (ParCore.HappyAbsSyn
															       (PrelBase.ZMZN
																PrelBase.Char)
															       (PrelBase.ZMZN
																PrelBase.Char)
															       PrelNum.Integer
															       PrelFloat.Double
															       PrelBase.Char))
															   actionzu751;
															 PrelBase.ZdwFalse
															 ->
															   %case (tpl12
																  lit4
																  ds)
															   %of (wild9::PrelBase.Bool)
															     {PrelBase.ZdwTrue
															      ->
																ParCore.happyGoto
																@ (ParCore.HappyState
																   LexCore.Token
																   (ParCore.HappyStk
																    (ParCore.HappyAbsSyn
																     (PrelBase.ZMZN
																      PrelBase.Char)
																     (PrelBase.ZMZN
																      PrelBase.Char)
																     PrelNum.Integer
																     PrelFloat.Double
																     PrelBase.Char)
																    ->
																    PrelBase.ZMZN
																    LexCore.Token
																    ->
																    ErrM.Err
																    (ParCore.HappyAbsSyn
																     (PrelBase.ZMZN
																      PrelBase.Char)
																     (PrelBase.ZMZN
																      PrelBase.Char)
																     PrelNum.Integer
																     PrelFloat.Double
																     PrelBase.Char)))
																@ LexCore.Token
																@ (ParCore.HappyStk
																   (ParCore.HappyAbsSyn
																    (PrelBase.ZMZN
																     PrelBase.Char)
																    (PrelBase.ZMZN
																     PrelBase.Char)
																    PrelNum.Integer
																    PrelFloat.Double
																    PrelBase.Char)
																   ->
																   PrelBase.ZMZN
																   LexCore.Token
																   ->
																   ErrM.Err
																   (ParCore.HappyAbsSyn
																    (PrelBase.ZMZN
																     PrelBase.Char)
																    (PrelBase.ZMZN
																     PrelBase.Char)
																    PrelNum.Integer
																    PrelFloat.Double
																    PrelBase.Char))
																(ParCore.actionzu76
																 @ PrelBase.Int
																 @ LexCore.Token
																 @ (PrelBase.ZMZN
																    PrelBase.Char)
																 @ (PrelBase.ZMZN
																    PrelBase.Char)
																 @ PrelNum.Integer
																 @ PrelFloat.Double
																 @ PrelBase.Char
																 @ (ParCore.HappyAbsSyn
																    (PrelBase.ZMZN
																     PrelBase.Char)
																    (PrelBase.ZMZN
																     PrelBase.Char)
																    PrelNum.Integer
																    PrelFloat.Double
																    PrelBase.Char));
															      PrelBase.ZdwFalse
															      ->
																%case (tpl12
																       lit3
																       ds)
																%of (wild10::PrelBase.Bool)
																  {PrelBase.ZdwTrue
																   ->
																     ParCore.happyGoto
																     @ (ParCore.HappyState
																	LexCore.Token
																	(ParCore.HappyStk
																	 (ParCore.HappyAbsSyn
																	  (PrelBase.ZMZN
																	   PrelBase.Char)
																	  (PrelBase.ZMZN
																	   PrelBase.Char)
																	  PrelNum.Integer
																	  PrelFloat.Double
																	  PrelBase.Char)
																	 ->
																	 PrelBase.ZMZN
																	 LexCore.Token
																	 ->
																	 ErrM.Err
																	 (ParCore.HappyAbsSyn
																	  (PrelBase.ZMZN
																	   PrelBase.Char)
																	  (PrelBase.ZMZN
																	   PrelBase.Char)
																	  PrelNum.Integer
																	  PrelFloat.Double
																	  PrelBase.Char)))
																     @ LexCore.Token
																     @ (ParCore.HappyStk
																	(ParCore.HappyAbsSyn
																	 (PrelBase.ZMZN
																	  PrelBase.Char)
																	 (PrelBase.ZMZN
																	  PrelBase.Char)
																	 PrelNum.Integer
																	 PrelFloat.Double
																	 PrelBase.Char)
																	->
																	PrelBase.ZMZN
																	LexCore.Token
																	->
																	ErrM.Err
																	(ParCore.HappyAbsSyn
																	 (PrelBase.ZMZN
																	  PrelBase.Char)
																	 (PrelBase.ZMZN
																	  PrelBase.Char)
																	 PrelNum.Integer
																	 PrelFloat.Double
																	 PrelBase.Char))
																     (%note "InlineMe"
																      actionzu771
																      @ (ParCore.HappyAbsSyn
																	 (PrelBase.ZMZN
																	  PrelBase.Char)
																	 (PrelBase.ZMZN
																	  PrelBase.Char)
																	 PrelNum.Integer
																	 PrelFloat.Double
																	 PrelBase.Char));
																   PrelBase.ZdwFalse
																   ->
																     %case (tpl12
																	    lit2
																	    ds)
																     %of (wild11::PrelBase.Bool)
																       {PrelBase.ZdwTrue
																	->
																	  ParCore.happyGoto
																	  @ (ParCore.HappyState
																	     LexCore.Token
																	     (ParCore.HappyStk
																	      (ParCore.HappyAbsSyn
																	       (PrelBase.ZMZN
																		PrelBase.Char)
																	       (PrelBase.ZMZN
																		PrelBase.Char)
																	       PrelNum.Integer
																	       PrelFloat.Double
																	       PrelBase.Char)
																	      ->
																	      PrelBase.ZMZN
																	      LexCore.Token
																	      ->
																	      ErrM.Err
																	      (ParCore.HappyAbsSyn
																	       (PrelBase.ZMZN
																		PrelBase.Char)
																	       (PrelBase.ZMZN
																		PrelBase.Char)
																	       PrelNum.Integer
																	       PrelFloat.Double
																	       PrelBase.Char)))
																	  @ LexCore.Token
																	  @ (ParCore.HappyStk
																	     (ParCore.HappyAbsSyn
																	      (PrelBase.ZMZN
																	       PrelBase.Char)
																	      (PrelBase.ZMZN
																	       PrelBase.Char)
																	      PrelNum.Integer
																	      PrelFloat.Double
																	      PrelBase.Char)
																	     ->
																	     PrelBase.ZMZN
																	     LexCore.Token
																	     ->
																	     ErrM.Err
																	     (ParCore.HappyAbsSyn
																	      (PrelBase.ZMZN
																	       PrelBase.Char)
																	      (PrelBase.ZMZN
																	       PrelBase.Char)
																	      PrelNum.Integer
																	      PrelFloat.Double
																	      PrelBase.Char))
																	  actionzu781;
																	PrelBase.ZdwFalse
																	->
																	  %case (tpl12
																		 lit1
																		 ds)
																	  %of (wild12::PrelBase.Bool)
																	    {PrelBase.ZdwTrue
																	     ->
																	       ParCore.happyGoto
																	       @ (ParCore.HappyState
																		  LexCore.Token
																		  (ParCore.HappyStk
																		   (ParCore.HappyAbsSyn
																		    (PrelBase.ZMZN
																		     PrelBase.Char)
																		    (PrelBase.ZMZN
																		     PrelBase.Char)
																		    PrelNum.Integer
																		    PrelFloat.Double
																		    PrelBase.Char)
																		   ->
																		   PrelBase.ZMZN
																		   LexCore.Token
																		   ->
																		   ErrM.Err
																		   (ParCore.HappyAbsSyn
																		    (PrelBase.ZMZN
																		     PrelBase.Char)
																		    (PrelBase.ZMZN
																		     PrelBase.Char)
																		    PrelNum.Integer
																		    PrelFloat.Double
																		    PrelBase.Char)))
																	       @ LexCore.Token
																	       @ (ParCore.HappyStk
																		  (ParCore.HappyAbsSyn
																		   (PrelBase.ZMZN
																		    PrelBase.Char)
																		   (PrelBase.ZMZN
																		    PrelBase.Char)
																		   PrelNum.Integer
																		   PrelFloat.Double
																		   PrelBase.Char)
																		  ->
																		  PrelBase.ZMZN
																		  LexCore.Token
																		  ->
																		  ErrM.Err
																		  (ParCore.HappyAbsSyn
																		   (PrelBase.ZMZN
																		    PrelBase.Char)
																		   (PrelBase.ZMZN
																		    PrelBase.Char)
																		   PrelNum.Integer
																		   PrelFloat.Double
																		   PrelBase.Char))
																	       (ParCore.actionzu79
																		@ PrelBase.Int
																		@ LexCore.Token
																		@ (PrelBase.ZMZN
																		   PrelBase.Char)
																		@ (PrelBase.ZMZN
																		   PrelBase.Char)
																		@ PrelNum.Integer
																		@ PrelFloat.Double
																		@ PrelBase.Char
																		@ (ParCore.HappyAbsSyn
																		   (PrelBase.ZMZN
																		    PrelBase.Char)
																		   (PrelBase.ZMZN
																		    PrelBase.Char)
																		   PrelNum.Integer
																		   PrelFloat.Double
																		   PrelBase.Char));
																	     PrelBase.ZdwFalse
																	     ->
																	       %case (tpl12
																		      lit14
																		      ds)
																	       %of (wild13::PrelBase.Bool)
																		 {PrelBase.ZdwTrue
																		  ->
																		    ParCore.happyGoto
																		    @ (ParCore.HappyState
																		       LexCore.Token
																		       (ParCore.HappyStk
																			(ParCore.HappyAbsSyn
																			 (PrelBase.ZMZN
																			  PrelBase.Char)
																			 (PrelBase.ZMZN
																			  PrelBase.Char)
																			 PrelNum.Integer
																			 PrelFloat.Double
																			 PrelBase.Char)
																			->
																			PrelBase.ZMZN
																			LexCore.Token
																			->
																			ErrM.Err
																			(ParCore.HappyAbsSyn
																			 (PrelBase.ZMZN
																			  PrelBase.Char)
																			 (PrelBase.ZMZN
																			  PrelBase.Char)
																			 PrelNum.Integer
																			 PrelFloat.Double
																			 PrelBase.Char)))
																		    @ LexCore.Token
																		    @ (ParCore.HappyStk
																		       (ParCore.HappyAbsSyn
																			(PrelBase.ZMZN
																			 PrelBase.Char)
																			(PrelBase.ZMZN
																			 PrelBase.Char)
																			PrelNum.Integer
																			PrelFloat.Double
																			PrelBase.Char)
																		       ->
																		       PrelBase.ZMZN
																		       LexCore.Token
																		       ->
																		       ErrM.Err
																		       (ParCore.HappyAbsSyn
																			(PrelBase.ZMZN
																			 PrelBase.Char)
																			(PrelBase.ZMZN
																			 PrelBase.Char)
																			PrelNum.Integer
																			PrelFloat.Double
																			PrelBase.Char))
																		    (ParCore.actionzu80
																		     @ PrelBase.Int
																		     @ LexCore.Token
																		     @ (PrelBase.ZMZN
																			PrelBase.Char)
																		     @ (PrelBase.ZMZN
																			PrelBase.Char)
																		     @ PrelNum.Integer
																		     @ PrelFloat.Double
																		     @ PrelBase.Char
																		     @ (ParCore.HappyAbsSyn
																			(PrelBase.ZMZN
																			 PrelBase.Char)
																			(PrelBase.ZMZN
																			 PrelBase.Char)
																			PrelNum.Integer
																			PrelFloat.Double
																			PrelBase.Char));
																		  PrelBase.ZdwFalse
																		  ->
																		    ParCore.happyFail
																		    @ (ParCore.HappyAbsSyn
																		       (PrelBase.ZMZN
																			PrelBase.Char)
																		       (PrelBase.ZMZN
																			PrelBase.Char)
																		       PrelNum.Integer
																		       PrelFloat.Double
																		       PrelBase.Char)
																		    @ LexCore.Token
																		    @ (PrelBase.ZMZN
																		       PrelBase.Char)
																		    @ (PrelBase.ZMZN
																		       PrelBase.Char)
																		    @ PrelNum.Integer
																		    @ PrelFloat.Double
																		    @ PrelBase.Char}}}}}}}}}}}}}}}};
  actionzu1212 :: PrelBase.Int ->
		  PrelBase.Int ->
		  LexCore.Token ->
		  ParCore.HappyState
		  LexCore.Token
		  (ParCore.HappyStk
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char)
		   ->
		   PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char))
		  ->
		  PrelBase.ZMZN
		  (ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelNum.Integer
		     PrelFloat.Double
		     PrelBase.Char)
		    ->
		    PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelNum.Integer
		     PrelFloat.Double
		     PrelBase.Char)))
		  ->
		  ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char)
		  ->
		  PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char) =
    ParCore.actionzu12 @ PrelBase.Int PrelNum.zdfNumInt;
  ParCore.actionzu74 :: %forall t b t34 t35 t36 t37 t38 . PrelNum.ZCTNum
							  t
							  ->
							  t ->
							  PrelBase.Int ->
							  b ->
							  ParCore.HappyState
							  b
							  (ParCore.HappyStk
							   (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err
							   (ParCore.HappyAbsSyn
							    t34
							    t35
							    t36
							    t37
							    t38))
							  ->
							  PrelBase.ZMZN
							  (ParCore.HappyState
							   b
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)))
							  ->
							  ParCore.HappyStk
							  (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							  ->
							  PrelBase.ZMZN LexCore.Token ->
							  ErrM.Err
							  (ParCore.HappyAbsSyn
							   t34
							   t35
							   t36
							   t37
							   t38) =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (103::PrelGHC.Intzh))}
	%in \ (ds::t) ->
		%case zddNum %of (tpl::PrelNum.ZCTNum t)
		  {PrelNum.ZdwZCDNum
		   (tpl1::PrelBase.ZCTEq t)
		   (tpl2::PrelShow.ZCTShow t)
		   (tpl3::t -> t -> t)
		   (tpl4::t -> t -> t)
		   (tpl5::t -> t -> t)
		   (tpl6::t -> t)
		   (tpl7::t -> t)
		   (tpl8::t -> t)
		   (tpl9::PrelNum.Integer -> t) ->
		     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
		       {PrelBase.ZdwZCDEq
			(tpl11::t -> t -> PrelBase.Bool)
			(tpl12::t -> t -> PrelBase.Bool) ->
			  %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
			    {PrelBase.ZdwTrue ->
			       ParCore.happyAccept @ PrelBase.Int @ b
			       @ (ParCore.HappyState
				  b
				  (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				   PrelBase.ZMZN LexCore.Token ->
				   ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)))
			       @ (PrelBase.ZMZN
				  (ParCore.HappyState
				   b
				   (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				    PrelBase.ZMZN LexCore.Token ->
				    ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))))
			       @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
			       @ (PrelBase.ZMZN LexCore.Token);
			     PrelBase.ZdwFalse ->
			       ParCore.happyFail @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) @ b
			       @ t34 @ t35 @ t36 @ t37 @ t38}}};
  ParCore.actionzu13 :: %forall t t35 t36 t37 t38 . PrelNum.ZCTNum t
						    ->
						    t ->
						    PrelBase.Int ->
						    LexCore.Token ->
						    ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     ->
						     PrelBase.ZMZN LexCore.Token ->
						     ErrM.Err
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38))
						    ->
						    PrelBase.ZMZN
						    (ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      ->
						      PrelBase.ZMZN LexCore.Token ->
						      ErrM.Err
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)))
						    ->
						    ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38)
						    ->
						    PrelBase.ZMZN LexCore.Token ->
						    ErrM.Err
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38) =
    \ @ t @ t35 @ t36 @ t37 @ t38 (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (52::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (89::PrelGHC.Intzh))}
	    %in %let lit3 :: t =
		       %case zddNum %of (tpl::PrelNum.ZCTNum t)
			 {PrelNum.ZdwZCDNum
			  (tpl1::PrelBase.ZCTEq t)
			  (tpl2::PrelShow.ZCTShow t)
			  (tpl3::t -> t -> t)
			  (tpl4::t -> t -> t)
			  (tpl5::t -> t -> t)
			  (tpl6::t -> t)
			  (tpl7::t -> t)
			  (tpl8::t -> t)
			  (tpl9::PrelNum.Integer -> t) ->
			    tpl9 (PrelNum.ZdwSzh (79::PrelGHC.Intzh))}
		%in %let lit4 :: t =
			   %case zddNum %of (tpl::PrelNum.ZCTNum t)
			     {PrelNum.ZdwZCDNum
			      (tpl1::PrelBase.ZCTEq t)
			      (tpl2::PrelShow.ZCTShow t)
			      (tpl3::t -> t -> t)
			      (tpl4::t -> t -> t)
			      (tpl5::t -> t -> t)
			      (tpl6::t -> t)
			      (tpl7::t -> t)
			      (tpl8::t -> t)
			      (tpl9::PrelNum.Integer -> t) ->
				tpl9 (PrelNum.ZdwSzh (56::PrelGHC.Intzh))}
		    %in %let actionzu741 :: PrelBase.Int ->
					    PrelBase.Int ->
					    LexCore.Token ->
					    ParCore.HappyState
					    LexCore.Token
					    (ParCore.HappyStk
					     (ParCore.HappyAbsSyn
					      (PrelBase.ZMZN PrelBase.Char)
					      t35
					      t36
					      t37
					      t38)
					     ->
					     PrelBase.ZMZN LexCore.Token ->
					     ErrM.Err
					     (ParCore.HappyAbsSyn
					      (PrelBase.ZMZN PrelBase.Char)
					      t35
					      t36
					      t37
					      t38))
					    ->
					    PrelBase.ZMZN
					    (ParCore.HappyState
					     LexCore.Token
					     (ParCore.HappyStk
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38)
					      ->
					      PrelBase.ZMZN LexCore.Token ->
					      ErrM.Err
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38)))
					    ->
					    ParCore.HappyStk
					    (ParCore.HappyAbsSyn
					     (PrelBase.ZMZN PrelBase.Char)
					     t35
					     t36
					     t37
					     t38)
					    ->
					    PrelBase.ZMZN LexCore.Token ->
					    ErrM.Err
					    (ParCore.HappyAbsSyn
					     (PrelBase.ZMZN PrelBase.Char)
					     t35
					     t36
					     t37
					     t38) =
			       ParCore.actionzu74 @ PrelBase.Int @ LexCore.Token
			       @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38
			       PrelNum.zdfNumInt
			%in %let actionzu633 :: PrelBase.Int ->
						PrelBase.Int ->
						LexCore.Token ->
						ParCore.HappyState
						LexCore.Token
						(ParCore.HappyStk
						 (ParCore.HappyAbsSyn
						  (PrelBase.ZMZN PrelBase.Char)
						  t35
						  t36
						  t37
						  t38)
						 ->
						 PrelBase.ZMZN LexCore.Token ->
						 ErrM.Err
						 (ParCore.HappyAbsSyn
						  (PrelBase.ZMZN PrelBase.Char)
						  t35
						  t36
						  t37
						  t38))
						->
						PrelBase.ZMZN
						(ParCore.HappyState
						 LexCore.Token
						 (ParCore.HappyStk
						  (ParCore.HappyAbsSyn
						   (PrelBase.ZMZN PrelBase.Char)
						   t35
						   t36
						   t37
						   t38)
						  ->
						  PrelBase.ZMZN LexCore.Token ->
						  ErrM.Err
						  (ParCore.HappyAbsSyn
						   (PrelBase.ZMZN PrelBase.Char)
						   t35
						   t36
						   t37
						   t38)))
						->
						ParCore.HappyStk
						(ParCore.HappyAbsSyn
						 (PrelBase.ZMZN PrelBase.Char)
						 t35
						 t36
						 t37
						 t38)
						->
						PrelBase.ZMZN LexCore.Token ->
						ErrM.Err
						(ParCore.HappyAbsSyn
						 (PrelBase.ZMZN PrelBase.Char)
						 t35
						 t36
						 t37
						 t38) =
				   ParCore.actionzu63 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38
				   @ (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      t35
				      t36
				      t37
				      t38)
				   PrelNum.zdfNumInt
			    %in %let actionzu733 :: PrelBase.Int ->
						    PrelBase.Int ->
						    LexCore.Token ->
						    ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     ->
						     PrelBase.ZMZN LexCore.Token ->
						     ErrM.Err
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38))
						    ->
						    PrelBase.ZMZN
						    (ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      ->
						      PrelBase.ZMZN LexCore.Token ->
						      ErrM.Err
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)))
						    ->
						    ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38)
						    ->
						    PrelBase.ZMZN LexCore.Token ->
						    ErrM.Err
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38) =
				       ParCore.actionzu73 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38
				       @ (ParCore.HappyAbsSyn
					  (PrelBase.ZMZN PrelBase.Char)
					  t35
					  t36
					  t37
					  t38)
				       PrelNum.zdfNumInt
				%in %let happyShift7 :: (PrelBase.Int ->
							 PrelBase.Int ->
							 LexCore.Token ->
							 ParCore.HappyState
							 LexCore.Token
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   t38)
							  ->
							  PrelBase.ZMZN LexCore.Token ->
							  ErrM.Err
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   t38))
							 ->
							 PrelBase.ZMZN
							 (ParCore.HappyState
							  LexCore.Token
							  (ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    (PrelBase.ZMZN PrelBase.Char)
							    t35
							    t36
							    t37
							    t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err
							   (ParCore.HappyAbsSyn
							    (PrelBase.ZMZN PrelBase.Char)
							    t35
							    t36
							    t37
							    t38)))
							 ->
							 ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token ->
							 ErrM.Err
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38))
							->
							PrelBase.Int ->
							LexCore.Token ->
							ParCore.HappyState
							LexCore.Token
							(ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token ->
							 ErrM.Err
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38))
							->
							PrelBase.ZMZN
							(ParCore.HappyState
							 LexCore.Token
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   t38)
							  ->
							  PrelBase.ZMZN LexCore.Token ->
							  ErrM.Err
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   t38)))
							->
							ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38)
							->
							PrelBase.ZMZN LexCore.Token ->
							ErrM.Err
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38) =
					   ParCore.happyShift @ PrelBase.Int
					   @ (ErrM.Err
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38))
					   @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38
					   PrelNum.zdfNumInt
				    %in \ (ds::t) ->
					    %case zddNum %of (tpl::PrelNum.ZCTNum t)
					      {PrelNum.ZdwZCDNum
					       (tpl1::PrelBase.ZCTEq t)
					       (tpl2::PrelShow.ZCTShow t)
					       (tpl3::t -> t -> t)
					       (tpl4::t -> t -> t)
					       (tpl5::t -> t -> t)
					       (tpl6::t -> t)
					       (tpl7::t -> t)
					       (tpl8::t -> t)
					       (tpl9::PrelNum.Integer -> t) ->
						 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
						   {PrelBase.ZdwZCDEq
						    (tpl11::t -> t -> PrelBase.Bool)
						    (tpl12::t -> t -> PrelBase.Bool) ->
						      %case (tpl12 lit3 ds)
						      %of (wild::PrelBase.Bool)
							{PrelBase.ZdwTrue ->
							   happyShift7 actionzu733;
							 PrelBase.ZdwFalse ->
							   %case (tpl12 lit2 ds)
							   %of (wild1::PrelBase.Bool)
							     {PrelBase.ZdwTrue ->
								happyShift7 actionzu633;
							      PrelBase.ZdwFalse ->
								%case (tpl12 lit1 ds)
								%of (wild2::PrelBase.Bool)
								  {PrelBase.ZdwTrue ->
								     ParCore.happyGoto
								     @ (ParCore.HappyState
									LexCore.Token
									(ParCore.HappyStk
									 (ParCore.HappyAbsSyn
									  (PrelBase.ZMZN
									   PrelBase.Char)
									  t35
									  t36
									  t37
									  t38)
									 ->
									 PrelBase.ZMZN LexCore.Token
									 ->
									 ErrM.Err
									 (ParCore.HappyAbsSyn
									  (PrelBase.ZMZN
									   PrelBase.Char)
									  t35
									  t36
									  t37
									  t38)))
								     @ LexCore.Token
								     @ (ParCore.HappyStk
									(ParCore.HappyAbsSyn
									 (PrelBase.ZMZN
									  PrelBase.Char)
									 t35
									 t36
									 t37
									 t38)
									->
									PrelBase.ZMZN LexCore.Token
									->
									ErrM.Err
									(ParCore.HappyAbsSyn
									 (PrelBase.ZMZN
									  PrelBase.Char)
									 t35
									 t36
									 t37
									 t38))
								     actionzu741;
								   PrelBase.ZdwFalse ->
								     %case (tpl12 lit4 ds)
								     %of (wild3::PrelBase.Bool)
								       {PrelBase.ZdwTrue ->
									  ParCore.happyGoto
									  @ (ParCore.HappyState
									     LexCore.Token
									     (ParCore.HappyStk
									      (ParCore.HappyAbsSyn
									       (PrelBase.ZMZN
										PrelBase.Char)
									       t35
									       t36
									       t37
									       t38)
									      ->
									      PrelBase.ZMZN
									      LexCore.Token
									      ->
									      ErrM.Err
									      (ParCore.HappyAbsSyn
									       (PrelBase.ZMZN
										PrelBase.Char)
									       t35
									       t36
									       t37
									       t38)))
									  @ LexCore.Token
									  @ (ParCore.HappyStk
									     (ParCore.HappyAbsSyn
									      (PrelBase.ZMZN
									       PrelBase.Char)
									      t35
									      t36
									      t37
									      t38)
									     ->
									     PrelBase.ZMZN
									     LexCore.Token
									     ->
									     ErrM.Err
									     (ParCore.HappyAbsSyn
									      (PrelBase.ZMZN
									       PrelBase.Char)
									      t35
									      t36
									      t37
									      t38))
									  (ParCore.actionzu72
									   @ PrelBase.Int
									   @ LexCore.Token
									   @ (PrelBase.ZMZN
									      PrelBase.Char)
									   @ t35 @ t36 @ t37 @ t38
									   @ (ParCore.HappyAbsSyn
									      (PrelBase.ZMZN
									       PrelBase.Char)
									      t35
									      t36
									      t37
									      t38));
									PrelBase.ZdwFalse ->
									  ParCore.happyFail
									  @ (ParCore.HappyAbsSyn
									     (PrelBase.ZMZN
									      PrelBase.Char)
									     t35
									     t36
									     t37
									     t38)
									  @ LexCore.Token
									  @ (PrelBase.ZMZN
									     PrelBase.Char)
									  @ t35 @ t36 @ t37
									  @ t38}}}}}};
  actionzu1311 :: PrelBase.Int ->
		  PrelBase.Int ->
		  LexCore.Token ->
		  ParCore.HappyState
		  LexCore.Token
		  (ParCore.HappyStk
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T)
		   ->
		   PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T))
		  ->
		  PrelBase.ZMZN
		  (ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)
		    ->
		    PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)))
		  ->
		  ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T)
		  ->
		  PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T) =
    ParCore.actionzu13 @ PrelBase.Int @ PrelBase.Z0T @ PrelBase.Z0T
    @ PrelBase.Z0T @ PrelBase.Z0T PrelNum.zdfNumInt;
  ParCore.actionzu71 :: %forall t b t34 t35 t36 t37 t38 . PrelNum.ZCTNum
							  t
							  ->
							  t ->
							  PrelBase.Int ->
							  b ->
							  ParCore.HappyState
							  b
							  (ParCore.HappyStk
							   (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err
							   (ParCore.HappyAbsSyn
							    t34
							    t35
							    t36
							    t37
							    t38))
							  ->
							  PrelBase.ZMZN
							  (ParCore.HappyState
							   b
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)))
							  ->
							  ParCore.HappyStk
							  (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							  ->
							  PrelBase.ZMZN LexCore.Token ->
							  ErrM.Err
							  (ParCore.HappyAbsSyn
							   t34
							   t35
							   t36
							   t37
							   t38) =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (103::PrelGHC.Intzh))}
	%in \ (ds::t) ->
		%case zddNum %of (tpl::PrelNum.ZCTNum t)
		  {PrelNum.ZdwZCDNum
		   (tpl1::PrelBase.ZCTEq t)
		   (tpl2::PrelShow.ZCTShow t)
		   (tpl3::t -> t -> t)
		   (tpl4::t -> t -> t)
		   (tpl5::t -> t -> t)
		   (tpl6::t -> t)
		   (tpl7::t -> t)
		   (tpl8::t -> t)
		   (tpl9::PrelNum.Integer -> t) ->
		     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
		       {PrelBase.ZdwZCDEq
			(tpl11::t -> t -> PrelBase.Bool)
			(tpl12::t -> t -> PrelBase.Bool) ->
			  %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
			    {PrelBase.ZdwTrue ->
			       ParCore.happyAccept @ PrelBase.Int @ b
			       @ (ParCore.HappyState
				  b
				  (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				   PrelBase.ZMZN LexCore.Token ->
				   ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)))
			       @ (PrelBase.ZMZN
				  (ParCore.HappyState
				   b
				   (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				    PrelBase.ZMZN LexCore.Token ->
				    ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))))
			       @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
			       @ (PrelBase.ZMZN LexCore.Token);
			     PrelBase.ZdwFalse ->
			       ParCore.happyFail @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) @ b
			       @ t34 @ t35 @ t36 @ t37 @ t38}}};
  ParCore.actionzu14 :: %forall t t35 t36 t37 t38 . PrelNum.ZCTNum t
						    ->
						    t ->
						    PrelBase.Int ->
						    LexCore.Token ->
						    ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     ->
						     PrelBase.ZMZN LexCore.Token ->
						     ErrM.Err
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38))
						    ->
						    PrelBase.ZMZN
						    (ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      ->
						      PrelBase.ZMZN LexCore.Token ->
						      ErrM.Err
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)))
						    ->
						    ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38)
						    ->
						    PrelBase.ZMZN LexCore.Token ->
						    ErrM.Err
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38) =
    \ @ t @ t35 @ t36 @ t37 @ t38 (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (53::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (52::PrelGHC.Intzh))}
	    %in %let lit3 :: t =
		       %case zddNum %of (tpl::PrelNum.ZCTNum t)
			 {PrelNum.ZdwZCDNum
			  (tpl1::PrelBase.ZCTEq t)
			  (tpl2::PrelShow.ZCTShow t)
			  (tpl3::t -> t -> t)
			  (tpl4::t -> t -> t)
			  (tpl5::t -> t -> t)
			  (tpl6::t -> t)
			  (tpl7::t -> t)
			  (tpl8::t -> t)
			  (tpl9::PrelNum.Integer -> t) ->
			    tpl9 (PrelNum.ZdwSzh (89::PrelGHC.Intzh))}
		%in %let lit4 :: t =
			   %case zddNum %of (tpl::PrelNum.ZCTNum t)
			     {PrelNum.ZdwZCDNum
			      (tpl1::PrelBase.ZCTEq t)
			      (tpl2::PrelShow.ZCTShow t)
			      (tpl3::t -> t -> t)
			      (tpl4::t -> t -> t)
			      (tpl5::t -> t -> t)
			      (tpl6::t -> t)
			      (tpl7::t -> t)
			      (tpl8::t -> t)
			      (tpl9::PrelNum.Integer -> t) ->
				tpl9 (PrelNum.ZdwSzh (79::PrelGHC.Intzh))}
		    %in %let lit5 :: t =
			       %case zddNum %of (tpl::PrelNum.ZCTNum t)
				 {PrelNum.ZdwZCDNum
				  (tpl1::PrelBase.ZCTEq t)
				  (tpl2::PrelShow.ZCTShow t)
				  (tpl3::t -> t -> t)
				  (tpl4::t -> t -> t)
				  (tpl5::t -> t -> t)
				  (tpl6::t -> t)
				  (tpl7::t -> t)
				  (tpl8::t -> t)
				  (tpl9::PrelNum.Integer -> t) ->
				    tpl9 (PrelNum.ZdwSzh (56::PrelGHC.Intzh))}
			%in %let actionzu712 :: PrelBase.Int ->
						PrelBase.Int ->
						LexCore.Token ->
						ParCore.HappyState
						LexCore.Token
						(ParCore.HappyStk
						 (ParCore.HappyAbsSyn
						  (PrelBase.ZMZN PrelBase.Char)
						  t35
						  t36
						  t37
						  t38)
						 ->
						 PrelBase.ZMZN LexCore.Token ->
						 ErrM.Err
						 (ParCore.HappyAbsSyn
						  (PrelBase.ZMZN PrelBase.Char)
						  t35
						  t36
						  t37
						  t38))
						->
						PrelBase.ZMZN
						(ParCore.HappyState
						 LexCore.Token
						 (ParCore.HappyStk
						  (ParCore.HappyAbsSyn
						   (PrelBase.ZMZN PrelBase.Char)
						   t35
						   t36
						   t37
						   t38)
						  ->
						  PrelBase.ZMZN LexCore.Token ->
						  ErrM.Err
						  (ParCore.HappyAbsSyn
						   (PrelBase.ZMZN PrelBase.Char)
						   t35
						   t36
						   t37
						   t38)))
						->
						ParCore.HappyStk
						(ParCore.HappyAbsSyn
						 (PrelBase.ZMZN PrelBase.Char)
						 t35
						 t36
						 t37
						 t38)
						->
						PrelBase.ZMZN LexCore.Token ->
						ErrM.Err
						(ParCore.HappyAbsSyn
						 (PrelBase.ZMZN PrelBase.Char)
						 t35
						 t36
						 t37
						 t38) =
				   ParCore.actionzu71 @ PrelBase.Int @ LexCore.Token
				   @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38
				   PrelNum.zdfNumInt
			    %in %let actionzu633 :: PrelBase.Int ->
						    PrelBase.Int ->
						    LexCore.Token ->
						    ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     ->
						     PrelBase.ZMZN LexCore.Token ->
						     ErrM.Err
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38))
						    ->
						    PrelBase.ZMZN
						    (ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      ->
						      PrelBase.ZMZN LexCore.Token ->
						      ErrM.Err
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)))
						    ->
						    ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38)
						    ->
						    PrelBase.ZMZN LexCore.Token ->
						    ErrM.Err
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38) =
				       ParCore.actionzu63 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38
				       @ (ParCore.HappyAbsSyn
					  (PrelBase.ZMZN PrelBase.Char)
					  t35
					  t36
					  t37
					  t38)
				       PrelNum.zdfNumInt
				%in %let actionzu733 :: PrelBase.Int ->
							PrelBase.Int ->
							LexCore.Token ->
							ParCore.HappyState
							LexCore.Token
							(ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token ->
							 ErrM.Err
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38))
							->
							PrelBase.ZMZN
							(ParCore.HappyState
							 LexCore.Token
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   t38)
							  ->
							  PrelBase.ZMZN LexCore.Token ->
							  ErrM.Err
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   t38)))
							->
							ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38)
							->
							PrelBase.ZMZN LexCore.Token ->
							ErrM.Err
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38) =
					   ParCore.actionzu73 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38
					   @ (ParCore.HappyAbsSyn
					      (PrelBase.ZMZN PrelBase.Char)
					      t35
					      t36
					      t37
					      t38)
					   PrelNum.zdfNumInt
				    %in %let happyShift7 :: (PrelBase.Int ->
							     PrelBase.Int ->
							     LexCore.Token ->
							     ParCore.HappyState
							     LexCore.Token
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       (PrelBase.ZMZN PrelBase.Char)
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err
							      (ParCore.HappyAbsSyn
							       (PrelBase.ZMZN PrelBase.Char)
							       t35
							       t36
							       t37
							       t38))
							     ->
							     PrelBase.ZMZN
							     (ParCore.HappyState
							      LexCore.Token
							      (ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								(PrelBase.ZMZN PrelBase.Char)
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err
							       (ParCore.HappyAbsSyn
								(PrelBase.ZMZN PrelBase.Char)
								t35
								t36
								t37
								t38)))
							     ->
							     ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      (PrelBase.ZMZN PrelBase.Char)
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err
							     (ParCore.HappyAbsSyn
							      (PrelBase.ZMZN PrelBase.Char)
							      t35
							      t36
							      t37
							      t38))
							    ->
							    PrelBase.Int ->
							    LexCore.Token ->
							    ParCore.HappyState
							    LexCore.Token
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      (PrelBase.ZMZN PrelBase.Char)
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err
							     (ParCore.HappyAbsSyn
							      (PrelBase.ZMZN PrelBase.Char)
							      t35
							      t36
							      t37
							      t38))
							    ->
							    PrelBase.ZMZN
							    (ParCore.HappyState
							     LexCore.Token
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       (PrelBase.ZMZN PrelBase.Char)
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err
							      (ParCore.HappyAbsSyn
							       (PrelBase.ZMZN PrelBase.Char)
							       t35
							       t36
							       t37
							       t38)))
							    ->
							    ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     (PrelBase.ZMZN PrelBase.Char)
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err
							    (ParCore.HappyAbsSyn
							     (PrelBase.ZMZN PrelBase.Char)
							     t35
							     t36
							     t37
							     t38) =
					       ParCore.happyShift @ PrelBase.Int
					       @ (ErrM.Err
						  (ParCore.HappyAbsSyn
						   (PrelBase.ZMZN PrelBase.Char)
						   t35
						   t36
						   t37
						   t38))
					       @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37
					       @ t38 PrelNum.zdfNumInt
					%in \ (ds::t) ->
						%case zddNum %of (tpl::PrelNum.ZCTNum t)
						  {PrelNum.ZdwZCDNum
						   (tpl1::PrelBase.ZCTEq t)
						   (tpl2::PrelShow.ZCTShow t)
						   (tpl3::t -> t -> t)
						   (tpl4::t -> t -> t)
						   (tpl5::t -> t -> t)
						   (tpl6::t -> t)
						   (tpl7::t -> t)
						   (tpl8::t -> t)
						   (tpl9::PrelNum.Integer -> t) ->
						     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
						       {PrelBase.ZdwZCDEq
							(tpl11::t -> t -> PrelBase.Bool)
							(tpl12::t -> t -> PrelBase.Bool) ->
							  %case (tpl12 lit4 ds)
							  %of (wild::PrelBase.Bool)
							    {PrelBase.ZdwTrue ->
							       happyShift7 actionzu733;
							     PrelBase.ZdwFalse ->
							       %case (tpl12 lit3 ds)
							       %of (wild1::PrelBase.Bool)
								 {PrelBase.ZdwTrue ->
								    happyShift7 actionzu633;
								  PrelBase.ZdwFalse ->
								    %case (tpl12 lit2 ds)
								    %of (wild2::PrelBase.Bool)
								      {PrelBase.ZdwTrue ->
									 ParCore.happyGoto
									 @ (ParCore.HappyState
									    LexCore.Token
									    (ParCore.HappyStk
									     (ParCore.HappyAbsSyn
									      (PrelBase.ZMZN
									       PrelBase.Char)
									      t35
									      t36
									      t37
									      t38)
									     ->
									     PrelBase.ZMZN
									     LexCore.Token
									     ->
									     ErrM.Err
									     (ParCore.HappyAbsSyn
									      (PrelBase.ZMZN
									       PrelBase.Char)
									      t35
									      t36
									      t37
									      t38)))
									 @ LexCore.Token
									 @ (ParCore.HappyStk
									    (ParCore.HappyAbsSyn
									     (PrelBase.ZMZN
									      PrelBase.Char)
									     t35
									     t36
									     t37
									     t38)
									    ->
									    PrelBase.ZMZN
									    LexCore.Token
									    ->
									    ErrM.Err
									    (ParCore.HappyAbsSyn
									     (PrelBase.ZMZN
									      PrelBase.Char)
									     t35
									     t36
									     t37
									     t38))
									 (ParCore.actionzu70 @ t35
									  @ t36 @ t37 @ t38
									  @ (ParCore.HappyAbsSyn
									     (PrelBase.ZMZN
									      PrelBase.Char)
									     t35
									     t36
									     t37
									     t38));
								       PrelBase.ZdwFalse ->
									 %case (tpl12 lit1 ds)
									 %of (wild3::PrelBase.Bool)
									   {PrelBase.ZdwTrue ->
									      ParCore.happyGoto
									      @ (ParCore.HappyState
										 LexCore.Token
										 (ParCore.HappyStk
										  (ParCore.HappyAbsSyn
										   (PrelBase.ZMZN
										    PrelBase.Char)
										   t35
										   t36
										   t37
										   t38)
										  ->
										  PrelBase.ZMZN
										  LexCore.Token
										  ->
										  ErrM.Err
										  (ParCore.HappyAbsSyn
										   (PrelBase.ZMZN
										    PrelBase.Char)
										   t35
										   t36
										   t37
										   t38)))
									      @ LexCore.Token
									      @ (ParCore.HappyStk
										 (ParCore.HappyAbsSyn
										  (PrelBase.ZMZN
										   PrelBase.Char)
										  t35
										  t36
										  t37
										  t38)
										 ->
										 PrelBase.ZMZN
										 LexCore.Token
										 ->
										 ErrM.Err
										 (ParCore.HappyAbsSyn
										  (PrelBase.ZMZN
										   PrelBase.Char)
										  t35
										  t36
										  t37
										  t38))
									      actionzu712;
									    PrelBase.ZdwFalse ->
									      %case (tpl12 lit5 ds)
									      %of (wild4::PrelBase.Bool)
										{PrelBase.ZdwTrue ->
										   ParCore.happyGoto
										   @ (ParCore.HappyState
										      LexCore.Token
										      (ParCore.HappyStk
										       (ParCore.HappyAbsSyn
											(PrelBase.ZMZN
											 PrelBase.Char)
											t35
											t36
											t37
											t38)
										       ->
										       PrelBase.ZMZN
										       LexCore.Token
										       ->
										       ErrM.Err
										       (ParCore.HappyAbsSyn
											(PrelBase.ZMZN
											 PrelBase.Char)
											t35
											t36
											t37
											t38)))
										   @ LexCore.Token
										   @ (ParCore.HappyStk
										      (ParCore.HappyAbsSyn
										       (PrelBase.ZMZN
											PrelBase.Char)
										       t35
										       t36
										       t37
										       t38)
										      ->
										      PrelBase.ZMZN
										      LexCore.Token
										      ->
										      ErrM.Err
										      (ParCore.HappyAbsSyn
										       (PrelBase.ZMZN
											PrelBase.Char)
										       t35
										       t36
										       t37
										       t38))
										   (ParCore.actionzu72
										    @ PrelBase.Int
										    @ LexCore.Token
										    @ (PrelBase.ZMZN
										       PrelBase.Char)
										    @ t35 @ t36
										    @ t37 @ t38
										    @ (ParCore.HappyAbsSyn
										       (PrelBase.ZMZN
											PrelBase.Char)
										       t35
										       t36
										       t37
										       t38));
										 PrelBase.ZdwFalse
										 ->
										   ParCore.happyFail
										   @ (ParCore.HappyAbsSyn
										      (PrelBase.ZMZN
										       PrelBase.Char)
										      t35
										      t36
										      t37
										      t38)
										   @ LexCore.Token
										   @ (PrelBase.ZMZN
										      PrelBase.Char)
										   @ t35 @ t36 @ t37
										   @ t38}}}}}}};
  actionzu1411 :: PrelBase.Int ->
		  PrelBase.Int ->
		  LexCore.Token ->
		  ParCore.HappyState
		  LexCore.Token
		  (ParCore.HappyStk
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T)
		   ->
		   PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T))
		  ->
		  PrelBase.ZMZN
		  (ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)
		    ->
		    PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)))
		  ->
		  ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T)
		  ->
		  PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T) =
    ParCore.actionzu14 @ PrelBase.Int @ PrelBase.Z0T @ PrelBase.Z0T
    @ PrelBase.Z0T @ PrelBase.Z0T PrelNum.zdfNumInt;
  ParCore.actionzu69 :: %forall t b t34 t35 t36 t37 t38 . PrelNum.ZCTNum
							  t
							  ->
							  t ->
							  PrelBase.Int ->
							  b ->
							  ParCore.HappyState
							  b
							  (ParCore.HappyStk
							   (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err
							   (ParCore.HappyAbsSyn
							    t34
							    t35
							    t36
							    t37
							    t38))
							  ->
							  PrelBase.ZMZN
							  (ParCore.HappyState
							   b
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)))
							  ->
							  ParCore.HappyStk
							  (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							  ->
							  PrelBase.ZMZN LexCore.Token ->
							  ErrM.Err
							  (ParCore.HappyAbsSyn
							   t34
							   t35
							   t36
							   t37
							   t38) =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (103::PrelGHC.Intzh))}
	%in \ (ds::t) ->
		%case zddNum %of (tpl::PrelNum.ZCTNum t)
		  {PrelNum.ZdwZCDNum
		   (tpl1::PrelBase.ZCTEq t)
		   (tpl2::PrelShow.ZCTShow t)
		   (tpl3::t -> t -> t)
		   (tpl4::t -> t -> t)
		   (tpl5::t -> t -> t)
		   (tpl6::t -> t)
		   (tpl7::t -> t)
		   (tpl8::t -> t)
		   (tpl9::PrelNum.Integer -> t) ->
		     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
		       {PrelBase.ZdwZCDEq
			(tpl11::t -> t -> PrelBase.Bool)
			(tpl12::t -> t -> PrelBase.Bool) ->
			  %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
			    {PrelBase.ZdwTrue ->
			       ParCore.happyAccept @ PrelBase.Int @ b
			       @ (ParCore.HappyState
				  b
				  (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				   PrelBase.ZMZN LexCore.Token ->
				   ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)))
			       @ (PrelBase.ZMZN
				  (ParCore.HappyState
				   b
				   (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				    PrelBase.ZMZN LexCore.Token ->
				    ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))))
			       @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
			       @ (PrelBase.ZMZN LexCore.Token);
			     PrelBase.ZdwFalse ->
			       ParCore.happyFail @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) @ b
			       @ t34 @ t35 @ t36 @ t37 @ t38}}};
  actionzu691 :: PrelBase.Int ->
		 PrelBase.Int ->
		 LexCore.Token ->
		 ParCore.HappyState
		 LexCore.Token
		 (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char)
		  ->
		  PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char))
		 ->
		 PrelBase.ZMZN
		 (ParCore.HappyState
		  LexCore.Token
		  (ParCore.HappyStk
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char)
		   ->
		   PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char)))
		 ->
		 ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char)
		 ->
		 PrelBase.ZMZN LexCore.Token ->
		 ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char) =
    ParCore.actionzu69 @ PrelBase.Int @ LexCore.Token
    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char
    PrelNum.zdfNumInt;
  ParCore.actionzu15 :: %forall t . PrelNum.ZCTNum t ->
				    t ->
				    PrelBase.Int ->
				    LexCore.Token ->
				    ParCore.HappyState
				    LexCore.Token
				    (ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     ->
				     PrelBase.ZMZN LexCore.Token ->
				     ErrM.Err
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char))
				    ->
				    PrelBase.ZMZN
				    (ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)
				      ->
				      PrelBase.ZMZN LexCore.Token ->
				      ErrM.Err
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)))
				    ->
				    ParCore.HappyStk
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     (PrelBase.ZMZN PrelBase.Char)
				     PrelNum.Integer
				     PrelFloat.Double
				     PrelBase.Char)
				    ->
				    PrelBase.ZMZN LexCore.Token ->
				    ErrM.Err
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     (PrelBase.ZMZN PrelBase.Char)
				     PrelNum.Integer
				     PrelFloat.Double
				     PrelBase.Char) =
    \ @ t (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (68::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (54::PrelGHC.Intzh))}
	    %in %let lit3 :: t =
		       %case zddNum %of (tpl::PrelNum.ZCTNum t)
			 {PrelNum.ZdwZCDNum
			  (tpl1::PrelBase.ZCTEq t)
			  (tpl2::PrelShow.ZCTShow t)
			  (tpl3::t -> t -> t)
			  (tpl4::t -> t -> t)
			  (tpl5::t -> t -> t)
			  (tpl6::t -> t)
			  (tpl7::t -> t)
			  (tpl8::t -> t)
			  (tpl9::PrelNum.Integer -> t) ->
			    tpl9 (PrelNum.ZdwSzh (34::PrelGHC.Intzh))}
		%in %let lit4 :: t =
			   %case zddNum %of (tpl::PrelNum.ZCTNum t)
			     {PrelNum.ZdwZCDNum
			      (tpl1::PrelBase.ZCTEq t)
			      (tpl2::PrelShow.ZCTShow t)
			      (tpl3::t -> t -> t)
			      (tpl4::t -> t -> t)
			      (tpl5::t -> t -> t)
			      (tpl6::t -> t)
			      (tpl7::t -> t)
			      (tpl8::t -> t)
			      (tpl9::PrelNum.Integer -> t) ->
				tpl9 (PrelNum.ZdwSzh (97::PrelGHC.Intzh))}
		    %in %let lit5 :: t =
			       %case zddNum %of (tpl::PrelNum.ZCTNum t)
				 {PrelNum.ZdwZCDNum
				  (tpl1::PrelBase.ZCTEq t)
				  (tpl2::PrelShow.ZCTShow t)
				  (tpl3::t -> t -> t)
				  (tpl4::t -> t -> t)
				  (tpl5::t -> t -> t)
				  (tpl6::t -> t)
				  (tpl7::t -> t)
				  (tpl8::t -> t)
				  (tpl9::PrelNum.Integer -> t) ->
				    tpl9 (PrelNum.ZdwSzh (91::PrelGHC.Intzh))}
			%in %let lit6 :: t =
				   %case zddNum %of (tpl::PrelNum.ZCTNum t)
				     {PrelNum.ZdwZCDNum
				      (tpl1::PrelBase.ZCTEq t)
				      (tpl2::PrelShow.ZCTShow t)
				      (tpl3::t -> t -> t)
				      (tpl4::t -> t -> t)
				      (tpl5::t -> t -> t)
				      (tpl6::t -> t)
				      (tpl7::t -> t)
				      (tpl8::t -> t)
				      (tpl9::PrelNum.Integer -> t) ->
					tpl9 (PrelNum.ZdwSzh (89::PrelGHC.Intzh))}
			    %in %let lit7 :: t =
				       %case zddNum %of (tpl::PrelNum.ZCTNum t)
					 {PrelNum.ZdwZCDNum
					  (tpl1::PrelBase.ZCTEq t)
					  (tpl2::PrelShow.ZCTShow t)
					  (tpl3::t -> t -> t)
					  (tpl4::t -> t -> t)
					  (tpl5::t -> t -> t)
					  (tpl6::t -> t)
					  (tpl7::t -> t)
					  (tpl8::t -> t)
					  (tpl9::PrelNum.Integer -> t) ->
					    tpl9 (PrelNum.ZdwSzh (69::PrelGHC.Intzh))}
				%in \ (ds::t) ->
					%case zddNum %of (tpl::PrelNum.ZCTNum t)
					  {PrelNum.ZdwZCDNum
					   (tpl1::PrelBase.ZCTEq t)
					   (tpl2::PrelShow.ZCTShow t)
					   (tpl3::t -> t -> t)
					   (tpl4::t -> t -> t)
					   (tpl5::t -> t -> t)
					   (tpl6::t -> t)
					   (tpl7::t -> t)
					   (tpl8::t -> t)
					   (tpl9::PrelNum.Integer -> t) ->
					     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
					       {PrelBase.ZdwZCDEq
						(tpl11::t -> t -> PrelBase.Bool)
						(tpl12::t -> t -> PrelBase.Bool) ->
						  %case (tpl12 lit6 ds) %of (wild::PrelBase.Bool)
						    {PrelBase.ZdwTrue ->
						       happyShift2 actionzu361;
						     PrelBase.ZdwFalse ->
						       %case (tpl12 lit5 ds)
						       %of (wild1::PrelBase.Bool)
							 {PrelBase.ZdwTrue ->
							    happyShift2
							    (%note "InlineMe"
							     actionzu681
							     @ (ParCore.HappyAbsSyn
								(PrelBase.ZMZN PrelBase.Char)
								(PrelBase.ZMZN PrelBase.Char)
								PrelNum.Integer
								PrelFloat.Double
								PrelBase.Char));
							  PrelBase.ZdwFalse ->
							    %case (tpl12 lit4 ds)
							    %of (wild2::PrelBase.Bool)
							      {PrelBase.ZdwTrue ->
								 happyShift2
								 (ParCore.actionzu32 @ PrelBase.Int
								  @ LexCore.Token
								  @ (PrelBase.ZMZN PrelBase.Char)
								  @ PrelNum.Integer
								  @ PrelFloat.Double @ PrelBase.Char
								  @ (ParCore.HappyAbsSyn
								     (PrelBase.ZMZN PrelBase.Char)
								     (PrelBase.ZMZN PrelBase.Char)
								     PrelNum.Integer
								     PrelFloat.Double
								     PrelBase.Char));
							       PrelBase.ZdwFalse ->
								 %case (tpl12 lit3 ds)
								 %of (wild3::PrelBase.Bool)
								   {PrelBase.ZdwTrue ->
								      ParCore.happyGoto
								      @ (ParCore.HappyState
									 LexCore.Token
									 (ParCore.HappyStk
									  (ParCore.HappyAbsSyn
									   (PrelBase.ZMZN
									    PrelBase.Char)
									   (PrelBase.ZMZN
									    PrelBase.Char)
									   PrelNum.Integer
									   PrelFloat.Double
									   PrelBase.Char)
									  ->
									  PrelBase.ZMZN
									  LexCore.Token
									  ->
									  ErrM.Err
									  (ParCore.HappyAbsSyn
									   (PrelBase.ZMZN
									    PrelBase.Char)
									   (PrelBase.ZMZN
									    PrelBase.Char)
									   PrelNum.Integer
									   PrelFloat.Double
									   PrelBase.Char)))
								      @ LexCore.Token
								      @ (ParCore.HappyStk
									 (ParCore.HappyAbsSyn
									  (PrelBase.ZMZN
									   PrelBase.Char)
									  (PrelBase.ZMZN
									   PrelBase.Char)
									  PrelNum.Integer
									  PrelFloat.Double
									  PrelBase.Char)
									 ->
									 PrelBase.ZMZN LexCore.Token
									 ->
									 ErrM.Err
									 (ParCore.HappyAbsSyn
									  (PrelBase.ZMZN
									   PrelBase.Char)
									  (PrelBase.ZMZN
									   PrelBase.Char)
									  PrelNum.Integer
									  PrelFloat.Double
									  PrelBase.Char))
								      actionzu331;
								    PrelBase.ZdwFalse ->
								      %case (tpl12 lit2 ds)
								      %of (wild4::PrelBase.Bool)
									{PrelBase.ZdwTrue ->
									   ParCore.happyGoto
									   @ (ParCore.HappyState
									      LexCore.Token
									      (ParCore.HappyStk
									       (ParCore.HappyAbsSyn
										(PrelBase.ZMZN
										 PrelBase.Char)
										(PrelBase.ZMZN
										 PrelBase.Char)
										PrelNum.Integer
										PrelFloat.Double
										PrelBase.Char)
									       ->
									       PrelBase.ZMZN
									       LexCore.Token
									       ->
									       ErrM.Err
									       (ParCore.HappyAbsSyn
										(PrelBase.ZMZN
										 PrelBase.Char)
										(PrelBase.ZMZN
										 PrelBase.Char)
										PrelNum.Integer
										PrelFloat.Double
										PrelBase.Char)))
									   @ LexCore.Token
									   @ (ParCore.HappyStk
									      (ParCore.HappyAbsSyn
									       (PrelBase.ZMZN
										PrelBase.Char)
									       (PrelBase.ZMZN
										PrelBase.Char)
									       PrelNum.Integer
									       PrelFloat.Double
									       PrelBase.Char)
									      ->
									      PrelBase.ZMZN
									      LexCore.Token
									      ->
									      ErrM.Err
									      (ParCore.HappyAbsSyn
									       (PrelBase.ZMZN
										PrelBase.Char)
									       (PrelBase.ZMZN
										PrelBase.Char)
									       PrelNum.Integer
									       PrelFloat.Double
									       PrelBase.Char))
									   actionzu691;
									 PrelBase.ZdwFalse ->
									   %case (tpl12 lit1 ds)
									   %of (wild5::PrelBase.Bool)
									     {PrelBase.ZdwTrue ->
										ParCore.happyGoto
										@ (ParCore.HappyState
										   LexCore.Token
										   (ParCore.HappyStk
										    (ParCore.HappyAbsSyn
										     (PrelBase.ZMZN
										      PrelBase.Char)
										     (PrelBase.ZMZN
										      PrelBase.Char)
										     PrelNum.Integer
										     PrelFloat.Double
										     PrelBase.Char)
										    ->
										    PrelBase.ZMZN
										    LexCore.Token
										    ->
										    ErrM.Err
										    (ParCore.HappyAbsSyn
										     (PrelBase.ZMZN
										      PrelBase.Char)
										     (PrelBase.ZMZN
										      PrelBase.Char)
										     PrelNum.Integer
										     PrelFloat.Double
										     PrelBase.Char)))
										@ LexCore.Token
										@ (ParCore.HappyStk
										   (ParCore.HappyAbsSyn
										    (PrelBase.ZMZN
										     PrelBase.Char)
										    (PrelBase.ZMZN
										     PrelBase.Char)
										    PrelNum.Integer
										    PrelFloat.Double
										    PrelBase.Char)
										   ->
										   PrelBase.ZMZN
										   LexCore.Token
										   ->
										   ErrM.Err
										   (ParCore.HappyAbsSyn
										    (PrelBase.ZMZN
										     PrelBase.Char)
										    (PrelBase.ZMZN
										     PrelBase.Char)
										    PrelNum.Integer
										    PrelFloat.Double
										    PrelBase.Char))
										(%note "InlineMe"
										 actionzu661
										 @ (ParCore.HappyAbsSyn
										    (PrelBase.ZMZN
										     PrelBase.Char)
										    (PrelBase.ZMZN
										     PrelBase.Char)
										    PrelNum.Integer
										    PrelFloat.Double
										    PrelBase.Char));
									      PrelBase.ZdwFalse ->
										%case (tpl12 lit7
										       ds)
										%of (wild6::PrelBase.Bool)
										  {PrelBase.ZdwTrue
										   ->
										     ParCore.happyGoto
										     @ (ParCore.HappyState
											LexCore.Token
											(ParCore.HappyStk
											 (ParCore.HappyAbsSyn
											  (PrelBase.ZMZN
											   PrelBase.Char)
											  (PrelBase.ZMZN
											   PrelBase.Char)
											  PrelNum.Integer
											  PrelFloat.Double
											  PrelBase.Char)
											 ->
											 PrelBase.ZMZN
											 LexCore.Token
											 ->
											 ErrM.Err
											 (ParCore.HappyAbsSyn
											  (PrelBase.ZMZN
											   PrelBase.Char)
											  (PrelBase.ZMZN
											   PrelBase.Char)
											  PrelNum.Integer
											  PrelFloat.Double
											  PrelBase.Char)))
										     @ LexCore.Token
										     @ (ParCore.HappyStk
											(ParCore.HappyAbsSyn
											 (PrelBase.ZMZN
											  PrelBase.Char)
											 (PrelBase.ZMZN
											  PrelBase.Char)
											 PrelNum.Integer
											 PrelFloat.Double
											 PrelBase.Char)
											->
											PrelBase.ZMZN
											LexCore.Token
											->
											ErrM.Err
											(ParCore.HappyAbsSyn
											 (PrelBase.ZMZN
											  PrelBase.Char)
											 (PrelBase.ZMZN
											  PrelBase.Char)
											 PrelNum.Integer
											 PrelFloat.Double
											 PrelBase.Char))
										     (%note "InlineMe"
										      actionzu671
										      @ (ParCore.HappyAbsSyn
											 (PrelBase.ZMZN
											  PrelBase.Char)
											 (PrelBase.ZMZN
											  PrelBase.Char)
											 PrelNum.Integer
											 PrelFloat.Double
											 PrelBase.Char));
										   PrelBase.ZdwFalse
										   ->
										     ParCore.happyFail
										     @ (ParCore.HappyAbsSyn
											(PrelBase.ZMZN
											 PrelBase.Char)
											(PrelBase.ZMZN
											 PrelBase.Char)
											PrelNum.Integer
											PrelFloat.Double
											PrelBase.Char)
										     @ LexCore.Token
										     @ (PrelBase.ZMZN
											PrelBase.Char)
										     @ (PrelBase.ZMZN
											PrelBase.Char)
										     @ PrelNum.Integer
										     @ PrelFloat.Double
										     @ PrelBase.Char}}}}}}}}};
  actionzu1511 :: PrelBase.Int ->
		  PrelBase.Int ->
		  LexCore.Token ->
		  ParCore.HappyState
		  LexCore.Token
		  (ParCore.HappyStk
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char)
		   ->
		   PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char))
		  ->
		  PrelBase.ZMZN
		  (ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelNum.Integer
		     PrelFloat.Double
		     PrelBase.Char)
		    ->
		    PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelNum.Integer
		     PrelFloat.Double
		     PrelBase.Char)))
		  ->
		  ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char)
		  ->
		  PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char) =
    ParCore.actionzu15 @ PrelBase.Int PrelNum.zdfNumInt;
  ParCore.actionzu65 :: %forall t b t34 t35 t36 t37 t38 . PrelNum.ZCTNum
							  t
							  ->
							  t ->
							  PrelBase.Int ->
							  b ->
							  ParCore.HappyState
							  b
							  (ParCore.HappyStk
							   (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err
							   (ParCore.HappyAbsSyn
							    t34
							    t35
							    t36
							    t37
							    t38))
							  ->
							  PrelBase.ZMZN
							  (ParCore.HappyState
							   b
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)))
							  ->
							  ParCore.HappyStk
							  (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							  ->
							  PrelBase.ZMZN LexCore.Token ->
							  ErrM.Err
							  (ParCore.HappyAbsSyn
							   t34
							   t35
							   t36
							   t37
							   t38) =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (103::PrelGHC.Intzh))}
	%in \ (ds::t) ->
		%case zddNum %of (tpl::PrelNum.ZCTNum t)
		  {PrelNum.ZdwZCDNum
		   (tpl1::PrelBase.ZCTEq t)
		   (tpl2::PrelShow.ZCTShow t)
		   (tpl3::t -> t -> t)
		   (tpl4::t -> t -> t)
		   (tpl5::t -> t -> t)
		   (tpl6::t -> t)
		   (tpl7::t -> t)
		   (tpl8::t -> t)
		   (tpl9::PrelNum.Integer -> t) ->
		     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
		       {PrelBase.ZdwZCDEq
			(tpl11::t -> t -> PrelBase.Bool)
			(tpl12::t -> t -> PrelBase.Bool) ->
			  %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
			    {PrelBase.ZdwTrue ->
			       ParCore.happyAccept @ PrelBase.Int @ b
			       @ (ParCore.HappyState
				  b
				  (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				   PrelBase.ZMZN LexCore.Token ->
				   ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)))
			       @ (PrelBase.ZMZN
				  (ParCore.HappyState
				   b
				   (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				    PrelBase.ZMZN LexCore.Token ->
				    ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))))
			       @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
			       @ (PrelBase.ZMZN LexCore.Token);
			     PrelBase.ZdwFalse ->
			       ParCore.happyFail @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) @ b
			       @ t34 @ t35 @ t36 @ t37 @ t38}}};
  actionzu651 :: PrelBase.Int ->
		 PrelBase.Int ->
		 LexCore.Token ->
		 ParCore.HappyState
		 LexCore.Token
		 (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char)
		  ->
		  PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char))
		 ->
		 PrelBase.ZMZN
		 (ParCore.HappyState
		  LexCore.Token
		  (ParCore.HappyStk
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char)
		   ->
		   PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char)))
		 ->
		 ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char)
		 ->
		 PrelBase.ZMZN LexCore.Token ->
		 ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char) =
    ParCore.actionzu65 @ PrelBase.Int @ LexCore.Token
    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char
    PrelNum.zdfNumInt;
  ParCore.actionzu16 :: %forall t . PrelNum.ZCTNum t ->
				    t ->
				    PrelBase.Int ->
				    LexCore.Token ->
				    ParCore.HappyState
				    LexCore.Token
				    (ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     ->
				     PrelBase.ZMZN LexCore.Token ->
				     ErrM.Err
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char))
				    ->
				    PrelBase.ZMZN
				    (ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)
				      ->
				      PrelBase.ZMZN LexCore.Token ->
				      ErrM.Err
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)))
				    ->
				    ParCore.HappyStk
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     (PrelBase.ZMZN PrelBase.Char)
				     PrelNum.Integer
				     PrelFloat.Double
				     PrelBase.Char)
				    ->
				    PrelBase.ZMZN LexCore.Token ->
				    ErrM.Err
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     (PrelBase.ZMZN PrelBase.Char)
				     PrelNum.Integer
				     PrelFloat.Double
				     PrelBase.Char) =
    \ @ t (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (68::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (55::PrelGHC.Intzh))}
	    %in %let lit3 :: t =
		       %case zddNum %of (tpl::PrelNum.ZCTNum t)
			 {PrelNum.ZdwZCDNum
			  (tpl1::PrelBase.ZCTEq t)
			  (tpl2::PrelShow.ZCTShow t)
			  (tpl3::t -> t -> t)
			  (tpl4::t -> t -> t)
			  (tpl5::t -> t -> t)
			  (tpl6::t -> t)
			  (tpl7::t -> t)
			  (tpl8::t -> t)
			  (tpl9::PrelNum.Integer -> t) ->
			    tpl9 (PrelNum.ZdwSzh (54::PrelGHC.Intzh))}
		%in %let lit4 :: t =
			   %case zddNum %of (tpl::PrelNum.ZCTNum t)
			     {PrelNum.ZdwZCDNum
			      (tpl1::PrelBase.ZCTEq t)
			      (tpl2::PrelShow.ZCTShow t)
			      (tpl3::t -> t -> t)
			      (tpl4::t -> t -> t)
			      (tpl5::t -> t -> t)
			      (tpl6::t -> t)
			      (tpl7::t -> t)
			      (tpl8::t -> t)
			      (tpl9::PrelNum.Integer -> t) ->
				tpl9 (PrelNum.ZdwSzh (34::PrelGHC.Intzh))}
		    %in %let lit5 :: t =
			       %case zddNum %of (tpl::PrelNum.ZCTNum t)
				 {PrelNum.ZdwZCDNum
				  (tpl1::PrelBase.ZCTEq t)
				  (tpl2::PrelShow.ZCTShow t)
				  (tpl3::t -> t -> t)
				  (tpl4::t -> t -> t)
				  (tpl5::t -> t -> t)
				  (tpl6::t -> t)
				  (tpl7::t -> t)
				  (tpl8::t -> t)
				  (tpl9::PrelNum.Integer -> t) ->
				    tpl9 (PrelNum.ZdwSzh (97::PrelGHC.Intzh))}
			%in %let lit6 :: t =
				   %case zddNum %of (tpl::PrelNum.ZCTNum t)
				     {PrelNum.ZdwZCDNum
				      (tpl1::PrelBase.ZCTEq t)
				      (tpl2::PrelShow.ZCTShow t)
				      (tpl3::t -> t -> t)
				      (tpl4::t -> t -> t)
				      (tpl5::t -> t -> t)
				      (tpl6::t -> t)
				      (tpl7::t -> t)
				      (tpl8::t -> t)
				      (tpl9::PrelNum.Integer -> t) ->
					tpl9 (PrelNum.ZdwSzh (91::PrelGHC.Intzh))}
			    %in %let lit7 :: t =
				       %case zddNum %of (tpl::PrelNum.ZCTNum t)
					 {PrelNum.ZdwZCDNum
					  (tpl1::PrelBase.ZCTEq t)
					  (tpl2::PrelShow.ZCTShow t)
					  (tpl3::t -> t -> t)
					  (tpl4::t -> t -> t)
					  (tpl5::t -> t -> t)
					  (tpl6::t -> t)
					  (tpl7::t -> t)
					  (tpl8::t -> t)
					  (tpl9::PrelNum.Integer -> t) ->
					    tpl9 (PrelNum.ZdwSzh (89::PrelGHC.Intzh))}
				%in %let lit8 :: t =
					   %case zddNum %of (tpl::PrelNum.ZCTNum t)
					     {PrelNum.ZdwZCDNum
					      (tpl1::PrelBase.ZCTEq t)
					      (tpl2::PrelShow.ZCTShow t)
					      (tpl3::t -> t -> t)
					      (tpl4::t -> t -> t)
					      (tpl5::t -> t -> t)
					      (tpl6::t -> t)
					      (tpl7::t -> t)
					      (tpl8::t -> t)
					      (tpl9::PrelNum.Integer -> t) ->
						tpl9 (PrelNum.ZdwSzh (69::PrelGHC.Intzh))}
				    %in \ (ds::t) ->
					    %case zddNum %of (tpl::PrelNum.ZCTNum t)
					      {PrelNum.ZdwZCDNum
					       (tpl1::PrelBase.ZCTEq t)
					       (tpl2::PrelShow.ZCTShow t)
					       (tpl3::t -> t -> t)
					       (tpl4::t -> t -> t)
					       (tpl5::t -> t -> t)
					       (tpl6::t -> t)
					       (tpl7::t -> t)
					       (tpl8::t -> t)
					       (tpl9::PrelNum.Integer -> t) ->
						 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
						   {PrelBase.ZdwZCDEq
						    (tpl11::t -> t -> PrelBase.Bool)
						    (tpl12::t -> t -> PrelBase.Bool) ->
						      %case (tpl12 lit7 ds)
						      %of (wild::PrelBase.Bool)
							{PrelBase.ZdwTrue ->
							   happyShift2 actionzu361;
							 PrelBase.ZdwFalse ->
							   %case (tpl12 lit6 ds)
							   %of (wild1::PrelBase.Bool)
							     {PrelBase.ZdwTrue ->
								happyShift2
								(%note "InlineMe"
								 actionzu681
								 @ (ParCore.HappyAbsSyn
								    (PrelBase.ZMZN PrelBase.Char)
								    (PrelBase.ZMZN PrelBase.Char)
								    PrelNum.Integer
								    PrelFloat.Double
								    PrelBase.Char));
							      PrelBase.ZdwFalse ->
								%case (tpl12 lit5 ds)
								%of (wild2::PrelBase.Bool)
								  {PrelBase.ZdwTrue ->
								     happyShift2
								     (ParCore.actionzu32
								      @ PrelBase.Int @ LexCore.Token
								      @ (PrelBase.ZMZN
									 PrelBase.Char)
								      @ PrelNum.Integer
								      @ PrelFloat.Double
								      @ PrelBase.Char
								      @ (ParCore.HappyAbsSyn
									 (PrelBase.ZMZN
									  PrelBase.Char)
									 (PrelBase.ZMZN
									  PrelBase.Char)
									 PrelNum.Integer
									 PrelFloat.Double
									 PrelBase.Char));
								   PrelBase.ZdwFalse ->
								     %case (tpl12 lit4 ds)
								     %of (wild3::PrelBase.Bool)
								       {PrelBase.ZdwTrue ->
									  ParCore.happyGoto
									  @ (ParCore.HappyState
									     LexCore.Token
									     (ParCore.HappyStk
									      (ParCore.HappyAbsSyn
									       (PrelBase.ZMZN
										PrelBase.Char)
									       (PrelBase.ZMZN
										PrelBase.Char)
									       PrelNum.Integer
									       PrelFloat.Double
									       PrelBase.Char)
									      ->
									      PrelBase.ZMZN
									      LexCore.Token
									      ->
									      ErrM.Err
									      (ParCore.HappyAbsSyn
									       (PrelBase.ZMZN
										PrelBase.Char)
									       (PrelBase.ZMZN
										PrelBase.Char)
									       PrelNum.Integer
									       PrelFloat.Double
									       PrelBase.Char)))
									  @ LexCore.Token
									  @ (ParCore.HappyStk
									     (ParCore.HappyAbsSyn
									      (PrelBase.ZMZN
									       PrelBase.Char)
									      (PrelBase.ZMZN
									       PrelBase.Char)
									      PrelNum.Integer
									      PrelFloat.Double
									      PrelBase.Char)
									     ->
									     PrelBase.ZMZN
									     LexCore.Token
									     ->
									     ErrM.Err
									     (ParCore.HappyAbsSyn
									      (PrelBase.ZMZN
									       PrelBase.Char)
									      (PrelBase.ZMZN
									       PrelBase.Char)
									      PrelNum.Integer
									      PrelFloat.Double
									      PrelBase.Char))
									  actionzu331;
									PrelBase.ZdwFalse ->
									  %case (tpl12 lit3 ds)
									  %of (wild4::PrelBase.Bool)
									    {PrelBase.ZdwTrue ->
									       ParCore.happyGoto
									       @ (ParCore.HappyState
										  LexCore.Token
										  (ParCore.HappyStk
										   (ParCore.HappyAbsSyn
										    (PrelBase.ZMZN
										     PrelBase.Char)
										    (PrelBase.ZMZN
										     PrelBase.Char)
										    PrelNum.Integer
										    PrelFloat.Double
										    PrelBase.Char)
										   ->
										   PrelBase.ZMZN
										   LexCore.Token
										   ->
										   ErrM.Err
										   (ParCore.HappyAbsSyn
										    (PrelBase.ZMZN
										     PrelBase.Char)
										    (PrelBase.ZMZN
										     PrelBase.Char)
										    PrelNum.Integer
										    PrelFloat.Double
										    PrelBase.Char)))
									       @ LexCore.Token
									       @ (ParCore.HappyStk
										  (ParCore.HappyAbsSyn
										   (PrelBase.ZMZN
										    PrelBase.Char)
										   (PrelBase.ZMZN
										    PrelBase.Char)
										   PrelNum.Integer
										   PrelFloat.Double
										   PrelBase.Char)
										  ->
										  PrelBase.ZMZN
										  LexCore.Token
										  ->
										  ErrM.Err
										  (ParCore.HappyAbsSyn
										   (PrelBase.ZMZN
										    PrelBase.Char)
										   (PrelBase.ZMZN
										    PrelBase.Char)
										   PrelNum.Integer
										   PrelFloat.Double
										   PrelBase.Char))
									       (%note "InlineMe"
										actionzu641
										@ (ParCore.HappyAbsSyn
										   (PrelBase.ZMZN
										    PrelBase.Char)
										   (PrelBase.ZMZN
										    PrelBase.Char)
										   PrelNum.Integer
										   PrelFloat.Double
										   PrelBase.Char));
									     PrelBase.ZdwFalse ->
									       %case (tpl12 lit2 ds)
									       %of (wild5::PrelBase.Bool)
										 {PrelBase.ZdwTrue
										  ->
										    ParCore.happyGoto
										    @ (ParCore.HappyState
										       LexCore.Token
										       (ParCore.HappyStk
											(ParCore.HappyAbsSyn
											 (PrelBase.ZMZN
											  PrelBase.Char)
											 (PrelBase.ZMZN
											  PrelBase.Char)
											 PrelNum.Integer
											 PrelFloat.Double
											 PrelBase.Char)
											->
											PrelBase.ZMZN
											LexCore.Token
											->
											ErrM.Err
											(ParCore.HappyAbsSyn
											 (PrelBase.ZMZN
											  PrelBase.Char)
											 (PrelBase.ZMZN
											  PrelBase.Char)
											 PrelNum.Integer
											 PrelFloat.Double
											 PrelBase.Char)))
										    @ LexCore.Token
										    @ (ParCore.HappyStk
										       (ParCore.HappyAbsSyn
											(PrelBase.ZMZN
											 PrelBase.Char)
											(PrelBase.ZMZN
											 PrelBase.Char)
											PrelNum.Integer
											PrelFloat.Double
											PrelBase.Char)
										       ->
										       PrelBase.ZMZN
										       LexCore.Token
										       ->
										       ErrM.Err
										       (ParCore.HappyAbsSyn
											(PrelBase.ZMZN
											 PrelBase.Char)
											(PrelBase.ZMZN
											 PrelBase.Char)
											PrelNum.Integer
											PrelFloat.Double
											PrelBase.Char))
										    actionzu651;
										  PrelBase.ZdwFalse
										  ->
										    %case (tpl12
											   lit1 ds)
										    %of (wild6::PrelBase.Bool)
										      {PrelBase.ZdwTrue
										       ->
											 ParCore.happyGoto
											 @ (ParCore.HappyState
											    LexCore.Token
											    (ParCore.HappyStk
											     (ParCore.HappyAbsSyn
											      (PrelBase.ZMZN
											       PrelBase.Char)
											      (PrelBase.ZMZN
											       PrelBase.Char)
											      PrelNum.Integer
											      PrelFloat.Double
											      PrelBase.Char)
											     ->
											     PrelBase.ZMZN
											     LexCore.Token
											     ->
											     ErrM.Err
											     (ParCore.HappyAbsSyn
											      (PrelBase.ZMZN
											       PrelBase.Char)
											      (PrelBase.ZMZN
											       PrelBase.Char)
											      PrelNum.Integer
											      PrelFloat.Double
											      PrelBase.Char)))
											 @ LexCore.Token
											 @ (ParCore.HappyStk
											    (ParCore.HappyAbsSyn
											     (PrelBase.ZMZN
											      PrelBase.Char)
											     (PrelBase.ZMZN
											      PrelBase.Char)
											     PrelNum.Integer
											     PrelFloat.Double
											     PrelBase.Char)
											    ->
											    PrelBase.ZMZN
											    LexCore.Token
											    ->
											    ErrM.Err
											    (ParCore.HappyAbsSyn
											     (PrelBase.ZMZN
											      PrelBase.Char)
											     (PrelBase.ZMZN
											      PrelBase.Char)
											     PrelNum.Integer
											     PrelFloat.Double
											     PrelBase.Char))
											 (%note "InlineMe"
											  actionzu661
											  @ (ParCore.HappyAbsSyn
											     (PrelBase.ZMZN
											      PrelBase.Char)
											     (PrelBase.ZMZN
											      PrelBase.Char)
											     PrelNum.Integer
											     PrelFloat.Double
											     PrelBase.Char));
										       PrelBase.ZdwFalse
										       ->
											 %case (tpl12
												lit8
												ds)
											 %of (wild7::PrelBase.Bool)
											   {PrelBase.ZdwTrue
											    ->
											      ParCore.happyGoto
											      @ (ParCore.HappyState
												 LexCore.Token
												 (ParCore.HappyStk
												  (ParCore.HappyAbsSyn
												   (PrelBase.ZMZN
												    PrelBase.Char)
												   (PrelBase.ZMZN
												    PrelBase.Char)
												   PrelNum.Integer
												   PrelFloat.Double
												   PrelBase.Char)
												  ->
												  PrelBase.ZMZN
												  LexCore.Token
												  ->
												  ErrM.Err
												  (ParCore.HappyAbsSyn
												   (PrelBase.ZMZN
												    PrelBase.Char)
												   (PrelBase.ZMZN
												    PrelBase.Char)
												   PrelNum.Integer
												   PrelFloat.Double
												   PrelBase.Char)))
											      @ LexCore.Token
											      @ (ParCore.HappyStk
												 (ParCore.HappyAbsSyn
												  (PrelBase.ZMZN
												   PrelBase.Char)
												  (PrelBase.ZMZN
												   PrelBase.Char)
												  PrelNum.Integer
												  PrelFloat.Double
												  PrelBase.Char)
												 ->
												 PrelBase.ZMZN
												 LexCore.Token
												 ->
												 ErrM.Err
												 (ParCore.HappyAbsSyn
												  (PrelBase.ZMZN
												   PrelBase.Char)
												  (PrelBase.ZMZN
												   PrelBase.Char)
												  PrelNum.Integer
												  PrelFloat.Double
												  PrelBase.Char))
											      (%note "InlineMe"
											       actionzu671
											       @ (ParCore.HappyAbsSyn
												  (PrelBase.ZMZN
												   PrelBase.Char)
												  (PrelBase.ZMZN
												   PrelBase.Char)
												  PrelNum.Integer
												  PrelFloat.Double
												  PrelBase.Char));
											    PrelBase.ZdwFalse
											    ->
											      ParCore.happyFail
											      @ (ParCore.HappyAbsSyn
												 (PrelBase.ZMZN
												  PrelBase.Char)
												 (PrelBase.ZMZN
												  PrelBase.Char)
												 PrelNum.Integer
												 PrelFloat.Double
												 PrelBase.Char)
											      @ LexCore.Token
											      @ (PrelBase.ZMZN
												 PrelBase.Char)
											      @ (PrelBase.ZMZN
												 PrelBase.Char)
											      @ PrelNum.Integer
											      @ PrelFloat.Double
											      @ PrelBase.Char}}}}}}}}}};
  actionzu1611 :: PrelBase.Int ->
		  PrelBase.Int ->
		  LexCore.Token ->
		  ParCore.HappyState
		  LexCore.Token
		  (ParCore.HappyStk
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char)
		   ->
		   PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char))
		  ->
		  PrelBase.ZMZN
		  (ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelNum.Integer
		     PrelFloat.Double
		     PrelBase.Char)
		    ->
		    PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelNum.Integer
		     PrelFloat.Double
		     PrelBase.Char)))
		  ->
		  ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char)
		  ->
		  PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char) =
    ParCore.actionzu16 @ PrelBase.Int PrelNum.zdfNumInt;
  ParCore.actionzu62 :: %forall t b t34 t35 t36 t37 t38 . PrelNum.ZCTNum
							  t
							  ->
							  t ->
							  PrelBase.Int ->
							  b ->
							  ParCore.HappyState
							  b
							  (ParCore.HappyStk
							   (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err
							   (ParCore.HappyAbsSyn
							    t34
							    t35
							    t36
							    t37
							    t38))
							  ->
							  PrelBase.ZMZN
							  (ParCore.HappyState
							   b
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)))
							  ->
							  ParCore.HappyStk
							  (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							  ->
							  PrelBase.ZMZN LexCore.Token ->
							  ErrM.Err
							  (ParCore.HappyAbsSyn
							   t34
							   t35
							   t36
							   t37
							   t38) =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (103::PrelGHC.Intzh))}
	%in \ (ds::t) ->
		%case zddNum %of (tpl::PrelNum.ZCTNum t)
		  {PrelNum.ZdwZCDNum
		   (tpl1::PrelBase.ZCTEq t)
		   (tpl2::PrelShow.ZCTShow t)
		   (tpl3::t -> t -> t)
		   (tpl4::t -> t -> t)
		   (tpl5::t -> t -> t)
		   (tpl6::t -> t)
		   (tpl7::t -> t)
		   (tpl8::t -> t)
		   (tpl9::PrelNum.Integer -> t) ->
		     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
		       {PrelBase.ZdwZCDEq
			(tpl11::t -> t -> PrelBase.Bool)
			(tpl12::t -> t -> PrelBase.Bool) ->
			  %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
			    {PrelBase.ZdwTrue ->
			       ParCore.happyAccept @ PrelBase.Int @ b
			       @ (ParCore.HappyState
				  b
				  (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				   PrelBase.ZMZN LexCore.Token ->
				   ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)))
			       @ (PrelBase.ZMZN
				  (ParCore.HappyState
				   b
				   (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				    PrelBase.ZMZN LexCore.Token ->
				    ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))))
			       @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
			       @ (PrelBase.ZMZN LexCore.Token);
			     PrelBase.ZdwFalse ->
			       ParCore.happyFail @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) @ b
			       @ t34 @ t35 @ t36 @ t37 @ t38}}};
  ParCore.actionzu17 :: %forall t t35 t36 t37 t38 . PrelNum.ZCTNum t
						    ->
						    t ->
						    PrelBase.Int ->
						    LexCore.Token ->
						    ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     ->
						     PrelBase.ZMZN LexCore.Token ->
						     ErrM.Err
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38))
						    ->
						    PrelBase.ZMZN
						    (ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      ->
						      PrelBase.ZMZN LexCore.Token ->
						      ErrM.Err
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)))
						    ->
						    ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38)
						    ->
						    PrelBase.ZMZN LexCore.Token ->
						    ErrM.Err
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38) =
    \ @ t @ t35 @ t36 @ t37 @ t38 (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (89::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (56::PrelGHC.Intzh))}
	    %in %let actionzu621 :: PrelBase.Int ->
				    PrelBase.Int ->
				    LexCore.Token ->
				    ParCore.HappyState
				    LexCore.Token
				    (ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      t35
				      t36
				      t37
				      t38)
				     ->
				     PrelBase.ZMZN LexCore.Token ->
				     ErrM.Err
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      t35
				      t36
				      t37
				      t38))
				    ->
				    PrelBase.ZMZN
				    (ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       t35
				       t36
				       t37
				       t38)
				      ->
				      PrelBase.ZMZN LexCore.Token ->
				      ErrM.Err
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       t35
				       t36
				       t37
				       t38)))
				    ->
				    ParCore.HappyStk
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     t35
				     t36
				     t37
				     t38)
				    ->
				    PrelBase.ZMZN LexCore.Token ->
				    ErrM.Err
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     t35
				     t36
				     t37
				     t38) =
		       ParCore.actionzu62 @ PrelBase.Int @ LexCore.Token
		       @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38
		       PrelNum.zdfNumInt
		%in %let actionzu633 :: PrelBase.Int ->
					PrelBase.Int ->
					LexCore.Token ->
					ParCore.HappyState
					LexCore.Token
					(ParCore.HappyStk
					 (ParCore.HappyAbsSyn
					  (PrelBase.ZMZN PrelBase.Char)
					  t35
					  t36
					  t37
					  t38)
					 ->
					 PrelBase.ZMZN LexCore.Token ->
					 ErrM.Err
					 (ParCore.HappyAbsSyn
					  (PrelBase.ZMZN PrelBase.Char)
					  t35
					  t36
					  t37
					  t38))
					->
					PrelBase.ZMZN
					(ParCore.HappyState
					 LexCore.Token
					 (ParCore.HappyStk
					  (ParCore.HappyAbsSyn
					   (PrelBase.ZMZN PrelBase.Char)
					   t35
					   t36
					   t37
					   t38)
					  ->
					  PrelBase.ZMZN LexCore.Token ->
					  ErrM.Err
					  (ParCore.HappyAbsSyn
					   (PrelBase.ZMZN PrelBase.Char)
					   t35
					   t36
					   t37
					   t38)))
					->
					ParCore.HappyStk
					(ParCore.HappyAbsSyn
					 (PrelBase.ZMZN PrelBase.Char)
					 t35
					 t36
					 t37
					 t38)
					->
					PrelBase.ZMZN LexCore.Token ->
					ErrM.Err
					(ParCore.HappyAbsSyn
					 (PrelBase.ZMZN PrelBase.Char)
					 t35
					 t36
					 t37
					 t38) =
			   ParCore.actionzu63 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38
			   @ (ParCore.HappyAbsSyn
			      (PrelBase.ZMZN PrelBase.Char)
			      t35
			      t36
			      t37
			      t38)
			   PrelNum.zdfNumInt
		    %in %let happyShift7 :: (PrelBase.Int ->
					     PrelBase.Int ->
					     LexCore.Token ->
					     ParCore.HappyState
					     LexCore.Token
					     (ParCore.HappyStk
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38)
					      ->
					      PrelBase.ZMZN LexCore.Token ->
					      ErrM.Err
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38))
					     ->
					     PrelBase.ZMZN
					     (ParCore.HappyState
					      LexCore.Token
					      (ParCore.HappyStk
					       (ParCore.HappyAbsSyn
						(PrelBase.ZMZN PrelBase.Char)
						t35
						t36
						t37
						t38)
					       ->
					       PrelBase.ZMZN LexCore.Token ->
					       ErrM.Err
					       (ParCore.HappyAbsSyn
						(PrelBase.ZMZN PrelBase.Char)
						t35
						t36
						t37
						t38)))
					     ->
					     ParCore.HappyStk
					     (ParCore.HappyAbsSyn
					      (PrelBase.ZMZN PrelBase.Char)
					      t35
					      t36
					      t37
					      t38)
					     ->
					     PrelBase.ZMZN LexCore.Token ->
					     ErrM.Err
					     (ParCore.HappyAbsSyn
					      (PrelBase.ZMZN PrelBase.Char)
					      t35
					      t36
					      t37
					      t38))
					    ->
					    PrelBase.Int ->
					    LexCore.Token ->
					    ParCore.HappyState
					    LexCore.Token
					    (ParCore.HappyStk
					     (ParCore.HappyAbsSyn
					      (PrelBase.ZMZN PrelBase.Char)
					      t35
					      t36
					      t37
					      t38)
					     ->
					     PrelBase.ZMZN LexCore.Token ->
					     ErrM.Err
					     (ParCore.HappyAbsSyn
					      (PrelBase.ZMZN PrelBase.Char)
					      t35
					      t36
					      t37
					      t38))
					    ->
					    PrelBase.ZMZN
					    (ParCore.HappyState
					     LexCore.Token
					     (ParCore.HappyStk
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38)
					      ->
					      PrelBase.ZMZN LexCore.Token ->
					      ErrM.Err
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38)))
					    ->
					    ParCore.HappyStk
					    (ParCore.HappyAbsSyn
					     (PrelBase.ZMZN PrelBase.Char)
					     t35
					     t36
					     t37
					     t38)
					    ->
					    PrelBase.ZMZN LexCore.Token ->
					    ErrM.Err
					    (ParCore.HappyAbsSyn
					     (PrelBase.ZMZN PrelBase.Char)
					     t35
					     t36
					     t37
					     t38) =
			       ParCore.happyShift @ PrelBase.Int
			       @ (ErrM.Err
				  (ParCore.HappyAbsSyn
				   (PrelBase.ZMZN PrelBase.Char)
				   t35
				   t36
				   t37
				   t38))
			       @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38
			       PrelNum.zdfNumInt
			%in \ (ds::t) ->
				%case zddNum %of (tpl::PrelNum.ZCTNum t)
				  {PrelNum.ZdwZCDNum
				   (tpl1::PrelBase.ZCTEq t)
				   (tpl2::PrelShow.ZCTShow t)
				   (tpl3::t -> t -> t)
				   (tpl4::t -> t -> t)
				   (tpl5::t -> t -> t)
				   (tpl6::t -> t)
				   (tpl7::t -> t)
				   (tpl8::t -> t)
				   (tpl9::PrelNum.Integer -> t) ->
				     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
				       {PrelBase.ZdwZCDEq
					(tpl11::t -> t -> PrelBase.Bool)
					(tpl12::t -> t -> PrelBase.Bool) ->
					  %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
					    {PrelBase.ZdwTrue ->
					       happyShift7 actionzu633;
					     PrelBase.ZdwFalse ->
					       %case (tpl12 lit2 ds) %of (wild1::PrelBase.Bool)
						 {PrelBase.ZdwTrue ->
						    ParCore.happyGoto
						    @ (ParCore.HappyState
						       LexCore.Token
						       (ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38)
							->
							PrelBase.ZMZN LexCore.Token ->
							ErrM.Err
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38)))
						    @ LexCore.Token
						    @ (ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)
						       ->
						       PrelBase.ZMZN LexCore.Token ->
						       ErrM.Err
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38))
						    actionzu621;
						  PrelBase.ZdwFalse ->
						    ParCore.happyFail
						    @ (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						    @ LexCore.Token @ (PrelBase.ZMZN PrelBase.Char)
						    @ t35 @ t36 @ t37 @ t38}}}};
  actionzu1712 :: PrelBase.Int ->
		  PrelBase.Int ->
		  LexCore.Token ->
		  ParCore.HappyState
		  LexCore.Token
		  (ParCore.HappyStk
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T)
		   ->
		   PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T))
		  ->
		  PrelBase.ZMZN
		  (ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)
		    ->
		    PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)))
		  ->
		  ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T)
		  ->
		  PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T) =
    ParCore.actionzu17 @ PrelBase.Int @ PrelBase.Z0T @ PrelBase.Z0T
    @ PrelBase.Z0T @ PrelBase.Z0T PrelNum.zdfNumInt;
  ParCore.actionzu61 :: %forall t t35 t36 t37 t38 . PrelNum.ZCTNum t
						    ->
						    t ->
						    PrelBase.Int ->
						    LexCore.Token ->
						    ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     ->
						     PrelBase.ZMZN LexCore.Token ->
						     ErrM.Err
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38))
						    ->
						    PrelBase.ZMZN
						    (ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      ->
						      PrelBase.ZMZN LexCore.Token ->
						      ErrM.Err
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)))
						    ->
						    ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38)
						    ->
						    PrelBase.ZMZN LexCore.Token ->
						    ErrM.Err
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38) =
    \ @ t @ t35 @ t36 @ t37 @ t38 (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (103::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (89::PrelGHC.Intzh))}
	    %in %let lit3 :: t =
		       %case zddNum %of (tpl::PrelNum.ZCTNum t)
			 {PrelNum.ZdwZCDNum
			  (tpl1::PrelBase.ZCTEq t)
			  (tpl2::PrelShow.ZCTShow t)
			  (tpl3::t -> t -> t)
			  (tpl4::t -> t -> t)
			  (tpl5::t -> t -> t)
			  (tpl6::t -> t)
			  (tpl7::t -> t)
			  (tpl8::t -> t)
			  (tpl9::PrelNum.Integer -> t) ->
			    tpl9 (PrelNum.ZdwSzh (56::PrelGHC.Intzh))}
		%in %let actionzu633 :: PrelBase.Int ->
					PrelBase.Int ->
					LexCore.Token ->
					ParCore.HappyState
					LexCore.Token
					(ParCore.HappyStk
					 (ParCore.HappyAbsSyn
					  (PrelBase.ZMZN PrelBase.Char)
					  t35
					  t36
					  t37
					  t38)
					 ->
					 PrelBase.ZMZN LexCore.Token ->
					 ErrM.Err
					 (ParCore.HappyAbsSyn
					  (PrelBase.ZMZN PrelBase.Char)
					  t35
					  t36
					  t37
					  t38))
					->
					PrelBase.ZMZN
					(ParCore.HappyState
					 LexCore.Token
					 (ParCore.HappyStk
					  (ParCore.HappyAbsSyn
					   (PrelBase.ZMZN PrelBase.Char)
					   t35
					   t36
					   t37
					   t38)
					  ->
					  PrelBase.ZMZN LexCore.Token ->
					  ErrM.Err
					  (ParCore.HappyAbsSyn
					   (PrelBase.ZMZN PrelBase.Char)
					   t35
					   t36
					   t37
					   t38)))
					->
					ParCore.HappyStk
					(ParCore.HappyAbsSyn
					 (PrelBase.ZMZN PrelBase.Char)
					 t35
					 t36
					 t37
					 t38)
					->
					PrelBase.ZMZN LexCore.Token ->
					ErrM.Err
					(ParCore.HappyAbsSyn
					 (PrelBase.ZMZN PrelBase.Char)
					 t35
					 t36
					 t37
					 t38) =
			   ParCore.actionzu63 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38
			   @ (ParCore.HappyAbsSyn
			      (PrelBase.ZMZN PrelBase.Char)
			      t35
			      t36
			      t37
			      t38)
			   PrelNum.zdfNumInt
		    %in %let happyShift7 :: (PrelBase.Int ->
					     PrelBase.Int ->
					     LexCore.Token ->
					     ParCore.HappyState
					     LexCore.Token
					     (ParCore.HappyStk
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38)
					      ->
					      PrelBase.ZMZN LexCore.Token ->
					      ErrM.Err
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38))
					     ->
					     PrelBase.ZMZN
					     (ParCore.HappyState
					      LexCore.Token
					      (ParCore.HappyStk
					       (ParCore.HappyAbsSyn
						(PrelBase.ZMZN PrelBase.Char)
						t35
						t36
						t37
						t38)
					       ->
					       PrelBase.ZMZN LexCore.Token ->
					       ErrM.Err
					       (ParCore.HappyAbsSyn
						(PrelBase.ZMZN PrelBase.Char)
						t35
						t36
						t37
						t38)))
					     ->
					     ParCore.HappyStk
					     (ParCore.HappyAbsSyn
					      (PrelBase.ZMZN PrelBase.Char)
					      t35
					      t36
					      t37
					      t38)
					     ->
					     PrelBase.ZMZN LexCore.Token ->
					     ErrM.Err
					     (ParCore.HappyAbsSyn
					      (PrelBase.ZMZN PrelBase.Char)
					      t35
					      t36
					      t37
					      t38))
					    ->
					    PrelBase.Int ->
					    LexCore.Token ->
					    ParCore.HappyState
					    LexCore.Token
					    (ParCore.HappyStk
					     (ParCore.HappyAbsSyn
					      (PrelBase.ZMZN PrelBase.Char)
					      t35
					      t36
					      t37
					      t38)
					     ->
					     PrelBase.ZMZN LexCore.Token ->
					     ErrM.Err
					     (ParCore.HappyAbsSyn
					      (PrelBase.ZMZN PrelBase.Char)
					      t35
					      t36
					      t37
					      t38))
					    ->
					    PrelBase.ZMZN
					    (ParCore.HappyState
					     LexCore.Token
					     (ParCore.HappyStk
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38)
					      ->
					      PrelBase.ZMZN LexCore.Token ->
					      ErrM.Err
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38)))
					    ->
					    ParCore.HappyStk
					    (ParCore.HappyAbsSyn
					     (PrelBase.ZMZN PrelBase.Char)
					     t35
					     t36
					     t37
					     t38)
					    ->
					    PrelBase.ZMZN LexCore.Token ->
					    ErrM.Err
					    (ParCore.HappyAbsSyn
					     (PrelBase.ZMZN PrelBase.Char)
					     t35
					     t36
					     t37
					     t38) =
			       ParCore.happyShift @ PrelBase.Int
			       @ (ErrM.Err
				  (ParCore.HappyAbsSyn
				   (PrelBase.ZMZN PrelBase.Char)
				   t35
				   t36
				   t37
				   t38))
			       @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38
			       PrelNum.zdfNumInt
			%in \ (ds::t) ->
				%case zddNum %of (tpl::PrelNum.ZCTNum t)
				  {PrelNum.ZdwZCDNum
				   (tpl1::PrelBase.ZCTEq t)
				   (tpl2::PrelShow.ZCTShow t)
				   (tpl3::t -> t -> t)
				   (tpl4::t -> t -> t)
				   (tpl5::t -> t -> t)
				   (tpl6::t -> t)
				   (tpl7::t -> t)
				   (tpl8::t -> t)
				   (tpl9::PrelNum.Integer -> t) ->
				     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
				       {PrelBase.ZdwZCDEq
					(tpl11::t -> t -> PrelBase.Bool)
					(tpl12::t -> t -> PrelBase.Bool) ->
					  %case (tpl12 lit2 ds) %of (wild::PrelBase.Bool)
					    {PrelBase.ZdwTrue ->
					       happyShift7 actionzu633;
					     PrelBase.ZdwFalse ->
					       %case (tpl12 lit1 ds) %of (wild1::PrelBase.Bool)
						 {PrelBase.ZdwTrue ->
						    ParCore.happyAccept @ PrelBase.Int
						    @ LexCore.Token
						    @ (ParCore.HappyState
						       LexCore.Token
						       (ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38)
							->
							PrelBase.ZMZN LexCore.Token ->
							ErrM.Err
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38)))
						    @ (PrelBase.ZMZN
						       (ParCore.HappyState
							LexCore.Token
							(ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token ->
							 ErrM.Err
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38))))
						    @ (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						    @ (PrelBase.ZMZN LexCore.Token);
						  PrelBase.ZdwFalse ->
						    %case (tpl12 lit3 ds) %of (wild2::PrelBase.Bool)
						      {PrelBase.ZdwTrue ->
							 ParCore.happyGoto
							 @ (ParCore.HappyState
							    LexCore.Token
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      (PrelBase.ZMZN PrelBase.Char)
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err
							     (ParCore.HappyAbsSyn
							      (PrelBase.ZMZN PrelBase.Char)
							      t35
							      t36
							      t37
							      t38)))
							 @ LexCore.Token
							 @ (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     (PrelBase.ZMZN PrelBase.Char)
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err
							    (ParCore.HappyAbsSyn
							     (PrelBase.ZMZN PrelBase.Char)
							     t35
							     t36
							     t37
							     t38))
							 (ParCore.actionzu148 @ PrelBase.Int
							  @ LexCore.Token
							  @ (PrelBase.ZMZN PrelBase.Char) @ t35
							  @ t36 @ t37 @ t38
							  @ (ParCore.HappyAbsSyn
							     (PrelBase.ZMZN PrelBase.Char)
							     t35
							     t36
							     t37
							     t38));
						       PrelBase.ZdwFalse ->
							 ParCore.happyFail
							 @ (ParCore.HappyAbsSyn
							    (PrelBase.ZMZN PrelBase.Char)
							    t35
							    t36
							    t37
							    t38)
							 @ LexCore.Token
							 @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36
							 @ t37 @ t38}}}}};
  ParCore.actionzu18 :: %forall t t35 t36 t37 t38 . PrelNum.ZCTNum t
						    ->
						    t ->
						    PrelBase.Int ->
						    LexCore.Token ->
						    ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     ->
						     PrelBase.ZMZN LexCore.Token ->
						     ErrM.Err
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38))
						    ->
						    PrelBase.ZMZN
						    (ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      ->
						      PrelBase.ZMZN LexCore.Token ->
						      ErrM.Err
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)))
						    ->
						    ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38)
						    ->
						    PrelBase.ZMZN LexCore.Token ->
						    ErrM.Err
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38) =
    \ @ t @ t35 @ t36 @ t37 @ t38 (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (57::PrelGHC.Intzh))}
	%in %let actionzu612 :: PrelBase.Int ->
				PrelBase.Int ->
				LexCore.Token ->
				ParCore.HappyState
				LexCore.Token
				(ParCore.HappyStk
				 (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
				 ->
				 PrelBase.ZMZN LexCore.Token ->
				 ErrM.Err
				 (ParCore.HappyAbsSyn
				  (PrelBase.ZMZN PrelBase.Char)
				  t35
				  t36
				  t37
				  t38))
				->
				PrelBase.ZMZN
				(ParCore.HappyState
				 LexCore.Token
				 (ParCore.HappyStk
				  (ParCore.HappyAbsSyn
				   (PrelBase.ZMZN PrelBase.Char)
				   t35
				   t36
				   t37
				   t38)
				  ->
				  PrelBase.ZMZN LexCore.Token ->
				  ErrM.Err
				  (ParCore.HappyAbsSyn
				   (PrelBase.ZMZN PrelBase.Char)
				   t35
				   t36
				   t37
				   t38)))
				->
				ParCore.HappyStk
				(ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
				->
				PrelBase.ZMZN LexCore.Token ->
				ErrM.Err
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 t35
				 t36
				 t37
				 t38) =
		   ParCore.actionzu61 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38
		   PrelNum.zdfNumInt
	    %in \ (ds::t) ->
		    %case zddNum %of (tpl::PrelNum.ZCTNum t)
		      {PrelNum.ZdwZCDNum
		       (tpl1::PrelBase.ZCTEq t)
		       (tpl2::PrelShow.ZCTShow t)
		       (tpl3::t -> t -> t)
		       (tpl4::t -> t -> t)
		       (tpl5::t -> t -> t)
		       (tpl6::t -> t)
		       (tpl7::t -> t)
		       (tpl8::t -> t)
		       (tpl9::PrelNum.Integer -> t) ->
			 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
			   {PrelBase.ZdwZCDEq
			    (tpl11::t -> t -> PrelBase.Bool)
			    (tpl12::t -> t -> PrelBase.Bool) ->
			      %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
				{PrelBase.ZdwTrue ->
				   ParCore.happyGoto
				   @ (ParCore.HappyState
				      LexCore.Token
				      (ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					t35
					t36
					t37
					t38)
				       ->
				       PrelBase.ZMZN LexCore.Token ->
				       ErrM.Err
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					t35
					t36
					t37
					t38)))
				   @ LexCore.Token
				   @ (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       t35
				       t36
				       t37
				       t38)
				      ->
				      PrelBase.ZMZN LexCore.Token ->
				      ErrM.Err
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       t35
				       t36
				       t37
				       t38))
				   actionzu612;
				 PrelBase.ZdwFalse ->
				   ParCore.happyReducezu78 @ LexCore.Token
				   @ (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      t35
				      t36
				      t37
				      t38)
				   @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38}}};
  actionzu1811 :: PrelBase.Int ->
		  PrelBase.Int ->
		  LexCore.Token ->
		  ParCore.HappyState
		  LexCore.Token
		  (ParCore.HappyStk
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T)
		   ->
		   PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T))
		  ->
		  PrelBase.ZMZN
		  (ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)
		    ->
		    PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)))
		  ->
		  ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T)
		  ->
		  PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T) =
    ParCore.actionzu18 @ PrelBase.Int @ PrelBase.Z0T @ PrelBase.Z0T
    @ PrelBase.Z0T @ PrelBase.Z0T PrelNum.zdfNumInt;
  ParCore.actionzu59 :: %forall t b t34 t35 t36 t37 t38 . PrelNum.ZCTNum
							  t
							  ->
							  t ->
							  PrelBase.Int ->
							  b ->
							  ParCore.HappyState
							  b
							  (ParCore.HappyStk
							   (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err
							   (ParCore.HappyAbsSyn
							    t34
							    t35
							    t36
							    t37
							    t38))
							  ->
							  PrelBase.ZMZN
							  (ParCore.HappyState
							   b
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)))
							  ->
							  ParCore.HappyStk
							  (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							  ->
							  PrelBase.ZMZN LexCore.Token ->
							  ErrM.Err
							  (ParCore.HappyAbsSyn
							   t34
							   t35
							   t36
							   t37
							   t38) =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (103::PrelGHC.Intzh))}
	%in \ (ds::t) ->
		%case zddNum %of (tpl::PrelNum.ZCTNum t)
		  {PrelNum.ZdwZCDNum
		   (tpl1::PrelBase.ZCTEq t)
		   (tpl2::PrelShow.ZCTShow t)
		   (tpl3::t -> t -> t)
		   (tpl4::t -> t -> t)
		   (tpl5::t -> t -> t)
		   (tpl6::t -> t)
		   (tpl7::t -> t)
		   (tpl8::t -> t)
		   (tpl9::PrelNum.Integer -> t) ->
		     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
		       {PrelBase.ZdwZCDEq
			(tpl11::t -> t -> PrelBase.Bool)
			(tpl12::t -> t -> PrelBase.Bool) ->
			  %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
			    {PrelBase.ZdwTrue ->
			       ParCore.happyAccept @ PrelBase.Int @ b
			       @ (ParCore.HappyState
				  b
				  (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				   PrelBase.ZMZN LexCore.Token ->
				   ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)))
			       @ (PrelBase.ZMZN
				  (ParCore.HappyState
				   b
				   (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				    PrelBase.ZMZN LexCore.Token ->
				    ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))))
			       @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
			       @ (PrelBase.ZMZN LexCore.Token);
			     PrelBase.ZdwFalse ->
			       ParCore.happyFail @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) @ b
			       @ t34 @ t35 @ t36 @ t37 @ t38}}};
  ParCore.actionzu19 :: %forall t t35 t36 t37 t38 . PrelNum.ZCTNum t
						    ->
						    t ->
						    PrelBase.Int ->
						    LexCore.Token ->
						    ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     ->
						     PrelBase.ZMZN LexCore.Token ->
						     ErrM.Err
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38))
						    ->
						    PrelBase.ZMZN
						    (ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      ->
						      PrelBase.ZMZN LexCore.Token ->
						      ErrM.Err
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)))
						    ->
						    ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38)
						    ->
						    PrelBase.ZMZN LexCore.Token ->
						    ErrM.Err
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38) =
    \ @ t @ t35 @ t36 @ t37 @ t38 (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (34::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (97::PrelGHC.Intzh))}
	    %in %let lit3 :: t =
		       %case zddNum %of (tpl::PrelNum.ZCTNum t)
			 {PrelNum.ZdwZCDNum
			  (tpl1::PrelBase.ZCTEq t)
			  (tpl2::PrelShow.ZCTShow t)
			  (tpl3::t -> t -> t)
			  (tpl4::t -> t -> t)
			  (tpl5::t -> t -> t)
			  (tpl6::t -> t)
			  (tpl7::t -> t)
			  (tpl8::t -> t)
			  (tpl9::PrelNum.Integer -> t) ->
			    tpl9 (PrelNum.ZdwSzh (89::PrelGHC.Intzh))}
		%in %let lit4 :: t =
			   %case zddNum %of (tpl::PrelNum.ZCTNum t)
			     {PrelNum.ZdwZCDNum
			      (tpl1::PrelBase.ZCTEq t)
			      (tpl2::PrelShow.ZCTShow t)
			      (tpl3::t -> t -> t)
			      (tpl4::t -> t -> t)
			      (tpl5::t -> t -> t)
			      (tpl6::t -> t)
			      (tpl7::t -> t)
			      (tpl8::t -> t)
			      (tpl9::PrelNum.Integer -> t) ->
				tpl9 (PrelNum.ZdwSzh (58::PrelGHC.Intzh))}
		    %in %let actionzu591 :: PrelBase.Int ->
					    PrelBase.Int ->
					    LexCore.Token ->
					    ParCore.HappyState
					    LexCore.Token
					    (ParCore.HappyStk
					     (ParCore.HappyAbsSyn
					      (PrelBase.ZMZN PrelBase.Char)
					      t35
					      t36
					      t37
					      t38)
					     ->
					     PrelBase.ZMZN LexCore.Token ->
					     ErrM.Err
					     (ParCore.HappyAbsSyn
					      (PrelBase.ZMZN PrelBase.Char)
					      t35
					      t36
					      t37
					      t38))
					    ->
					    PrelBase.ZMZN
					    (ParCore.HappyState
					     LexCore.Token
					     (ParCore.HappyStk
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38)
					      ->
					      PrelBase.ZMZN LexCore.Token ->
					      ErrM.Err
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38)))
					    ->
					    ParCore.HappyStk
					    (ParCore.HappyAbsSyn
					     (PrelBase.ZMZN PrelBase.Char)
					     t35
					     t36
					     t37
					     t38)
					    ->
					    PrelBase.ZMZN LexCore.Token ->
					    ErrM.Err
					    (ParCore.HappyAbsSyn
					     (PrelBase.ZMZN PrelBase.Char)
					     t35
					     t36
					     t37
					     t38) =
			       ParCore.actionzu59 @ PrelBase.Int @ LexCore.Token
			       @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38
			       PrelNum.zdfNumInt
			%in %let actionzu602 :: PrelBase.Int ->
						PrelBase.Int ->
						LexCore.Token ->
						ParCore.HappyState
						LexCore.Token
						(ParCore.HappyStk
						 (ParCore.HappyAbsSyn
						  (PrelBase.ZMZN PrelBase.Char)
						  t35
						  t36
						  t37
						  t38)
						 ->
						 PrelBase.ZMZN LexCore.Token ->
						 ErrM.Err
						 (ParCore.HappyAbsSyn
						  (PrelBase.ZMZN PrelBase.Char)
						  t35
						  t36
						  t37
						  t38))
						->
						PrelBase.ZMZN
						(ParCore.HappyState
						 LexCore.Token
						 (ParCore.HappyStk
						  (ParCore.HappyAbsSyn
						   (PrelBase.ZMZN PrelBase.Char)
						   t35
						   t36
						   t37
						   t38)
						  ->
						  PrelBase.ZMZN LexCore.Token ->
						  ErrM.Err
						  (ParCore.HappyAbsSyn
						   (PrelBase.ZMZN PrelBase.Char)
						   t35
						   t36
						   t37
						   t38)))
						->
						ParCore.HappyStk
						(ParCore.HappyAbsSyn
						 (PrelBase.ZMZN PrelBase.Char)
						 t35
						 t36
						 t37
						 t38)
						->
						PrelBase.ZMZN LexCore.Token ->
						ErrM.Err
						(ParCore.HappyAbsSyn
						 (PrelBase.ZMZN PrelBase.Char)
						 t35
						 t36
						 t37
						 t38) =
				   ParCore.actionzu60 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38
				   @ (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      t35
				      t36
				      t37
				      t38)
				   PrelNum.zdfNumInt
			    %in %let happyShift7 :: (PrelBase.Int ->
						     PrelBase.Int ->
						     LexCore.Token ->
						     ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      ->
						      PrelBase.ZMZN LexCore.Token ->
						      ErrM.Err
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38))
						     ->
						     PrelBase.ZMZN
						     (ParCore.HappyState
						      LexCore.Token
						      (ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)
						       ->
						       PrelBase.ZMZN LexCore.Token ->
						       ErrM.Err
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)))
						     ->
						     ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     ->
						     PrelBase.ZMZN LexCore.Token ->
						     ErrM.Err
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38))
						    ->
						    PrelBase.Int ->
						    LexCore.Token ->
						    ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     ->
						     PrelBase.ZMZN LexCore.Token ->
						     ErrM.Err
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38))
						    ->
						    PrelBase.ZMZN
						    (ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      ->
						      PrelBase.ZMZN LexCore.Token ->
						      ErrM.Err
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)))
						    ->
						    ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38)
						    ->
						    PrelBase.ZMZN LexCore.Token ->
						    ErrM.Err
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38) =
				       ParCore.happyShift @ PrelBase.Int
				       @ (ErrM.Err
					  (ParCore.HappyAbsSyn
					   (PrelBase.ZMZN PrelBase.Char)
					   t35
					   t36
					   t37
					   t38))
				       @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38
				       PrelNum.zdfNumInt
				%in \ (ds::t) ->
					%case zddNum %of (tpl::PrelNum.ZCTNum t)
					  {PrelNum.ZdwZCDNum
					   (tpl1::PrelBase.ZCTEq t)
					   (tpl2::PrelShow.ZCTShow t)
					   (tpl3::t -> t -> t)
					   (tpl4::t -> t -> t)
					   (tpl5::t -> t -> t)
					   (tpl6::t -> t)
					   (tpl7::t -> t)
					   (tpl8::t -> t)
					   (tpl9::PrelNum.Integer -> t) ->
					     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
					       {PrelBase.ZdwZCDEq
						(tpl11::t -> t -> PrelBase.Bool)
						(tpl12::t -> t -> PrelBase.Bool) ->
						  %case (tpl12 lit3 ds) %of (wild::PrelBase.Bool)
						    {PrelBase.ZdwTrue ->
						       happyShift7 actionzu602;
						     PrelBase.ZdwFalse ->
						       %case (tpl12 lit2 ds)
						       %of (wild1::PrelBase.Bool)
							 {PrelBase.ZdwTrue ->
							    happyShift7
							    (ParCore.actionzu32 @ PrelBase.Int
							     @ LexCore.Token @ t35 @ t36 @ t37 @ t38
							     @ (ParCore.HappyAbsSyn
								(PrelBase.ZMZN PrelBase.Char)
								t35
								t36
								t37
								t38));
							  PrelBase.ZdwFalse ->
							    %case (tpl12 lit1 ds)
							    %of (wild2::PrelBase.Bool)
							      {PrelBase.ZdwTrue ->
								 ParCore.happyGoto
								 @ (ParCore.HappyState
								    LexCore.Token
								    (ParCore.HappyStk
								     (ParCore.HappyAbsSyn
								      (PrelBase.ZMZN PrelBase.Char)
								      t35
								      t36
								      t37
								      t38)
								     ->
								     PrelBase.ZMZN LexCore.Token ->
								     ErrM.Err
								     (ParCore.HappyAbsSyn
								      (PrelBase.ZMZN PrelBase.Char)
								      t35
								      t36
								      t37
								      t38)))
								 @ LexCore.Token
								 @ (ParCore.HappyStk
								    (ParCore.HappyAbsSyn
								     (PrelBase.ZMZN PrelBase.Char)
								     t35
								     t36
								     t37
								     t38)
								    ->
								    PrelBase.ZMZN LexCore.Token ->
								    ErrM.Err
								    (ParCore.HappyAbsSyn
								     (PrelBase.ZMZN PrelBase.Char)
								     t35
								     t36
								     t37
								     t38))
								 (ParCore.actionzu58 @ PrelBase.Int
								  @ LexCore.Token @ t35 @ t36 @ t37
								  @ t38
								  @ (ParCore.HappyAbsSyn
								     (PrelBase.ZMZN PrelBase.Char)
								     t35
								     t36
								     t37
								     t38));
							       PrelBase.ZdwFalse ->
								 %case (tpl12 lit4 ds)
								 %of (wild3::PrelBase.Bool)
								   {PrelBase.ZdwTrue ->
								      ParCore.happyGoto
								      @ (ParCore.HappyState
									 LexCore.Token
									 (ParCore.HappyStk
									  (ParCore.HappyAbsSyn
									   (PrelBase.ZMZN
									    PrelBase.Char)
									   t35
									   t36
									   t37
									   t38)
									  ->
									  PrelBase.ZMZN
									  LexCore.Token
									  ->
									  ErrM.Err
									  (ParCore.HappyAbsSyn
									   (PrelBase.ZMZN
									    PrelBase.Char)
									   t35
									   t36
									   t37
									   t38)))
								      @ LexCore.Token
								      @ (ParCore.HappyStk
									 (ParCore.HappyAbsSyn
									  (PrelBase.ZMZN
									   PrelBase.Char)
									  t35
									  t36
									  t37
									  t38)
									 ->
									 PrelBase.ZMZN LexCore.Token
									 ->
									 ErrM.Err
									 (ParCore.HappyAbsSyn
									  (PrelBase.ZMZN
									   PrelBase.Char)
									  t35
									  t36
									  t37
									  t38))
								      actionzu591;
								    PrelBase.ZdwFalse ->
								      ParCore.happyFail
								      @ (ParCore.HappyAbsSyn
									 (PrelBase.ZMZN
									  PrelBase.Char)
									 t35
									 t36
									 t37
									 t38)
								      @ LexCore.Token
								      @ (PrelBase.ZMZN
									 PrelBase.Char)
								      @ t35 @ t36 @ t37 @ t38}}}}}};
  actionzu1911 :: PrelBase.Int ->
		  PrelBase.Int ->
		  LexCore.Token ->
		  ParCore.HappyState
		  LexCore.Token
		  (ParCore.HappyStk
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T)
		   ->
		   PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T))
		  ->
		  PrelBase.ZMZN
		  (ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)
		    ->
		    PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)))
		  ->
		  ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T)
		  ->
		  PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T) =
    ParCore.actionzu19 @ PrelBase.Int @ PrelBase.Z0T @ PrelBase.Z0T
    @ PrelBase.Z0T @ PrelBase.Z0T PrelNum.zdfNumInt;
  ParCore.actionzu57 :: %forall t t35 t36 t37 t38 . PrelNum.ZCTNum t
						    ->
						    t ->
						    PrelBase.Int ->
						    LexCore.Token ->
						    ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     ->
						     PrelBase.ZMZN LexCore.Token ->
						     ErrM.Err
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38))
						    ->
						    PrelBase.ZMZN
						    (ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      ->
						      PrelBase.ZMZN LexCore.Token ->
						      ErrM.Err
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)))
						    ->
						    ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38)
						    ->
						    PrelBase.ZMZN LexCore.Token ->
						    ErrM.Err
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38) =
    \ @ t @ t35 @ t36 @ t37 @ t38 (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (34::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (103::PrelGHC.Intzh))}
	    %in %let lit3 :: t =
		       %case zddNum %of (tpl::PrelNum.ZCTNum t)
			 {PrelNum.ZdwZCDNum
			  (tpl1::PrelBase.ZCTEq t)
			  (tpl2::PrelShow.ZCTShow t)
			  (tpl3::t -> t -> t)
			  (tpl4::t -> t -> t)
			  (tpl5::t -> t -> t)
			  (tpl6::t -> t)
			  (tpl7::t -> t)
			  (tpl8::t -> t)
			  (tpl9::PrelNum.Integer -> t) ->
			    tpl9 (PrelNum.ZdwSzh (97::PrelGHC.Intzh))}
		%in %let lit4 :: t =
			   %case zddNum %of (tpl::PrelNum.ZCTNum t)
			     {PrelNum.ZdwZCDNum
			      (tpl1::PrelBase.ZCTEq t)
			      (tpl2::PrelShow.ZCTShow t)
			      (tpl3::t -> t -> t)
			      (tpl4::t -> t -> t)
			      (tpl5::t -> t -> t)
			      (tpl6::t -> t)
			      (tpl7::t -> t)
			      (tpl8::t -> t)
			      (tpl9::PrelNum.Integer -> t) ->
				tpl9 (PrelNum.ZdwSzh (89::PrelGHC.Intzh))}
		    %in %let lit5 :: t =
			       %case zddNum %of (tpl::PrelNum.ZCTNum t)
				 {PrelNum.ZdwZCDNum
				  (tpl1::PrelBase.ZCTEq t)
				  (tpl2::PrelShow.ZCTShow t)
				  (tpl3::t -> t -> t)
				  (tpl4::t -> t -> t)
				  (tpl5::t -> t -> t)
				  (tpl6::t -> t)
				  (tpl7::t -> t)
				  (tpl8::t -> t)
				  (tpl9::PrelNum.Integer -> t) ->
				    tpl9 (PrelNum.ZdwSzh (58::PrelGHC.Intzh))}
			%in %let actionzu602 :: PrelBase.Int ->
						PrelBase.Int ->
						LexCore.Token ->
						ParCore.HappyState
						LexCore.Token
						(ParCore.HappyStk
						 (ParCore.HappyAbsSyn
						  (PrelBase.ZMZN PrelBase.Char)
						  t35
						  t36
						  t37
						  t38)
						 ->
						 PrelBase.ZMZN LexCore.Token ->
						 ErrM.Err
						 (ParCore.HappyAbsSyn
						  (PrelBase.ZMZN PrelBase.Char)
						  t35
						  t36
						  t37
						  t38))
						->
						PrelBase.ZMZN
						(ParCore.HappyState
						 LexCore.Token
						 (ParCore.HappyStk
						  (ParCore.HappyAbsSyn
						   (PrelBase.ZMZN PrelBase.Char)
						   t35
						   t36
						   t37
						   t38)
						  ->
						  PrelBase.ZMZN LexCore.Token ->
						  ErrM.Err
						  (ParCore.HappyAbsSyn
						   (PrelBase.ZMZN PrelBase.Char)
						   t35
						   t36
						   t37
						   t38)))
						->
						ParCore.HappyStk
						(ParCore.HappyAbsSyn
						 (PrelBase.ZMZN PrelBase.Char)
						 t35
						 t36
						 t37
						 t38)
						->
						PrelBase.ZMZN LexCore.Token ->
						ErrM.Err
						(ParCore.HappyAbsSyn
						 (PrelBase.ZMZN PrelBase.Char)
						 t35
						 t36
						 t37
						 t38) =
				   ParCore.actionzu60 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38
				   @ (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      t35
				      t36
				      t37
				      t38)
				   PrelNum.zdfNumInt
			    %in %let happyShift7 :: (PrelBase.Int ->
						     PrelBase.Int ->
						     LexCore.Token ->
						     ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      ->
						      PrelBase.ZMZN LexCore.Token ->
						      ErrM.Err
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38))
						     ->
						     PrelBase.ZMZN
						     (ParCore.HappyState
						      LexCore.Token
						      (ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)
						       ->
						       PrelBase.ZMZN LexCore.Token ->
						       ErrM.Err
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)))
						     ->
						     ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     ->
						     PrelBase.ZMZN LexCore.Token ->
						     ErrM.Err
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38))
						    ->
						    PrelBase.Int ->
						    LexCore.Token ->
						    ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     ->
						     PrelBase.ZMZN LexCore.Token ->
						     ErrM.Err
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38))
						    ->
						    PrelBase.ZMZN
						    (ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      ->
						      PrelBase.ZMZN LexCore.Token ->
						      ErrM.Err
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)))
						    ->
						    ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38)
						    ->
						    PrelBase.ZMZN LexCore.Token ->
						    ErrM.Err
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38) =
				       ParCore.happyShift @ PrelBase.Int
				       @ (ErrM.Err
					  (ParCore.HappyAbsSyn
					   (PrelBase.ZMZN PrelBase.Char)
					   t35
					   t36
					   t37
					   t38))
				       @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38
				       PrelNum.zdfNumInt
				%in \ (ds::t) ->
					%case zddNum %of (tpl::PrelNum.ZCTNum t)
					  {PrelNum.ZdwZCDNum
					   (tpl1::PrelBase.ZCTEq t)
					   (tpl2::PrelShow.ZCTShow t)
					   (tpl3::t -> t -> t)
					   (tpl4::t -> t -> t)
					   (tpl5::t -> t -> t)
					   (tpl6::t -> t)
					   (tpl7::t -> t)
					   (tpl8::t -> t)
					   (tpl9::PrelNum.Integer -> t) ->
					     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
					       {PrelBase.ZdwZCDEq
						(tpl11::t -> t -> PrelBase.Bool)
						(tpl12::t -> t -> PrelBase.Bool) ->
						  %case (tpl12 lit4 ds) %of (wild::PrelBase.Bool)
						    {PrelBase.ZdwTrue ->
						       happyShift7 actionzu602;
						     PrelBase.ZdwFalse ->
						       %case (tpl12 lit3 ds)
						       %of (wild1::PrelBase.Bool)
							 {PrelBase.ZdwTrue ->
							    happyShift7
							    (ParCore.actionzu32 @ PrelBase.Int
							     @ LexCore.Token @ t35 @ t36 @ t37 @ t38
							     @ (ParCore.HappyAbsSyn
								(PrelBase.ZMZN PrelBase.Char)
								t35
								t36
								t37
								t38));
							  PrelBase.ZdwFalse ->
							    %case (tpl12 lit2 ds)
							    %of (wild2::PrelBase.Bool)
							      {PrelBase.ZdwTrue ->
								 ParCore.happyAccept @ PrelBase.Int
								 @ LexCore.Token
								 @ (ParCore.HappyState
								    LexCore.Token
								    (ParCore.HappyStk
								     (ParCore.HappyAbsSyn
								      (PrelBase.ZMZN PrelBase.Char)
								      t35
								      t36
								      t37
								      t38)
								     ->
								     PrelBase.ZMZN LexCore.Token ->
								     ErrM.Err
								     (ParCore.HappyAbsSyn
								      (PrelBase.ZMZN PrelBase.Char)
								      t35
								      t36
								      t37
								      t38)))
								 @ (PrelBase.ZMZN
								    (ParCore.HappyState
								     LexCore.Token
								     (ParCore.HappyStk
								      (ParCore.HappyAbsSyn
								       (PrelBase.ZMZN PrelBase.Char)
								       t35
								       t36
								       t37
								       t38)
								      ->
								      PrelBase.ZMZN LexCore.Token ->
								      ErrM.Err
								      (ParCore.HappyAbsSyn
								       (PrelBase.ZMZN PrelBase.Char)
								       t35
								       t36
								       t37
								       t38))))
								 @ (ParCore.HappyAbsSyn
								    (PrelBase.ZMZN PrelBase.Char)
								    t35
								    t36
								    t37
								    t38)
								 @ (PrelBase.ZMZN LexCore.Token);
							       PrelBase.ZdwFalse ->
								 %case (tpl12 lit1 ds)
								 %of (wild3::PrelBase.Bool)
								   {PrelBase.ZdwTrue ->
								      ParCore.happyGoto
								      @ (ParCore.HappyState
									 LexCore.Token
									 (ParCore.HappyStk
									  (ParCore.HappyAbsSyn
									   (PrelBase.ZMZN
									    PrelBase.Char)
									   t35
									   t36
									   t37
									   t38)
									  ->
									  PrelBase.ZMZN
									  LexCore.Token
									  ->
									  ErrM.Err
									  (ParCore.HappyAbsSyn
									   (PrelBase.ZMZN
									    PrelBase.Char)
									   t35
									   t36
									   t37
									   t38)))
								      @ LexCore.Token
								      @ (ParCore.HappyStk
									 (ParCore.HappyAbsSyn
									  (PrelBase.ZMZN
									   PrelBase.Char)
									  t35
									  t36
									  t37
									  t38)
									 ->
									 PrelBase.ZMZN LexCore.Token
									 ->
									 ErrM.Err
									 (ParCore.HappyAbsSyn
									  (PrelBase.ZMZN
									   PrelBase.Char)
									  t35
									  t36
									  t37
									  t38))
								      (ParCore.actionzu58
								       @ PrelBase.Int
								       @ LexCore.Token @ t35 @ t36
								       @ t37 @ t38
								       @ (ParCore.HappyAbsSyn
									  (PrelBase.ZMZN
									   PrelBase.Char)
									  t35
									  t36
									  t37
									  t38));
								    PrelBase.ZdwFalse ->
								      %case (tpl12 lit5 ds)
								      %of (wild4::PrelBase.Bool)
									{PrelBase.ZdwTrue ->
									   ParCore.happyGoto
									   @ (ParCore.HappyState
									      LexCore.Token
									      (ParCore.HappyStk
									       (ParCore.HappyAbsSyn
										(PrelBase.ZMZN
										 PrelBase.Char)
										t35
										t36
										t37
										t38)
									       ->
									       PrelBase.ZMZN
									       LexCore.Token
									       ->
									       ErrM.Err
									       (ParCore.HappyAbsSyn
										(PrelBase.ZMZN
										 PrelBase.Char)
										t35
										t36
										t37
										t38)))
									   @ LexCore.Token
									   @ (ParCore.HappyStk
									      (ParCore.HappyAbsSyn
									       (PrelBase.ZMZN
										PrelBase.Char)
									       t35
									       t36
									       t37
									       t38)
									      ->
									      PrelBase.ZMZN
									      LexCore.Token
									      ->
									      ErrM.Err
									      (ParCore.HappyAbsSyn
									       (PrelBase.ZMZN
										PrelBase.Char)
									       t35
									       t36
									       t37
									       t38))
									   (ParCore.actionzu150
									    @ PrelBase.Int
									    @ LexCore.Token
									    @ (PrelBase.ZMZN
									       PrelBase.Char)
									    @ t35 @ t36 @ t37 @ t38
									    @ (ParCore.HappyAbsSyn
									       (PrelBase.ZMZN
										PrelBase.Char)
									       t35
									       t36
									       t37
									       t38));
									 PrelBase.ZdwFalse ->
									   ParCore.happyFail
									   @ (ParCore.HappyAbsSyn
									      (PrelBase.ZMZN
									       PrelBase.Char)
									      t35
									      t36
									      t37
									      t38)
									   @ LexCore.Token
									   @ (PrelBase.ZMZN
									      PrelBase.Char)
									   @ t35 @ t36 @ t37
									   @ t38}}}}}}};
  ParCore.actionzu20 :: %forall t t35 t36 t37 t38 . PrelNum.ZCTNum t
						    ->
						    t ->
						    PrelBase.Int ->
						    LexCore.Token ->
						    ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     ->
						     PrelBase.ZMZN LexCore.Token ->
						     ErrM.Err
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38))
						    ->
						    PrelBase.ZMZN
						    (ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      ->
						      PrelBase.ZMZN LexCore.Token ->
						      ErrM.Err
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)))
						    ->
						    ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38)
						    ->
						    PrelBase.ZMZN LexCore.Token ->
						    ErrM.Err
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38) =
    \ @ t @ t35 @ t36 @ t37 @ t38 (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (59::PrelGHC.Intzh))}
	%in %let actionzu571 :: PrelBase.Int ->
				PrelBase.Int ->
				LexCore.Token ->
				ParCore.HappyState
				LexCore.Token
				(ParCore.HappyStk
				 (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
				 ->
				 PrelBase.ZMZN LexCore.Token ->
				 ErrM.Err
				 (ParCore.HappyAbsSyn
				  (PrelBase.ZMZN PrelBase.Char)
				  t35
				  t36
				  t37
				  t38))
				->
				PrelBase.ZMZN
				(ParCore.HappyState
				 LexCore.Token
				 (ParCore.HappyStk
				  (ParCore.HappyAbsSyn
				   (PrelBase.ZMZN PrelBase.Char)
				   t35
				   t36
				   t37
				   t38)
				  ->
				  PrelBase.ZMZN LexCore.Token ->
				  ErrM.Err
				  (ParCore.HappyAbsSyn
				   (PrelBase.ZMZN PrelBase.Char)
				   t35
				   t36
				   t37
				   t38)))
				->
				ParCore.HappyStk
				(ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
				->
				PrelBase.ZMZN LexCore.Token ->
				ErrM.Err
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 t35
				 t36
				 t37
				 t38) =
		   ParCore.actionzu57 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38
		   PrelNum.zdfNumInt
	    %in \ (ds::t) ->
		    %case zddNum %of (tpl::PrelNum.ZCTNum t)
		      {PrelNum.ZdwZCDNum
		       (tpl1::PrelBase.ZCTEq t)
		       (tpl2::PrelShow.ZCTShow t)
		       (tpl3::t -> t -> t)
		       (tpl4::t -> t -> t)
		       (tpl5::t -> t -> t)
		       (tpl6::t -> t)
		       (tpl7::t -> t)
		       (tpl8::t -> t)
		       (tpl9::PrelNum.Integer -> t) ->
			 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
			   {PrelBase.ZdwZCDEq
			    (tpl11::t -> t -> PrelBase.Bool)
			    (tpl12::t -> t -> PrelBase.Bool) ->
			      %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
				{PrelBase.ZdwTrue ->
				   ParCore.happyGoto
				   @ (ParCore.HappyState
				      LexCore.Token
				      (ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					t35
					t36
					t37
					t38)
				       ->
				       PrelBase.ZMZN LexCore.Token ->
				       ErrM.Err
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					t35
					t36
					t37
					t38)))
				   @ LexCore.Token
				   @ (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       t35
				       t36
				       t37
				       t38)
				      ->
				      PrelBase.ZMZN LexCore.Token ->
				      ErrM.Err
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       t35
				       t36
				       t37
				       t38))
				   actionzu571;
				 PrelBase.ZdwFalse ->
				   ParCore.happyReducezu82 @ LexCore.Token
				   @ (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      t35
				      t36
				      t37
				      t38)
				   @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38}}};
  actionzu2011 :: PrelBase.Int ->
		  PrelBase.Int ->
		  LexCore.Token ->
		  ParCore.HappyState
		  LexCore.Token
		  (ParCore.HappyStk
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T)
		   ->
		   PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T))
		  ->
		  PrelBase.ZMZN
		  (ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)
		    ->
		    PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)))
		  ->
		  ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T)
		  ->
		  PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T) =
    ParCore.actionzu20 @ PrelBase.Int @ PrelBase.Z0T @ PrelBase.Z0T
    @ PrelBase.Z0T @ PrelBase.Z0T PrelNum.zdfNumInt;
  ParCore.actionzu55 :: %forall t b t34 t35 t36 t37 t38 . PrelNum.ZCTNum
							  t
							  ->
							  t ->
							  PrelBase.Int ->
							  b ->
							  ParCore.HappyState
							  b
							  (ParCore.HappyStk
							   (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err
							   (ParCore.HappyAbsSyn
							    t34
							    t35
							    t36
							    t37
							    t38))
							  ->
							  PrelBase.ZMZN
							  (ParCore.HappyState
							   b
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)))
							  ->
							  ParCore.HappyStk
							  (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							  ->
							  PrelBase.ZMZN LexCore.Token ->
							  ErrM.Err
							  (ParCore.HappyAbsSyn
							   t34
							   t35
							   t36
							   t37
							   t38) =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (103::PrelGHC.Intzh))}
	%in \ (ds::t) ->
		%case zddNum %of (tpl::PrelNum.ZCTNum t)
		  {PrelNum.ZdwZCDNum
		   (tpl1::PrelBase.ZCTEq t)
		   (tpl2::PrelShow.ZCTShow t)
		   (tpl3::t -> t -> t)
		   (tpl4::t -> t -> t)
		   (tpl5::t -> t -> t)
		   (tpl6::t -> t)
		   (tpl7::t -> t)
		   (tpl8::t -> t)
		   (tpl9::PrelNum.Integer -> t) ->
		     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
		       {PrelBase.ZdwZCDEq
			(tpl11::t -> t -> PrelBase.Bool)
			(tpl12::t -> t -> PrelBase.Bool) ->
			  %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
			    {PrelBase.ZdwTrue ->
			       ParCore.happyAccept @ PrelBase.Int @ b
			       @ (ParCore.HappyState
				  b
				  (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				   PrelBase.ZMZN LexCore.Token ->
				   ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)))
			       @ (PrelBase.ZMZN
				  (ParCore.HappyState
				   b
				   (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				    PrelBase.ZMZN LexCore.Token ->
				    ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))))
			       @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
			       @ (PrelBase.ZMZN LexCore.Token);
			     PrelBase.ZdwFalse ->
			       ParCore.happyFail @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) @ b
			       @ t34 @ t35 @ t36 @ t37 @ t38}}};
  ParCore.actionzu21 :: %forall t t35 t36 t37 t38 . PrelNum.ZCTNum t
						    ->
						    t ->
						    PrelBase.Int ->
						    LexCore.Token ->
						    ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     ->
						     PrelBase.ZMZN LexCore.Token ->
						     ErrM.Err
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38))
						    ->
						    PrelBase.ZMZN
						    (ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      ->
						      PrelBase.ZMZN LexCore.Token ->
						      ErrM.Err
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)))
						    ->
						    ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38)
						    ->
						    PrelBase.ZMZN LexCore.Token ->
						    ErrM.Err
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38) =
    \ @ t @ t35 @ t36 @ t37 @ t38 (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (79::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (60::PrelGHC.Intzh))}
	    %in %let actionzu551 :: PrelBase.Int ->
				    PrelBase.Int ->
				    LexCore.Token ->
				    ParCore.HappyState
				    LexCore.Token
				    (ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      t35
				      t36
				      t37
				      t38)
				     ->
				     PrelBase.ZMZN LexCore.Token ->
				     ErrM.Err
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      t35
				      t36
				      t37
				      t38))
				    ->
				    PrelBase.ZMZN
				    (ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       t35
				       t36
				       t37
				       t38)
				      ->
				      PrelBase.ZMZN LexCore.Token ->
				      ErrM.Err
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       t35
				       t36
				       t37
				       t38)))
				    ->
				    ParCore.HappyStk
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     t35
				     t36
				     t37
				     t38)
				    ->
				    PrelBase.ZMZN LexCore.Token ->
				    ErrM.Err
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     t35
				     t36
				     t37
				     t38) =
		       ParCore.actionzu55 @ PrelBase.Int @ LexCore.Token
		       @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38
		       PrelNum.zdfNumInt
		%in %let actionzu562 :: PrelBase.Int ->
					PrelBase.Int ->
					LexCore.Token ->
					ParCore.HappyState
					LexCore.Token
					(ParCore.HappyStk
					 (ParCore.HappyAbsSyn
					  (PrelBase.ZMZN PrelBase.Char)
					  t35
					  t36
					  t37
					  t38)
					 ->
					 PrelBase.ZMZN LexCore.Token ->
					 ErrM.Err
					 (ParCore.HappyAbsSyn
					  (PrelBase.ZMZN PrelBase.Char)
					  t35
					  t36
					  t37
					  t38))
					->
					PrelBase.ZMZN
					(ParCore.HappyState
					 LexCore.Token
					 (ParCore.HappyStk
					  (ParCore.HappyAbsSyn
					   (PrelBase.ZMZN PrelBase.Char)
					   t35
					   t36
					   t37
					   t38)
					  ->
					  PrelBase.ZMZN LexCore.Token ->
					  ErrM.Err
					  (ParCore.HappyAbsSyn
					   (PrelBase.ZMZN PrelBase.Char)
					   t35
					   t36
					   t37
					   t38)))
					->
					ParCore.HappyStk
					(ParCore.HappyAbsSyn
					 (PrelBase.ZMZN PrelBase.Char)
					 t35
					 t36
					 t37
					 t38)
					->
					PrelBase.ZMZN LexCore.Token ->
					ErrM.Err
					(ParCore.HappyAbsSyn
					 (PrelBase.ZMZN PrelBase.Char)
					 t35
					 t36
					 t37
					 t38) =
			   ParCore.actionzu56 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38
			   @ (ParCore.HappyAbsSyn
			      (PrelBase.ZMZN PrelBase.Char)
			      t35
			      t36
			      t37
			      t38)
			   PrelNum.zdfNumInt
		    %in %let happyShift7 :: (PrelBase.Int ->
					     PrelBase.Int ->
					     LexCore.Token ->
					     ParCore.HappyState
					     LexCore.Token
					     (ParCore.HappyStk
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38)
					      ->
					      PrelBase.ZMZN LexCore.Token ->
					      ErrM.Err
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38))
					     ->
					     PrelBase.ZMZN
					     (ParCore.HappyState
					      LexCore.Token
					      (ParCore.HappyStk
					       (ParCore.HappyAbsSyn
						(PrelBase.ZMZN PrelBase.Char)
						t35
						t36
						t37
						t38)
					       ->
					       PrelBase.ZMZN LexCore.Token ->
					       ErrM.Err
					       (ParCore.HappyAbsSyn
						(PrelBase.ZMZN PrelBase.Char)
						t35
						t36
						t37
						t38)))
					     ->
					     ParCore.HappyStk
					     (ParCore.HappyAbsSyn
					      (PrelBase.ZMZN PrelBase.Char)
					      t35
					      t36
					      t37
					      t38)
					     ->
					     PrelBase.ZMZN LexCore.Token ->
					     ErrM.Err
					     (ParCore.HappyAbsSyn
					      (PrelBase.ZMZN PrelBase.Char)
					      t35
					      t36
					      t37
					      t38))
					    ->
					    PrelBase.Int ->
					    LexCore.Token ->
					    ParCore.HappyState
					    LexCore.Token
					    (ParCore.HappyStk
					     (ParCore.HappyAbsSyn
					      (PrelBase.ZMZN PrelBase.Char)
					      t35
					      t36
					      t37
					      t38)
					     ->
					     PrelBase.ZMZN LexCore.Token ->
					     ErrM.Err
					     (ParCore.HappyAbsSyn
					      (PrelBase.ZMZN PrelBase.Char)
					      t35
					      t36
					      t37
					      t38))
					    ->
					    PrelBase.ZMZN
					    (ParCore.HappyState
					     LexCore.Token
					     (ParCore.HappyStk
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38)
					      ->
					      PrelBase.ZMZN LexCore.Token ->
					      ErrM.Err
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38)))
					    ->
					    ParCore.HappyStk
					    (ParCore.HappyAbsSyn
					     (PrelBase.ZMZN PrelBase.Char)
					     t35
					     t36
					     t37
					     t38)
					    ->
					    PrelBase.ZMZN LexCore.Token ->
					    ErrM.Err
					    (ParCore.HappyAbsSyn
					     (PrelBase.ZMZN PrelBase.Char)
					     t35
					     t36
					     t37
					     t38) =
			       ParCore.happyShift @ PrelBase.Int
			       @ (ErrM.Err
				  (ParCore.HappyAbsSyn
				   (PrelBase.ZMZN PrelBase.Char)
				   t35
				   t36
				   t37
				   t38))
			       @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38
			       PrelNum.zdfNumInt
			%in \ (ds::t) ->
				%case zddNum %of (tpl::PrelNum.ZCTNum t)
				  {PrelNum.ZdwZCDNum
				   (tpl1::PrelBase.ZCTEq t)
				   (tpl2::PrelShow.ZCTShow t)
				   (tpl3::t -> t -> t)
				   (tpl4::t -> t -> t)
				   (tpl5::t -> t -> t)
				   (tpl6::t -> t)
				   (tpl7::t -> t)
				   (tpl8::t -> t)
				   (tpl9::PrelNum.Integer -> t) ->
				     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
				       {PrelBase.ZdwZCDEq
					(tpl11::t -> t -> PrelBase.Bool)
					(tpl12::t -> t -> PrelBase.Bool) ->
					  %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
					    {PrelBase.ZdwTrue ->
					       happyShift7 actionzu562;
					     PrelBase.ZdwFalse ->
					       %case (tpl12 lit2 ds) %of (wild1::PrelBase.Bool)
						 {PrelBase.ZdwTrue ->
						    ParCore.happyGoto
						    @ (ParCore.HappyState
						       LexCore.Token
						       (ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38)
							->
							PrelBase.ZMZN LexCore.Token ->
							ErrM.Err
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38)))
						    @ LexCore.Token
						    @ (ParCore.HappyStk
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38)
						       ->
						       PrelBase.ZMZN LexCore.Token ->
						       ErrM.Err
						       (ParCore.HappyAbsSyn
							(PrelBase.ZMZN PrelBase.Char)
							t35
							t36
							t37
							t38))
						    actionzu551;
						  PrelBase.ZdwFalse ->
						    ParCore.happyFail
						    @ (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						    @ LexCore.Token @ (PrelBase.ZMZN PrelBase.Char)
						    @ t35 @ t36 @ t37 @ t38}}}};
  actionzu2121 :: PrelBase.Int ->
		  PrelBase.Int ->
		  LexCore.Token ->
		  ParCore.HappyState
		  LexCore.Token
		  (ParCore.HappyStk
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T)
		   ->
		   PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T))
		  ->
		  PrelBase.ZMZN
		  (ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)
		    ->
		    PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)))
		  ->
		  ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T)
		  ->
		  PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T) =
    ParCore.actionzu21 @ PrelBase.Int @ PrelBase.Z0T @ PrelBase.Z0T
    @ PrelBase.Z0T @ PrelBase.Z0T PrelNum.zdfNumInt;
  ParCore.actionzu54 :: %forall t t35 t36 t37 t38 . PrelNum.ZCTNum t
						    ->
						    t ->
						    PrelBase.Int ->
						    LexCore.Token ->
						    ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     ->
						     PrelBase.ZMZN LexCore.Token ->
						     ErrM.Err
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38))
						    ->
						    PrelBase.ZMZN
						    (ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      ->
						      PrelBase.ZMZN LexCore.Token ->
						      ErrM.Err
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)))
						    ->
						    ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38)
						    ->
						    PrelBase.ZMZN LexCore.Token ->
						    ErrM.Err
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38) =
    \ @ t @ t35 @ t36 @ t37 @ t38 (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (103::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (79::PrelGHC.Intzh))}
	    %in %let lit3 :: t =
		       %case zddNum %of (tpl::PrelNum.ZCTNum t)
			 {PrelNum.ZdwZCDNum
			  (tpl1::PrelBase.ZCTEq t)
			  (tpl2::PrelShow.ZCTShow t)
			  (tpl3::t -> t -> t)
			  (tpl4::t -> t -> t)
			  (tpl5::t -> t -> t)
			  (tpl6::t -> t)
			  (tpl7::t -> t)
			  (tpl8::t -> t)
			  (tpl9::PrelNum.Integer -> t) ->
			    tpl9 (PrelNum.ZdwSzh (60::PrelGHC.Intzh))}
		%in %let actionzu562 :: PrelBase.Int ->
					PrelBase.Int ->
					LexCore.Token ->
					ParCore.HappyState
					LexCore.Token
					(ParCore.HappyStk
					 (ParCore.HappyAbsSyn
					  (PrelBase.ZMZN PrelBase.Char)
					  t35
					  t36
					  t37
					  t38)
					 ->
					 PrelBase.ZMZN LexCore.Token ->
					 ErrM.Err
					 (ParCore.HappyAbsSyn
					  (PrelBase.ZMZN PrelBase.Char)
					  t35
					  t36
					  t37
					  t38))
					->
					PrelBase.ZMZN
					(ParCore.HappyState
					 LexCore.Token
					 (ParCore.HappyStk
					  (ParCore.HappyAbsSyn
					   (PrelBase.ZMZN PrelBase.Char)
					   t35
					   t36
					   t37
					   t38)
					  ->
					  PrelBase.ZMZN LexCore.Token ->
					  ErrM.Err
					  (ParCore.HappyAbsSyn
					   (PrelBase.ZMZN PrelBase.Char)
					   t35
					   t36
					   t37
					   t38)))
					->
					ParCore.HappyStk
					(ParCore.HappyAbsSyn
					 (PrelBase.ZMZN PrelBase.Char)
					 t35
					 t36
					 t37
					 t38)
					->
					PrelBase.ZMZN LexCore.Token ->
					ErrM.Err
					(ParCore.HappyAbsSyn
					 (PrelBase.ZMZN PrelBase.Char)
					 t35
					 t36
					 t37
					 t38) =
			   ParCore.actionzu56 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38
			   @ (ParCore.HappyAbsSyn
			      (PrelBase.ZMZN PrelBase.Char)
			      t35
			      t36
			      t37
			      t38)
			   PrelNum.zdfNumInt
		    %in %let happyShift7 :: (PrelBase.Int ->
					     PrelBase.Int ->
					     LexCore.Token ->
					     ParCore.HappyState
					     LexCore.Token
					     (ParCore.HappyStk
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38)
					      ->
					      PrelBase.ZMZN LexCore.Token ->
					      ErrM.Err
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38))
					     ->
					     PrelBase.ZMZN
					     (ParCore.HappyState
					      LexCore.Token
					      (ParCore.HappyStk
					       (ParCore.HappyAbsSyn
						(PrelBase.ZMZN PrelBase.Char)
						t35
						t36
						t37
						t38)
					       ->
					       PrelBase.ZMZN LexCore.Token ->
					       ErrM.Err
					       (ParCore.HappyAbsSyn
						(PrelBase.ZMZN PrelBase.Char)
						t35
						t36
						t37
						t38)))
					     ->
					     ParCore.HappyStk
					     (ParCore.HappyAbsSyn
					      (PrelBase.ZMZN PrelBase.Char)
					      t35
					      t36
					      t37
					      t38)
					     ->
					     PrelBase.ZMZN LexCore.Token ->
					     ErrM.Err
					     (ParCore.HappyAbsSyn
					      (PrelBase.ZMZN PrelBase.Char)
					      t35
					      t36
					      t37
					      t38))
					    ->
					    PrelBase.Int ->
					    LexCore.Token ->
					    ParCore.HappyState
					    LexCore.Token
					    (ParCore.HappyStk
					     (ParCore.HappyAbsSyn
					      (PrelBase.ZMZN PrelBase.Char)
					      t35
					      t36
					      t37
					      t38)
					     ->
					     PrelBase.ZMZN LexCore.Token ->
					     ErrM.Err
					     (ParCore.HappyAbsSyn
					      (PrelBase.ZMZN PrelBase.Char)
					      t35
					      t36
					      t37
					      t38))
					    ->
					    PrelBase.ZMZN
					    (ParCore.HappyState
					     LexCore.Token
					     (ParCore.HappyStk
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38)
					      ->
					      PrelBase.ZMZN LexCore.Token ->
					      ErrM.Err
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38)))
					    ->
					    ParCore.HappyStk
					    (ParCore.HappyAbsSyn
					     (PrelBase.ZMZN PrelBase.Char)
					     t35
					     t36
					     t37
					     t38)
					    ->
					    PrelBase.ZMZN LexCore.Token ->
					    ErrM.Err
					    (ParCore.HappyAbsSyn
					     (PrelBase.ZMZN PrelBase.Char)
					     t35
					     t36
					     t37
					     t38) =
			       ParCore.happyShift @ PrelBase.Int
			       @ (ErrM.Err
				  (ParCore.HappyAbsSyn
				   (PrelBase.ZMZN PrelBase.Char)
				   t35
				   t36
				   t37
				   t38))
			       @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38
			       PrelNum.zdfNumInt
			%in \ (ds::t) ->
				%case zddNum %of (tpl::PrelNum.ZCTNum t)
				  {PrelNum.ZdwZCDNum
				   (tpl1::PrelBase.ZCTEq t)
				   (tpl2::PrelShow.ZCTShow t)
				   (tpl3::t -> t -> t)
				   (tpl4::t -> t -> t)
				   (tpl5::t -> t -> t)
				   (tpl6::t -> t)
				   (tpl7::t -> t)
				   (tpl8::t -> t)
				   (tpl9::PrelNum.Integer -> t) ->
				     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
				       {PrelBase.ZdwZCDEq
					(tpl11::t -> t -> PrelBase.Bool)
					(tpl12::t -> t -> PrelBase.Bool) ->
					  %case (tpl12 lit2 ds) %of (wild::PrelBase.Bool)
					    {PrelBase.ZdwTrue ->
					       happyShift7 actionzu562;
					     PrelBase.ZdwFalse ->
					       %case (tpl12 lit1 ds) %of (wild1::PrelBase.Bool)
						 {PrelBase.ZdwTrue ->
						    ParCore.happyAccept @ PrelBase.Int
						    @ LexCore.Token
						    @ (ParCore.HappyState
						       LexCore.Token
						       (ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38)
							->
							PrelBase.ZMZN LexCore.Token ->
							ErrM.Err
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38)))
						    @ (PrelBase.ZMZN
						       (ParCore.HappyState
							LexCore.Token
							(ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token ->
							 ErrM.Err
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38))))
						    @ (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						    @ (PrelBase.ZMZN LexCore.Token);
						  PrelBase.ZdwFalse ->
						    %case (tpl12 lit3 ds) %of (wild2::PrelBase.Bool)
						      {PrelBase.ZdwTrue ->
							 ParCore.happyGoto
							 @ (ParCore.HappyState
							    LexCore.Token
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      (PrelBase.ZMZN PrelBase.Char)
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err
							     (ParCore.HappyAbsSyn
							      (PrelBase.ZMZN PrelBase.Char)
							      t35
							      t36
							      t37
							      t38)))
							 @ LexCore.Token
							 @ (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     (PrelBase.ZMZN PrelBase.Char)
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err
							    (ParCore.HappyAbsSyn
							     (PrelBase.ZMZN PrelBase.Char)
							     t35
							     t36
							     t37
							     t38))
							 (ParCore.actionzu152 @ PrelBase.Int
							  @ LexCore.Token
							  @ (PrelBase.ZMZN PrelBase.Char) @ t35
							  @ t36 @ t37 @ t38
							  @ (ParCore.HappyAbsSyn
							     (PrelBase.ZMZN PrelBase.Char)
							     t35
							     t36
							     t37
							     t38));
						       PrelBase.ZdwFalse ->
							 ParCore.happyFail
							 @ (ParCore.HappyAbsSyn
							    (PrelBase.ZMZN PrelBase.Char)
							    t35
							    t36
							    t37
							    t38)
							 @ LexCore.Token
							 @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36
							 @ t37 @ t38}}}}};
  ParCore.actionzu22 :: %forall t t35 t36 t37 t38 . PrelNum.ZCTNum t
						    ->
						    t ->
						    PrelBase.Int ->
						    LexCore.Token ->
						    ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     ->
						     PrelBase.ZMZN LexCore.Token ->
						     ErrM.Err
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38))
						    ->
						    PrelBase.ZMZN
						    (ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      ->
						      PrelBase.ZMZN LexCore.Token ->
						      ErrM.Err
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)))
						    ->
						    ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38)
						    ->
						    PrelBase.ZMZN LexCore.Token ->
						    ErrM.Err
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38) =
    \ @ t @ t35 @ t36 @ t37 @ t38 (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (61::PrelGHC.Intzh))}
	%in %let actionzu541 :: PrelBase.Int ->
				PrelBase.Int ->
				LexCore.Token ->
				ParCore.HappyState
				LexCore.Token
				(ParCore.HappyStk
				 (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
				 ->
				 PrelBase.ZMZN LexCore.Token ->
				 ErrM.Err
				 (ParCore.HappyAbsSyn
				  (PrelBase.ZMZN PrelBase.Char)
				  t35
				  t36
				  t37
				  t38))
				->
				PrelBase.ZMZN
				(ParCore.HappyState
				 LexCore.Token
				 (ParCore.HappyStk
				  (ParCore.HappyAbsSyn
				   (PrelBase.ZMZN PrelBase.Char)
				   t35
				   t36
				   t37
				   t38)
				  ->
				  PrelBase.ZMZN LexCore.Token ->
				  ErrM.Err
				  (ParCore.HappyAbsSyn
				   (PrelBase.ZMZN PrelBase.Char)
				   t35
				   t36
				   t37
				   t38)))
				->
				ParCore.HappyStk
				(ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
				->
				PrelBase.ZMZN LexCore.Token ->
				ErrM.Err
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 t35
				 t36
				 t37
				 t38) =
		   ParCore.actionzu54 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38
		   PrelNum.zdfNumInt
	    %in \ (ds::t) ->
		    %case zddNum %of (tpl::PrelNum.ZCTNum t)
		      {PrelNum.ZdwZCDNum
		       (tpl1::PrelBase.ZCTEq t)
		       (tpl2::PrelShow.ZCTShow t)
		       (tpl3::t -> t -> t)
		       (tpl4::t -> t -> t)
		       (tpl5::t -> t -> t)
		       (tpl6::t -> t)
		       (tpl7::t -> t)
		       (tpl8::t -> t)
		       (tpl9::PrelNum.Integer -> t) ->
			 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
			   {PrelBase.ZdwZCDEq
			    (tpl11::t -> t -> PrelBase.Bool)
			    (tpl12::t -> t -> PrelBase.Bool) ->
			      %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
				{PrelBase.ZdwTrue ->
				   ParCore.happyGoto
				   @ (ParCore.HappyState
				      LexCore.Token
				      (ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					t35
					t36
					t37
					t38)
				       ->
				       PrelBase.ZMZN LexCore.Token ->
				       ErrM.Err
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					t35
					t36
					t37
					t38)))
				   @ LexCore.Token
				   @ (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       t35
				       t36
				       t37
				       t38)
				      ->
				      PrelBase.ZMZN LexCore.Token ->
				      ErrM.Err
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       t35
				       t36
				       t37
				       t38))
				   actionzu541;
				 PrelBase.ZdwFalse ->
				   ParCore.happyReducezu85 @ LexCore.Token
				   @ (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      t35
				      t36
				      t37
				      t38)
				   @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38}}};
  actionzu2211 :: PrelBase.Int ->
		  PrelBase.Int ->
		  LexCore.Token ->
		  ParCore.HappyState
		  LexCore.Token
		  (ParCore.HappyStk
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T)
		   ->
		   PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T))
		  ->
		  PrelBase.ZMZN
		  (ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)
		    ->
		    PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)))
		  ->
		  ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T)
		  ->
		  PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T) =
    ParCore.actionzu22 @ PrelBase.Int @ PrelBase.Z0T @ PrelBase.Z0T
    @ PrelBase.Z0T @ PrelBase.Z0T PrelNum.zdfNumInt;
  ParCore.actionzu53 :: %forall t b t34 t35 t36 t37 t38 . PrelNum.ZCTNum
							  t
							  ->
							  t ->
							  PrelBase.Int ->
							  b ->
							  ParCore.HappyState
							  b
							  (ParCore.HappyStk
							   (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err
							   (ParCore.HappyAbsSyn
							    t34
							    t35
							    t36
							    t37
							    t38))
							  ->
							  PrelBase.ZMZN
							  (ParCore.HappyState
							   b
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)))
							  ->
							  ParCore.HappyStk
							  (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							  ->
							  PrelBase.ZMZN LexCore.Token ->
							  ErrM.Err
							  (ParCore.HappyAbsSyn
							   t34
							   t35
							   t36
							   t37
							   t38) =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (103::PrelGHC.Intzh))}
	%in \ (ds::t) ->
		%case zddNum %of (tpl::PrelNum.ZCTNum t)
		  {PrelNum.ZdwZCDNum
		   (tpl1::PrelBase.ZCTEq t)
		   (tpl2::PrelShow.ZCTShow t)
		   (tpl3::t -> t -> t)
		   (tpl4::t -> t -> t)
		   (tpl5::t -> t -> t)
		   (tpl6::t -> t)
		   (tpl7::t -> t)
		   (tpl8::t -> t)
		   (tpl9::PrelNum.Integer -> t) ->
		     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
		       {PrelBase.ZdwZCDEq
			(tpl11::t -> t -> PrelBase.Bool)
			(tpl12::t -> t -> PrelBase.Bool) ->
			  %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
			    {PrelBase.ZdwTrue ->
			       ParCore.happyAccept @ PrelBase.Int @ b
			       @ (ParCore.HappyState
				  b
				  (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				   PrelBase.ZMZN LexCore.Token ->
				   ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)))
			       @ (PrelBase.ZMZN
				  (ParCore.HappyState
				   b
				   (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				    PrelBase.ZMZN LexCore.Token ->
				    ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))))
			       @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
			       @ (PrelBase.ZMZN LexCore.Token);
			     PrelBase.ZdwFalse ->
			       ParCore.happyFail @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) @ b
			       @ t34 @ t35 @ t36 @ t37 @ t38}}};
  ParCore.actionzu23 :: %forall t t35 t36 t37 t38 . PrelNum.ZCTNum t
						    ->
						    t ->
						    PrelBase.Int ->
						    LexCore.Token ->
						    ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     ->
						     PrelBase.ZMZN LexCore.Token ->
						     ErrM.Err
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38))
						    ->
						    PrelBase.ZMZN
						    (ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      ->
						      PrelBase.ZMZN LexCore.Token ->
						      ErrM.Err
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)))
						    ->
						    ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38)
						    ->
						    PrelBase.ZMZN LexCore.Token ->
						    ErrM.Err
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38) =
    \ @ t @ t35 @ t36 @ t37 @ t38 (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (62::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (34::PrelGHC.Intzh))}
	    %in %let lit3 :: t =
		       %case zddNum %of (tpl::PrelNum.ZCTNum t)
			 {PrelNum.ZdwZCDNum
			  (tpl1::PrelBase.ZCTEq t)
			  (tpl2::PrelShow.ZCTShow t)
			  (tpl3::t -> t -> t)
			  (tpl4::t -> t -> t)
			  (tpl5::t -> t -> t)
			  (tpl6::t -> t)
			  (tpl7::t -> t)
			  (tpl8::t -> t)
			  (tpl9::PrelNum.Integer -> t) ->
			    tpl9 (PrelNum.ZdwSzh (97::PrelGHC.Intzh))}
		%in %let lit4 :: t =
			   %case zddNum %of (tpl::PrelNum.ZCTNum t)
			     {PrelNum.ZdwZCDNum
			      (tpl1::PrelBase.ZCTEq t)
			      (tpl2::PrelShow.ZCTShow t)
			      (tpl3::t -> t -> t)
			      (tpl4::t -> t -> t)
			      (tpl5::t -> t -> t)
			      (tpl6::t -> t)
			      (tpl7::t -> t)
			      (tpl8::t -> t)
			      (tpl9::PrelNum.Integer -> t) ->
				tpl9 (PrelNum.ZdwSzh (89::PrelGHC.Intzh))}
		    %in %let lit5 :: t =
			       %case zddNum %of (tpl::PrelNum.ZCTNum t)
				 {PrelNum.ZdwZCDNum
				  (tpl1::PrelBase.ZCTEq t)
				  (tpl2::PrelShow.ZCTShow t)
				  (tpl3::t -> t -> t)
				  (tpl4::t -> t -> t)
				  (tpl5::t -> t -> t)
				  (tpl6::t -> t)
				  (tpl7::t -> t)
				  (tpl8::t -> t)
				  (tpl9::PrelNum.Integer -> t) ->
				    tpl9 (PrelNum.ZdwSzh (69::PrelGHC.Intzh))}
			%in %let actionzu531 :: PrelBase.Int ->
						PrelBase.Int ->
						LexCore.Token ->
						ParCore.HappyState
						LexCore.Token
						(ParCore.HappyStk
						 (ParCore.HappyAbsSyn
						  (PrelBase.ZMZN PrelBase.Char)
						  t35
						  t36
						  t37
						  t38)
						 ->
						 PrelBase.ZMZN LexCore.Token ->
						 ErrM.Err
						 (ParCore.HappyAbsSyn
						  (PrelBase.ZMZN PrelBase.Char)
						  t35
						  t36
						  t37
						  t38))
						->
						PrelBase.ZMZN
						(ParCore.HappyState
						 LexCore.Token
						 (ParCore.HappyStk
						  (ParCore.HappyAbsSyn
						   (PrelBase.ZMZN PrelBase.Char)
						   t35
						   t36
						   t37
						   t38)
						  ->
						  PrelBase.ZMZN LexCore.Token ->
						  ErrM.Err
						  (ParCore.HappyAbsSyn
						   (PrelBase.ZMZN PrelBase.Char)
						   t35
						   t36
						   t37
						   t38)))
						->
						ParCore.HappyStk
						(ParCore.HappyAbsSyn
						 (PrelBase.ZMZN PrelBase.Char)
						 t35
						 t36
						 t37
						 t38)
						->
						PrelBase.ZMZN LexCore.Token ->
						ErrM.Err
						(ParCore.HappyAbsSyn
						 (PrelBase.ZMZN PrelBase.Char)
						 t35
						 t36
						 t37
						 t38) =
				   ParCore.actionzu53 @ PrelBase.Int @ LexCore.Token
				   @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38
				   PrelNum.zdfNumInt
			    %in %let actionzu453 :: PrelBase.Int ->
						    PrelBase.Int ->
						    LexCore.Token ->
						    ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     ->
						     PrelBase.ZMZN LexCore.Token ->
						     ErrM.Err
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38))
						    ->
						    PrelBase.ZMZN
						    (ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      ->
						      PrelBase.ZMZN LexCore.Token ->
						      ErrM.Err
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)))
						    ->
						    ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38)
						    ->
						    PrelBase.ZMZN LexCore.Token ->
						    ErrM.Err
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38) =
				       ParCore.actionzu45 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38
				       @ (ParCore.HappyAbsSyn
					  (PrelBase.ZMZN PrelBase.Char)
					  t35
					  t36
					  t37
					  t38)
				       PrelNum.zdfNumInt
				%in %let happyShift7 :: (PrelBase.Int ->
							 PrelBase.Int ->
							 LexCore.Token ->
							 ParCore.HappyState
							 LexCore.Token
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   t38)
							  ->
							  PrelBase.ZMZN LexCore.Token ->
							  ErrM.Err
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   t38))
							 ->
							 PrelBase.ZMZN
							 (ParCore.HappyState
							  LexCore.Token
							  (ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    (PrelBase.ZMZN PrelBase.Char)
							    t35
							    t36
							    t37
							    t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err
							   (ParCore.HappyAbsSyn
							    (PrelBase.ZMZN PrelBase.Char)
							    t35
							    t36
							    t37
							    t38)))
							 ->
							 ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token ->
							 ErrM.Err
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38))
							->
							PrelBase.Int ->
							LexCore.Token ->
							ParCore.HappyState
							LexCore.Token
							(ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token ->
							 ErrM.Err
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38))
							->
							PrelBase.ZMZN
							(ParCore.HappyState
							 LexCore.Token
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   t38)
							  ->
							  PrelBase.ZMZN LexCore.Token ->
							  ErrM.Err
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   t38)))
							->
							ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38)
							->
							PrelBase.ZMZN LexCore.Token ->
							ErrM.Err
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38) =
					   ParCore.happyShift @ PrelBase.Int
					   @ (ErrM.Err
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38))
					   @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38
					   PrelNum.zdfNumInt
				    %in \ (ds::t) ->
					    %case zddNum %of (tpl::PrelNum.ZCTNum t)
					      {PrelNum.ZdwZCDNum
					       (tpl1::PrelBase.ZCTEq t)
					       (tpl2::PrelShow.ZCTShow t)
					       (tpl3::t -> t -> t)
					       (tpl4::t -> t -> t)
					       (tpl5::t -> t -> t)
					       (tpl6::t -> t)
					       (tpl7::t -> t)
					       (tpl8::t -> t)
					       (tpl9::PrelNum.Integer -> t) ->
						 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
						   {PrelBase.ZdwZCDEq
						    (tpl11::t -> t -> PrelBase.Bool)
						    (tpl12::t -> t -> PrelBase.Bool) ->
						      %case (tpl12 lit4 ds)
						      %of (wild::PrelBase.Bool)
							{PrelBase.ZdwTrue ->
							   happyShift7
							   (%note "InlineMe"
							    actionzu501 @ t35 @ t36 @ t37 @ t38
							    @ (ParCore.HappyAbsSyn
							       (PrelBase.ZMZN PrelBase.Char)
							       t35
							       t36
							       t37
							       t38));
							 PrelBase.ZdwFalse ->
							   %case (tpl12 lit3 ds)
							   %of (wild1::PrelBase.Bool)
							     {PrelBase.ZdwTrue ->
								happyShift7
								(ParCore.actionzu32 @ PrelBase.Int
								 @ LexCore.Token @ t35 @ t36 @ t37
								 @ t38
								 @ (ParCore.HappyAbsSyn
								    (PrelBase.ZMZN PrelBase.Char)
								    t35
								    t36
								    t37
								    t38));
							      PrelBase.ZdwFalse ->
								%case (tpl12 lit2 ds)
								%of (wild2::PrelBase.Bool)
								  {PrelBase.ZdwTrue ->
								     ParCore.happyGoto
								     @ (ParCore.HappyState
									LexCore.Token
									(ParCore.HappyStk
									 (ParCore.HappyAbsSyn
									  (PrelBase.ZMZN
									   PrelBase.Char)
									  t35
									  t36
									  t37
									  t38)
									 ->
									 PrelBase.ZMZN LexCore.Token
									 ->
									 ErrM.Err
									 (ParCore.HappyAbsSyn
									  (PrelBase.ZMZN
									   PrelBase.Char)
									  t35
									  t36
									  t37
									  t38)))
								     @ LexCore.Token
								     @ (ParCore.HappyStk
									(ParCore.HappyAbsSyn
									 (PrelBase.ZMZN
									  PrelBase.Char)
									 t35
									 t36
									 t37
									 t38)
									->
									PrelBase.ZMZN LexCore.Token
									->
									ErrM.Err
									(ParCore.HappyAbsSyn
									 (PrelBase.ZMZN
									  PrelBase.Char)
									 t35
									 t36
									 t37
									 t38))
								     actionzu453;
								   PrelBase.ZdwFalse ->
								     %case (tpl12 lit1 ds)
								     %of (wild3::PrelBase.Bool)
								       {PrelBase.ZdwTrue ->
									  ParCore.happyGoto
									  @ (ParCore.HappyState
									     LexCore.Token
									     (ParCore.HappyStk
									      (ParCore.HappyAbsSyn
									       (PrelBase.ZMZN
										PrelBase.Char)
									       t35
									       t36
									       t37
									       t38)
									      ->
									      PrelBase.ZMZN
									      LexCore.Token
									      ->
									      ErrM.Err
									      (ParCore.HappyAbsSyn
									       (PrelBase.ZMZN
										PrelBase.Char)
									       t35
									       t36
									       t37
									       t38)))
									  @ LexCore.Token
									  @ (ParCore.HappyStk
									     (ParCore.HappyAbsSyn
									      (PrelBase.ZMZN
									       PrelBase.Char)
									      t35
									      t36
									      t37
									      t38)
									     ->
									     PrelBase.ZMZN
									     LexCore.Token
									     ->
									     ErrM.Err
									     (ParCore.HappyAbsSyn
									      (PrelBase.ZMZN
									       PrelBase.Char)
									      t35
									      t36
									      t37
									      t38))
									  actionzu531;
									PrelBase.ZdwFalse ->
									  %case (tpl12 lit5 ds)
									  %of (wild4::PrelBase.Bool)
									    {PrelBase.ZdwTrue ->
									       ParCore.happyGoto
									       @ (ParCore.HappyState
										  LexCore.Token
										  (ParCore.HappyStk
										   (ParCore.HappyAbsSyn
										    (PrelBase.ZMZN
										     PrelBase.Char)
										    t35
										    t36
										    t37
										    t38)
										   ->
										   PrelBase.ZMZN
										   LexCore.Token
										   ->
										   ErrM.Err
										   (ParCore.HappyAbsSyn
										    (PrelBase.ZMZN
										     PrelBase.Char)
										    t35
										    t36
										    t37
										    t38)))
									       @ LexCore.Token
									       @ (ParCore.HappyStk
										  (ParCore.HappyAbsSyn
										   (PrelBase.ZMZN
										    PrelBase.Char)
										   t35
										   t36
										   t37
										   t38)
										  ->
										  PrelBase.ZMZN
										  LexCore.Token
										  ->
										  ErrM.Err
										  (ParCore.HappyAbsSyn
										   (PrelBase.ZMZN
										    PrelBase.Char)
										   t35
										   t36
										   t37
										   t38))
									       (ParCore.actionzu49
										@ PrelBase.Int
										@ LexCore.Token
										@ (PrelBase.ZMZN
										   PrelBase.Char)
										@ t35 @ t36 @ t37
										@ t38
										@ (ParCore.HappyAbsSyn
										   (PrelBase.ZMZN
										    PrelBase.Char)
										   t35
										   t36
										   t37
										   t38));
									     PrelBase.ZdwFalse ->
									       ParCore.happyFail
									       @ (ParCore.HappyAbsSyn
										  (PrelBase.ZMZN
										   PrelBase.Char)
										  t35
										  t36
										  t37
										  t38)
									       @ LexCore.Token
									       @ (PrelBase.ZMZN
										  PrelBase.Char)
									       @ t35 @ t36 @ t37
									       @ t38}}}}}}};
  actionzu231 :: PrelBase.Int ->
		 PrelBase.Int ->
		 LexCore.Token ->
		 ParCore.HappyState
		 LexCore.Token
		 (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T)
		  ->
		  PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T))
		 ->
		 PrelBase.ZMZN
		 (ParCore.HappyState
		  LexCore.Token
		  (ParCore.HappyStk
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T)
		   ->
		   PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T)))
		 ->
		 ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T)
		 ->
		 PrelBase.ZMZN LexCore.Token ->
		 ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T) =
    ParCore.actionzu23 @ PrelBase.Int @ PrelBase.Z0T @ PrelBase.Z0T
    @ PrelBase.Z0T @ PrelBase.Z0T PrelNum.zdfNumInt;
  ParCore.actionzu52 :: %forall t t35 t36 t37 t38 . PrelNum.ZCTNum t
						    ->
						    t ->
						    PrelBase.Int ->
						    LexCore.Token ->
						    ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     ->
						     PrelBase.ZMZN LexCore.Token ->
						     ErrM.Err
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38))
						    ->
						    PrelBase.ZMZN
						    (ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      ->
						      PrelBase.ZMZN LexCore.Token ->
						      ErrM.Err
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)))
						    ->
						    ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38)
						    ->
						    PrelBase.ZMZN LexCore.Token ->
						    ErrM.Err
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38) =
    \ @ t @ t35 @ t36 @ t37 @ t38 (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (62::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (34::PrelGHC.Intzh))}
	    %in %let lit3 :: t =
		       %case zddNum %of (tpl::PrelNum.ZCTNum t)
			 {PrelNum.ZdwZCDNum
			  (tpl1::PrelBase.ZCTEq t)
			  (tpl2::PrelShow.ZCTShow t)
			  (tpl3::t -> t -> t)
			  (tpl4::t -> t -> t)
			  (tpl5::t -> t -> t)
			  (tpl6::t -> t)
			  (tpl7::t -> t)
			  (tpl8::t -> t)
			  (tpl9::PrelNum.Integer -> t) ->
			    tpl9 (PrelNum.ZdwSzh (103::PrelGHC.Intzh))}
		%in %let lit4 :: t =
			   %case zddNum %of (tpl::PrelNum.ZCTNum t)
			     {PrelNum.ZdwZCDNum
			      (tpl1::PrelBase.ZCTEq t)
			      (tpl2::PrelShow.ZCTShow t)
			      (tpl3::t -> t -> t)
			      (tpl4::t -> t -> t)
			      (tpl5::t -> t -> t)
			      (tpl6::t -> t)
			      (tpl7::t -> t)
			      (tpl8::t -> t)
			      (tpl9::PrelNum.Integer -> t) ->
				tpl9 (PrelNum.ZdwSzh (97::PrelGHC.Intzh))}
		    %in %let lit5 :: t =
			       %case zddNum %of (tpl::PrelNum.ZCTNum t)
				 {PrelNum.ZdwZCDNum
				  (tpl1::PrelBase.ZCTEq t)
				  (tpl2::PrelShow.ZCTShow t)
				  (tpl3::t -> t -> t)
				  (tpl4::t -> t -> t)
				  (tpl5::t -> t -> t)
				  (tpl6::t -> t)
				  (tpl7::t -> t)
				  (tpl8::t -> t)
				  (tpl9::PrelNum.Integer -> t) ->
				    tpl9 (PrelNum.ZdwSzh (89::PrelGHC.Intzh))}
			%in %let lit6 :: t =
				   %case zddNum %of (tpl::PrelNum.ZCTNum t)
				     {PrelNum.ZdwZCDNum
				      (tpl1::PrelBase.ZCTEq t)
				      (tpl2::PrelShow.ZCTShow t)
				      (tpl3::t -> t -> t)
				      (tpl4::t -> t -> t)
				      (tpl5::t -> t -> t)
				      (tpl6::t -> t)
				      (tpl7::t -> t)
				      (tpl8::t -> t)
				      (tpl9::PrelNum.Integer -> t) ->
					tpl9 (PrelNum.ZdwSzh (69::PrelGHC.Intzh))}
			    %in %let actionzu453 :: PrelBase.Int ->
						    PrelBase.Int ->
						    LexCore.Token ->
						    ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     ->
						     PrelBase.ZMZN LexCore.Token ->
						     ErrM.Err
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38))
						    ->
						    PrelBase.ZMZN
						    (ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      ->
						      PrelBase.ZMZN LexCore.Token ->
						      ErrM.Err
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)))
						    ->
						    ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38)
						    ->
						    PrelBase.ZMZN LexCore.Token ->
						    ErrM.Err
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38) =
				       ParCore.actionzu45 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38
				       @ (ParCore.HappyAbsSyn
					  (PrelBase.ZMZN PrelBase.Char)
					  t35
					  t36
					  t37
					  t38)
				       PrelNum.zdfNumInt
				%in %let happyShift7 :: (PrelBase.Int ->
							 PrelBase.Int ->
							 LexCore.Token ->
							 ParCore.HappyState
							 LexCore.Token
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   t38)
							  ->
							  PrelBase.ZMZN LexCore.Token ->
							  ErrM.Err
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   t38))
							 ->
							 PrelBase.ZMZN
							 (ParCore.HappyState
							  LexCore.Token
							  (ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    (PrelBase.ZMZN PrelBase.Char)
							    t35
							    t36
							    t37
							    t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err
							   (ParCore.HappyAbsSyn
							    (PrelBase.ZMZN PrelBase.Char)
							    t35
							    t36
							    t37
							    t38)))
							 ->
							 ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token ->
							 ErrM.Err
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38))
							->
							PrelBase.Int ->
							LexCore.Token ->
							ParCore.HappyState
							LexCore.Token
							(ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token ->
							 ErrM.Err
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38))
							->
							PrelBase.ZMZN
							(ParCore.HappyState
							 LexCore.Token
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   t38)
							  ->
							  PrelBase.ZMZN LexCore.Token ->
							  ErrM.Err
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   t38)))
							->
							ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38)
							->
							PrelBase.ZMZN LexCore.Token ->
							ErrM.Err
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38) =
					   ParCore.happyShift @ PrelBase.Int
					   @ (ErrM.Err
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38))
					   @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38
					   PrelNum.zdfNumInt
				    %in \ (ds::t) ->
					    %case zddNum %of (tpl::PrelNum.ZCTNum t)
					      {PrelNum.ZdwZCDNum
					       (tpl1::PrelBase.ZCTEq t)
					       (tpl2::PrelShow.ZCTShow t)
					       (tpl3::t -> t -> t)
					       (tpl4::t -> t -> t)
					       (tpl5::t -> t -> t)
					       (tpl6::t -> t)
					       (tpl7::t -> t)
					       (tpl8::t -> t)
					       (tpl9::PrelNum.Integer -> t) ->
						 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
						   {PrelBase.ZdwZCDEq
						    (tpl11::t -> t -> PrelBase.Bool)
						    (tpl12::t -> t -> PrelBase.Bool) ->
						      %case (tpl12 lit5 ds)
						      %of (wild::PrelBase.Bool)
							{PrelBase.ZdwTrue ->
							   happyShift7
							   (%note "InlineMe"
							    actionzu501 @ t35 @ t36 @ t37 @ t38
							    @ (ParCore.HappyAbsSyn
							       (PrelBase.ZMZN PrelBase.Char)
							       t35
							       t36
							       t37
							       t38));
							 PrelBase.ZdwFalse ->
							   %case (tpl12 lit4 ds)
							   %of (wild1::PrelBase.Bool)
							     {PrelBase.ZdwTrue ->
								happyShift7
								(ParCore.actionzu32 @ PrelBase.Int
								 @ LexCore.Token @ t35 @ t36 @ t37
								 @ t38
								 @ (ParCore.HappyAbsSyn
								    (PrelBase.ZMZN PrelBase.Char)
								    t35
								    t36
								    t37
								    t38));
							      PrelBase.ZdwFalse ->
								%case (tpl12 lit3 ds)
								%of (wild2::PrelBase.Bool)
								  {PrelBase.ZdwTrue ->
								     ParCore.happyAccept
								     @ PrelBase.Int @ LexCore.Token
								     @ (ParCore.HappyState
									LexCore.Token
									(ParCore.HappyStk
									 (ParCore.HappyAbsSyn
									  (PrelBase.ZMZN
									   PrelBase.Char)
									  t35
									  t36
									  t37
									  t38)
									 ->
									 PrelBase.ZMZN LexCore.Token
									 ->
									 ErrM.Err
									 (ParCore.HappyAbsSyn
									  (PrelBase.ZMZN
									   PrelBase.Char)
									  t35
									  t36
									  t37
									  t38)))
								     @ (PrelBase.ZMZN
									(ParCore.HappyState
									 LexCore.Token
									 (ParCore.HappyStk
									  (ParCore.HappyAbsSyn
									   (PrelBase.ZMZN
									    PrelBase.Char)
									   t35
									   t36
									   t37
									   t38)
									  ->
									  PrelBase.ZMZN
									  LexCore.Token
									  ->
									  ErrM.Err
									  (ParCore.HappyAbsSyn
									   (PrelBase.ZMZN
									    PrelBase.Char)
									   t35
									   t36
									   t37
									   t38))))
								     @ (ParCore.HappyAbsSyn
									(PrelBase.ZMZN
									 PrelBase.Char)
									t35
									t36
									t37
									t38)
								     @ (PrelBase.ZMZN
									LexCore.Token);
								   PrelBase.ZdwFalse ->
								     %case (tpl12 lit2 ds)
								     %of (wild3::PrelBase.Bool)
								       {PrelBase.ZdwTrue ->
									  ParCore.happyGoto
									  @ (ParCore.HappyState
									     LexCore.Token
									     (ParCore.HappyStk
									      (ParCore.HappyAbsSyn
									       (PrelBase.ZMZN
										PrelBase.Char)
									       t35
									       t36
									       t37
									       t38)
									      ->
									      PrelBase.ZMZN
									      LexCore.Token
									      ->
									      ErrM.Err
									      (ParCore.HappyAbsSyn
									       (PrelBase.ZMZN
										PrelBase.Char)
									       t35
									       t36
									       t37
									       t38)))
									  @ LexCore.Token
									  @ (ParCore.HappyStk
									     (ParCore.HappyAbsSyn
									      (PrelBase.ZMZN
									       PrelBase.Char)
									      t35
									      t36
									      t37
									      t38)
									     ->
									     PrelBase.ZMZN
									     LexCore.Token
									     ->
									     ErrM.Err
									     (ParCore.HappyAbsSyn
									      (PrelBase.ZMZN
									       PrelBase.Char)
									      t35
									      t36
									      t37
									      t38))
									  actionzu453;
									PrelBase.ZdwFalse ->
									  %case (tpl12 lit1 ds)
									  %of (wild4::PrelBase.Bool)
									    {PrelBase.ZdwTrue ->
									       ParCore.happyGoto
									       @ (ParCore.HappyState
										  LexCore.Token
										  (ParCore.HappyStk
										   (ParCore.HappyAbsSyn
										    (PrelBase.ZMZN
										     PrelBase.Char)
										    t35
										    t36
										    t37
										    t38)
										   ->
										   PrelBase.ZMZN
										   LexCore.Token
										   ->
										   ErrM.Err
										   (ParCore.HappyAbsSyn
										    (PrelBase.ZMZN
										     PrelBase.Char)
										    t35
										    t36
										    t37
										    t38)))
									       @ LexCore.Token
									       @ (ParCore.HappyStk
										  (ParCore.HappyAbsSyn
										   (PrelBase.ZMZN
										    PrelBase.Char)
										   t35
										   t36
										   t37
										   t38)
										  ->
										  PrelBase.ZMZN
										  LexCore.Token
										  ->
										  ErrM.Err
										  (ParCore.HappyAbsSyn
										   (PrelBase.ZMZN
										    PrelBase.Char)
										   t35
										   t36
										   t37
										   t38))
									       (ParCore.actionzu153
										@ PrelBase.Int
										@ LexCore.Token
										@ (PrelBase.ZMZN
										   PrelBase.Char)
										@ t35 @ t36 @ t37
										@ t38
										@ (ParCore.HappyAbsSyn
										   (PrelBase.ZMZN
										    PrelBase.Char)
										   t35
										   t36
										   t37
										   t38));
									     PrelBase.ZdwFalse ->
									       %case (tpl12 lit6 ds)
									       %of (wild5::PrelBase.Bool)
										 {PrelBase.ZdwTrue
										  ->
										    ParCore.happyGoto
										    @ (ParCore.HappyState
										       LexCore.Token
										       (ParCore.HappyStk
											(ParCore.HappyAbsSyn
											 (PrelBase.ZMZN
											  PrelBase.Char)
											 t35
											 t36
											 t37
											 t38)
											->
											PrelBase.ZMZN
											LexCore.Token
											->
											ErrM.Err
											(ParCore.HappyAbsSyn
											 (PrelBase.ZMZN
											  PrelBase.Char)
											 t35
											 t36
											 t37
											 t38)))
										    @ LexCore.Token
										    @ (ParCore.HappyStk
										       (ParCore.HappyAbsSyn
											(PrelBase.ZMZN
											 PrelBase.Char)
											t35
											t36
											t37
											t38)
										       ->
										       PrelBase.ZMZN
										       LexCore.Token
										       ->
										       ErrM.Err
										       (ParCore.HappyAbsSyn
											(PrelBase.ZMZN
											 PrelBase.Char)
											t35
											t36
											t37
											t38))
										    (ParCore.actionzu49
										     @ PrelBase.Int
										     @ LexCore.Token
										     @ (PrelBase.ZMZN
											PrelBase.Char)
										     @ t35 @ t36
										     @ t37 @ t38
										     @ (ParCore.HappyAbsSyn
											(PrelBase.ZMZN
											 PrelBase.Char)
											t35
											t36
											t37
											t38));
										  PrelBase.ZdwFalse
										  ->
										    ParCore.happyFail
										    @ (ParCore.HappyAbsSyn
										       (PrelBase.ZMZN
											PrelBase.Char)
										       t35
										       t36
										       t37
										       t38)
										    @ LexCore.Token
										    @ (PrelBase.ZMZN
										       PrelBase.Char)
										    @ t35 @ t36
										    @ t37
										    @ t38}}}}}}}};
  ParCore.actionzu24 :: %forall t t35 t36 t37 t38 . PrelNum.ZCTNum t
						    ->
						    t ->
						    PrelBase.Int ->
						    LexCore.Token ->
						    ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     ->
						     PrelBase.ZMZN LexCore.Token ->
						     ErrM.Err
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38))
						    ->
						    PrelBase.ZMZN
						    (ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      ->
						      PrelBase.ZMZN LexCore.Token ->
						      ErrM.Err
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)))
						    ->
						    ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38)
						    ->
						    PrelBase.ZMZN LexCore.Token ->
						    ErrM.Err
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38) =
    \ @ t @ t35 @ t36 @ t37 @ t38 (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (63::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (62::PrelGHC.Intzh))}
	    %in %let lit3 :: t =
		       %case zddNum %of (tpl::PrelNum.ZCTNum t)
			 {PrelNum.ZdwZCDNum
			  (tpl1::PrelBase.ZCTEq t)
			  (tpl2::PrelShow.ZCTShow t)
			  (tpl3::t -> t -> t)
			  (tpl4::t -> t -> t)
			  (tpl5::t -> t -> t)
			  (tpl6::t -> t)
			  (tpl7::t -> t)
			  (tpl8::t -> t)
			  (tpl9::PrelNum.Integer -> t) ->
			    tpl9 (PrelNum.ZdwSzh (34::PrelGHC.Intzh))}
		%in %let lit4 :: t =
			   %case zddNum %of (tpl::PrelNum.ZCTNum t)
			     {PrelNum.ZdwZCDNum
			      (tpl1::PrelBase.ZCTEq t)
			      (tpl2::PrelShow.ZCTShow t)
			      (tpl3::t -> t -> t)
			      (tpl4::t -> t -> t)
			      (tpl5::t -> t -> t)
			      (tpl6::t -> t)
			      (tpl7::t -> t)
			      (tpl8::t -> t)
			      (tpl9::PrelNum.Integer -> t) ->
				tpl9 (PrelNum.ZdwSzh (97::PrelGHC.Intzh))}
		    %in %let lit5 :: t =
			       %case zddNum %of (tpl::PrelNum.ZCTNum t)
				 {PrelNum.ZdwZCDNum
				  (tpl1::PrelBase.ZCTEq t)
				  (tpl2::PrelShow.ZCTShow t)
				  (tpl3::t -> t -> t)
				  (tpl4::t -> t -> t)
				  (tpl5::t -> t -> t)
				  (tpl6::t -> t)
				  (tpl7::t -> t)
				  (tpl8::t -> t)
				  (tpl9::PrelNum.Integer -> t) ->
				    tpl9 (PrelNum.ZdwSzh (89::PrelGHC.Intzh))}
			%in %let lit6 :: t =
				   %case zddNum %of (tpl::PrelNum.ZCTNum t)
				     {PrelNum.ZdwZCDNum
				      (tpl1::PrelBase.ZCTEq t)
				      (tpl2::PrelShow.ZCTShow t)
				      (tpl3::t -> t -> t)
				      (tpl4::t -> t -> t)
				      (tpl5::t -> t -> t)
				      (tpl6::t -> t)
				      (tpl7::t -> t)
				      (tpl8::t -> t)
				      (tpl9::PrelNum.Integer -> t) ->
					tpl9 (PrelNum.ZdwSzh (69::PrelGHC.Intzh))}
			    %in %let actionzu521 :: PrelBase.Int ->
						    PrelBase.Int ->
						    LexCore.Token ->
						    ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     ->
						     PrelBase.ZMZN LexCore.Token ->
						     ErrM.Err
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38))
						    ->
						    PrelBase.ZMZN
						    (ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      ->
						      PrelBase.ZMZN LexCore.Token ->
						      ErrM.Err
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)))
						    ->
						    ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38)
						    ->
						    PrelBase.ZMZN LexCore.Token ->
						    ErrM.Err
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38) =
				       ParCore.actionzu52 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38
				       PrelNum.zdfNumInt
				%in %let actionzu453 :: PrelBase.Int ->
							PrelBase.Int ->
							LexCore.Token ->
							ParCore.HappyState
							LexCore.Token
							(ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token ->
							 ErrM.Err
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38))
							->
							PrelBase.ZMZN
							(ParCore.HappyState
							 LexCore.Token
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   t38)
							  ->
							  PrelBase.ZMZN LexCore.Token ->
							  ErrM.Err
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   t38)))
							->
							ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38)
							->
							PrelBase.ZMZN LexCore.Token ->
							ErrM.Err
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38) =
					   ParCore.actionzu45 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38
					   @ (ParCore.HappyAbsSyn
					      (PrelBase.ZMZN PrelBase.Char)
					      t35
					      t36
					      t37
					      t38)
					   PrelNum.zdfNumInt
				    %in %let happyShift7 :: (PrelBase.Int ->
							     PrelBase.Int ->
							     LexCore.Token ->
							     ParCore.HappyState
							     LexCore.Token
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       (PrelBase.ZMZN PrelBase.Char)
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err
							      (ParCore.HappyAbsSyn
							       (PrelBase.ZMZN PrelBase.Char)
							       t35
							       t36
							       t37
							       t38))
							     ->
							     PrelBase.ZMZN
							     (ParCore.HappyState
							      LexCore.Token
							      (ParCore.HappyStk
							       (ParCore.HappyAbsSyn
								(PrelBase.ZMZN PrelBase.Char)
								t35
								t36
								t37
								t38)
							       ->
							       PrelBase.ZMZN LexCore.Token ->
							       ErrM.Err
							       (ParCore.HappyAbsSyn
								(PrelBase.ZMZN PrelBase.Char)
								t35
								t36
								t37
								t38)))
							     ->
							     ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      (PrelBase.ZMZN PrelBase.Char)
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err
							     (ParCore.HappyAbsSyn
							      (PrelBase.ZMZN PrelBase.Char)
							      t35
							      t36
							      t37
							      t38))
							    ->
							    PrelBase.Int ->
							    LexCore.Token ->
							    ParCore.HappyState
							    LexCore.Token
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      (PrelBase.ZMZN PrelBase.Char)
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err
							     (ParCore.HappyAbsSyn
							      (PrelBase.ZMZN PrelBase.Char)
							      t35
							      t36
							      t37
							      t38))
							    ->
							    PrelBase.ZMZN
							    (ParCore.HappyState
							     LexCore.Token
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       (PrelBase.ZMZN PrelBase.Char)
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err
							      (ParCore.HappyAbsSyn
							       (PrelBase.ZMZN PrelBase.Char)
							       t35
							       t36
							       t37
							       t38)))
							    ->
							    ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     (PrelBase.ZMZN PrelBase.Char)
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err
							    (ParCore.HappyAbsSyn
							     (PrelBase.ZMZN PrelBase.Char)
							     t35
							     t36
							     t37
							     t38) =
					       ParCore.happyShift @ PrelBase.Int
					       @ (ErrM.Err
						  (ParCore.HappyAbsSyn
						   (PrelBase.ZMZN PrelBase.Char)
						   t35
						   t36
						   t37
						   t38))
					       @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37
					       @ t38 PrelNum.zdfNumInt
					%in \ (ds::t) ->
						%case zddNum %of (tpl::PrelNum.ZCTNum t)
						  {PrelNum.ZdwZCDNum
						   (tpl1::PrelBase.ZCTEq t)
						   (tpl2::PrelShow.ZCTShow t)
						   (tpl3::t -> t -> t)
						   (tpl4::t -> t -> t)
						   (tpl5::t -> t -> t)
						   (tpl6::t -> t)
						   (tpl7::t -> t)
						   (tpl8::t -> t)
						   (tpl9::PrelNum.Integer -> t) ->
						     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
						       {PrelBase.ZdwZCDEq
							(tpl11::t -> t -> PrelBase.Bool)
							(tpl12::t -> t -> PrelBase.Bool) ->
							  %case (tpl12 lit5 ds)
							  %of (wild::PrelBase.Bool)
							    {PrelBase.ZdwTrue ->
							       happyShift7
							       (%note "InlineMe"
								actionzu501 @ t35 @ t36 @ t37 @ t38
								@ (ParCore.HappyAbsSyn
								   (PrelBase.ZMZN PrelBase.Char)
								   t35
								   t36
								   t37
								   t38));
							     PrelBase.ZdwFalse ->
							       %case (tpl12 lit4 ds)
							       %of (wild1::PrelBase.Bool)
								 {PrelBase.ZdwTrue ->
								    happyShift7
								    (ParCore.actionzu32
								     @ PrelBase.Int @ LexCore.Token
								     @ t35 @ t36 @ t37 @ t38
								     @ (ParCore.HappyAbsSyn
									(PrelBase.ZMZN
									 PrelBase.Char)
									t35
									t36
									t37
									t38));
								  PrelBase.ZdwFalse ->
								    %case (tpl12 lit3 ds)
								    %of (wild2::PrelBase.Bool)
								      {PrelBase.ZdwTrue ->
									 ParCore.happyGoto
									 @ (ParCore.HappyState
									    LexCore.Token
									    (ParCore.HappyStk
									     (ParCore.HappyAbsSyn
									      (PrelBase.ZMZN
									       PrelBase.Char)
									      t35
									      t36
									      t37
									      t38)
									     ->
									     PrelBase.ZMZN
									     LexCore.Token
									     ->
									     ErrM.Err
									     (ParCore.HappyAbsSyn
									      (PrelBase.ZMZN
									       PrelBase.Char)
									      t35
									      t36
									      t37
									      t38)))
									 @ LexCore.Token
									 @ (ParCore.HappyStk
									    (ParCore.HappyAbsSyn
									     (PrelBase.ZMZN
									      PrelBase.Char)
									     t35
									     t36
									     t37
									     t38)
									    ->
									    PrelBase.ZMZN
									    LexCore.Token
									    ->
									    ErrM.Err
									    (ParCore.HappyAbsSyn
									     (PrelBase.ZMZN
									      PrelBase.Char)
									     t35
									     t36
									     t37
									     t38))
									 actionzu453;
								       PrelBase.ZdwFalse ->
									 %case (tpl12 lit2 ds)
									 %of (wild3::PrelBase.Bool)
									   {PrelBase.ZdwTrue ->
									      ParCore.happyGoto
									      @ (ParCore.HappyState
										 LexCore.Token
										 (ParCore.HappyStk
										  (ParCore.HappyAbsSyn
										   (PrelBase.ZMZN
										    PrelBase.Char)
										   t35
										   t36
										   t37
										   t38)
										  ->
										  PrelBase.ZMZN
										  LexCore.Token
										  ->
										  ErrM.Err
										  (ParCore.HappyAbsSyn
										   (PrelBase.ZMZN
										    PrelBase.Char)
										   t35
										   t36
										   t37
										   t38)))
									      @ LexCore.Token
									      @ (ParCore.HappyStk
										 (ParCore.HappyAbsSyn
										  (PrelBase.ZMZN
										   PrelBase.Char)
										  t35
										  t36
										  t37
										  t38)
										 ->
										 PrelBase.ZMZN
										 LexCore.Token
										 ->
										 ErrM.Err
										 (ParCore.HappyAbsSyn
										  (PrelBase.ZMZN
										   PrelBase.Char)
										  t35
										  t36
										  t37
										  t38))
									      (ParCore.actionzu46
									       @ PrelBase.Int
									       @ LexCore.Token
									       @ (PrelBase.ZMZN
										  PrelBase.Char)
									       @ t35 @ t36 @ t37
									       @ t38
									       @ (ParCore.HappyAbsSyn
										  (PrelBase.ZMZN
										   PrelBase.Char)
										  t35
										  t36
										  t37
										  t38));
									    PrelBase.ZdwFalse ->
									      %case (tpl12 lit1 ds)
									      %of (wild4::PrelBase.Bool)
										{PrelBase.ZdwTrue ->
										   ParCore.happyGoto
										   @ (ParCore.HappyState
										      LexCore.Token
										      (ParCore.HappyStk
										       (ParCore.HappyAbsSyn
											(PrelBase.ZMZN
											 PrelBase.Char)
											t35
											t36
											t37
											t38)
										       ->
										       PrelBase.ZMZN
										       LexCore.Token
										       ->
										       ErrM.Err
										       (ParCore.HappyAbsSyn
											(PrelBase.ZMZN
											 PrelBase.Char)
											t35
											t36
											t37
											t38)))
										   @ LexCore.Token
										   @ (ParCore.HappyStk
										      (ParCore.HappyAbsSyn
										       (PrelBase.ZMZN
											PrelBase.Char)
										       t35
										       t36
										       t37
										       t38)
										      ->
										      PrelBase.ZMZN
										      LexCore.Token
										      ->
										      ErrM.Err
										      (ParCore.HappyAbsSyn
										       (PrelBase.ZMZN
											PrelBase.Char)
										       t35
										       t36
										       t37
										       t38))
										   actionzu521;
										 PrelBase.ZdwFalse
										 ->
										   %case (tpl12 lit6
											  ds)
										   %of (wild5::PrelBase.Bool)
										     {PrelBase.ZdwTrue
										      ->
											ParCore.happyGoto
											@ (ParCore.HappyState
											   LexCore.Token
											   (ParCore.HappyStk
											    (ParCore.HappyAbsSyn
											     (PrelBase.ZMZN
											      PrelBase.Char)
											     t35
											     t36
											     t37
											     t38)
											    ->
											    PrelBase.ZMZN
											    LexCore.Token
											    ->
											    ErrM.Err
											    (ParCore.HappyAbsSyn
											     (PrelBase.ZMZN
											      PrelBase.Char)
											     t35
											     t36
											     t37
											     t38)))
											@ LexCore.Token
											@ (ParCore.HappyStk
											   (ParCore.HappyAbsSyn
											    (PrelBase.ZMZN
											     PrelBase.Char)
											    t35
											    t36
											    t37
											    t38)
											   ->
											   PrelBase.ZMZN
											   LexCore.Token
											   ->
											   ErrM.Err
											   (ParCore.HappyAbsSyn
											    (PrelBase.ZMZN
											     PrelBase.Char)
											    t35
											    t36
											    t37
											    t38))
											(ParCore.actionzu49
											 @ PrelBase.Int
											 @ LexCore.Token
											 @ (PrelBase.ZMZN
											    PrelBase.Char)
											 @ t35 @ t36
											 @ t37 @ t38
											 @ (ParCore.HappyAbsSyn
											    (PrelBase.ZMZN
											     PrelBase.Char)
											    t35
											    t36
											    t37
											    t38));
										      PrelBase.ZdwFalse
										      ->
											ParCore.happyFail
											@ (ParCore.HappyAbsSyn
											   (PrelBase.ZMZN
											    PrelBase.Char)
											   t35
											   t36
											   t37
											   t38)
											@ LexCore.Token
											@ (PrelBase.ZMZN
											   PrelBase.Char)
											@ t35 @ t36
											@ t37
											@ t38}}}}}}}};
  actionzu241 :: PrelBase.Int ->
		 PrelBase.Int ->
		 LexCore.Token ->
		 ParCore.HappyState
		 LexCore.Token
		 (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T)
		  ->
		  PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T))
		 ->
		 PrelBase.ZMZN
		 (ParCore.HappyState
		  LexCore.Token
		  (ParCore.HappyStk
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T)
		   ->
		   PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T)))
		 ->
		 ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T)
		 ->
		 PrelBase.ZMZN LexCore.Token ->
		 ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T) =
    ParCore.actionzu24 @ PrelBase.Int @ PrelBase.Z0T @ PrelBase.Z0T
    @ PrelBase.Z0T @ PrelBase.Z0T PrelNum.zdfNumInt;
  ParCore.actionzu48 :: %forall t b t34 t35 t36 t37 t38 . PrelNum.ZCTNum
							  t
							  ->
							  t ->
							  PrelBase.Int ->
							  b ->
							  ParCore.HappyState
							  b
							  (ParCore.HappyStk
							   (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err
							   (ParCore.HappyAbsSyn
							    t34
							    t35
							    t36
							    t37
							    t38))
							  ->
							  PrelBase.ZMZN
							  (ParCore.HappyState
							   b
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)))
							  ->
							  ParCore.HappyStk
							  (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							  ->
							  PrelBase.ZMZN LexCore.Token ->
							  ErrM.Err
							  (ParCore.HappyAbsSyn
							   t34
							   t35
							   t36
							   t37
							   t38) =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (103::PrelGHC.Intzh))}
	%in \ (ds::t) ->
		%case zddNum %of (tpl::PrelNum.ZCTNum t)
		  {PrelNum.ZdwZCDNum
		   (tpl1::PrelBase.ZCTEq t)
		   (tpl2::PrelShow.ZCTShow t)
		   (tpl3::t -> t -> t)
		   (tpl4::t -> t -> t)
		   (tpl5::t -> t -> t)
		   (tpl6::t -> t)
		   (tpl7::t -> t)
		   (tpl8::t -> t)
		   (tpl9::PrelNum.Integer -> t) ->
		     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
		       {PrelBase.ZdwZCDEq
			(tpl11::t -> t -> PrelBase.Bool)
			(tpl12::t -> t -> PrelBase.Bool) ->
			  %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
			    {PrelBase.ZdwTrue ->
			       ParCore.happyAccept @ PrelBase.Int @ b
			       @ (ParCore.HappyState
				  b
				  (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				   PrelBase.ZMZN LexCore.Token ->
				   ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)))
			       @ (PrelBase.ZMZN
				  (ParCore.HappyState
				   b
				   (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				    PrelBase.ZMZN LexCore.Token ->
				    ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))))
			       @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
			       @ (PrelBase.ZMZN LexCore.Token);
			     PrelBase.ZdwFalse ->
			       ParCore.happyFail @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) @ b
			       @ t34 @ t35 @ t36 @ t37 @ t38}}};
  ParCore.actionzu25 :: %forall t t35 t36 t37 t38 . PrelNum.ZCTNum t
						    ->
						    t ->
						    PrelBase.Int ->
						    LexCore.Token ->
						    ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     ->
						     PrelBase.ZMZN LexCore.Token ->
						     ErrM.Err
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38))
						    ->
						    PrelBase.ZMZN
						    (ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      ->
						      PrelBase.ZMZN LexCore.Token ->
						      ErrM.Err
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)))
						    ->
						    ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38)
						    ->
						    PrelBase.ZMZN LexCore.Token ->
						    ErrM.Err
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38) =
    \ @ t @ t35 @ t36 @ t37 @ t38 (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (64::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (63::PrelGHC.Intzh))}
	    %in %let lit3 :: t =
		       %case zddNum %of (tpl::PrelNum.ZCTNum t)
			 {PrelNum.ZdwZCDNum
			  (tpl1::PrelBase.ZCTEq t)
			  (tpl2::PrelShow.ZCTShow t)
			  (tpl3::t -> t -> t)
			  (tpl4::t -> t -> t)
			  (tpl5::t -> t -> t)
			  (tpl6::t -> t)
			  (tpl7::t -> t)
			  (tpl8::t -> t)
			  (tpl9::PrelNum.Integer -> t) ->
			    tpl9 (PrelNum.ZdwSzh (62::PrelGHC.Intzh))}
		%in %let lit4 :: t =
			   %case zddNum %of (tpl::PrelNum.ZCTNum t)
			     {PrelNum.ZdwZCDNum
			      (tpl1::PrelBase.ZCTEq t)
			      (tpl2::PrelShow.ZCTShow t)
			      (tpl3::t -> t -> t)
			      (tpl4::t -> t -> t)
			      (tpl5::t -> t -> t)
			      (tpl6::t -> t)
			      (tpl7::t -> t)
			      (tpl8::t -> t)
			      (tpl9::PrelNum.Integer -> t) ->
				tpl9 (PrelNum.ZdwSzh (34::PrelGHC.Intzh))}
		    %in %let lit5 :: t =
			       %case zddNum %of (tpl::PrelNum.ZCTNum t)
				 {PrelNum.ZdwZCDNum
				  (tpl1::PrelBase.ZCTEq t)
				  (tpl2::PrelShow.ZCTShow t)
				  (tpl3::t -> t -> t)
				  (tpl4::t -> t -> t)
				  (tpl5::t -> t -> t)
				  (tpl6::t -> t)
				  (tpl7::t -> t)
				  (tpl8::t -> t)
				  (tpl9::PrelNum.Integer -> t) ->
				    tpl9 (PrelNum.ZdwSzh (97::PrelGHC.Intzh))}
			%in %let lit6 :: t =
				   %case zddNum %of (tpl::PrelNum.ZCTNum t)
				     {PrelNum.ZdwZCDNum
				      (tpl1::PrelBase.ZCTEq t)
				      (tpl2::PrelShow.ZCTShow t)
				      (tpl3::t -> t -> t)
				      (tpl4::t -> t -> t)
				      (tpl5::t -> t -> t)
				      (tpl6::t -> t)
				      (tpl7::t -> t)
				      (tpl8::t -> t)
				      (tpl9::PrelNum.Integer -> t) ->
					tpl9 (PrelNum.ZdwSzh (92::PrelGHC.Intzh))}
			    %in %let lit7 :: t =
				       %case zddNum %of (tpl::PrelNum.ZCTNum t)
					 {PrelNum.ZdwZCDNum
					  (tpl1::PrelBase.ZCTEq t)
					  (tpl2::PrelShow.ZCTShow t)
					  (tpl3::t -> t -> t)
					  (tpl4::t -> t -> t)
					  (tpl5::t -> t -> t)
					  (tpl6::t -> t)
					  (tpl7::t -> t)
					  (tpl8::t -> t)
					  (tpl9::PrelNum.Integer -> t) ->
					    tpl9 (PrelNum.ZdwSzh (89::PrelGHC.Intzh))}
				%in %let lit8 :: t =
					   %case zddNum %of (tpl::PrelNum.ZCTNum t)
					     {PrelNum.ZdwZCDNum
					      (tpl1::PrelBase.ZCTEq t)
					      (tpl2::PrelShow.ZCTShow t)
					      (tpl3::t -> t -> t)
					      (tpl4::t -> t -> t)
					      (tpl5::t -> t -> t)
					      (tpl6::t -> t)
					      (tpl7::t -> t)
					      (tpl8::t -> t)
					      (tpl9::PrelNum.Integer -> t) ->
						tpl9 (PrelNum.ZdwSzh (69::PrelGHC.Intzh))}
				    %in %let actionzu481 :: PrelBase.Int ->
							    PrelBase.Int ->
							    LexCore.Token ->
							    ParCore.HappyState
							    LexCore.Token
							    (ParCore.HappyStk
							     (ParCore.HappyAbsSyn
							      (PrelBase.ZMZN PrelBase.Char)
							      t35
							      t36
							      t37
							      t38)
							     ->
							     PrelBase.ZMZN LexCore.Token ->
							     ErrM.Err
							     (ParCore.HappyAbsSyn
							      (PrelBase.ZMZN PrelBase.Char)
							      t35
							      t36
							      t37
							      t38))
							    ->
							    PrelBase.ZMZN
							    (ParCore.HappyState
							     LexCore.Token
							     (ParCore.HappyStk
							      (ParCore.HappyAbsSyn
							       (PrelBase.ZMZN PrelBase.Char)
							       t35
							       t36
							       t37
							       t38)
							      ->
							      PrelBase.ZMZN LexCore.Token ->
							      ErrM.Err
							      (ParCore.HappyAbsSyn
							       (PrelBase.ZMZN PrelBase.Char)
							       t35
							       t36
							       t37
							       t38)))
							    ->
							    ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     (PrelBase.ZMZN PrelBase.Char)
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err
							    (ParCore.HappyAbsSyn
							     (PrelBase.ZMZN PrelBase.Char)
							     t35
							     t36
							     t37
							     t38) =
					       ParCore.actionzu48 @ PrelBase.Int @ LexCore.Token
					       @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37
					       @ t38 PrelNum.zdfNumInt
					%in %let actionzu453 :: PrelBase.Int ->
								PrelBase.Int ->
								LexCore.Token ->
								ParCore.HappyState
								LexCore.Token
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  (PrelBase.ZMZN PrelBase.Char)
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err
								 (ParCore.HappyAbsSyn
								  (PrelBase.ZMZN PrelBase.Char)
								  t35
								  t36
								  t37
								  t38))
								->
								PrelBase.ZMZN
								(ParCore.HappyState
								 LexCore.Token
								 (ParCore.HappyStk
								  (ParCore.HappyAbsSyn
								   (PrelBase.ZMZN PrelBase.Char)
								   t35
								   t36
								   t37
								   t38)
								  ->
								  PrelBase.ZMZN LexCore.Token ->
								  ErrM.Err
								  (ParCore.HappyAbsSyn
								   (PrelBase.ZMZN PrelBase.Char)
								   t35
								   t36
								   t37
								   t38)))
								->
								ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 (PrelBase.ZMZN PrelBase.Char)
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err
								(ParCore.HappyAbsSyn
								 (PrelBase.ZMZN PrelBase.Char)
								 t35
								 t36
								 t37
								 t38) =
						   ParCore.actionzu45 @ PrelBase.Int @ t35 @ t36
						   @ t37 @ t38
						   @ (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						   PrelNum.zdfNumInt
					    %in %let happyShift7 :: (PrelBase.Int ->
								     PrelBase.Int ->
								     LexCore.Token ->
								     ParCore.HappyState
								     LexCore.Token
								     (ParCore.HappyStk
								      (ParCore.HappyAbsSyn
								       (PrelBase.ZMZN PrelBase.Char)
								       t35
								       t36
								       t37
								       t38)
								      ->
								      PrelBase.ZMZN LexCore.Token ->
								      ErrM.Err
								      (ParCore.HappyAbsSyn
								       (PrelBase.ZMZN PrelBase.Char)
								       t35
								       t36
								       t37
								       t38))
								     ->
								     PrelBase.ZMZN
								     (ParCore.HappyState
								      LexCore.Token
								      (ParCore.HappyStk
								       (ParCore.HappyAbsSyn
									(PrelBase.ZMZN
									 PrelBase.Char)
									t35
									t36
									t37
									t38)
								       ->
								       PrelBase.ZMZN LexCore.Token
								       ->
								       ErrM.Err
								       (ParCore.HappyAbsSyn
									(PrelBase.ZMZN
									 PrelBase.Char)
									t35
									t36
									t37
									t38)))
								     ->
								     ParCore.HappyStk
								     (ParCore.HappyAbsSyn
								      (PrelBase.ZMZN PrelBase.Char)
								      t35
								      t36
								      t37
								      t38)
								     ->
								     PrelBase.ZMZN LexCore.Token ->
								     ErrM.Err
								     (ParCore.HappyAbsSyn
								      (PrelBase.ZMZN PrelBase.Char)
								      t35
								      t36
								      t37
								      t38))
								    ->
								    PrelBase.Int ->
								    LexCore.Token ->
								    ParCore.HappyState
								    LexCore.Token
								    (ParCore.HappyStk
								     (ParCore.HappyAbsSyn
								      (PrelBase.ZMZN PrelBase.Char)
								      t35
								      t36
								      t37
								      t38)
								     ->
								     PrelBase.ZMZN LexCore.Token ->
								     ErrM.Err
								     (ParCore.HappyAbsSyn
								      (PrelBase.ZMZN PrelBase.Char)
								      t35
								      t36
								      t37
								      t38))
								    ->
								    PrelBase.ZMZN
								    (ParCore.HappyState
								     LexCore.Token
								     (ParCore.HappyStk
								      (ParCore.HappyAbsSyn
								       (PrelBase.ZMZN PrelBase.Char)
								       t35
								       t36
								       t37
								       t38)
								      ->
								      PrelBase.ZMZN LexCore.Token ->
								      ErrM.Err
								      (ParCore.HappyAbsSyn
								       (PrelBase.ZMZN PrelBase.Char)
								       t35
								       t36
								       t37
								       t38)))
								    ->
								    ParCore.HappyStk
								    (ParCore.HappyAbsSyn
								     (PrelBase.ZMZN PrelBase.Char)
								     t35
								     t36
								     t37
								     t38)
								    ->
								    PrelBase.ZMZN LexCore.Token ->
								    ErrM.Err
								    (ParCore.HappyAbsSyn
								     (PrelBase.ZMZN PrelBase.Char)
								     t35
								     t36
								     t37
								     t38) =
						       ParCore.happyShift @ PrelBase.Int
						       @ (ErrM.Err
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   t38))
						       @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36
						       @ t37 @ t38 PrelNum.zdfNumInt
						%in \ (ds::t) ->
							%case zddNum %of (tpl::PrelNum.ZCTNum t)
							  {PrelNum.ZdwZCDNum
							   (tpl1::PrelBase.ZCTEq t)
							   (tpl2::PrelShow.ZCTShow t)
							   (tpl3::t -> t -> t)
							   (tpl4::t -> t -> t)
							   (tpl5::t -> t -> t)
							   (tpl6::t -> t)
							   (tpl7::t -> t)
							   (tpl8::t -> t)
							   (tpl9::PrelNum.Integer -> t) ->
							     %case tpl1
							     %of (tpl10::PrelBase.ZCTEq t)
							       {PrelBase.ZdwZCDEq
								(tpl11::t -> t -> PrelBase.Bool)
								(tpl12::t -> t -> PrelBase.Bool) ->
								  %case (tpl12 lit7 ds)
								  %of (wild::PrelBase.Bool)
								    {PrelBase.ZdwTrue ->
								       happyShift7
								       (%note "InlineMe"
									actionzu501 @ t35 @ t36
									@ t37 @ t38
									@ (ParCore.HappyAbsSyn
									   (PrelBase.ZMZN
									    PrelBase.Char)
									   t35
									   t36
									   t37
									   t38));
								     PrelBase.ZdwFalse ->
								       %case (tpl12 lit6 ds)
								       %of (wild1::PrelBase.Bool)
									 {PrelBase.ZdwTrue ->
									    happyShift7
									    (%note "InlineMe"
									     actionzu511 @ t35 @ t36
									     @ t37 @ t38
									     @ (ParCore.HappyAbsSyn
										(PrelBase.ZMZN
										 PrelBase.Char)
										t35
										t36
										t37
										t38));
									  PrelBase.ZdwFalse ->
									    %case (tpl12 lit5 ds)
									    %of (wild2::PrelBase.Bool)
									      {PrelBase.ZdwTrue ->
										 happyShift7
										 (ParCore.actionzu32
										  @ PrelBase.Int
										  @ LexCore.Token
										  @ t35 @ t36 @ t37
										  @ t38
										  @ (ParCore.HappyAbsSyn
										     (PrelBase.ZMZN
										      PrelBase.Char)
										     t35
										     t36
										     t37
										     t38));
									       PrelBase.ZdwFalse ->
										 %case (tpl12 lit4
											ds)
										 %of (wild3::PrelBase.Bool)
										   {PrelBase.ZdwTrue
										    ->
										      ParCore.happyGoto
										      @ (ParCore.HappyState
											 LexCore.Token
											 (ParCore.HappyStk
											  (ParCore.HappyAbsSyn
											   (PrelBase.ZMZN
											    PrelBase.Char)
											   t35
											   t36
											   t37
											   t38)
											  ->
											  PrelBase.ZMZN
											  LexCore.Token
											  ->
											  ErrM.Err
											  (ParCore.HappyAbsSyn
											   (PrelBase.ZMZN
											    PrelBase.Char)
											   t35
											   t36
											   t37
											   t38)))
										      @ LexCore.Token
										      @ (ParCore.HappyStk
											 (ParCore.HappyAbsSyn
											  (PrelBase.ZMZN
											   PrelBase.Char)
											  t35
											  t36
											  t37
											  t38)
											 ->
											 PrelBase.ZMZN
											 LexCore.Token
											 ->
											 ErrM.Err
											 (ParCore.HappyAbsSyn
											  (PrelBase.ZMZN
											   PrelBase.Char)
											  t35
											  t36
											  t37
											  t38))
										      actionzu453;
										    PrelBase.ZdwFalse
										    ->
										      %case (tpl12
											     lit3
											     ds)
										      %of (wild4::PrelBase.Bool)
											{PrelBase.ZdwTrue
											 ->
											   ParCore.happyGoto
											   @ (ParCore.HappyState
											      LexCore.Token
											      (ParCore.HappyStk
											       (ParCore.HappyAbsSyn
												(PrelBase.ZMZN
												 PrelBase.Char)
												t35
												t36
												t37
												t38)
											       ->
											       PrelBase.ZMZN
											       LexCore.Token
											       ->
											       ErrM.Err
											       (ParCore.HappyAbsSyn
												(PrelBase.ZMZN
												 PrelBase.Char)
												t35
												t36
												t37
												t38)))
											   @ LexCore.Token
											   @ (ParCore.HappyStk
											      (ParCore.HappyAbsSyn
											       (PrelBase.ZMZN
												PrelBase.Char)
											       t35
											       t36
											       t37
											       t38)
											      ->
											      PrelBase.ZMZN
											      LexCore.Token
											      ->
											      ErrM.Err
											      (ParCore.HappyAbsSyn
											       (PrelBase.ZMZN
												PrelBase.Char)
											       t35
											       t36
											       t37
											       t38))
											   (ParCore.actionzu46
											    @ PrelBase.Int
											    @ LexCore.Token
											    @ (PrelBase.ZMZN
											       PrelBase.Char)
											    @ t35
											    @ t36
											    @ t37
											    @ t38
											    @ (ParCore.HappyAbsSyn
											       (PrelBase.ZMZN
												PrelBase.Char)
											       t35
											       t36
											       t37
											       t38));
											 PrelBase.ZdwFalse
											 ->
											   %case (tpl12
												  lit2
												  ds)
											   %of (wild5::PrelBase.Bool)
											     {PrelBase.ZdwTrue
											      ->
												ParCore.happyGoto
												@ (ParCore.HappyState
												   LexCore.Token
												   (ParCore.HappyStk
												    (ParCore.HappyAbsSyn
												     (PrelBase.ZMZN
												      PrelBase.Char)
												     t35
												     t36
												     t37
												     t38)
												    ->
												    PrelBase.ZMZN
												    LexCore.Token
												    ->
												    ErrM.Err
												    (ParCore.HappyAbsSyn
												     (PrelBase.ZMZN
												      PrelBase.Char)
												     t35
												     t36
												     t37
												     t38)))
												@ LexCore.Token
												@ (ParCore.HappyStk
												   (ParCore.HappyAbsSyn
												    (PrelBase.ZMZN
												     PrelBase.Char)
												    t35
												    t36
												    t37
												    t38)
												   ->
												   PrelBase.ZMZN
												   LexCore.Token
												   ->
												   ErrM.Err
												   (ParCore.HappyAbsSyn
												    (PrelBase.ZMZN
												     PrelBase.Char)
												    t35
												    t36
												    t37
												    t38))
												(%note "InlineMe"
												 actionzu471
												 @ t35
												 @ t36
												 @ t37
												 @ t38
												 @ (ParCore.HappyAbsSyn
												    (PrelBase.ZMZN
												     PrelBase.Char)
												    t35
												    t36
												    t37
												    t38));
											      PrelBase.ZdwFalse
											      ->
												%case (tpl12
												       lit1
												       ds)
												%of (wild6::PrelBase.Bool)
												  {PrelBase.ZdwTrue
												   ->
												     ParCore.happyGoto
												     @ (ParCore.HappyState
													LexCore.Token
													(ParCore.HappyStk
													 (ParCore.HappyAbsSyn
													  (PrelBase.ZMZN
													   PrelBase.Char)
													  t35
													  t36
													  t37
													  t38)
													 ->
													 PrelBase.ZMZN
													 LexCore.Token
													 ->
													 ErrM.Err
													 (ParCore.HappyAbsSyn
													  (PrelBase.ZMZN
													   PrelBase.Char)
													  t35
													  t36
													  t37
													  t38)))
												     @ LexCore.Token
												     @ (ParCore.HappyStk
													(ParCore.HappyAbsSyn
													 (PrelBase.ZMZN
													  PrelBase.Char)
													 t35
													 t36
													 t37
													 t38)
													->
													PrelBase.ZMZN
													LexCore.Token
													->
													ErrM.Err
													(ParCore.HappyAbsSyn
													 (PrelBase.ZMZN
													  PrelBase.Char)
													 t35
													 t36
													 t37
													 t38))
												     actionzu481;
												   PrelBase.ZdwFalse
												   ->
												     %case (tpl12
													    lit8
													    ds)
												     %of (wild7::PrelBase.Bool)
												       {PrelBase.ZdwTrue
													->
													  ParCore.happyGoto
													  @ (ParCore.HappyState
													     LexCore.Token
													     (ParCore.HappyStk
													      (ParCore.HappyAbsSyn
													       (PrelBase.ZMZN
														PrelBase.Char)
													       t35
													       t36
													       t37
													       t38)
													      ->
													      PrelBase.ZMZN
													      LexCore.Token
													      ->
													      ErrM.Err
													      (ParCore.HappyAbsSyn
													       (PrelBase.ZMZN
														PrelBase.Char)
													       t35
													       t36
													       t37
													       t38)))
													  @ LexCore.Token
													  @ (ParCore.HappyStk
													     (ParCore.HappyAbsSyn
													      (PrelBase.ZMZN
													       PrelBase.Char)
													      t35
													      t36
													      t37
													      t38)
													     ->
													     PrelBase.ZMZN
													     LexCore.Token
													     ->
													     ErrM.Err
													     (ParCore.HappyAbsSyn
													      (PrelBase.ZMZN
													       PrelBase.Char)
													      t35
													      t36
													      t37
													      t38))
													  (ParCore.actionzu49
													   @ PrelBase.Int
													   @ LexCore.Token
													   @ (PrelBase.ZMZN
													      PrelBase.Char)
													   @ t35
													   @ t36
													   @ t37
													   @ t38
													   @ (ParCore.HappyAbsSyn
													      (PrelBase.ZMZN
													       PrelBase.Char)
													      t35
													      t36
													      t37
													      t38));
													PrelBase.ZdwFalse
													->
													  ParCore.happyFail
													  @ (ParCore.HappyAbsSyn
													     (PrelBase.ZMZN
													      PrelBase.Char)
													     t35
													     t36
													     t37
													     t38)
													  @ LexCore.Token
													  @ (PrelBase.ZMZN
													     PrelBase.Char)
													  @ t35
													  @ t36
													  @ t37
													  @ t38}}}}}}}}}};
  actionzu251 :: PrelBase.Int ->
		 PrelBase.Int ->
		 LexCore.Token ->
		 ParCore.HappyState
		 LexCore.Token
		 (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T)
		  ->
		  PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T))
		 ->
		 PrelBase.ZMZN
		 (ParCore.HappyState
		  LexCore.Token
		  (ParCore.HappyStk
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T)
		   ->
		   PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T)))
		 ->
		 ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T)
		 ->
		 PrelBase.ZMZN LexCore.Token ->
		 ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T) =
    ParCore.actionzu25 @ PrelBase.Int @ PrelBase.Z0T @ PrelBase.Z0T
    @ PrelBase.Z0T @ PrelBase.Z0T PrelNum.zdfNumInt;
  ParCore.actionzu44 :: %forall t t35 t36 t37 t38 . PrelNum.ZCTNum t
						    ->
						    t ->
						    PrelBase.Int ->
						    LexCore.Token ->
						    ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     ->
						     PrelBase.ZMZN LexCore.Token ->
						     ErrM.Err
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38))
						    ->
						    PrelBase.ZMZN
						    (ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      ->
						      PrelBase.ZMZN LexCore.Token ->
						      ErrM.Err
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)))
						    ->
						    ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38)
						    ->
						    PrelBase.ZMZN LexCore.Token ->
						    ErrM.Err
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38) =
    \ @ t @ t35 @ t36 @ t37 @ t38 (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (62::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (34::PrelGHC.Intzh))}
	    %in %let lit3 :: t =
		       %case zddNum %of (tpl::PrelNum.ZCTNum t)
			 {PrelNum.ZdwZCDNum
			  (tpl1::PrelBase.ZCTEq t)
			  (tpl2::PrelShow.ZCTShow t)
			  (tpl3::t -> t -> t)
			  (tpl4::t -> t -> t)
			  (tpl5::t -> t -> t)
			  (tpl6::t -> t)
			  (tpl7::t -> t)
			  (tpl8::t -> t)
			  (tpl9::PrelNum.Integer -> t) ->
			    tpl9 (PrelNum.ZdwSzh (103::PrelGHC.Intzh))}
		%in %let lit4 :: t =
			   %case zddNum %of (tpl::PrelNum.ZCTNum t)
			     {PrelNum.ZdwZCDNum
			      (tpl1::PrelBase.ZCTEq t)
			      (tpl2::PrelShow.ZCTShow t)
			      (tpl3::t -> t -> t)
			      (tpl4::t -> t -> t)
			      (tpl5::t -> t -> t)
			      (tpl6::t -> t)
			      (tpl7::t -> t)
			      (tpl8::t -> t)
			      (tpl9::PrelNum.Integer -> t) ->
				tpl9 (PrelNum.ZdwSzh (97::PrelGHC.Intzh))}
		    %in %let lit5 :: t =
			       %case zddNum %of (tpl::PrelNum.ZCTNum t)
				 {PrelNum.ZdwZCDNum
				  (tpl1::PrelBase.ZCTEq t)
				  (tpl2::PrelShow.ZCTShow t)
				  (tpl3::t -> t -> t)
				  (tpl4::t -> t -> t)
				  (tpl5::t -> t -> t)
				  (tpl6::t -> t)
				  (tpl7::t -> t)
				  (tpl8::t -> t)
				  (tpl9::PrelNum.Integer -> t) ->
				    tpl9 (PrelNum.ZdwSzh (89::PrelGHC.Intzh))}
			%in %let lit6 :: t =
				   %case zddNum %of (tpl::PrelNum.ZCTNum t)
				     {PrelNum.ZdwZCDNum
				      (tpl1::PrelBase.ZCTEq t)
				      (tpl2::PrelShow.ZCTShow t)
				      (tpl3::t -> t -> t)
				      (tpl4::t -> t -> t)
				      (tpl5::t -> t -> t)
				      (tpl6::t -> t)
				      (tpl7::t -> t)
				      (tpl8::t -> t)
				      (tpl9::PrelNum.Integer -> t) ->
					tpl9 (PrelNum.ZdwSzh (69::PrelGHC.Intzh))}
			    %in %let actionzu453 :: PrelBase.Int ->
						    PrelBase.Int ->
						    LexCore.Token ->
						    ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     ->
						     PrelBase.ZMZN LexCore.Token ->
						     ErrM.Err
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38))
						    ->
						    PrelBase.ZMZN
						    (ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      ->
						      PrelBase.ZMZN LexCore.Token ->
						      ErrM.Err
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)))
						    ->
						    ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38)
						    ->
						    PrelBase.ZMZN LexCore.Token ->
						    ErrM.Err
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38) =
				       ParCore.actionzu45 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38
				       @ (ParCore.HappyAbsSyn
					  (PrelBase.ZMZN PrelBase.Char)
					  t35
					  t36
					  t37
					  t38)
				       PrelNum.zdfNumInt
				%in %let happyShift7 :: (PrelBase.Int ->
							 PrelBase.Int ->
							 LexCore.Token ->
							 ParCore.HappyState
							 LexCore.Token
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   t38)
							  ->
							  PrelBase.ZMZN LexCore.Token ->
							  ErrM.Err
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   t38))
							 ->
							 PrelBase.ZMZN
							 (ParCore.HappyState
							  LexCore.Token
							  (ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    (PrelBase.ZMZN PrelBase.Char)
							    t35
							    t36
							    t37
							    t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err
							   (ParCore.HappyAbsSyn
							    (PrelBase.ZMZN PrelBase.Char)
							    t35
							    t36
							    t37
							    t38)))
							 ->
							 ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token ->
							 ErrM.Err
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38))
							->
							PrelBase.Int ->
							LexCore.Token ->
							ParCore.HappyState
							LexCore.Token
							(ParCore.HappyStk
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38)
							 ->
							 PrelBase.ZMZN LexCore.Token ->
							 ErrM.Err
							 (ParCore.HappyAbsSyn
							  (PrelBase.ZMZN PrelBase.Char)
							  t35
							  t36
							  t37
							  t38))
							->
							PrelBase.ZMZN
							(ParCore.HappyState
							 LexCore.Token
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   t38)
							  ->
							  PrelBase.ZMZN LexCore.Token ->
							  ErrM.Err
							  (ParCore.HappyAbsSyn
							   (PrelBase.ZMZN PrelBase.Char)
							   t35
							   t36
							   t37
							   t38)))
							->
							ParCore.HappyStk
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38)
							->
							PrelBase.ZMZN LexCore.Token ->
							ErrM.Err
							(ParCore.HappyAbsSyn
							 (PrelBase.ZMZN PrelBase.Char)
							 t35
							 t36
							 t37
							 t38) =
					   ParCore.happyShift @ PrelBase.Int
					   @ (ErrM.Err
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38))
					   @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38
					   PrelNum.zdfNumInt
				    %in \ (ds::t) ->
					    %case zddNum %of (tpl::PrelNum.ZCTNum t)
					      {PrelNum.ZdwZCDNum
					       (tpl1::PrelBase.ZCTEq t)
					       (tpl2::PrelShow.ZCTShow t)
					       (tpl3::t -> t -> t)
					       (tpl4::t -> t -> t)
					       (tpl5::t -> t -> t)
					       (tpl6::t -> t)
					       (tpl7::t -> t)
					       (tpl8::t -> t)
					       (tpl9::PrelNum.Integer -> t) ->
						 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
						   {PrelBase.ZdwZCDEq
						    (tpl11::t -> t -> PrelBase.Bool)
						    (tpl12::t -> t -> PrelBase.Bool) ->
						      %case (tpl12 lit5 ds)
						      %of (wild::PrelBase.Bool)
							{PrelBase.ZdwTrue ->
							   happyShift7
							   (%note "InlineMe"
							    actionzu501 @ t35 @ t36 @ t37 @ t38
							    @ (ParCore.HappyAbsSyn
							       (PrelBase.ZMZN PrelBase.Char)
							       t35
							       t36
							       t37
							       t38));
							 PrelBase.ZdwFalse ->
							   %case (tpl12 lit4 ds)
							   %of (wild1::PrelBase.Bool)
							     {PrelBase.ZdwTrue ->
								happyShift7
								(ParCore.actionzu32 @ PrelBase.Int
								 @ LexCore.Token @ t35 @ t36 @ t37
								 @ t38
								 @ (ParCore.HappyAbsSyn
								    (PrelBase.ZMZN PrelBase.Char)
								    t35
								    t36
								    t37
								    t38));
							      PrelBase.ZdwFalse ->
								%case (tpl12 lit3 ds)
								%of (wild2::PrelBase.Bool)
								  {PrelBase.ZdwTrue ->
								     ParCore.happyAccept
								     @ PrelBase.Int @ LexCore.Token
								     @ (ParCore.HappyState
									LexCore.Token
									(ParCore.HappyStk
									 (ParCore.HappyAbsSyn
									  (PrelBase.ZMZN
									   PrelBase.Char)
									  t35
									  t36
									  t37
									  t38)
									 ->
									 PrelBase.ZMZN LexCore.Token
									 ->
									 ErrM.Err
									 (ParCore.HappyAbsSyn
									  (PrelBase.ZMZN
									   PrelBase.Char)
									  t35
									  t36
									  t37
									  t38)))
								     @ (PrelBase.ZMZN
									(ParCore.HappyState
									 LexCore.Token
									 (ParCore.HappyStk
									  (ParCore.HappyAbsSyn
									   (PrelBase.ZMZN
									    PrelBase.Char)
									   t35
									   t36
									   t37
									   t38)
									  ->
									  PrelBase.ZMZN
									  LexCore.Token
									  ->
									  ErrM.Err
									  (ParCore.HappyAbsSyn
									   (PrelBase.ZMZN
									    PrelBase.Char)
									   t35
									   t36
									   t37
									   t38))))
								     @ (ParCore.HappyAbsSyn
									(PrelBase.ZMZN
									 PrelBase.Char)
									t35
									t36
									t37
									t38)
								     @ (PrelBase.ZMZN
									LexCore.Token);
								   PrelBase.ZdwFalse ->
								     %case (tpl12 lit2 ds)
								     %of (wild3::PrelBase.Bool)
								       {PrelBase.ZdwTrue ->
									  ParCore.happyGoto
									  @ (ParCore.HappyState
									     LexCore.Token
									     (ParCore.HappyStk
									      (ParCore.HappyAbsSyn
									       (PrelBase.ZMZN
										PrelBase.Char)
									       t35
									       t36
									       t37
									       t38)
									      ->
									      PrelBase.ZMZN
									      LexCore.Token
									      ->
									      ErrM.Err
									      (ParCore.HappyAbsSyn
									       (PrelBase.ZMZN
										PrelBase.Char)
									       t35
									       t36
									       t37
									       t38)))
									  @ LexCore.Token
									  @ (ParCore.HappyStk
									     (ParCore.HappyAbsSyn
									      (PrelBase.ZMZN
									       PrelBase.Char)
									      t35
									      t36
									      t37
									      t38)
									     ->
									     PrelBase.ZMZN
									     LexCore.Token
									     ->
									     ErrM.Err
									     (ParCore.HappyAbsSyn
									      (PrelBase.ZMZN
									       PrelBase.Char)
									      t35
									      t36
									      t37
									      t38))
									  actionzu453;
									PrelBase.ZdwFalse ->
									  %case (tpl12 lit1 ds)
									  %of (wild4::PrelBase.Bool)
									    {PrelBase.ZdwTrue ->
									       ParCore.happyGoto
									       @ (ParCore.HappyState
										  LexCore.Token
										  (ParCore.HappyStk
										   (ParCore.HappyAbsSyn
										    (PrelBase.ZMZN
										     PrelBase.Char)
										    t35
										    t36
										    t37
										    t38)
										   ->
										   PrelBase.ZMZN
										   LexCore.Token
										   ->
										   ErrM.Err
										   (ParCore.HappyAbsSyn
										    (PrelBase.ZMZN
										     PrelBase.Char)
										    t35
										    t36
										    t37
										    t38)))
									       @ LexCore.Token
									       @ (ParCore.HappyStk
										  (ParCore.HappyAbsSyn
										   (PrelBase.ZMZN
										    PrelBase.Char)
										   t35
										   t36
										   t37
										   t38)
										  ->
										  PrelBase.ZMZN
										  LexCore.Token
										  ->
										  ErrM.Err
										  (ParCore.HappyAbsSyn
										   (PrelBase.ZMZN
										    PrelBase.Char)
										   t35
										   t36
										   t37
										   t38))
									       (ParCore.actionzu157
										@ PrelBase.Int
										@ LexCore.Token
										@ (PrelBase.ZMZN
										   PrelBase.Char)
										@ t35 @ t36 @ t37
										@ t38
										@ (ParCore.HappyAbsSyn
										   (PrelBase.ZMZN
										    PrelBase.Char)
										   t35
										   t36
										   t37
										   t38));
									     PrelBase.ZdwFalse ->
									       %case (tpl12 lit6 ds)
									       %of (wild5::PrelBase.Bool)
										 {PrelBase.ZdwTrue
										  ->
										    ParCore.happyGoto
										    @ (ParCore.HappyState
										       LexCore.Token
										       (ParCore.HappyStk
											(ParCore.HappyAbsSyn
											 (PrelBase.ZMZN
											  PrelBase.Char)
											 t35
											 t36
											 t37
											 t38)
											->
											PrelBase.ZMZN
											LexCore.Token
											->
											ErrM.Err
											(ParCore.HappyAbsSyn
											 (PrelBase.ZMZN
											  PrelBase.Char)
											 t35
											 t36
											 t37
											 t38)))
										    @ LexCore.Token
										    @ (ParCore.HappyStk
										       (ParCore.HappyAbsSyn
											(PrelBase.ZMZN
											 PrelBase.Char)
											t35
											t36
											t37
											t38)
										       ->
										       PrelBase.ZMZN
										       LexCore.Token
										       ->
										       ErrM.Err
										       (ParCore.HappyAbsSyn
											(PrelBase.ZMZN
											 PrelBase.Char)
											t35
											t36
											t37
											t38))
										    (ParCore.actionzu49
										     @ PrelBase.Int
										     @ LexCore.Token
										     @ (PrelBase.ZMZN
											PrelBase.Char)
										     @ t35 @ t36
										     @ t37 @ t38
										     @ (ParCore.HappyAbsSyn
											(PrelBase.ZMZN
											 PrelBase.Char)
											t35
											t36
											t37
											t38));
										  PrelBase.ZdwFalse
										  ->
										    ParCore.happyFail
										    @ (ParCore.HappyAbsSyn
										       (PrelBase.ZMZN
											PrelBase.Char)
										       t35
										       t36
										       t37
										       t38)
										    @ LexCore.Token
										    @ (PrelBase.ZMZN
										       PrelBase.Char)
										    @ t35 @ t36
										    @ t37
										    @ t38}}}}}}}};
  ParCore.actionzu26 :: %forall t t35 t36 t37 t38 . PrelNum.ZCTNum t
						    ->
						    t ->
						    PrelBase.Int ->
						    LexCore.Token ->
						    ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     ->
						     PrelBase.ZMZN LexCore.Token ->
						     ErrM.Err
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38))
						    ->
						    PrelBase.ZMZN
						    (ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      ->
						      PrelBase.ZMZN LexCore.Token ->
						      ErrM.Err
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)))
						    ->
						    ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38)
						    ->
						    PrelBase.ZMZN LexCore.Token ->
						    ErrM.Err
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38) =
    \ @ t @ t35 @ t36 @ t37 @ t38 (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (65::PrelGHC.Intzh))}
	%in %let actionzu441 :: PrelBase.Int ->
				PrelBase.Int ->
				LexCore.Token ->
				ParCore.HappyState
				LexCore.Token
				(ParCore.HappyStk
				 (ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
				 ->
				 PrelBase.ZMZN LexCore.Token ->
				 ErrM.Err
				 (ParCore.HappyAbsSyn
				  (PrelBase.ZMZN PrelBase.Char)
				  t35
				  t36
				  t37
				  t38))
				->
				PrelBase.ZMZN
				(ParCore.HappyState
				 LexCore.Token
				 (ParCore.HappyStk
				  (ParCore.HappyAbsSyn
				   (PrelBase.ZMZN PrelBase.Char)
				   t35
				   t36
				   t37
				   t38)
				  ->
				  PrelBase.ZMZN LexCore.Token ->
				  ErrM.Err
				  (ParCore.HappyAbsSyn
				   (PrelBase.ZMZN PrelBase.Char)
				   t35
				   t36
				   t37
				   t38)))
				->
				ParCore.HappyStk
				(ParCore.HappyAbsSyn (PrelBase.ZMZN PrelBase.Char) t35 t36 t37 t38)
				->
				PrelBase.ZMZN LexCore.Token ->
				ErrM.Err
				(ParCore.HappyAbsSyn
				 (PrelBase.ZMZN PrelBase.Char)
				 t35
				 t36
				 t37
				 t38) =
		   ParCore.actionzu44 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38
		   PrelNum.zdfNumInt
	    %in \ (ds::t) ->
		    %case zddNum %of (tpl::PrelNum.ZCTNum t)
		      {PrelNum.ZdwZCDNum
		       (tpl1::PrelBase.ZCTEq t)
		       (tpl2::PrelShow.ZCTShow t)
		       (tpl3::t -> t -> t)
		       (tpl4::t -> t -> t)
		       (tpl5::t -> t -> t)
		       (tpl6::t -> t)
		       (tpl7::t -> t)
		       (tpl8::t -> t)
		       (tpl9::PrelNum.Integer -> t) ->
			 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
			   {PrelBase.ZdwZCDEq
			    (tpl11::t -> t -> PrelBase.Bool)
			    (tpl12::t -> t -> PrelBase.Bool) ->
			      %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
				{PrelBase.ZdwTrue ->
				   ParCore.happyGoto
				   @ (ParCore.HappyState
				      LexCore.Token
				      (ParCore.HappyStk
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					t35
					t36
					t37
					t38)
				       ->
				       PrelBase.ZMZN LexCore.Token ->
				       ErrM.Err
				       (ParCore.HappyAbsSyn
					(PrelBase.ZMZN PrelBase.Char)
					t35
					t36
					t37
					t38)))
				   @ LexCore.Token
				   @ (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       t35
				       t36
				       t37
				       t38)
				      ->
				      PrelBase.ZMZN LexCore.Token ->
				      ErrM.Err
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       t35
				       t36
				       t37
				       t38))
				   actionzu441;
				 PrelBase.ZdwFalse ->
				   ParCore.happyReducezu95 @ LexCore.Token
				   @ (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      t35
				      t36
				      t37
				      t38)
				   @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38}}};
  actionzu261 :: PrelBase.Int ->
		 PrelBase.Int ->
		 LexCore.Token ->
		 ParCore.HappyState
		 LexCore.Token
		 (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T)
		  ->
		  PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T))
		 ->
		 PrelBase.ZMZN
		 (ParCore.HappyState
		  LexCore.Token
		  (ParCore.HappyStk
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T)
		   ->
		   PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T)))
		 ->
		 ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T)
		 ->
		 PrelBase.ZMZN LexCore.Token ->
		 ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T) =
    ParCore.actionzu26 @ PrelBase.Int @ PrelBase.Z0T @ PrelBase.Z0T
    @ PrelBase.Z0T @ PrelBase.Z0T PrelNum.zdfNumInt;
  ParCore.actionzu43 :: %forall t b t34 t35 t36 t37 t38 . PrelNum.ZCTNum
							  t
							  ->
							  t ->
							  PrelBase.Int ->
							  b ->
							  ParCore.HappyState
							  b
							  (ParCore.HappyStk
							   (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err
							   (ParCore.HappyAbsSyn
							    t34
							    t35
							    t36
							    t37
							    t38))
							  ->
							  PrelBase.ZMZN
							  (ParCore.HappyState
							   b
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)))
							  ->
							  ParCore.HappyStk
							  (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							  ->
							  PrelBase.ZMZN LexCore.Token ->
							  ErrM.Err
							  (ParCore.HappyAbsSyn
							   t34
							   t35
							   t36
							   t37
							   t38) =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (103::PrelGHC.Intzh))}
	%in \ (ds::t) ->
		%case zddNum %of (tpl::PrelNum.ZCTNum t)
		  {PrelNum.ZdwZCDNum
		   (tpl1::PrelBase.ZCTEq t)
		   (tpl2::PrelShow.ZCTShow t)
		   (tpl3::t -> t -> t)
		   (tpl4::t -> t -> t)
		   (tpl5::t -> t -> t)
		   (tpl6::t -> t)
		   (tpl7::t -> t)
		   (tpl8::t -> t)
		   (tpl9::PrelNum.Integer -> t) ->
		     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
		       {PrelBase.ZdwZCDEq
			(tpl11::t -> t -> PrelBase.Bool)
			(tpl12::t -> t -> PrelBase.Bool) ->
			  %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
			    {PrelBase.ZdwTrue ->
			       ParCore.happyAccept @ PrelBase.Int @ b
			       @ (ParCore.HappyState
				  b
				  (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				   PrelBase.ZMZN LexCore.Token ->
				   ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)))
			       @ (PrelBase.ZMZN
				  (ParCore.HappyState
				   b
				   (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				    PrelBase.ZMZN LexCore.Token ->
				    ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))))
			       @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
			       @ (PrelBase.ZMZN LexCore.Token);
			     PrelBase.ZdwFalse ->
			       ParCore.happyFail @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) @ b
			       @ t34 @ t35 @ t36 @ t37 @ t38}}};
  ParCore.actionzu27 :: %forall t t34 t35 t36 t37 t38 . PrelNum.ZCTNum
							t
							->
							t ->
							PrelBase.Int ->
							LexCore.Token ->
							ParCore.HappyState
							LexCore.Token
							(ParCore.HappyStk
							 (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							 ->
							 PrelBase.ZMZN LexCore.Token ->
							 ErrM.Err
							 (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
							->
							PrelBase.ZMZN
							(ParCore.HappyState
							 LexCore.Token
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							  ->
							  PrelBase.ZMZN LexCore.Token ->
							  ErrM.Err
							  (ParCore.HappyAbsSyn
							   t34
							   t35
							   t36
							   t37
							   t38)))
							->
							ParCore.HappyStk
							(ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							->
							PrelBase.ZMZN LexCore.Token ->
							ErrM.Err
							(ParCore.HappyAbsSyn t34 t35 t36 t37 t38) =
    \ @ t @ t34 @ t35 @ t36 @ t37 @ t38 (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (96::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (95::PrelGHC.Intzh))}
	    %in %let lit3 :: t =
		       %case zddNum %of (tpl::PrelNum.ZCTNum t)
			 {PrelNum.ZdwZCDNum
			  (tpl1::PrelBase.ZCTEq t)
			  (tpl2::PrelShow.ZCTShow t)
			  (tpl3::t -> t -> t)
			  (tpl4::t -> t -> t)
			  (tpl5::t -> t -> t)
			  (tpl6::t -> t)
			  (tpl7::t -> t)
			  (tpl8::t -> t)
			  (tpl9::PrelNum.Integer -> t) ->
			    tpl9 (PrelNum.ZdwSzh (94::PrelGHC.Intzh))}
		%in %let lit4 :: t =
			   %case zddNum %of (tpl::PrelNum.ZCTNum t)
			     {PrelNum.ZdwZCDNum
			      (tpl1::PrelBase.ZCTEq t)
			      (tpl2::PrelShow.ZCTShow t)
			      (tpl3::t -> t -> t)
			      (tpl4::t -> t -> t)
			      (tpl5::t -> t -> t)
			      (tpl6::t -> t)
			      (tpl7::t -> t)
			      (tpl8::t -> t)
			      (tpl9::PrelNum.Integer -> t) ->
				tpl9 (PrelNum.ZdwSzh (89::PrelGHC.Intzh))}
		    %in %let lit5 :: t =
			       %case zddNum %of (tpl::PrelNum.ZCTNum t)
				 {PrelNum.ZdwZCDNum
				  (tpl1::PrelBase.ZCTEq t)
				  (tpl2::PrelShow.ZCTShow t)
				  (tpl3::t -> t -> t)
				  (tpl4::t -> t -> t)
				  (tpl5::t -> t -> t)
				  (tpl6::t -> t)
				  (tpl7::t -> t)
				  (tpl8::t -> t)
				  (tpl9::PrelNum.Integer -> t) ->
				    tpl9 (PrelNum.ZdwSzh (66::PrelGHC.Intzh))}
			%in %let actionzu431 :: PrelBase.Int ->
						PrelBase.Int ->
						LexCore.Token ->
						ParCore.HappyState
						LexCore.Token
						(ParCore.HappyStk
						 (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
						 ->
						 PrelBase.ZMZN LexCore.Token ->
						 ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
						->
						PrelBase.ZMZN
						(ParCore.HappyState
						 LexCore.Token
						 (ParCore.HappyStk
						  (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
						  ->
						  PrelBase.ZMZN LexCore.Token ->
						  ErrM.Err
						  (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)))
						->
						ParCore.HappyStk
						(ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
						->
						PrelBase.ZMZN LexCore.Token ->
						ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) =
				   ParCore.actionzu43 @ PrelBase.Int @ LexCore.Token @ t34 @ t35
				   @ t36 @ t37 @ t38 PrelNum.zdfNumInt
			    %in %let happyShift7 :: (PrelBase.Int ->
						     PrelBase.Int ->
						     LexCore.Token ->
						     ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
						      ->
						      PrelBase.ZMZN LexCore.Token ->
						      ErrM.Err
						      (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
						     ->
						     PrelBase.ZMZN
						     (ParCore.HappyState
						      LexCore.Token
						      (ParCore.HappyStk
						       (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
						       ->
						       PrelBase.ZMZN LexCore.Token ->
						       ErrM.Err
						       (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)))
						     ->
						     ParCore.HappyStk
						     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
						     ->
						     PrelBase.ZMZN LexCore.Token ->
						     ErrM.Err
						     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
						    ->
						    PrelBase.Int ->
						    LexCore.Token ->
						    ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
						     ->
						     PrelBase.ZMZN LexCore.Token ->
						     ErrM.Err
						     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
						    ->
						    PrelBase.ZMZN
						    (ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
						      ->
						      PrelBase.ZMZN LexCore.Token ->
						      ErrM.Err
						      (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)))
						    ->
						    ParCore.HappyStk
						    (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
						    ->
						    PrelBase.ZMZN LexCore.Token ->
						    ErrM.Err
						    (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) =
				       ParCore.happyShift @ PrelBase.Int
				       @ (ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)) @ t34
				       @ t35 @ t36 @ t37 @ t38 PrelNum.zdfNumInt
				%in \ (ds::t) ->
					%case zddNum %of (tpl::PrelNum.ZCTNum t)
					  {PrelNum.ZdwZCDNum
					   (tpl1::PrelBase.ZCTEq t)
					   (tpl2::PrelShow.ZCTShow t)
					   (tpl3::t -> t -> t)
					   (tpl4::t -> t -> t)
					   (tpl5::t -> t -> t)
					   (tpl6::t -> t)
					   (tpl7::t -> t)
					   (tpl8::t -> t)
					   (tpl9::PrelNum.Integer -> t) ->
					     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
					       {PrelBase.ZdwZCDEq
						(tpl11::t -> t -> PrelBase.Bool)
						(tpl12::t -> t -> PrelBase.Bool) ->
						  %case (tpl12 lit4 ds) %of (wild::PrelBase.Bool)
						    {PrelBase.ZdwTrue ->
						       happyShift7
						       (%note "InlineMe"
							actionzu391 @ t34 @ t35 @ t36 @ t37 @ t38
							@ (ParCore.HappyAbsSyn
							   t34
							   t35
							   t36
							   t37
							   t38));
						     PrelBase.ZdwFalse ->
						       %case (tpl12 lit3 ds)
						       %of (wild1::PrelBase.Bool)
							 {PrelBase.ZdwTrue ->
							    happyShift7
							    (ParCore.actionzu40 @ PrelBase.Int
							     @ LexCore.Token @ t34 @ t35 @ t36 @ t37
							     @ t38
							     @ (ParCore.HappyAbsSyn
								t34
								t35
								t36
								t37
								t38));
							  PrelBase.ZdwFalse ->
							    %case (tpl12 lit2 ds)
							    %of (wild2::PrelBase.Bool)
							      {PrelBase.ZdwTrue ->
								 happyShift7
								 (ParCore.actionzu41 @ PrelBase.Int
								  @ LexCore.Token @ t34 @ t35 @ t36
								  @ t37 @ t38
								  @ (ParCore.HappyAbsSyn
								     t34
								     t35
								     t36
								     t37
								     t38));
							       PrelBase.ZdwFalse ->
								 %case (tpl12 lit1 ds)
								 %of (wild3::PrelBase.Bool)
								   {PrelBase.ZdwTrue ->
								      happyShift7
								      (ParCore.actionzu42
								       @ PrelBase.Int
								       @ LexCore.Token @ t34 @ t35
								       @ t36 @ t37 @ t38
								       @ (ParCore.HappyAbsSyn
									  t34
									  t35
									  t36
									  t37
									  t38));
								    PrelBase.ZdwFalse ->
								      %case (tpl12 lit5 ds)
								      %of (wild4::PrelBase.Bool)
									{PrelBase.ZdwTrue ->
									   ParCore.happyGoto
									   @ (ParCore.HappyState
									      LexCore.Token
									      (ParCore.HappyStk
									       (ParCore.HappyAbsSyn
										t34
										t35
										t36
										t37
										t38)
									       ->
									       PrelBase.ZMZN
									       LexCore.Token
									       ->
									       ErrM.Err
									       (ParCore.HappyAbsSyn
										t34
										t35
										t36
										t37
										t38)))
									   @ LexCore.Token
									   @ (ParCore.HappyStk
									      (ParCore.HappyAbsSyn
									       t34
									       t35
									       t36
									       t37
									       t38)
									      ->
									      PrelBase.ZMZN
									      LexCore.Token
									      ->
									      ErrM.Err
									      (ParCore.HappyAbsSyn
									       t34
									       t35
									       t36
									       t37
									       t38))
									   actionzu431;
									 PrelBase.ZdwFalse ->
									   ParCore.happyFail
									   @ (ParCore.HappyAbsSyn
									      t34
									      t35
									      t36
									      t37
									      t38)
									   @ LexCore.Token @ t34
									   @ t35 @ t36 @ t37
									   @ t38}}}}}}};
  actionzu271 :: PrelBase.Int ->
		 PrelBase.Int ->
		 LexCore.Token ->
		 ParCore.HappyState
		 LexCore.Token
		 (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T)
		  ->
		  PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err
		  (ParCore.HappyAbsSyn
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T))
		 ->
		 PrelBase.ZMZN
		 (ParCore.HappyState
		  LexCore.Token
		  (ParCore.HappyStk
		   (ParCore.HappyAbsSyn
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T)
		   ->
		   PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err
		   (ParCore.HappyAbsSyn
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T)))
		 ->
		 ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T)
		 ->
		 PrelBase.ZMZN LexCore.Token ->
		 ErrM.Err
		 (ParCore.HappyAbsSyn
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T) =
    ParCore.actionzu27 @ PrelBase.Int @ PrelBase.Z0T @ PrelBase.Z0T
    @ PrelBase.Z0T @ PrelBase.Z0T @ PrelBase.Z0T PrelNum.zdfNumInt;
  ParCore.actionzu38 :: %forall t b t34 t35 t36 t37 t38 . PrelNum.ZCTNum
							  t
							  ->
							  t ->
							  PrelBase.Int ->
							  b ->
							  ParCore.HappyState
							  b
							  (ParCore.HappyStk
							   (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err
							   (ParCore.HappyAbsSyn
							    t34
							    t35
							    t36
							    t37
							    t38))
							  ->
							  PrelBase.ZMZN
							  (ParCore.HappyState
							   b
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)))
							  ->
							  ParCore.HappyStk
							  (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							  ->
							  PrelBase.ZMZN LexCore.Token ->
							  ErrM.Err
							  (ParCore.HappyAbsSyn
							   t34
							   t35
							   t36
							   t37
							   t38) =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (103::PrelGHC.Intzh))}
	%in \ (ds::t) ->
		%case zddNum %of (tpl::PrelNum.ZCTNum t)
		  {PrelNum.ZdwZCDNum
		   (tpl1::PrelBase.ZCTEq t)
		   (tpl2::PrelShow.ZCTShow t)
		   (tpl3::t -> t -> t)
		   (tpl4::t -> t -> t)
		   (tpl5::t -> t -> t)
		   (tpl6::t -> t)
		   (tpl7::t -> t)
		   (tpl8::t -> t)
		   (tpl9::PrelNum.Integer -> t) ->
		     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
		       {PrelBase.ZdwZCDEq
			(tpl11::t -> t -> PrelBase.Bool)
			(tpl12::t -> t -> PrelBase.Bool) ->
			  %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
			    {PrelBase.ZdwTrue ->
			       ParCore.happyAccept @ PrelBase.Int @ b
			       @ (ParCore.HappyState
				  b
				  (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				   PrelBase.ZMZN LexCore.Token ->
				   ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)))
			       @ (PrelBase.ZMZN
				  (ParCore.HappyState
				   b
				   (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				    PrelBase.ZMZN LexCore.Token ->
				    ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))))
			       @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
			       @ (PrelBase.ZMZN LexCore.Token);
			     PrelBase.ZdwFalse ->
			       ParCore.happyFail @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) @ b
			       @ t34 @ t35 @ t36 @ t37 @ t38}}};
  ParCore.actionzu28 :: %forall t t34 t35 t36 t37 t38 . PrelNum.ZCTNum
							t
							->
							t ->
							PrelBase.Int ->
							LexCore.Token ->
							ParCore.HappyState
							LexCore.Token
							(ParCore.HappyStk
							 (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							 ->
							 PrelBase.ZMZN LexCore.Token ->
							 ErrM.Err
							 (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
							->
							PrelBase.ZMZN
							(ParCore.HappyState
							 LexCore.Token
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							  ->
							  PrelBase.ZMZN LexCore.Token ->
							  ErrM.Err
							  (ParCore.HappyAbsSyn
							   t34
							   t35
							   t36
							   t37
							   t38)))
							->
							ParCore.HappyStk
							(ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							->
							PrelBase.ZMZN LexCore.Token ->
							ErrM.Err
							(ParCore.HappyAbsSyn t34 t35 t36 t37 t38) =
    \ @ t @ t34 @ t35 @ t36 @ t37 @ t38 (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (66::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (96::PrelGHC.Intzh))}
	    %in %let lit3 :: t =
		       %case zddNum %of (tpl::PrelNum.ZCTNum t)
			 {PrelNum.ZdwZCDNum
			  (tpl1::PrelBase.ZCTEq t)
			  (tpl2::PrelShow.ZCTShow t)
			  (tpl3::t -> t -> t)
			  (tpl4::t -> t -> t)
			  (tpl5::t -> t -> t)
			  (tpl6::t -> t)
			  (tpl7::t -> t)
			  (tpl8::t -> t)
			  (tpl9::PrelNum.Integer -> t) ->
			    tpl9 (PrelNum.ZdwSzh (95::PrelGHC.Intzh))}
		%in %let lit4 :: t =
			   %case zddNum %of (tpl::PrelNum.ZCTNum t)
			     {PrelNum.ZdwZCDNum
			      (tpl1::PrelBase.ZCTEq t)
			      (tpl2::PrelShow.ZCTShow t)
			      (tpl3::t -> t -> t)
			      (tpl4::t -> t -> t)
			      (tpl5::t -> t -> t)
			      (tpl6::t -> t)
			      (tpl7::t -> t)
			      (tpl8::t -> t)
			      (tpl9::PrelNum.Integer -> t) ->
				tpl9 (PrelNum.ZdwSzh (94::PrelGHC.Intzh))}
		    %in %let lit5 :: t =
			       %case zddNum %of (tpl::PrelNum.ZCTNum t)
				 {PrelNum.ZdwZCDNum
				  (tpl1::PrelBase.ZCTEq t)
				  (tpl2::PrelShow.ZCTShow t)
				  (tpl3::t -> t -> t)
				  (tpl4::t -> t -> t)
				  (tpl5::t -> t -> t)
				  (tpl6::t -> t)
				  (tpl7::t -> t)
				  (tpl8::t -> t)
				  (tpl9::PrelNum.Integer -> t) ->
				    tpl9 (PrelNum.ZdwSzh (89::PrelGHC.Intzh))}
			%in %let lit6 :: t =
				   %case zddNum %of (tpl::PrelNum.ZCTNum t)
				     {PrelNum.ZdwZCDNum
				      (tpl1::PrelBase.ZCTEq t)
				      (tpl2::PrelShow.ZCTShow t)
				      (tpl3::t -> t -> t)
				      (tpl4::t -> t -> t)
				      (tpl5::t -> t -> t)
				      (tpl6::t -> t)
				      (tpl7::t -> t)
				      (tpl8::t -> t)
				      (tpl9::PrelNum.Integer -> t) ->
					tpl9 (PrelNum.ZdwSzh (67::PrelGHC.Intzh))}
			    %in %let actionzu381 :: PrelBase.Int ->
						    PrelBase.Int ->
						    LexCore.Token ->
						    ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
						     ->
						     PrelBase.ZMZN LexCore.Token ->
						     ErrM.Err
						     (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
						    ->
						    PrelBase.ZMZN
						    (ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
						      ->
						      PrelBase.ZMZN LexCore.Token ->
						      ErrM.Err
						      (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)))
						    ->
						    ParCore.HappyStk
						    (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
						    ->
						    PrelBase.ZMZN LexCore.Token ->
						    ErrM.Err
						    (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) =
				       ParCore.actionzu38 @ PrelBase.Int @ LexCore.Token @ t34 @ t35
				       @ t36 @ t37 @ t38 PrelNum.zdfNumInt
				%in %let happyShift7 :: (PrelBase.Int ->
							 PrelBase.Int ->
							 LexCore.Token ->
							 ParCore.HappyState
							 LexCore.Token
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							  ->
							  PrelBase.ZMZN LexCore.Token ->
							  ErrM.Err
							  (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
							 ->
							 PrelBase.ZMZN
							 (ParCore.HappyState
							  LexCore.Token
							  (ParCore.HappyStk
							   (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err
							   (ParCore.HappyAbsSyn
							    t34
							    t35
							    t36
							    t37
							    t38)))
							 ->
							 ParCore.HappyStk
							 (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							 ->
							 PrelBase.ZMZN LexCore.Token ->
							 ErrM.Err
							 (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
							->
							PrelBase.Int ->
							LexCore.Token ->
							ParCore.HappyState
							LexCore.Token
							(ParCore.HappyStk
							 (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							 ->
							 PrelBase.ZMZN LexCore.Token ->
							 ErrM.Err
							 (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
							->
							PrelBase.ZMZN
							(ParCore.HappyState
							 LexCore.Token
							 (ParCore.HappyStk
							  (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							  ->
							  PrelBase.ZMZN LexCore.Token ->
							  ErrM.Err
							  (ParCore.HappyAbsSyn
							   t34
							   t35
							   t36
							   t37
							   t38)))
							->
							ParCore.HappyStk
							(ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							->
							PrelBase.ZMZN LexCore.Token ->
							ErrM.Err
							(ParCore.HappyAbsSyn t34 t35 t36 t37 t38) =
					   ParCore.happyShift @ PrelBase.Int
					   @ (ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))
					   @ t34 @ t35 @ t36 @ t37 @ t38 PrelNum.zdfNumInt
				    %in \ (ds::t) ->
					    %case zddNum %of (tpl::PrelNum.ZCTNum t)
					      {PrelNum.ZdwZCDNum
					       (tpl1::PrelBase.ZCTEq t)
					       (tpl2::PrelShow.ZCTShow t)
					       (tpl3::t -> t -> t)
					       (tpl4::t -> t -> t)
					       (tpl5::t -> t -> t)
					       (tpl6::t -> t)
					       (tpl7::t -> t)
					       (tpl8::t -> t)
					       (tpl9::PrelNum.Integer -> t) ->
						 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
						   {PrelBase.ZdwZCDEq
						    (tpl11::t -> t -> PrelBase.Bool)
						    (tpl12::t -> t -> PrelBase.Bool) ->
						      %case (tpl12 lit5 ds)
						      %of (wild::PrelBase.Bool)
							{PrelBase.ZdwTrue ->
							   happyShift7
							   (%note "InlineMe"
							    actionzu391 @ t34 @ t35 @ t36 @ t37
							    @ t38
							    @ (ParCore.HappyAbsSyn
							       t34
							       t35
							       t36
							       t37
							       t38));
							 PrelBase.ZdwFalse ->
							   %case (tpl12 lit4 ds)
							   %of (wild1::PrelBase.Bool)
							     {PrelBase.ZdwTrue ->
								happyShift7
								(ParCore.actionzu40 @ PrelBase.Int
								 @ LexCore.Token @ t34 @ t35 @ t36
								 @ t37 @ t38
								 @ (ParCore.HappyAbsSyn
								    t34
								    t35
								    t36
								    t37
								    t38));
							      PrelBase.ZdwFalse ->
								%case (tpl12 lit3 ds)
								%of (wild2::PrelBase.Bool)
								  {PrelBase.ZdwTrue ->
								     happyShift7
								     (ParCore.actionzu41
								      @ PrelBase.Int @ LexCore.Token
								      @ t34 @ t35 @ t36 @ t37 @ t38
								      @ (ParCore.HappyAbsSyn
									 t34
									 t35
									 t36
									 t37
									 t38));
								   PrelBase.ZdwFalse ->
								     %case (tpl12 lit2 ds)
								     %of (wild3::PrelBase.Bool)
								       {PrelBase.ZdwTrue ->
									  happyShift7
									  (ParCore.actionzu42
									   @ PrelBase.Int
									   @ LexCore.Token @ t34
									   @ t35 @ t36 @ t37 @ t38
									   @ (ParCore.HappyAbsSyn
									      t34
									      t35
									      t36
									      t37
									      t38));
									PrelBase.ZdwFalse ->
									  %case (tpl12 lit1 ds)
									  %of (wild4::PrelBase.Bool)
									    {PrelBase.ZdwTrue ->
									       ParCore.happyGoto
									       @ (ParCore.HappyState
										  LexCore.Token
										  (ParCore.HappyStk
										   (ParCore.HappyAbsSyn
										    t34
										    t35
										    t36
										    t37
										    t38)
										   ->
										   PrelBase.ZMZN
										   LexCore.Token
										   ->
										   ErrM.Err
										   (ParCore.HappyAbsSyn
										    t34
										    t35
										    t36
										    t37
										    t38)))
									       @ LexCore.Token
									       @ (ParCore.HappyStk
										  (ParCore.HappyAbsSyn
										   t34
										   t35
										   t36
										   t37
										   t38)
										  ->
										  PrelBase.ZMZN
										  LexCore.Token
										  ->
										  ErrM.Err
										  (ParCore.HappyAbsSyn
										   t34
										   t35
										   t36
										   t37
										   t38))
									       (%note "InlineMe"
										actionzu371 @ t34
										@ t35 @ t36 @ t37
										@ t38
										@ (ParCore.HappyAbsSyn
										   t34
										   t35
										   t36
										   t37
										   t38));
									     PrelBase.ZdwFalse ->
									       %case (tpl12 lit6 ds)
									       %of (wild5::PrelBase.Bool)
										 {PrelBase.ZdwTrue
										  ->
										    ParCore.happyGoto
										    @ (ParCore.HappyState
										       LexCore.Token
										       (ParCore.HappyStk
											(ParCore.HappyAbsSyn
											 t34
											 t35
											 t36
											 t37
											 t38)
											->
											PrelBase.ZMZN
											LexCore.Token
											->
											ErrM.Err
											(ParCore.HappyAbsSyn
											 t34
											 t35
											 t36
											 t37
											 t38)))
										    @ LexCore.Token
										    @ (ParCore.HappyStk
										       (ParCore.HappyAbsSyn
											t34
											t35
											t36
											t37
											t38)
										       ->
										       PrelBase.ZMZN
										       LexCore.Token
										       ->
										       ErrM.Err
										       (ParCore.HappyAbsSyn
											t34
											t35
											t36
											t37
											t38))
										    actionzu381;
										  PrelBase.ZdwFalse
										  ->
										    ParCore.happyFail
										    @ (ParCore.HappyAbsSyn
										       t34
										       t35
										       t36
										       t37
										       t38)
										    @ LexCore.Token
										    @ t34 @ t35
										    @ t36 @ t37
										    @ t38}}}}}}}};
  actionzu281 :: PrelBase.Int ->
		 PrelBase.Int ->
		 LexCore.Token ->
		 ParCore.HappyState
		 LexCore.Token
		 (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T)
		  ->
		  PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err
		  (ParCore.HappyAbsSyn
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T))
		 ->
		 PrelBase.ZMZN
		 (ParCore.HappyState
		  LexCore.Token
		  (ParCore.HappyStk
		   (ParCore.HappyAbsSyn
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T)
		   ->
		   PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err
		   (ParCore.HappyAbsSyn
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T)))
		 ->
		 ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T)
		 ->
		 PrelBase.ZMZN LexCore.Token ->
		 ErrM.Err
		 (ParCore.HappyAbsSyn
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T) =
    ParCore.actionzu28 @ PrelBase.Int @ PrelBase.Z0T @ PrelBase.Z0T
    @ PrelBase.Z0T @ PrelBase.Z0T @ PrelBase.Z0T PrelNum.zdfNumInt;
  ParCore.actionzu35 :: %forall t b t34 t35 t36 t37 t38 . PrelNum.ZCTNum
							  t
							  ->
							  t ->
							  PrelBase.Int ->
							  b ->
							  ParCore.HappyState
							  b
							  (ParCore.HappyStk
							   (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err
							   (ParCore.HappyAbsSyn
							    t34
							    t35
							    t36
							    t37
							    t38))
							  ->
							  PrelBase.ZMZN
							  (ParCore.HappyState
							   b
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)))
							  ->
							  ParCore.HappyStk
							  (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							  ->
							  PrelBase.ZMZN LexCore.Token ->
							  ErrM.Err
							  (ParCore.HappyAbsSyn
							   t34
							   t35
							   t36
							   t37
							   t38) =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (103::PrelGHC.Intzh))}
	%in \ (ds::t) ->
		%case zddNum %of (tpl::PrelNum.ZCTNum t)
		  {PrelNum.ZdwZCDNum
		   (tpl1::PrelBase.ZCTEq t)
		   (tpl2::PrelShow.ZCTShow t)
		   (tpl3::t -> t -> t)
		   (tpl4::t -> t -> t)
		   (tpl5::t -> t -> t)
		   (tpl6::t -> t)
		   (tpl7::t -> t)
		   (tpl8::t -> t)
		   (tpl9::PrelNum.Integer -> t) ->
		     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
		       {PrelBase.ZdwZCDEq
			(tpl11::t -> t -> PrelBase.Bool)
			(tpl12::t -> t -> PrelBase.Bool) ->
			  %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
			    {PrelBase.ZdwTrue ->
			       ParCore.happyAccept @ PrelBase.Int @ b
			       @ (ParCore.HappyState
				  b
				  (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				   PrelBase.ZMZN LexCore.Token ->
				   ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)))
			       @ (PrelBase.ZMZN
				  (ParCore.HappyState
				   b
				   (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				    PrelBase.ZMZN LexCore.Token ->
				    ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))))
			       @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
			       @ (PrelBase.ZMZN LexCore.Token);
			     PrelBase.ZdwFalse ->
			       ParCore.happyFail @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) @ b
			       @ t34 @ t35 @ t36 @ t37 @ t38}}};
  actionzu351 :: PrelBase.Int ->
		 PrelBase.Int ->
		 LexCore.Token ->
		 ParCore.HappyState
		 LexCore.Token
		 (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char)
		  ->
		  PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char))
		 ->
		 PrelBase.ZMZN
		 (ParCore.HappyState
		  LexCore.Token
		  (ParCore.HappyStk
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char)
		   ->
		   PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char)))
		 ->
		 ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char)
		 ->
		 PrelBase.ZMZN LexCore.Token ->
		 ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char) =
    ParCore.actionzu35 @ PrelBase.Int @ LexCore.Token
    @ (PrelBase.ZMZN PrelBase.Char) @ (PrelBase.ZMZN PrelBase.Char)
    @ PrelNum.Integer @ PrelFloat.Double @ PrelBase.Char
    PrelNum.zdfNumInt;
  ParCore.actionzu29 :: %forall t . PrelNum.ZCTNum t ->
				    t ->
				    PrelBase.Int ->
				    LexCore.Token ->
				    ParCore.HappyState
				    LexCore.Token
				    (ParCore.HappyStk
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char)
				     ->
				     PrelBase.ZMZN LexCore.Token ->
				     ErrM.Err
				     (ParCore.HappyAbsSyn
				      (PrelBase.ZMZN PrelBase.Char)
				      (PrelBase.ZMZN PrelBase.Char)
				      PrelNum.Integer
				      PrelFloat.Double
				      PrelBase.Char))
				    ->
				    PrelBase.ZMZN
				    (ParCore.HappyState
				     LexCore.Token
				     (ParCore.HappyStk
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)
				      ->
				      PrelBase.ZMZN LexCore.Token ->
				      ErrM.Err
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       (PrelBase.ZMZN PrelBase.Char)
				       PrelNum.Integer
				       PrelFloat.Double
				       PrelBase.Char)))
				    ->
				    ParCore.HappyStk
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     (PrelBase.ZMZN PrelBase.Char)
				     PrelNum.Integer
				     PrelFloat.Double
				     PrelBase.Char)
				    ->
				    PrelBase.ZMZN LexCore.Token ->
				    ErrM.Err
				    (ParCore.HappyAbsSyn
				     (PrelBase.ZMZN PrelBase.Char)
				     (PrelBase.ZMZN PrelBase.Char)
				     PrelNum.Integer
				     PrelFloat.Double
				     PrelBase.Char) =
    \ @ t (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (89::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (68::PrelGHC.Intzh))}
	    %in \ (ds::t) ->
		    %case zddNum %of (tpl::PrelNum.ZCTNum t)
		      {PrelNum.ZdwZCDNum
		       (tpl1::PrelBase.ZCTEq t)
		       (tpl2::PrelShow.ZCTShow t)
		       (tpl3::t -> t -> t)
		       (tpl4::t -> t -> t)
		       (tpl5::t -> t -> t)
		       (tpl6::t -> t)
		       (tpl7::t -> t)
		       (tpl8::t -> t)
		       (tpl9::PrelNum.Integer -> t) ->
			 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
			   {PrelBase.ZdwZCDEq
			    (tpl11::t -> t -> PrelBase.Bool)
			    (tpl12::t -> t -> PrelBase.Bool) ->
			      %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
				{PrelBase.ZdwTrue ->
				   happyShift2 actionzu361;
				 PrelBase.ZdwFalse ->
				   %case (tpl12 lit2 ds) %of (wild1::PrelBase.Bool)
				     {PrelBase.ZdwTrue ->
					ParCore.happyGoto
					@ (ParCore.HappyState
					   LexCore.Token
					   (ParCore.HappyStk
					    (ParCore.HappyAbsSyn
					     (PrelBase.ZMZN PrelBase.Char)
					     (PrelBase.ZMZN PrelBase.Char)
					     PrelNum.Integer
					     PrelFloat.Double
					     PrelBase.Char)
					    ->
					    PrelBase.ZMZN LexCore.Token ->
					    ErrM.Err
					    (ParCore.HappyAbsSyn
					     (PrelBase.ZMZN PrelBase.Char)
					     (PrelBase.ZMZN PrelBase.Char)
					     PrelNum.Integer
					     PrelFloat.Double
					     PrelBase.Char)))
					@ LexCore.Token
					@ (ParCore.HappyStk
					   (ParCore.HappyAbsSyn
					    (PrelBase.ZMZN PrelBase.Char)
					    (PrelBase.ZMZN PrelBase.Char)
					    PrelNum.Integer
					    PrelFloat.Double
					    PrelBase.Char)
					   ->
					   PrelBase.ZMZN LexCore.Token ->
					   ErrM.Err
					   (ParCore.HappyAbsSyn
					    (PrelBase.ZMZN PrelBase.Char)
					    (PrelBase.ZMZN PrelBase.Char)
					    PrelNum.Integer
					    PrelFloat.Double
					    PrelBase.Char))
					actionzu351;
				      PrelBase.ZdwFalse ->
					ParCore.happyFail
					@ (ParCore.HappyAbsSyn
					   (PrelBase.ZMZN PrelBase.Char)
					   (PrelBase.ZMZN PrelBase.Char)
					   PrelNum.Integer
					   PrelFloat.Double
					   PrelBase.Char)
					@ LexCore.Token @ (PrelBase.ZMZN PrelBase.Char)
					@ (PrelBase.ZMZN PrelBase.Char) @ PrelNum.Integer
					@ PrelFloat.Double @ PrelBase.Char}}}};
  actionzu291 :: PrelBase.Int ->
		 PrelBase.Int ->
		 LexCore.Token ->
		 ParCore.HappyState
		 LexCore.Token
		 (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char)
		  ->
		  PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char))
		 ->
		 PrelBase.ZMZN
		 (ParCore.HappyState
		  LexCore.Token
		  (ParCore.HappyStk
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char)
		   ->
		   PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char)))
		 ->
		 ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char)
		 ->
		 PrelBase.ZMZN LexCore.Token ->
		 ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char) =
    ParCore.actionzu29 @ PrelBase.Int PrelNum.zdfNumInt;
  ParCore.actionzu34 :: %forall t b t34 t35 t36 t37 t38 . PrelNum.ZCTNum
							  t
							  ->
							  t ->
							  PrelBase.Int ->
							  b ->
							  ParCore.HappyState
							  b
							  (ParCore.HappyStk
							   (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err
							   (ParCore.HappyAbsSyn
							    t34
							    t35
							    t36
							    t37
							    t38))
							  ->
							  PrelBase.ZMZN
							  (ParCore.HappyState
							   b
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err
							    (ParCore.HappyAbsSyn
							     t34
							     t35
							     t36
							     t37
							     t38)))
							  ->
							  ParCore.HappyStk
							  (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
							  ->
							  PrelBase.ZMZN LexCore.Token ->
							  ErrM.Err
							  (ParCore.HappyAbsSyn
							   t34
							   t35
							   t36
							   t37
							   t38) =
    \ @ t
      @ b
      @ t34
      @ t35
      @ t36
      @ t37
      @ t38
      (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (103::PrelGHC.Intzh))}
	%in \ (ds::t) ->
		%case zddNum %of (tpl::PrelNum.ZCTNum t)
		  {PrelNum.ZdwZCDNum
		   (tpl1::PrelBase.ZCTEq t)
		   (tpl2::PrelShow.ZCTShow t)
		   (tpl3::t -> t -> t)
		   (tpl4::t -> t -> t)
		   (tpl5::t -> t -> t)
		   (tpl6::t -> t)
		   (tpl7::t -> t)
		   (tpl8::t -> t)
		   (tpl9::PrelNum.Integer -> t) ->
		     %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
		       {PrelBase.ZdwZCDEq
			(tpl11::t -> t -> PrelBase.Bool)
			(tpl12::t -> t -> PrelBase.Bool) ->
			  %case (tpl12 lit1 ds) %of (wild::PrelBase.Bool)
			    {PrelBase.ZdwTrue ->
			       ParCore.happyAccept @ PrelBase.Int @ b
			       @ (ParCore.HappyState
				  b
				  (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				   PrelBase.ZMZN LexCore.Token ->
				   ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)))
			       @ (PrelBase.ZMZN
				  (ParCore.HappyState
				   b
				   (ParCore.HappyStk (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) ->
				    PrelBase.ZMZN LexCore.Token ->
				    ErrM.Err (ParCore.HappyAbsSyn t34 t35 t36 t37 t38))))
			       @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38)
			       @ (PrelBase.ZMZN LexCore.Token);
			     PrelBase.ZdwFalse ->
			       ParCore.happyFail @ (ParCore.HappyAbsSyn t34 t35 t36 t37 t38) @ b
			       @ t34 @ t35 @ t36 @ t37 @ t38}}};
  ParCore.actionzu30 :: %forall t t35 t36 t37 t38 . PrelNum.ZCTNum t
						    ->
						    t ->
						    PrelBase.Int ->
						    LexCore.Token ->
						    ParCore.HappyState
						    LexCore.Token
						    (ParCore.HappyStk
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38)
						     ->
						     PrelBase.ZMZN LexCore.Token ->
						     ErrM.Err
						     (ParCore.HappyAbsSyn
						      (PrelBase.ZMZN PrelBase.Char)
						      t35
						      t36
						      t37
						      t38))
						    ->
						    PrelBase.ZMZN
						    (ParCore.HappyState
						     LexCore.Token
						     (ParCore.HappyStk
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)
						      ->
						      PrelBase.ZMZN LexCore.Token ->
						      ErrM.Err
						      (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38)))
						    ->
						    ParCore.HappyStk
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38)
						    ->
						    PrelBase.ZMZN LexCore.Token ->
						    ErrM.Err
						    (ParCore.HappyAbsSyn
						     (PrelBase.ZMZN PrelBase.Char)
						     t35
						     t36
						     t37
						     t38) =
    \ @ t @ t35 @ t36 @ t37 @ t38 (zddNum::PrelNum.ZCTNum t) ->
	%let lit1 :: t =
	       %case zddNum %of (tpl::PrelNum.ZCTNum t)
		 {PrelNum.ZdwZCDNum
		  (tpl1::PrelBase.ZCTEq t)
		  (tpl2::PrelShow.ZCTShow t)
		  (tpl3::t -> t -> t)
		  (tpl4::t -> t -> t)
		  (tpl5::t -> t -> t)
		  (tpl6::t -> t)
		  (tpl7::t -> t)
		  (tpl8::t -> t)
		  (tpl9::PrelNum.Integer -> t) ->
		    tpl9 (PrelNum.ZdwSzh (34::PrelGHC.Intzh))}
	%in %let lit2 :: t =
		   %case zddNum %of (tpl::PrelNum.ZCTNum t)
		     {PrelNum.ZdwZCDNum
		      (tpl1::PrelBase.ZCTEq t)
		      (tpl2::PrelShow.ZCTShow t)
		      (tpl3::t -> t -> t)
		      (tpl4::t -> t -> t)
		      (tpl5::t -> t -> t)
		      (tpl6::t -> t)
		      (tpl7::t -> t)
		      (tpl8::t -> t)
		      (tpl9::PrelNum.Integer -> t) ->
			tpl9 (PrelNum.ZdwSzh (97::PrelGHC.Intzh))}
	    %in %let lit3 :: t =
		       %case zddNum %of (tpl::PrelNum.ZCTNum t)
			 {PrelNum.ZdwZCDNum
			  (tpl1::PrelBase.ZCTEq t)
			  (tpl2::PrelShow.ZCTShow t)
			  (tpl3::t -> t -> t)
			  (tpl4::t -> t -> t)
			  (tpl5::t -> t -> t)
			  (tpl6::t -> t)
			  (tpl7::t -> t)
			  (tpl8::t -> t)
			  (tpl9::PrelNum.Integer -> t) ->
			    tpl9 (PrelNum.ZdwSzh (69::PrelGHC.Intzh))}
		%in %let actionzu341 :: PrelBase.Int ->
					PrelBase.Int ->
					LexCore.Token ->
					ParCore.HappyState
					LexCore.Token
					(ParCore.HappyStk
					 (ParCore.HappyAbsSyn
					  (PrelBase.ZMZN PrelBase.Char)
					  t35
					  t36
					  t37
					  t38)
					 ->
					 PrelBase.ZMZN LexCore.Token ->
					 ErrM.Err
					 (ParCore.HappyAbsSyn
					  (PrelBase.ZMZN PrelBase.Char)
					  t35
					  t36
					  t37
					  t38))
					->
					PrelBase.ZMZN
					(ParCore.HappyState
					 LexCore.Token
					 (ParCore.HappyStk
					  (ParCore.HappyAbsSyn
					   (PrelBase.ZMZN PrelBase.Char)
					   t35
					   t36
					   t37
					   t38)
					  ->
					  PrelBase.ZMZN LexCore.Token ->
					  ErrM.Err
					  (ParCore.HappyAbsSyn
					   (PrelBase.ZMZN PrelBase.Char)
					   t35
					   t36
					   t37
					   t38)))
					->
					ParCore.HappyStk
					(ParCore.HappyAbsSyn
					 (PrelBase.ZMZN PrelBase.Char)
					 t35
					 t36
					 t37
					 t38)
					->
					PrelBase.ZMZN LexCore.Token ->
					ErrM.Err
					(ParCore.HappyAbsSyn
					 (PrelBase.ZMZN PrelBase.Char)
					 t35
					 t36
					 t37
					 t38) =
			   ParCore.actionzu34 @ PrelBase.Int @ LexCore.Token
			   @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38
			   PrelNum.zdfNumInt
		    %in %let actionzu334 :: PrelBase.Int ->
					    PrelBase.Int ->
					    LexCore.Token ->
					    ParCore.HappyState
					    LexCore.Token
					    (ParCore.HappyStk
					     (ParCore.HappyAbsSyn
					      (PrelBase.ZMZN PrelBase.Char)
					      t35
					      t36
					      t37
					      t38)
					     ->
					     PrelBase.ZMZN LexCore.Token ->
					     ErrM.Err
					     (ParCore.HappyAbsSyn
					      (PrelBase.ZMZN PrelBase.Char)
					      t35
					      t36
					      t37
					      t38))
					    ->
					    PrelBase.ZMZN
					    (ParCore.HappyState
					     LexCore.Token
					     (ParCore.HappyStk
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38)
					      ->
					      PrelBase.ZMZN LexCore.Token ->
					      ErrM.Err
					      (ParCore.HappyAbsSyn
					       (PrelBase.ZMZN PrelBase.Char)
					       t35
					       t36
					       t37
					       t38)))
					    ->
					    ParCore.HappyStk
					    (ParCore.HappyAbsSyn
					     (PrelBase.ZMZN PrelBase.Char)
					     t35
					     t36
					     t37
					     t38)
					    ->
					    PrelBase.ZMZN LexCore.Token ->
					    ErrM.Err
					    (ParCore.HappyAbsSyn
					     (PrelBase.ZMZN PrelBase.Char)
					     t35
					     t36
					     t37
					     t38) =
			       ParCore.actionzu33 @ PrelBase.Int @ t35 @ t36 @ t37 @ t38
			       @ (ParCore.HappyAbsSyn
				  (PrelBase.ZMZN PrelBase.Char)
				  t35
				  t36
				  t37
				  t38)
			       PrelNum.zdfNumInt
			%in %let happyShift7 :: (PrelBase.Int ->
						 PrelBase.Int ->
						 LexCore.Token ->
						 ParCore.HappyState
						 LexCore.Token
						 (ParCore.HappyStk
						  (ParCore.HappyAbsSyn
						   (PrelBase.ZMZN PrelBase.Char)
						   t35
						   t36
						   t37
						   t38)
						  ->
						  PrelBase.ZMZN LexCore.Token ->
						  ErrM.Err
						  (ParCore.HappyAbsSyn
						   (PrelBase.ZMZN PrelBase.Char)
						   t35
						   t36
						   t37
						   t38))
						 ->
						 PrelBase.ZMZN
						 (ParCore.HappyState
						  LexCore.Token
						  (ParCore.HappyStk
						   (ParCore.HappyAbsSyn
						    (PrelBase.ZMZN PrelBase.Char)
						    t35
						    t36
						    t37
						    t38)
						   ->
						   PrelBase.ZMZN LexCore.Token ->
						   ErrM.Err
						   (ParCore.HappyAbsSyn
						    (PrelBase.ZMZN PrelBase.Char)
						    t35
						    t36
						    t37
						    t38)))
						 ->
						 ParCore.HappyStk
						 (ParCore.HappyAbsSyn
						  (PrelBase.ZMZN PrelBase.Char)
						  t35
						  t36
						  t37
						  t38)
						 ->
						 PrelBase.ZMZN LexCore.Token ->
						 ErrM.Err
						 (ParCore.HappyAbsSyn
						  (PrelBase.ZMZN PrelBase.Char)
						  t35
						  t36
						  t37
						  t38))
						->
						PrelBase.Int ->
						LexCore.Token ->
						ParCore.HappyState
						LexCore.Token
						(ParCore.HappyStk
						 (ParCore.HappyAbsSyn
						  (PrelBase.ZMZN PrelBase.Char)
						  t35
						  t36
						  t37
						  t38)
						 ->
						 PrelBase.ZMZN LexCore.Token ->
						 ErrM.Err
						 (ParCore.HappyAbsSyn
						  (PrelBase.ZMZN PrelBase.Char)
						  t35
						  t36
						  t37
						  t38))
						->
						PrelBase.ZMZN
						(ParCore.HappyState
						 LexCore.Token
						 (ParCore.HappyStk
						  (ParCore.HappyAbsSyn
						   (PrelBase.ZMZN PrelBase.Char)
						   t35
						   t36
						   t37
						   t38)
						  ->
						  PrelBase.ZMZN LexCore.Token ->
						  ErrM.Err
						  (ParCore.HappyAbsSyn
						   (PrelBase.ZMZN PrelBase.Char)
						   t35
						   t36
						   t37
						   t38)))
						->
						ParCore.HappyStk
						(ParCore.HappyAbsSyn
						 (PrelBase.ZMZN PrelBase.Char)
						 t35
						 t36
						 t37
						 t38)
						->
						PrelBase.ZMZN LexCore.Token ->
						ErrM.Err
						(ParCore.HappyAbsSyn
						 (PrelBase.ZMZN PrelBase.Char)
						 t35
						 t36
						 t37
						 t38) =
				   ParCore.happyShift @ PrelBase.Int
				   @ (ErrM.Err
				      (ParCore.HappyAbsSyn
				       (PrelBase.ZMZN PrelBase.Char)
				       t35
				       t36
				       t37
				       t38))
				   @ (PrelBase.ZMZN PrelBase.Char) @ t35 @ t36 @ t37 @ t38
				   PrelNum.zdfNumInt
			    %in \ (ds::t) ->
				    %case zddNum %of (tpl::PrelNum.ZCTNum t)
				      {PrelNum.ZdwZCDNum
				       (tpl1::PrelBase.ZCTEq t)
				       (tpl2::PrelShow.ZCTShow t)
				       (tpl3::t -> t -> t)
				       (tpl4::t -> t -> t)
				       (tpl5::t -> t -> t)
				       (tpl6::t -> t)
				       (tpl7::t -> t)
				       (tpl8::t -> t)
				       (tpl9::PrelNum.Integer -> t) ->
					 %case tpl1 %of (tpl10::PrelBase.ZCTEq t)
					   {PrelBase.ZdwZCDEq
					    (tpl11::t -> t -> PrelBase.Bool)
					    (tpl12::t -> t -> PrelBase.Bool) ->
					      %case (tpl12 lit2 ds) %of (wild::PrelBase.Bool)
						{PrelBase.ZdwTrue ->
						   happyShift7
						   (ParCore.actionzu32 @ PrelBase.Int
						    @ LexCore.Token @ t35 @ t36 @ t37 @ t38
						    @ (ParCore.HappyAbsSyn
						       (PrelBase.ZMZN PrelBase.Char)
						       t35
						       t36
						       t37
						       t38));
						 PrelBase.ZdwFalse ->
						   %case (tpl12 lit1 ds) %of (wild1::PrelBase.Bool)
						     {PrelBase.ZdwTrue ->
							ParCore.happyGoto
							@ (ParCore.HappyState
							   LexCore.Token
							   (ParCore.HappyStk
							    (ParCore.HappyAbsSyn
							     (PrelBase.ZMZN PrelBase.Char)
							     t35
							     t36
							     t37
							     t38)
							    ->
							    PrelBase.ZMZN LexCore.Token ->
							    ErrM.Err
							    (ParCore.HappyAbsSyn
							     (PrelBase.ZMZN PrelBase.Char)
							     t35
							     t36
							     t37
							     t38)))
							@ LexCore.Token
							@ (ParCore.HappyStk
							   (ParCore.HappyAbsSyn
							    (PrelBase.ZMZN PrelBase.Char)
							    t35
							    t36
							    t37
							    t38)
							   ->
							   PrelBase.ZMZN LexCore.Token ->
							   ErrM.Err
							   (ParCore.HappyAbsSyn
							    (PrelBase.ZMZN PrelBase.Char)
							    t35
							    t36
							    t37
							    t38))
							actionzu334;
						      PrelBase.ZdwFalse ->
							%case (tpl12 lit3 ds)
							%of (wild2::PrelBase.Bool)
							  {PrelBase.ZdwTrue ->
							     ParCore.happyGoto
							     @ (ParCore.HappyState
								LexCore.Token
								(ParCore.HappyStk
								 (ParCore.HappyAbsSyn
								  (PrelBase.ZMZN PrelBase.Char)
								  t35
								  t36
								  t37
								  t38)
								 ->
								 PrelBase.ZMZN LexCore.Token ->
								 ErrM.Err
								 (ParCore.HappyAbsSyn
								  (PrelBase.ZMZN PrelBase.Char)
								  t35
								  t36
								  t37
								  t38)))
							     @ LexCore.Token
							     @ (ParCore.HappyStk
								(ParCore.HappyAbsSyn
								 (PrelBase.ZMZN PrelBase.Char)
								 t35
								 t36
								 t37
								 t38)
								->
								PrelBase.ZMZN LexCore.Token ->
								ErrM.Err
								(ParCore.HappyAbsSyn
								 (PrelBase.ZMZN PrelBase.Char)
								 t35
								 t36
								 t37
								 t38))
							     actionzu341;
							   PrelBase.ZdwFalse ->
							     ParCore.happyFail
							     @ (ParCore.HappyAbsSyn
								(PrelBase.ZMZN PrelBase.Char)
								t35
								t36
								t37
								t38)
							     @ LexCore.Token
							     @ (PrelBase.ZMZN PrelBase.Char) @ t35
							     @ t36 @ t37 @ t38}}}}};
  actionzu301 :: PrelBase.Int ->
		 PrelBase.Int ->
		 LexCore.Token ->
		 ParCore.HappyState
		 LexCore.Token
		 (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T)
		  ->
		  PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T))
		 ->
		 PrelBase.ZMZN
		 (ParCore.HappyState
		  LexCore.Token
		  (ParCore.HappyStk
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T)
		   ->
		   PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err
		   (ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T)))
		 ->
		 ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T)
		 ->
		 PrelBase.ZMZN LexCore.Token ->
		 ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T) =
    ParCore.actionzu30 @ PrelBase.Int @ PrelBase.Z0T @ PrelBase.Z0T
    @ PrelBase.Z0T @ PrelBase.Z0T PrelNum.zdfNumInt;
  ParCore.happyReturn :: %forall a . a -> ErrM.Err a =
    \ @ a -> ParCore.returnM @ a;
  ParCore.pKind :: PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err AbsCore.Kind =
    \ (tks::PrelBase.ZMZN LexCore.Token) ->
	%case ErrM.zdfMonadErr %of (tpl::PrelBase.ZCTMonad ErrM.Err)
	  {PrelBase.ZdwZCDMonad
	   (tpl1::%forall a b . ErrM.Err a -> (a -> ErrM.Err b) -> ErrM.Err b)
	   (tpl2::%forall a b . ErrM.Err a -> ErrM.Err b -> ErrM.Err b)
	   (tpl3::%forall a . a -> ErrM.Err a)
	   (tpl4::%forall a . PrelBase.ZMZN PrelBase.Char -> ErrM.Err a) ->
	     tpl1
	     @ (ParCore.HappyAbsSyn
		PrelBase.Z0T
		PrelBase.Z0T
		PrelBase.Z0T
		PrelBase.Z0T
		PrelBase.Z0T)
	     @ AbsCore.Kind
	     (ParCore.happyNewToken
	      @ (ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T))
	      @ (ErrM.Err
		 (ParCore.HappyAbsSyn
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T))
	      actionzu281
	      (ParCore.notHappyAtAll
	       @ (PrelBase.ZMZN
		  (ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk
		    (ParCore.HappyAbsSyn
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)
		    ->
		    PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err
		    (ParCore.HappyAbsSyn
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)))))
	      (ParCore.notHappyAtAll
	       @ (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T)))
	      tks)
	     (\ (x::ParCore.HappyAbsSyn
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T) ->
		  %case x
		  %of (wild::ParCore.HappyAbsSyn
			     PrelBase.Z0T
			     PrelBase.Z0T
			     PrelBase.Z0T
			     PrelBase.Z0T
			     PrelBase.Z0T)
		    {%_ ->
		       ParCore.notHappyAtAll @ (ErrM.Err AbsCore.Kind);
		     ParCore.ZdwHappyAbsSyn66 (zz::AbsCore.Kind) ->
		       tpl3 @ AbsCore.Kind zz})};
  ParCore.pKind1 :: PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err AbsCore.Kind =
    \ (tks::PrelBase.ZMZN LexCore.Token) ->
	%case ErrM.zdfMonadErr %of (tpl::PrelBase.ZCTMonad ErrM.Err)
	  {PrelBase.ZdwZCDMonad
	   (tpl1::%forall a b . ErrM.Err a -> (a -> ErrM.Err b) -> ErrM.Err b)
	   (tpl2::%forall a b . ErrM.Err a -> ErrM.Err b -> ErrM.Err b)
	   (tpl3::%forall a . a -> ErrM.Err a)
	   (tpl4::%forall a . PrelBase.ZMZN PrelBase.Char -> ErrM.Err a) ->
	     tpl1
	     @ (ParCore.HappyAbsSyn
		PrelBase.Z0T
		PrelBase.Z0T
		PrelBase.Z0T
		PrelBase.Z0T
		PrelBase.Z0T)
	     @ AbsCore.Kind
	     (ParCore.happyNewToken
	      @ (ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T))
	      @ (ErrM.Err
		 (ParCore.HappyAbsSyn
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T))
	      actionzu271
	      (ParCore.notHappyAtAll
	       @ (PrelBase.ZMZN
		  (ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk
		    (ParCore.HappyAbsSyn
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)
		    ->
		    PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err
		    (ParCore.HappyAbsSyn
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)))))
	      (ParCore.notHappyAtAll
	       @ (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T)))
	      tks)
	     (\ (x::ParCore.HappyAbsSyn
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T) ->
		  %case x
		  %of (wild::ParCore.HappyAbsSyn
			     PrelBase.Z0T
			     PrelBase.Z0T
			     PrelBase.Z0T
			     PrelBase.Z0T
			     PrelBase.Z0T)
		    {%_ ->
		       ParCore.notHappyAtAll @ (ErrM.Err AbsCore.Kind);
		     ParCore.ZdwHappyAbsSyn66 (zz::AbsCore.Kind) ->
		       tpl3 @ AbsCore.Kind zz})};
  ParCore.pListTbind :: PrelBase.ZMZN LexCore.Token ->
			ErrM.Err (PrelBase.ZMZN AbsCore.Tbind) =
    \ (tks::PrelBase.ZMZN LexCore.Token) ->
	%case ErrM.zdfMonadErr %of (tpl::PrelBase.ZCTMonad ErrM.Err)
	  {PrelBase.ZdwZCDMonad
	   (tpl1::%forall a b . ErrM.Err a -> (a -> ErrM.Err b) -> ErrM.Err b)
	   (tpl2::%forall a b . ErrM.Err a -> ErrM.Err b -> ErrM.Err b)
	   (tpl3::%forall a . a -> ErrM.Err a)
	   (tpl4::%forall a . PrelBase.ZMZN PrelBase.Char -> ErrM.Err a) ->
	     tpl1
	     @ (ParCore.HappyAbsSyn
		(PrelBase.ZMZN PrelBase.Char)
		PrelBase.Z0T
		PrelBase.Z0T
		PrelBase.Z0T
		PrelBase.Z0T)
	     @ (PrelBase.ZMZN AbsCore.Tbind)
	     (ParCore.happyNewToken
	      @ (ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T))
	      @ (ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T))
	      actionzu2011
	      (ParCore.notHappyAtAll
	       @ (PrelBase.ZMZN
		  (ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)
		    ->
		    PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)))))
	      (ParCore.notHappyAtAll
	       @ (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T)))
	      tks)
	     (\ (x::ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T) ->
		  %case x
		  %of (wild::ParCore.HappyAbsSyn
			     (PrelBase.ZMZN PrelBase.Char)
			     PrelBase.Z0T
			     PrelBase.Z0T
			     PrelBase.Z0T
			     PrelBase.Z0T)
		    {%_ ->
		       ParCore.notHappyAtAll @ (ErrM.Err (PrelBase.ZMZN AbsCore.Tbind));
		     ParCore.ZdwHappyAbsSyn59 (zz::PrelBase.ZMZN AbsCore.Tbind) ->
		       tpl3 @ (PrelBase.ZMZN AbsCore.Tbind) zz})};
  ParCore.pListATbind :: PrelBase.ZMZN LexCore.Token ->
			 ErrM.Err (PrelBase.ZMZN AbsCore.ATbind) =
    \ (tks::PrelBase.ZMZN LexCore.Token) ->
	%case ErrM.zdfMonadErr %of (tpl::PrelBase.ZCTMonad ErrM.Err)
	  {PrelBase.ZdwZCDMonad
	   (tpl1::%forall a b . ErrM.Err a -> (a -> ErrM.Err b) -> ErrM.Err b)
	   (tpl2::%forall a b . ErrM.Err a -> ErrM.Err b -> ErrM.Err b)
	   (tpl3::%forall a . a -> ErrM.Err a)
	   (tpl4::%forall a . PrelBase.ZMZN PrelBase.Char -> ErrM.Err a) ->
	     tpl1
	     @ (ParCore.HappyAbsSyn
		(PrelBase.ZMZN PrelBase.Char)
		PrelBase.Z0T
		PrelBase.Z0T
		PrelBase.Z0T
		PrelBase.Z0T)
	     @ (PrelBase.ZMZN AbsCore.ATbind)
	     (ParCore.happyNewToken
	      @ (ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T))
	      @ (ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T))
	      actionzu2211
	      (ParCore.notHappyAtAll
	       @ (PrelBase.ZMZN
		  (ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)
		    ->
		    PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)))))
	      (ParCore.notHappyAtAll
	       @ (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T)))
	      tks)
	     (\ (x::ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T) ->
		  %case x
		  %of (wild::ParCore.HappyAbsSyn
			     (PrelBase.ZMZN PrelBase.Char)
			     PrelBase.Z0T
			     PrelBase.Z0T
			     PrelBase.Z0T
			     PrelBase.Z0T)
		    {%_ ->
		       ParCore.notHappyAtAll @ (ErrM.Err (PrelBase.ZMZN AbsCore.ATbind));
		     ParCore.ZdwHappyAbsSyn61 (zz::PrelBase.ZMZN AbsCore.ATbind) ->
		       tpl3 @ (PrelBase.ZMZN AbsCore.ATbind) zz})};
  ParCore.pATbind :: PrelBase.ZMZN LexCore.Token ->
		     ErrM.Err AbsCore.ATbind =
    \ (tks::PrelBase.ZMZN LexCore.Token) ->
	%case ErrM.zdfMonadErr %of (tpl::PrelBase.ZCTMonad ErrM.Err)
	  {PrelBase.ZdwZCDMonad
	   (tpl1::%forall a b . ErrM.Err a -> (a -> ErrM.Err b) -> ErrM.Err b)
	   (tpl2::%forall a b . ErrM.Err a -> ErrM.Err b -> ErrM.Err b)
	   (tpl3::%forall a . a -> ErrM.Err a)
	   (tpl4::%forall a . PrelBase.ZMZN PrelBase.Char -> ErrM.Err a) ->
	     tpl1
	     @ (ParCore.HappyAbsSyn
		(PrelBase.ZMZN PrelBase.Char)
		PrelBase.Z0T
		PrelBase.Z0T
		PrelBase.Z0T
		PrelBase.Z0T)
	     @ AbsCore.ATbind
	     (ParCore.happyNewToken
	      @ (ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T))
	      @ (ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T))
	      actionzu2121
	      (ParCore.notHappyAtAll
	       @ (PrelBase.ZMZN
		  (ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)
		    ->
		    PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)))))
	      (ParCore.notHappyAtAll
	       @ (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T)))
	      tks)
	     (\ (x::ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T) ->
		  %case x
		  %of (wild::ParCore.HappyAbsSyn
			     (PrelBase.ZMZN PrelBase.Char)
			     PrelBase.Z0T
			     PrelBase.Z0T
			     PrelBase.Z0T
			     PrelBase.Z0T)
		    {%_ ->
		       ParCore.notHappyAtAll @ (ErrM.Err AbsCore.ATbind);
		     ParCore.ZdwHappyAbsSyn60 (zz::AbsCore.ATbind) ->
		       tpl3 @ AbsCore.ATbind zz})};
  ParCore.pLit :: PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err AbsCore.Lit =
    \ (tks::PrelBase.ZMZN LexCore.Token) ->
	%case ErrM.zdfMonadErr %of (tpl::PrelBase.ZCTMonad ErrM.Err)
	  {PrelBase.ZdwZCDMonad
	   (tpl1::%forall a b . ErrM.Err a -> (a -> ErrM.Err b) -> ErrM.Err b)
	   (tpl2::%forall a b . ErrM.Err a -> ErrM.Err b -> ErrM.Err b)
	   (tpl3::%forall a . a -> ErrM.Err a)
	   (tpl4::%forall a . PrelBase.ZMZN PrelBase.Char -> ErrM.Err a) ->
	     tpl1
	     @ (ParCore.HappyAbsSyn
		(PrelBase.ZMZN PrelBase.Char)
		(PrelBase.ZMZN PrelBase.Char)
		PrelNum.Integer
		PrelFloat.Double
		PrelBase.Char)
	     @ AbsCore.Lit
	     (ParCore.happyNewToken
	      @ (ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char))
	      @ (ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char))
	      actionzu291
	      (ParCore.notHappyAtAll
	       @ (PrelBase.ZMZN
		  (ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelNum.Integer
		     PrelFloat.Double
		     PrelBase.Char)
		    ->
		    PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelNum.Integer
		     PrelFloat.Double
		     PrelBase.Char)))))
	      (ParCore.notHappyAtAll
	       @ (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char)))
	      tks)
	     (\ (x::ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char) ->
		  %case x
		  %of (wild::ParCore.HappyAbsSyn
			     (PrelBase.ZMZN PrelBase.Char)
			     (PrelBase.ZMZN PrelBase.Char)
			     PrelNum.Integer
			     PrelFloat.Double
			     PrelBase.Char)
		    {%_ ->
		       ParCore.notHappyAtAll @ (ErrM.Err AbsCore.Lit);
		     ParCore.ZdwHappyAbsSyn68 (zz::AbsCore.Lit) ->
		       tpl3 @ AbsCore.Lit zz})};
  ParCore.pListVbind :: PrelBase.ZMZN LexCore.Token ->
			ErrM.Err (PrelBase.ZMZN AbsCore.Vbind) =
    \ (tks::PrelBase.ZMZN LexCore.Token) ->
	%case ErrM.zdfMonadErr %of (tpl::PrelBase.ZCTMonad ErrM.Err)
	  {PrelBase.ZdwZCDMonad
	   (tpl1::%forall a b . ErrM.Err a -> (a -> ErrM.Err b) -> ErrM.Err b)
	   (tpl2::%forall a b . ErrM.Err a -> ErrM.Err b -> ErrM.Err b)
	   (tpl3::%forall a . a -> ErrM.Err a)
	   (tpl4::%forall a . PrelBase.ZMZN PrelBase.Char -> ErrM.Err a) ->
	     tpl1
	     @ (ParCore.HappyAbsSyn
		(PrelBase.ZMZN PrelBase.Char)
		PrelBase.Z0T
		PrelBase.Z0T
		PrelBase.Z0T
		PrelBase.Z0T)
	     @ (PrelBase.ZMZN AbsCore.Vbind)
	     (ParCore.happyNewToken
	      @ (ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T))
	      @ (ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T))
	      actionzu1811
	      (ParCore.notHappyAtAll
	       @ (PrelBase.ZMZN
		  (ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)
		    ->
		    PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)))))
	      (ParCore.notHappyAtAll
	       @ (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T)))
	      tks)
	     (\ (x::ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T) ->
		  %case x
		  %of (wild::ParCore.HappyAbsSyn
			     (PrelBase.ZMZN PrelBase.Char)
			     PrelBase.Z0T
			     PrelBase.Z0T
			     PrelBase.Z0T
			     PrelBase.Z0T)
		    {%_ ->
		       ParCore.notHappyAtAll @ (ErrM.Err (PrelBase.ZMZN AbsCore.Vbind));
		     ParCore.ZdwHappyAbsSyn57 (zz::PrelBase.ZMZN AbsCore.Vbind) ->
		       tpl3 @ (PrelBase.ZMZN AbsCore.Vbind) zz})};
  ParCore.pVbind :: PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err AbsCore.Vbind =
    \ (tks::PrelBase.ZMZN LexCore.Token) ->
	%case ErrM.zdfMonadErr %of (tpl::PrelBase.ZCTMonad ErrM.Err)
	  {PrelBase.ZdwZCDMonad
	   (tpl1::%forall a b . ErrM.Err a -> (a -> ErrM.Err b) -> ErrM.Err b)
	   (tpl2::%forall a b . ErrM.Err a -> ErrM.Err b -> ErrM.Err b)
	   (tpl3::%forall a . a -> ErrM.Err a)
	   (tpl4::%forall a . PrelBase.ZMZN PrelBase.Char -> ErrM.Err a) ->
	     tpl1
	     @ (ParCore.HappyAbsSyn
		(PrelBase.ZMZN PrelBase.Char)
		PrelBase.Z0T
		PrelBase.Z0T
		PrelBase.Z0T
		PrelBase.Z0T)
	     @ AbsCore.Vbind
	     (ParCore.happyNewToken
	      @ (ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T))
	      @ (ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T))
	      actionzu1712
	      (ParCore.notHappyAtAll
	       @ (PrelBase.ZMZN
		  (ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)
		    ->
		    PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)))))
	      (ParCore.notHappyAtAll
	       @ (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T)))
	      tks)
	     (\ (x::ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T) ->
		  %case x
		  %of (wild::ParCore.HappyAbsSyn
			     (PrelBase.ZMZN PrelBase.Char)
			     PrelBase.Z0T
			     PrelBase.Z0T
			     PrelBase.Z0T
			     PrelBase.Z0T)
		    {%_ ->
		       ParCore.notHappyAtAll @ (ErrM.Err AbsCore.Vbind);
		     ParCore.ZdwHappyAbsSyn56 (zz::AbsCore.Vbind) ->
		       tpl3 @ AbsCore.Vbind zz})};
  ParCore.pListBind :: PrelBase.ZMZN LexCore.Token ->
		       ErrM.Err (PrelBase.ZMZN AbsCore.Bind) =
    \ (tks::PrelBase.ZMZN LexCore.Token) ->
	%case ErrM.zdfMonadErr %of (tpl::PrelBase.ZCTMonad ErrM.Err)
	  {PrelBase.ZdwZCDMonad
	   (tpl1::%forall a b . ErrM.Err a -> (a -> ErrM.Err b) -> ErrM.Err b)
	   (tpl2::%forall a b . ErrM.Err a -> ErrM.Err b -> ErrM.Err b)
	   (tpl3::%forall a . a -> ErrM.Err a)
	   (tpl4::%forall a . PrelBase.ZMZN PrelBase.Char -> ErrM.Err a) ->
	     tpl1
	     @ (ParCore.HappyAbsSyn
		(PrelBase.ZMZN PrelBase.Char)
		PrelBase.Z0T
		PrelBase.Z0T
		PrelBase.Z0T
		PrelBase.Z0T)
	     @ (PrelBase.ZMZN AbsCore.Bind)
	     (ParCore.happyNewToken
	      @ (ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T))
	      @ (ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T))
	      actionzu1411
	      (ParCore.notHappyAtAll
	       @ (PrelBase.ZMZN
		  (ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)
		    ->
		    PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)))))
	      (ParCore.notHappyAtAll
	       @ (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T)))
	      tks)
	     (\ (x::ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T) ->
		  %case x
		  %of (wild::ParCore.HappyAbsSyn
			     (PrelBase.ZMZN PrelBase.Char)
			     PrelBase.Z0T
			     PrelBase.Z0T
			     PrelBase.Z0T
			     PrelBase.Z0T)
		    {%_ ->
		       ParCore.notHappyAtAll @ (ErrM.Err (PrelBase.ZMZN AbsCore.Bind));
		     ParCore.ZdwHappyAbsSyn53 (zz::PrelBase.ZMZN AbsCore.Bind) ->
		       tpl3 @ (PrelBase.ZMZN AbsCore.Bind) zz})};
  ParCore.pBind :: PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err AbsCore.Bind =
    \ (tks::PrelBase.ZMZN LexCore.Token) ->
	%case ErrM.zdfMonadErr %of (tpl::PrelBase.ZCTMonad ErrM.Err)
	  {PrelBase.ZdwZCDMonad
	   (tpl1::%forall a b . ErrM.Err a -> (a -> ErrM.Err b) -> ErrM.Err b)
	   (tpl2::%forall a b . ErrM.Err a -> ErrM.Err b -> ErrM.Err b)
	   (tpl3::%forall a . a -> ErrM.Err a)
	   (tpl4::%forall a . PrelBase.ZMZN PrelBase.Char -> ErrM.Err a) ->
	     tpl1
	     @ (ParCore.HappyAbsSyn
		(PrelBase.ZMZN PrelBase.Char)
		PrelBase.Z0T
		PrelBase.Z0T
		PrelBase.Z0T
		PrelBase.Z0T)
	     @ AbsCore.Bind
	     (ParCore.happyNewToken
	      @ (ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T))
	      @ (ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T))
	      actionzu1311
	      (ParCore.notHappyAtAll
	       @ (PrelBase.ZMZN
		  (ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)
		    ->
		    PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)))))
	      (ParCore.notHappyAtAll
	       @ (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T)))
	      tks)
	     (\ (x::ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T) ->
		  %case x
		  %of (wild::ParCore.HappyAbsSyn
			     (PrelBase.ZMZN PrelBase.Char)
			     PrelBase.Z0T
			     PrelBase.Z0T
			     PrelBase.Z0T
			     PrelBase.Z0T)
		    {%_ ->
		       ParCore.notHappyAtAll @ (ErrM.Err AbsCore.Bind);
		     ParCore.ZdwHappyAbsSyn52 (zz::AbsCore.Bind) ->
		       tpl3 @ AbsCore.Bind zz})};
  ParCore.pListTdef :: PrelBase.ZMZN LexCore.Token ->
		       ErrM.Err (PrelBase.ZMZN AbsCore.Tdef) =
    \ (tks::PrelBase.ZMZN LexCore.Token) ->
	%case ErrM.zdfMonadErr %of (tpl::PrelBase.ZCTMonad ErrM.Err)
	  {PrelBase.ZdwZCDMonad
	   (tpl1::%forall a b . ErrM.Err a -> (a -> ErrM.Err b) -> ErrM.Err b)
	   (tpl2::%forall a b . ErrM.Err a -> ErrM.Err b -> ErrM.Err b)
	   (tpl3::%forall a . a -> ErrM.Err a)
	   (tpl4::%forall a . PrelBase.ZMZN PrelBase.Char -> ErrM.Err a) ->
	     tpl1
	     @ (ParCore.HappyAbsSyn
		(PrelBase.ZMZN PrelBase.Char)
		PrelBase.Z0T
		PrelBase.Z0T
		PrelBase.Z0T
		PrelBase.Z0T)
	     @ (PrelBase.ZMZN AbsCore.Tdef)
	     (ParCore.happyNewToken
	      @ (ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T))
	      @ (ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T))
	      actionzu1111
	      (ParCore.notHappyAtAll
	       @ (PrelBase.ZMZN
		  (ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)
		    ->
		    PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)))))
	      (ParCore.notHappyAtAll
	       @ (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T)))
	      tks)
	     (\ (x::ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T) ->
		  %case x
		  %of (wild::ParCore.HappyAbsSyn
			     (PrelBase.ZMZN PrelBase.Char)
			     PrelBase.Z0T
			     PrelBase.Z0T
			     PrelBase.Z0T
			     PrelBase.Z0T)
		    {%_ ->
		       ParCore.notHappyAtAll @ (ErrM.Err (PrelBase.ZMZN AbsCore.Tdef));
		     ParCore.ZdwHappyAbsSyn40 (zz::PrelBase.ZMZN AbsCore.Tdef) ->
		       tpl3 @ (PrelBase.ZMZN AbsCore.Tdef) zz})};
  ParCore.pTdef :: PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err AbsCore.Tdef =
    \ (tks::PrelBase.ZMZN LexCore.Token) ->
	%case ErrM.zdfMonadErr %of (tpl::PrelBase.ZCTMonad ErrM.Err)
	  {PrelBase.ZdwZCDMonad
	   (tpl1::%forall a b . ErrM.Err a -> (a -> ErrM.Err b) -> ErrM.Err b)
	   (tpl2::%forall a b . ErrM.Err a -> ErrM.Err b -> ErrM.Err b)
	   (tpl3::%forall a . a -> ErrM.Err a)
	   (tpl4::%forall a . PrelBase.ZMZN PrelBase.Char -> ErrM.Err a) ->
	     tpl1
	     @ (ParCore.HappyAbsSyn
		(PrelBase.ZMZN PrelBase.Char)
		PrelBase.Z0T
		PrelBase.Z0T
		PrelBase.Z0T
		PrelBase.Z0T)
	     @ AbsCore.Tdef
	     (ParCore.happyNewToken
	      @ (ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T))
	      @ (ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T))
	      actionzu2111
	      (ParCore.notHappyAtAll
	       @ (PrelBase.ZMZN
		  (ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)
		    ->
		    PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)))))
	      (ParCore.notHappyAtAll
	       @ (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T)))
	      tks)
	     (\ (x::ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T) ->
		  %case x
		  %of (wild::ParCore.HappyAbsSyn
			     (PrelBase.ZMZN PrelBase.Char)
			     PrelBase.Z0T
			     PrelBase.Z0T
			     PrelBase.Z0T
			     PrelBase.Z0T)
		    {%_ ->
		       ParCore.notHappyAtAll @ (ErrM.Err AbsCore.Tdef);
		     ParCore.ZdwHappyAbsSyn41 (zz::AbsCore.Tdef) ->
		       tpl3 @ AbsCore.Tdef zz})};
  ParCore.pMaybeTy :: PrelBase.ZMZN LexCore.Token ->
		      ErrM.Err AbsCore.MaybeTy =
    \ (tks::PrelBase.ZMZN LexCore.Token) ->
	%case ErrM.zdfMonadErr %of (tpl::PrelBase.ZCTMonad ErrM.Err)
	  {PrelBase.ZdwZCDMonad
	   (tpl1::%forall a b . ErrM.Err a -> (a -> ErrM.Err b) -> ErrM.Err b)
	   (tpl2::%forall a b . ErrM.Err a -> ErrM.Err b -> ErrM.Err b)
	   (tpl3::%forall a . a -> ErrM.Err a)
	   (tpl4::%forall a . PrelBase.ZMZN PrelBase.Char -> ErrM.Err a) ->
	     tpl1
	     @ (ParCore.HappyAbsSyn
		(PrelBase.ZMZN PrelBase.Char)
		PrelBase.Z0T
		PrelBase.Z0T
		PrelBase.Z0T
		PrelBase.Z0T)
	     @ AbsCore.MaybeTy
	     (ParCore.happyNewToken
	      @ (ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T))
	      @ (ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T))
	      actionzu311
	      (ParCore.notHappyAtAll
	       @ (PrelBase.ZMZN
		  (ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)
		    ->
		    PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)))))
	      (ParCore.notHappyAtAll
	       @ (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T)))
	      tks)
	     (\ (x::ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T) ->
		  %case x
		  %of (wild::ParCore.HappyAbsSyn
			     (PrelBase.ZMZN PrelBase.Char)
			     PrelBase.Z0T
			     PrelBase.Z0T
			     PrelBase.Z0T
			     PrelBase.Z0T)
		    {%_ ->
		       ParCore.notHappyAtAll @ (ErrM.Err AbsCore.MaybeTy);
		     ParCore.ZdwHappyAbsSyn42 (zz::AbsCore.MaybeTy) ->
		       tpl3 @ AbsCore.MaybeTy zz})};
  ParCore.pModule :: PrelBase.ZMZN LexCore.Token ->
		     ErrM.Err AbsCore.Module =
    \ (tks::PrelBase.ZMZN LexCore.Token) ->
	%case ErrM.zdfMonadErr %of (tpl::PrelBase.ZCTMonad ErrM.Err)
	  {PrelBase.ZdwZCDMonad
	   (tpl1::%forall a b . ErrM.Err a -> (a -> ErrM.Err b) -> ErrM.Err b)
	   (tpl2::%forall a b . ErrM.Err a -> ErrM.Err b -> ErrM.Err b)
	   (tpl3::%forall a . a -> ErrM.Err a)
	   (tpl4::%forall a . PrelBase.ZMZN PrelBase.Char -> ErrM.Err a) ->
	     tpl1
	     @ (ParCore.HappyAbsSyn
		(PrelBase.ZMZN PrelBase.Char)
		(PrelBase.ZMZN PrelBase.Char)
		PrelNum.Integer
		PrelFloat.Double
		PrelBase.Char)
	     @ AbsCore.Module
	     (ParCore.happyNewToken
	      @ (ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char))
	      @ (ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char))
	      actionzu01
	      (ParCore.notHappyAtAll
	       @ (PrelBase.ZMZN
		  (ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelNum.Integer
		     PrelFloat.Double
		     PrelBase.Char)
		    ->
		    PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelNum.Integer
		     PrelFloat.Double
		     PrelBase.Char)))))
	      (ParCore.notHappyAtAll
	       @ (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char)))
	      tks)
	     (\ (x::ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char) ->
		  %case x
		  %of (wild::ParCore.HappyAbsSyn
			     (PrelBase.ZMZN PrelBase.Char)
			     (PrelBase.ZMZN PrelBase.Char)
			     PrelNum.Integer
			     PrelFloat.Double
			     PrelBase.Char)
		    {%_ ->
		       ParCore.notHappyAtAll @ (ErrM.Err AbsCore.Module);
		     ParCore.ZdwHappyAbsSyn39 (zz::AbsCore.Module) ->
		       tpl3 @ AbsCore.Module zz})};
  ParCore.pListVdefg :: PrelBase.ZMZN LexCore.Token ->
			ErrM.Err (PrelBase.ZMZN AbsCore.Vdefg) =
    \ (tks::PrelBase.ZMZN LexCore.Token) ->
	%case ErrM.zdfMonadErr %of (tpl::PrelBase.ZCTMonad ErrM.Err)
	  {PrelBase.ZdwZCDMonad
	   (tpl1::%forall a b . ErrM.Err a -> (a -> ErrM.Err b) -> ErrM.Err b)
	   (tpl2::%forall a b . ErrM.Err a -> ErrM.Err b -> ErrM.Err b)
	   (tpl3::%forall a . a -> ErrM.Err a)
	   (tpl4::%forall a . PrelBase.ZMZN PrelBase.Char -> ErrM.Err a) ->
	     tpl1
	     @ (ParCore.HappyAbsSyn
		(PrelBase.ZMZN PrelBase.Char)
		(PrelBase.ZMZN PrelBase.Char)
		PrelNum.Integer
		PrelFloat.Double
		PrelBase.Char)
	     @ (PrelBase.ZMZN AbsCore.Vdefg)
	     (ParCore.happyNewToken
	      @ (ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char))
	      @ (ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char))
	      actionzu711
	      (ParCore.notHappyAtAll
	       @ (PrelBase.ZMZN
		  (ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelNum.Integer
		     PrelFloat.Double
		     PrelBase.Char)
		    ->
		    PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelNum.Integer
		     PrelFloat.Double
		     PrelBase.Char)))))
	      (ParCore.notHappyAtAll
	       @ (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char)))
	      tks)
	     (\ (x::ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char) ->
		  %case x
		  %of (wild::ParCore.HappyAbsSyn
			     (PrelBase.ZMZN PrelBase.Char)
			     (PrelBase.ZMZN PrelBase.Char)
			     PrelNum.Integer
			     PrelFloat.Double
			     PrelBase.Char)
		    {%_ ->
		       ParCore.notHappyAtAll @ (ErrM.Err (PrelBase.ZMZN AbsCore.Vdefg));
		     ParCore.ZdwHappyAbsSyn46 (zz::PrelBase.ZMZN AbsCore.Vdefg) ->
		       tpl3 @ (PrelBase.ZMZN AbsCore.Vdefg) zz})};
  ParCore.pListTy2 :: PrelBase.ZMZN LexCore.Token ->
		      ErrM.Err (PrelBase.ZMZN AbsCore.Ty) =
    \ (tks::PrelBase.ZMZN LexCore.Token) ->
	%case ErrM.zdfMonadErr %of (tpl::PrelBase.ZCTMonad ErrM.Err)
	  {PrelBase.ZdwZCDMonad
	   (tpl1::%forall a b . ErrM.Err a -> (a -> ErrM.Err b) -> ErrM.Err b)
	   (tpl2::%forall a b . ErrM.Err a -> ErrM.Err b -> ErrM.Err b)
	   (tpl3::%forall a . a -> ErrM.Err a)
	   (tpl4::%forall a . PrelBase.ZMZN PrelBase.Char -> ErrM.Err a) ->
	     tpl1
	     @ (ParCore.HappyAbsSyn
		(PrelBase.ZMZN PrelBase.Char)
		PrelBase.Z0T
		PrelBase.Z0T
		PrelBase.Z0T
		PrelBase.Z0T)
	     @ (PrelBase.ZMZN AbsCore.Ty)
	     (ParCore.happyNewToken
	      @ (ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T))
	      @ (ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T))
	      actionzu261
	      (ParCore.notHappyAtAll
	       @ (PrelBase.ZMZN
		  (ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)
		    ->
		    PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)))))
	      (ParCore.notHappyAtAll
	       @ (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T)))
	      tks)
	     (\ (x::ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T) ->
		  %case x
		  %of (wild::ParCore.HappyAbsSyn
			     (PrelBase.ZMZN PrelBase.Char)
			     PrelBase.Z0T
			     PrelBase.Z0T
			     PrelBase.Z0T
			     PrelBase.Z0T)
		    {%_ ->
		       ParCore.notHappyAtAll @ (ErrM.Err (PrelBase.ZMZN AbsCore.Ty));
		     ParCore.ZdwHappyAbsSyn65 (zz::PrelBase.ZMZN AbsCore.Ty) ->
		       tpl3 @ (PrelBase.ZMZN AbsCore.Ty) zz})};
  ParCore.pQualIdent :: PrelBase.ZMZN LexCore.Token ->
			ErrM.Err AbsCore.QualIdent =
    \ (tks::PrelBase.ZMZN LexCore.Token) ->
	%case ErrM.zdfMonadErr %of (tpl::PrelBase.ZCTMonad ErrM.Err)
	  {PrelBase.ZdwZCDMonad
	   (tpl1::%forall a b . ErrM.Err a -> (a -> ErrM.Err b) -> ErrM.Err b)
	   (tpl2::%forall a b . ErrM.Err a -> ErrM.Err b -> ErrM.Err b)
	   (tpl3::%forall a . a -> ErrM.Err a)
	   (tpl4::%forall a . PrelBase.ZMZN PrelBase.Char -> ErrM.Err a) ->
	     tpl1
	     @ (ParCore.HappyAbsSyn
		(PrelBase.ZMZN PrelBase.Char)
		PrelBase.Z0T
		PrelBase.Z0T
		PrelBase.Z0T
		PrelBase.Z0T)
	     @ AbsCore.QualIdent
	     (ParCore.happyNewToken
	      @ (ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T))
	      @ (ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T))
	      actionzu301
	      (ParCore.notHappyAtAll
	       @ (PrelBase.ZMZN
		  (ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)
		    ->
		    PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)))))
	      (ParCore.notHappyAtAll
	       @ (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T)))
	      tks)
	     (\ (x::ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T) ->
		  %case x
		  %of (wild::ParCore.HappyAbsSyn
			     (PrelBase.ZMZN PrelBase.Char)
			     PrelBase.Z0T
			     PrelBase.Z0T
			     PrelBase.Z0T
			     PrelBase.Z0T)
		    {%_ ->
		       ParCore.notHappyAtAll @ (ErrM.Err AbsCore.QualIdent);
		     ParCore.ZdwHappyAbsSyn69 (zz::AbsCore.QualIdent) ->
		       tpl3 @ AbsCore.QualIdent zz})};
  ParCore.pTy :: PrelBase.ZMZN LexCore.Token -> ErrM.Err AbsCore.Ty =
    \ (tks::PrelBase.ZMZN LexCore.Token) ->
	%case ErrM.zdfMonadErr %of (tpl::PrelBase.ZCTMonad ErrM.Err)
	  {PrelBase.ZdwZCDMonad
	   (tpl1::%forall a b . ErrM.Err a -> (a -> ErrM.Err b) -> ErrM.Err b)
	   (tpl2::%forall a b . ErrM.Err a -> ErrM.Err b -> ErrM.Err b)
	   (tpl3::%forall a . a -> ErrM.Err a)
	   (tpl4::%forall a . PrelBase.ZMZN PrelBase.Char -> ErrM.Err a) ->
	     tpl1
	     @ (ParCore.HappyAbsSyn
		(PrelBase.ZMZN PrelBase.Char)
		PrelBase.Z0T
		PrelBase.Z0T
		PrelBase.Z0T
		PrelBase.Z0T)
	     @ AbsCore.Ty
	     (ParCore.happyNewToken
	      @ (ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T))
	      @ (ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T))
	      actionzu251
	      (ParCore.notHappyAtAll
	       @ (PrelBase.ZMZN
		  (ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)
		    ->
		    PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)))))
	      (ParCore.notHappyAtAll
	       @ (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T)))
	      tks)
	     (\ (x::ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T) ->
		  %case x
		  %of (wild::ParCore.HappyAbsSyn
			     (PrelBase.ZMZN PrelBase.Char)
			     PrelBase.Z0T
			     PrelBase.Z0T
			     PrelBase.Z0T
			     PrelBase.Z0T)
		    {%_ ->
		       ParCore.notHappyAtAll @ (ErrM.Err AbsCore.Ty);
		     ParCore.ZdwHappyAbsSyn62 (zz::AbsCore.Ty) ->
		       tpl3 @ AbsCore.Ty zz})};
  ParCore.pTy1 :: PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err AbsCore.Ty =
    \ (tks::PrelBase.ZMZN LexCore.Token) ->
	%case ErrM.zdfMonadErr %of (tpl::PrelBase.ZCTMonad ErrM.Err)
	  {PrelBase.ZdwZCDMonad
	   (tpl1::%forall a b . ErrM.Err a -> (a -> ErrM.Err b) -> ErrM.Err b)
	   (tpl2::%forall a b . ErrM.Err a -> ErrM.Err b -> ErrM.Err b)
	   (tpl3::%forall a . a -> ErrM.Err a)
	   (tpl4::%forall a . PrelBase.ZMZN PrelBase.Char -> ErrM.Err a) ->
	     tpl1
	     @ (ParCore.HappyAbsSyn
		(PrelBase.ZMZN PrelBase.Char)
		PrelBase.Z0T
		PrelBase.Z0T
		PrelBase.Z0T
		PrelBase.Z0T)
	     @ AbsCore.Ty
	     (ParCore.happyNewToken
	      @ (ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T))
	      @ (ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T))
	      actionzu241
	      (ParCore.notHappyAtAll
	       @ (PrelBase.ZMZN
		  (ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)
		    ->
		    PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)))))
	      (ParCore.notHappyAtAll
	       @ (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T)))
	      tks)
	     (\ (x::ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T) ->
		  %case x
		  %of (wild::ParCore.HappyAbsSyn
			     (PrelBase.ZMZN PrelBase.Char)
			     PrelBase.Z0T
			     PrelBase.Z0T
			     PrelBase.Z0T
			     PrelBase.Z0T)
		    {%_ ->
		       ParCore.notHappyAtAll @ (ErrM.Err AbsCore.Ty);
		     ParCore.ZdwHappyAbsSyn62 (zz::AbsCore.Ty) ->
		       tpl3 @ AbsCore.Ty zz})};
  ParCore.pTy2 :: PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err AbsCore.Ty =
    \ (tks::PrelBase.ZMZN LexCore.Token) ->
	%case ErrM.zdfMonadErr %of (tpl::PrelBase.ZCTMonad ErrM.Err)
	  {PrelBase.ZdwZCDMonad
	   (tpl1::%forall a b . ErrM.Err a -> (a -> ErrM.Err b) -> ErrM.Err b)
	   (tpl2::%forall a b . ErrM.Err a -> ErrM.Err b -> ErrM.Err b)
	   (tpl3::%forall a . a -> ErrM.Err a)
	   (tpl4::%forall a . PrelBase.ZMZN PrelBase.Char -> ErrM.Err a) ->
	     tpl1
	     @ (ParCore.HappyAbsSyn
		(PrelBase.ZMZN PrelBase.Char)
		PrelBase.Z0T
		PrelBase.Z0T
		PrelBase.Z0T
		PrelBase.Z0T)
	     @ AbsCore.Ty
	     (ParCore.happyNewToken
	      @ (ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T))
	      @ (ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T))
	      actionzu231
	      (ParCore.notHappyAtAll
	       @ (PrelBase.ZMZN
		  (ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)
		    ->
		    PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)))))
	      (ParCore.notHappyAtAll
	       @ (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T)))
	      tks)
	     (\ (x::ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T) ->
		  %case x
		  %of (wild::ParCore.HappyAbsSyn
			     (PrelBase.ZMZN PrelBase.Char)
			     PrelBase.Z0T
			     PrelBase.Z0T
			     PrelBase.Z0T
			     PrelBase.Z0T)
		    {%_ ->
		       ParCore.notHappyAtAll @ (ErrM.Err AbsCore.Ty);
		     ParCore.ZdwHappyAbsSyn62 (zz::AbsCore.Ty) ->
		       tpl3 @ AbsCore.Ty zz})};
  ParCore.pTbind :: PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err AbsCore.Tbind =
    \ (tks::PrelBase.ZMZN LexCore.Token) ->
	%case ErrM.zdfMonadErr %of (tpl::PrelBase.ZCTMonad ErrM.Err)
	  {PrelBase.ZdwZCDMonad
	   (tpl1::%forall a b . ErrM.Err a -> (a -> ErrM.Err b) -> ErrM.Err b)
	   (tpl2::%forall a b . ErrM.Err a -> ErrM.Err b -> ErrM.Err b)
	   (tpl3::%forall a . a -> ErrM.Err a)
	   (tpl4::%forall a . PrelBase.ZMZN PrelBase.Char -> ErrM.Err a) ->
	     tpl1
	     @ (ParCore.HappyAbsSyn
		(PrelBase.ZMZN PrelBase.Char)
		PrelBase.Z0T
		PrelBase.Z0T
		PrelBase.Z0T
		PrelBase.Z0T)
	     @ AbsCore.Tbind
	     (ParCore.happyNewToken
	      @ (ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T))
	      @ (ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T))
	      actionzu1911
	      (ParCore.notHappyAtAll
	       @ (PrelBase.ZMZN
		  (ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)
		    ->
		    PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)))))
	      (ParCore.notHappyAtAll
	       @ (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T)))
	      tks)
	     (\ (x::ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T) ->
		  %case x
		  %of (wild::ParCore.HappyAbsSyn
			     (PrelBase.ZMZN PrelBase.Char)
			     PrelBase.Z0T
			     PrelBase.Z0T
			     PrelBase.Z0T
			     PrelBase.Z0T)
		    {%_ ->
		       ParCore.notHappyAtAll @ (ErrM.Err AbsCore.Tbind);
		     ParCore.ZdwHappyAbsSyn58 (zz::AbsCore.Tbind) ->
		       tpl3 @ AbsCore.Tbind zz})};
  ParCore.pListAlt :: PrelBase.ZMZN LexCore.Token ->
		      ErrM.Err (PrelBase.ZMZN AbsCore.Alt) =
    \ (tks::PrelBase.ZMZN LexCore.Token) ->
	%case ErrM.zdfMonadErr %of (tpl::PrelBase.ZCTMonad ErrM.Err)
	  {PrelBase.ZdwZCDMonad
	   (tpl1::%forall a b . ErrM.Err a -> (a -> ErrM.Err b) -> ErrM.Err b)
	   (tpl2::%forall a b . ErrM.Err a -> ErrM.Err b -> ErrM.Err b)
	   (tpl3::%forall a . a -> ErrM.Err a)
	   (tpl4::%forall a . PrelBase.ZMZN PrelBase.Char -> ErrM.Err a) ->
	     tpl1
	     @ (ParCore.HappyAbsSyn
		(PrelBase.ZMZN PrelBase.Char)
		(PrelBase.ZMZN PrelBase.Char)
		PrelNum.Integer
		PrelFloat.Double
		PrelBase.Char)
	     @ (PrelBase.ZMZN AbsCore.Alt)
	     (ParCore.happyNewToken
	      @ (ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char))
	      @ (ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char))
	      actionzu1611
	      (ParCore.notHappyAtAll
	       @ (PrelBase.ZMZN
		  (ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelNum.Integer
		     PrelFloat.Double
		     PrelBase.Char)
		    ->
		    PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelNum.Integer
		     PrelFloat.Double
		     PrelBase.Char)))))
	      (ParCore.notHappyAtAll
	       @ (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char)))
	      tks)
	     (\ (x::ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char) ->
		  %case x
		  %of (wild::ParCore.HappyAbsSyn
			     (PrelBase.ZMZN PrelBase.Char)
			     (PrelBase.ZMZN PrelBase.Char)
			     PrelNum.Integer
			     PrelFloat.Double
			     PrelBase.Char)
		    {%_ ->
		       ParCore.notHappyAtAll @ (ErrM.Err (PrelBase.ZMZN AbsCore.Alt));
		     ParCore.ZdwHappyAbsSyn55 (zz::PrelBase.ZMZN AbsCore.Alt) ->
		       tpl3 @ (PrelBase.ZMZN AbsCore.Alt) zz})};
  ParCore.pAlt :: PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err AbsCore.Alt =
    \ (tks::PrelBase.ZMZN LexCore.Token) ->
	%case ErrM.zdfMonadErr %of (tpl::PrelBase.ZCTMonad ErrM.Err)
	  {PrelBase.ZdwZCDMonad
	   (tpl1::%forall a b . ErrM.Err a -> (a -> ErrM.Err b) -> ErrM.Err b)
	   (tpl2::%forall a b . ErrM.Err a -> ErrM.Err b -> ErrM.Err b)
	   (tpl3::%forall a . a -> ErrM.Err a)
	   (tpl4::%forall a . PrelBase.ZMZN PrelBase.Char -> ErrM.Err a) ->
	     tpl1
	     @ (ParCore.HappyAbsSyn
		(PrelBase.ZMZN PrelBase.Char)
		(PrelBase.ZMZN PrelBase.Char)
		PrelNum.Integer
		PrelFloat.Double
		PrelBase.Char)
	     @ AbsCore.Alt
	     (ParCore.happyNewToken
	      @ (ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char))
	      @ (ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char))
	      actionzu1511
	      (ParCore.notHappyAtAll
	       @ (PrelBase.ZMZN
		  (ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelNum.Integer
		     PrelFloat.Double
		     PrelBase.Char)
		    ->
		    PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelNum.Integer
		     PrelFloat.Double
		     PrelBase.Char)))))
	      (ParCore.notHappyAtAll
	       @ (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char)))
	      tks)
	     (\ (x::ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char) ->
		  %case x
		  %of (wild::ParCore.HappyAbsSyn
			     (PrelBase.ZMZN PrelBase.Char)
			     (PrelBase.ZMZN PrelBase.Char)
			     PrelNum.Integer
			     PrelFloat.Double
			     PrelBase.Char)
		    {%_ ->
		       ParCore.notHappyAtAll @ (ErrM.Err AbsCore.Alt);
		     ParCore.ZdwHappyAbsSyn54 (zz::AbsCore.Alt) ->
		       tpl3 @ AbsCore.Alt zz})};
  ParCore.pExp :: PrelBase.ZMZN LexCore.Token ->
		  ErrM.Err AbsCore.Exp =
    \ (tks::PrelBase.ZMZN LexCore.Token) ->
	%case ErrM.zdfMonadErr %of (tpl::PrelBase.ZCTMonad ErrM.Err)
	  {PrelBase.ZdwZCDMonad
	   (tpl1::%forall a b . ErrM.Err a -> (a -> ErrM.Err b) -> ErrM.Err b)
	   (tpl2::%forall a b . ErrM.Err a -> ErrM.Err b -> ErrM.Err b)
	   (tpl3::%forall a . a -> ErrM.Err a)
	   (tpl4::%forall a . PrelBase.ZMZN PrelBase.Char -> ErrM.Err a) ->
	     tpl1
	     @ (ParCore.HappyAbsSyn
		(PrelBase.ZMZN PrelBase.Char)
		(PrelBase.ZMZN PrelBase.Char)
		PrelNum.Integer
		PrelFloat.Double
		PrelBase.Char)
	     @ AbsCore.Exp
	     (ParCore.happyNewToken
	      @ (ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char))
	      @ (ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char))
	      actionzu1212
	      (ParCore.notHappyAtAll
	       @ (PrelBase.ZMZN
		  (ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelNum.Integer
		     PrelFloat.Double
		     PrelBase.Char)
		    ->
		    PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelNum.Integer
		     PrelFloat.Double
		     PrelBase.Char)))))
	      (ParCore.notHappyAtAll
	       @ (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char)))
	      tks)
	     (\ (x::ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char) ->
		  %case x
		  %of (wild::ParCore.HappyAbsSyn
			     (PrelBase.ZMZN PrelBase.Char)
			     (PrelBase.ZMZN PrelBase.Char)
			     PrelNum.Integer
			     PrelFloat.Double
			     PrelBase.Char)
		    {%_ ->
		       ParCore.notHappyAtAll @ (ErrM.Err AbsCore.Exp);
		     ParCore.ZdwHappyAbsSyn49 (zz::AbsCore.Exp) ->
		       tpl3 @ AbsCore.Exp zz})};
  ParCore.pExp1 :: PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err AbsCore.Exp =
    \ (tks::PrelBase.ZMZN LexCore.Token) ->
	%case ErrM.zdfMonadErr %of (tpl::PrelBase.ZCTMonad ErrM.Err)
	  {PrelBase.ZdwZCDMonad
	   (tpl1::%forall a b . ErrM.Err a -> (a -> ErrM.Err b) -> ErrM.Err b)
	   (tpl2::%forall a b . ErrM.Err a -> ErrM.Err b -> ErrM.Err b)
	   (tpl3::%forall a . a -> ErrM.Err a)
	   (tpl4::%forall a . PrelBase.ZMZN PrelBase.Char -> ErrM.Err a) ->
	     tpl1
	     @ (ParCore.HappyAbsSyn
		(PrelBase.ZMZN PrelBase.Char)
		(PrelBase.ZMZN PrelBase.Char)
		PrelNum.Integer
		PrelFloat.Double
		PrelBase.Char)
	     @ AbsCore.Exp
	     (ParCore.happyNewToken
	      @ (ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char))
	      @ (ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char))
	      actionzu1121
	      (ParCore.notHappyAtAll
	       @ (PrelBase.ZMZN
		  (ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelNum.Integer
		     PrelFloat.Double
		     PrelBase.Char)
		    ->
		    PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelNum.Integer
		     PrelFloat.Double
		     PrelBase.Char)))))
	      (ParCore.notHappyAtAll
	       @ (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char)))
	      tks)
	     (\ (x::ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char) ->
		  %case x
		  %of (wild::ParCore.HappyAbsSyn
			     (PrelBase.ZMZN PrelBase.Char)
			     (PrelBase.ZMZN PrelBase.Char)
			     PrelNum.Integer
			     PrelFloat.Double
			     PrelBase.Char)
		    {%_ ->
		       ParCore.notHappyAtAll @ (ErrM.Err AbsCore.Exp);
		     ParCore.ZdwHappyAbsSyn49 (zz::AbsCore.Exp) ->
		       tpl3 @ AbsCore.Exp zz})};
  ParCore.pExp2 :: PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err AbsCore.Exp =
    \ (tks::PrelBase.ZMZN LexCore.Token) ->
	%case ErrM.zdfMonadErr %of (tpl::PrelBase.ZCTMonad ErrM.Err)
	  {PrelBase.ZdwZCDMonad
	   (tpl1::%forall a b . ErrM.Err a -> (a -> ErrM.Err b) -> ErrM.Err b)
	   (tpl2::%forall a b . ErrM.Err a -> ErrM.Err b -> ErrM.Err b)
	   (tpl3::%forall a . a -> ErrM.Err a)
	   (tpl4::%forall a . PrelBase.ZMZN PrelBase.Char -> ErrM.Err a) ->
	     tpl1
	     @ (ParCore.HappyAbsSyn
		(PrelBase.ZMZN PrelBase.Char)
		(PrelBase.ZMZN PrelBase.Char)
		PrelNum.Integer
		PrelFloat.Double
		PrelBase.Char)
	     @ AbsCore.Exp
	     (ParCore.happyNewToken
	      @ (ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char))
	      @ (ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char))
	      actionzu1012
	      (ParCore.notHappyAtAll
	       @ (PrelBase.ZMZN
		  (ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelNum.Integer
		     PrelFloat.Double
		     PrelBase.Char)
		    ->
		    PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelNum.Integer
		     PrelFloat.Double
		     PrelBase.Char)))))
	      (ParCore.notHappyAtAll
	       @ (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char)))
	      tks)
	     (\ (x::ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char) ->
		  %case x
		  %of (wild::ParCore.HappyAbsSyn
			     (PrelBase.ZMZN PrelBase.Char)
			     (PrelBase.ZMZN PrelBase.Char)
			     PrelNum.Integer
			     PrelFloat.Double
			     PrelBase.Char)
		    {%_ ->
		       ParCore.notHappyAtAll @ (ErrM.Err AbsCore.Exp);
		     ParCore.ZdwHappyAbsSyn49 (zz::AbsCore.Exp) ->
		       tpl3 @ AbsCore.Exp zz})};
  ParCore.pListVdef :: PrelBase.ZMZN LexCore.Token ->
		       ErrM.Err (PrelBase.ZMZN AbsCore.Vdef) =
    \ (tks::PrelBase.ZMZN LexCore.Token) ->
	%case ErrM.zdfMonadErr %of (tpl::PrelBase.ZCTMonad ErrM.Err)
	  {PrelBase.ZdwZCDMonad
	   (tpl1::%forall a b . ErrM.Err a -> (a -> ErrM.Err b) -> ErrM.Err b)
	   (tpl2::%forall a b . ErrM.Err a -> ErrM.Err b -> ErrM.Err b)
	   (tpl3::%forall a . a -> ErrM.Err a)
	   (tpl4::%forall a . PrelBase.ZMZN PrelBase.Char -> ErrM.Err a) ->
	     tpl1
	     @ (ParCore.HappyAbsSyn
		(PrelBase.ZMZN PrelBase.Char)
		(PrelBase.ZMZN PrelBase.Char)
		PrelNum.Integer
		PrelFloat.Double
		PrelBase.Char)
	     @ (PrelBase.ZMZN AbsCore.Vdef)
	     (ParCore.happyNewToken
	      @ (ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char))
	      @ (ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char))
	      actionzu912
	      (ParCore.notHappyAtAll
	       @ (PrelBase.ZMZN
		  (ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelNum.Integer
		     PrelFloat.Double
		     PrelBase.Char)
		    ->
		    PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelNum.Integer
		     PrelFloat.Double
		     PrelBase.Char)))))
	      (ParCore.notHappyAtAll
	       @ (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char)))
	      tks)
	     (\ (x::ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char) ->
		  %case x
		  %of (wild::ParCore.HappyAbsSyn
			     (PrelBase.ZMZN PrelBase.Char)
			     (PrelBase.ZMZN PrelBase.Char)
			     PrelNum.Integer
			     PrelFloat.Double
			     PrelBase.Char)
		    {%_ ->
		       ParCore.notHappyAtAll @ (ErrM.Err (PrelBase.ZMZN AbsCore.Vdef));
		     ParCore.ZdwHappyAbsSyn48 (zz::PrelBase.ZMZN AbsCore.Vdef) ->
		       tpl3 @ (PrelBase.ZMZN AbsCore.Vdef) zz})};
  ParCore.pVdef :: PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err AbsCore.Vdef =
    \ (tks::PrelBase.ZMZN LexCore.Token) ->
	%case ErrM.zdfMonadErr %of (tpl::PrelBase.ZCTMonad ErrM.Err)
	  {PrelBase.ZdwZCDMonad
	   (tpl1::%forall a b . ErrM.Err a -> (a -> ErrM.Err b) -> ErrM.Err b)
	   (tpl2::%forall a b . ErrM.Err a -> ErrM.Err b -> ErrM.Err b)
	   (tpl3::%forall a . a -> ErrM.Err a)
	   (tpl4::%forall a . PrelBase.ZMZN PrelBase.Char -> ErrM.Err a) ->
	     tpl1
	     @ (ParCore.HappyAbsSyn
		(PrelBase.ZMZN PrelBase.Char)
		(PrelBase.ZMZN PrelBase.Char)
		PrelNum.Integer
		PrelFloat.Double
		PrelBase.Char)
	     @ AbsCore.Vdef
	     (ParCore.happyNewToken
	      @ (ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char))
	      @ (ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char))
	      actionzu812
	      (ParCore.notHappyAtAll
	       @ (PrelBase.ZMZN
		  (ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelNum.Integer
		     PrelFloat.Double
		     PrelBase.Char)
		    ->
		    PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelNum.Integer
		     PrelFloat.Double
		     PrelBase.Char)))))
	      (ParCore.notHappyAtAll
	       @ (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char)))
	      tks)
	     (\ (x::ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char) ->
		  %case x
		  %of (wild::ParCore.HappyAbsSyn
			     (PrelBase.ZMZN PrelBase.Char)
			     (PrelBase.ZMZN PrelBase.Char)
			     PrelNum.Integer
			     PrelFloat.Double
			     PrelBase.Char)
		    {%_ ->
		       ParCore.notHappyAtAll @ (ErrM.Err AbsCore.Vdef);
		     ParCore.ZdwHappyAbsSyn47 (zz::AbsCore.Vdef) ->
		       tpl3 @ AbsCore.Vdef zz})};
  ParCore.pVdefg :: PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err AbsCore.Vdefg =
    \ (tks::PrelBase.ZMZN LexCore.Token) ->
	%case ErrM.zdfMonadErr %of (tpl::PrelBase.ZCTMonad ErrM.Err)
	  {PrelBase.ZdwZCDMonad
	   (tpl1::%forall a b . ErrM.Err a -> (a -> ErrM.Err b) -> ErrM.Err b)
	   (tpl2::%forall a b . ErrM.Err a -> ErrM.Err b -> ErrM.Err b)
	   (tpl3::%forall a . a -> ErrM.Err a)
	   (tpl4::%forall a . PrelBase.ZMZN PrelBase.Char -> ErrM.Err a) ->
	     tpl1
	     @ (ParCore.HappyAbsSyn
		(PrelBase.ZMZN PrelBase.Char)
		(PrelBase.ZMZN PrelBase.Char)
		PrelNum.Integer
		PrelFloat.Double
		PrelBase.Char)
	     @ AbsCore.Vdefg
	     (ParCore.happyNewToken
	      @ (ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char))
	      @ (ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelNum.Integer
		  PrelFloat.Double
		  PrelBase.Char))
	      actionzu611
	      (ParCore.notHappyAtAll
	       @ (PrelBase.ZMZN
		  (ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelNum.Integer
		     PrelFloat.Double
		     PrelBase.Char)
		    ->
		    PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelNum.Integer
		     PrelFloat.Double
		     PrelBase.Char)))))
	      (ParCore.notHappyAtAll
	       @ (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelNum.Integer
		   PrelFloat.Double
		   PrelBase.Char)))
	      tks)
	     (\ (x::ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelNum.Integer
		    PrelFloat.Double
		    PrelBase.Char) ->
		  %case x
		  %of (wild::ParCore.HappyAbsSyn
			     (PrelBase.ZMZN PrelBase.Char)
			     (PrelBase.ZMZN PrelBase.Char)
			     PrelNum.Integer
			     PrelFloat.Double
			     PrelBase.Char)
		    {%_ ->
		       ParCore.notHappyAtAll @ (ErrM.Err AbsCore.Vdefg);
		     ParCore.ZdwHappyAbsSyn45 (zz::AbsCore.Vdefg) ->
		       tpl3 @ AbsCore.Vdefg zz})};
  ParCore.pListCdef :: PrelBase.ZMZN LexCore.Token ->
		       ErrM.Err (PrelBase.ZMZN AbsCore.Cdef) =
    \ (tks::PrelBase.ZMZN LexCore.Token) ->
	%case ErrM.zdfMonadErr %of (tpl::PrelBase.ZCTMonad ErrM.Err)
	  {PrelBase.ZdwZCDMonad
	   (tpl1::%forall a b . ErrM.Err a -> (a -> ErrM.Err b) -> ErrM.Err b)
	   (tpl2::%forall a b . ErrM.Err a -> ErrM.Err b -> ErrM.Err b)
	   (tpl3::%forall a . a -> ErrM.Err a)
	   (tpl4::%forall a . PrelBase.ZMZN PrelBase.Char -> ErrM.Err a) ->
	     tpl1
	     @ (ParCore.HappyAbsSyn
		(PrelBase.ZMZN PrelBase.Char)
		PrelBase.Z0T
		PrelBase.Z0T
		PrelBase.Z0T
		PrelBase.Z0T)
	     @ (PrelBase.ZMZN AbsCore.Cdef)
	     (ParCore.happyNewToken
	      @ (ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T))
	      @ (ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T))
	      actionzu512
	      (ParCore.notHappyAtAll
	       @ (PrelBase.ZMZN
		  (ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)
		    ->
		    PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)))))
	      (ParCore.notHappyAtAll
	       @ (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T)))
	      tks)
	     (\ (x::ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T) ->
		  %case x
		  %of (wild::ParCore.HappyAbsSyn
			     (PrelBase.ZMZN PrelBase.Char)
			     PrelBase.Z0T
			     PrelBase.Z0T
			     PrelBase.Z0T
			     PrelBase.Z0T)
		    {%_ ->
		       ParCore.notHappyAtAll @ (ErrM.Err (PrelBase.ZMZN AbsCore.Cdef));
		     ParCore.ZdwHappyAbsSyn44 (zz::PrelBase.ZMZN AbsCore.Cdef) ->
		       tpl3 @ (PrelBase.ZMZN AbsCore.Cdef) zz})};
  ParCore.pCdef :: PrelBase.ZMZN LexCore.Token ->
		   ErrM.Err AbsCore.Cdef =
    \ (tks::PrelBase.ZMZN LexCore.Token) ->
	%case ErrM.zdfMonadErr %of (tpl::PrelBase.ZCTMonad ErrM.Err)
	  {PrelBase.ZdwZCDMonad
	   (tpl1::%forall a b . ErrM.Err a -> (a -> ErrM.Err b) -> ErrM.Err b)
	   (tpl2::%forall a b . ErrM.Err a -> ErrM.Err b -> ErrM.Err b)
	   (tpl3::%forall a . a -> ErrM.Err a)
	   (tpl4::%forall a . PrelBase.ZMZN PrelBase.Char -> ErrM.Err a) ->
	     tpl1
	     @ (ParCore.HappyAbsSyn
		(PrelBase.ZMZN PrelBase.Char)
		PrelBase.Z0T
		PrelBase.Z0T
		PrelBase.Z0T
		PrelBase.Z0T)
	     @ AbsCore.Cdef
	     (ParCore.happyNewToken
	      @ (ParCore.HappyStk
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T))
	      @ (ErrM.Err
		 (ParCore.HappyAbsSyn
		  (PrelBase.ZMZN PrelBase.Char)
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T
		  PrelBase.Z0T))
	      actionzu411
	      (ParCore.notHappyAtAll
	       @ (PrelBase.ZMZN
		  (ParCore.HappyState
		   LexCore.Token
		   (ParCore.HappyStk
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)
		    ->
		    PrelBase.ZMZN LexCore.Token ->
		    ErrM.Err
		    (ParCore.HappyAbsSyn
		     (PrelBase.ZMZN PrelBase.Char)
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T
		     PrelBase.Z0T)))))
	      (ParCore.notHappyAtAll
	       @ (ParCore.HappyStk
		  (ParCore.HappyAbsSyn
		   (PrelBase.ZMZN PrelBase.Char)
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T
		   PrelBase.Z0T)))
	      tks)
	     (\ (x::ParCore.HappyAbsSyn
		    (PrelBase.ZMZN PrelBase.Char)
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T
		    PrelBase.Z0T) ->
		  %case x
		  %of (wild::ParCore.HappyAbsSyn
			     (PrelBase.ZMZN PrelBase.Char)
			     PrelBase.Z0T
			     PrelBase.Z0T
			     PrelBase.Z0T
			     PrelBase.Z0T)
		    {%_ ->
		       ParCore.notHappyAtAll @ (ErrM.Err AbsCore.Cdef);
		     ParCore.ZdwHappyAbsSyn43 (zz::AbsCore.Cdef) ->
		       tpl3 @ AbsCore.Cdef zz})};